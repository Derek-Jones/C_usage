
0

.TABLE progmeasure
Name, Application Domain, Version
gcc, C compiler, 2.95
idsoftware, Games programs&comma; e.g.&comma; Doom, 
linux, Operating system, 2.4.20
mozilla, Web browser, 1.0
openafs, File system, 1.2.2a
openMotif, Window manager, 2.2.2
postgresql, Database system, 6.5.3
<caption>
Programs whose source code (i.e., the <file>.c</file> and
<file>.h</file> files) was used as the input to tools (operating on
either the visible or translated forms) whose measurements was used
to generate this books usage figures and tables.
</caption>
.E_TABLE

.TABLE
Files, Reason for Exclusion
gcc-2.95/libio/tests/tfformat.c, a list of approximately 4&comma;000 floating constants
gcc-2.95/libio/tests/tiformat.c, a list of approximately 5&comma;000 hexadecimal constants
<caption>
Source files excluded from the Usage measurements.
</caption>
.E_TABLE

.TABLE
Symbol, Meaning, Symbol, Meaning

<keyword>++v</keyword>, prefix <keyword>++</keyword>, <keyword>--v</keyword>, prefix <keyword>--</keyword>
<keyword>v++</keyword>, postfix <keyword>++</keyword>, <keyword>v--</keyword>, postfix <keyword>--</keyword>
<keyword>-v</keyword>, unary minus, <keyword>+v</keyword>, unary plus
<keyword>*v</keyword>, indirection operator, <keyword>*p</keyword>, star in pointer declaration
<keyword>&v</keyword>, address-of, , 
<keyword>:b</keyword>, colon in bitfield declaration, <keyword>?:</keyword>, colon in ternary operator
<caption>
Character sequences used to denote those operators and punctuators
that perform more than one role in the syntax.
</caption>
.E_TABLE

107

.FIG
linton
<caption>
Number of programs built from a given number of translation units.
Adapted from Linton <book Linton_89>.
</caption>
.E_FIG


116

.TABLE char_cnt
: l r r
 , <file>.c</file> files, <file>.h</file> files
total characters, &zs;192165594&ze;, &zs;64429463&ze;
total new-lines, &zs;6976266&ze;, &zs;1811790&ze;
noncomment characters, &zs;144568262&ze;, &zs;43485916&ze;
noncomment new-lines, &zs;6113075&ze;, &zs;1491192&ze;
<caption>
Total number of characters and new-lines in the visible form of the
<file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE


117

The visible form of the <file>.c</file> files contain 8 trigraphs
(<file>.h</file> 0).


118

In the visible form of the <file>.c</file> files 0.21%
(<file>.h</file> 4.7%) of all physical lines are spliced.  Of these
line splices 33% (<file>.h</file> 7.8%) did not occur within
preprocessing directives (mostly in string literals).

.FIG
splice
<caption>
Number of physical lines spliced together to form one logical line
and the number of logical lines, of a given length, after splicing,
based on the visible form of the <file>.c</file> and <file>.h</file>
files.
</caption>
.E_FIG


219

.TABLE char_freq
: 0.8cm r 1.0cm 0.8cm r 1.0cm 0.8cm r 1.0cm 0.8cm r 1.0cm
Letter or ASCII Value, All, Non-comment, Letter or ASCII Value, All, Non-comment, Letter or ASCII Value, All, Non-comment, Letter or ASCII Value, All, Non-comment
 <b>0</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>sp</b>, &z3p;15.083&ze;, &z3p;13.927&ze;, <b>@</b>, &z3p;0.009&ze;, &z3p;0.002&ze;, <b>`</b>, &z3p;0.004&ze;, &z3p;0.002&ze;
 <b>1</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>!</b>, &z3p;0.102&ze;, &z3p;0.127&ze;, <b>A</b>, &z3p;0.592&ze;, &z3p;0.642&ze;, <b>a</b>, &z3p;3.132&ze;, &z3p;2.830&ze;
 <b>2</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>"</b>, &z3p;0.376&ze;, &z3p;0.471&ze;, <b>B</b>, &z3p;0.258&ze;, &z3p;0.287&ze;, <b>b</b>, &z3p;0.846&ze;, &z3p;0.812&ze;
 <b>3</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>#</b>, &z3p;0.175&ze;, &z3p;0.219&ze;, <b>C</b>, &z3p;0.607&ze;, &z3p;0.663&ze;, <b>c</b>, &z3p;2.168&ze;, &z3p;2.178&ze;
 <b>4</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>$</b>, &z3p;0.005&ze;, &z3p;0.003&ze;, <b>D</b>, &z3p;0.461&ze;, &z3p;0.523&ze;, <b>d</b>, &z3p;2.184&ze;, &z3p;2.176&ze;
 <b>5</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>%</b>, &z3p;0.105&ze;, &z3p;0.135&ze;, <b>E</b>, &z3p;0.869&ze;, &z3p;1.012&ze;, <b>e</b>, &z3p;5.642&ze;, &z3p;4.981&ze;
 <b>6</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>&</b>, &z3p;0.237&ze;, &z3p;0.311&ze;, <b>F</b>, &z3p;0.333&ze;, &z3p;0.355&ze;, <b>f</b>, &z3p;1.666&ze;, &z3p;1.725&ze;
 <b>7</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>'</b>, &z3p;0.101&ze;, &z3p;0.080&ze;, <b>G</b>, &z3p;0.243&ze;, &z3p;0.263&ze;, <b>g</b>, &z3p;0.923&ze;, &z3p;0.906&ze;
 <b>8</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>(</b>, &z3p;1.372&ze;, &z3p;1.751&ze;, <b>H</b>, &z3p;0.146&ze;, &z3p;0.155&ze;, <b>h</b>, &z3p;1.145&ze;, &z3p;0.777&ze;
 <b>\t</b>, &z3p;3.350&ze;, &z3p;4.116&ze;, <b>)</b>, &z3p;1.373&ze;, &z3p;1.751&ze;, <b>I</b>, &z3p;0.619&ze;, &z3p;0.643&ze;, <b>i</b>, &z3p;3.639&ze;, &z3p;3.469&ze;
 <b>\n</b>, &z3p;3.630&ze;, &z3p;4.229&ze;, <b>*</b>, &z3p;1.769&ze;, &z3p;0.769&ze;, <b>J</b>, &z3p;0.024&ze;, &z3p;0.026&ze;, <b>j</b>, &z3p;0.074&ze;, &z3p;0.077&ze;
 <b>11</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>+</b>, &z3p;0.182&ze;, &z3p;0.233&ze;, <b>K</b>, &z3p;0.098&ze;, &z3p;0.116&ze;, <b>k</b>, &z3p;0.464&ze;, &z3p;0.481&ze;
 <b>12</b>, &z3p;0.003&ze;, &z3p;0.004&ze;, <b>,</b>, &z3p;1.565&ze;, &z3p;1.914&ze;, <b>L</b>, &z3p;0.528&ze;, &z3p;0.609&ze;, <b>l</b>, &z3p;2.033&ze;, &z3p;1.915&ze;
 <b>\r</b>, &z3p;0.001&ze;, &z3p;0.001&ze;, <b>-</b>, &z3p;1.176&ze;, &z3p;0.831&ze;, <b>M</b>, &z3p;0.333&ze;, &z3p;0.366&ze;, <b>m</b>, &z3p;1.245&ze;, &z3p;1.229&ze;
 <b>14</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>.</b>, &z3p;0.512&ze;, &z3p;0.387&ze;, <b>N</b>, &z3p;0.557&ze;, &z3p;0.610&ze;, <b>n</b>, &z3p;3.225&ze;, &z3p;2.989&ze;
 <b>15</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>/</b>, &z3p;0.718&ze;, &z3p;0.519&ze;, <b>O</b>, &z3p;0.467&ze;, &z3p;0.517&ze;, <b>o</b>, &z3p;2.784&ze;, &z3p;2.328&ze;
 <b>16</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>0</b>, &z3p;1.465&ze;, &z3p;1.694&ze;, <b>P</b>, &z3p;0.460&ze;, &z3p;0.508&ze;, <b>p</b>, &z3p;1.505&ze;, &z3p;1.551&ze;
 <b>17</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>1</b>, &z3p;0.502&ze;, &z3p;0.551&ze;, <b>Q</b>, &z3p;0.033&ze;, &z3p;0.037&ze;, <b>q</b>, &z3p;0.121&ze;, &z3p;0.135&ze;
 <b>18</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>2</b>, &z3p;0.352&ze;, &z3p;0.408&ze;, <b>R</b>, &z3p;0.652&ze;, &z3p;0.729&ze;, <b>r</b>, &z3p;3.405&ze;, &z3p;3.254&ze;
 <b>19</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>3</b>, &z3p;0.227&ze;, &z3p;0.262&ze;, <b>S</b>, &z3p;0.691&ze;, &z3p;0.758&ze;, <b>s</b>, &z3p;3.166&ze;, &z3p;2.961&ze;
 <b>20</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>4</b>, &z3p;0.177&ze;, &z3p;0.203&ze;, <b>T</b>, &z3p;0.686&ze;, &z3p;0.740&ze;, <b>t</b>, &z3p;4.566&ze;, &z3p;4.200&ze;
 <b>21</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>5</b>, &z3p;0.149&ze;, &z3p;0.171&ze;, <b>U</b>, &z3p;0.315&ze;, &z3p;0.349&ze;, <b>u</b>, &z3p;1.575&ze;, &z3p;1.510&ze;
 <b>22</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>6</b>, &z3p;0.176&ze;, &z3p;0.209&ze;, <b>V</b>, &z3p;0.128&ze;, &z3p;0.149&ze;, <b>v</b>, &z3p;0.662&ze;, &z3p;0.682&ze;
 <b>23</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>7</b>, &z3p;0.131&ze;, &z3p;0.144&ze;, <b>W</b>, &z3p;0.131&ze;, &z3p;0.135&ze;, <b>w</b>, &z3p;0.494&ze;, &z3p;0.385&ze;
 <b>24</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>8</b>, &z3p;0.184&ze;, &z3p;0.207&ze;, <b>X</b>, &z3p;0.213&ze;, &z3p;0.254&ze;, <b>x</b>, &z3p;0.870&ze;, &z3p;1.002&ze;
 <b>25</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>9</b>, &z3p;0.128&ze;, &z3p;0.122&ze;, <b>Y</b>, &z3p;0.091&ze;, &z3p;0.094&ze;, <b>y</b>, &z3p;0.515&ze;, &z3p;0.435&ze;
 <b>26</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>:</b>, &z3p;0.192&ze;, &z3p;0.176&ze;, <b>Z</b>, &z3p;0.027&ze;, &z3p;0.033&ze;, <b>z</b>, &z3p;0.125&ze;, &z3p;0.135&ze;
 <b>27</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>;</b>, &z3p;1.276&ze;, &z3p;1.670&ze;, <b>[</b>, &z3p;0.163&ze;, &z3p;0.210&ze;, <b>{</b>, &z3p;0.303&ze;, &z3p;0.401&ze;
 <b>28</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b><</b>, &z3p;0.118&ze;, &z3p;0.147&ze;, <b>\</b>, &z3p;0.097&ze;, &z3p;0.126&ze;, <b>|</b>, &z3p;0.098&ze;, &z3p;0.124&ze;
 <b>29</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>=</b>, &z3p;1.039&ze;, &z3p;1.042&ze;, <b>]</b>, &z3p;0.163&ze;, &z3p;0.210&ze;, <b>}</b>, &z3p;0.303&ze;, &z3p;0.401&ze;
 <b>30</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>></b>, &z3p;0.587&ze;, &z3p;0.762&ze;, <b>^</b>, &z3p;0.003&ze;, &z3p;0.002&ze;, <b>~</b>, &z3p;0.009&ze;, &z3p;0.012&ze;
 <b>31</b>, &z3p;0.000&ze;, &z3p;0.000&ze;, <b>?</b>, &z3p;0.022&ze;, &z3p;0.019&ze;, <b>_</b>, &z3p;2.550&ze;, &z3p;3.238&ze;, <b>127</b>, &z3p;0.000&ze;, &z3p;0.000&ze;
<caption>
Occurrence of characters as a percentage of all characters and as a
percentage of all noncomment characters (i.e., outside of comments).
Based on the visible form of the <file>.c</file> files.  For a
comparison of letter usage in English language and identifiers see
<figref href="ideng">.
</caption>
.E_TABLE

.TABLE
Language,     Letters
English,      etaoinsrhldcumfpgwybvkxjqz
French,       esaitnrulodcmp&eup;vqfbghj&adown;x&edown;y&ehat;z&ahat;&ccidila;&ihat;&udown;&ohat;&uhat;&idots;k&edots;w
Norwegian,    erntsilakodgmvfupbh&oslash;jy&aa;&ae;cwzx(q)
Swedish,      eantrsildomkgv&adots;fhup&aa;&odots;bcyjxwz&eup;q
Icelandic,    anriestu&dh;lgmkfhvo&aup;&th;&iup;dj&oup;by&ae;&uup;&odots;p&eup;&ydown;cxwzq
Hungarian,    eatlnskomzrig&aup;&eup;ydbvhj&ohung;fup&odots;&oup;c&uhung;&iup;&uup;&udots;xw(q)
<caption>
Relative frequency (most common to least common, with parenthesis
used bracket extremely rare letters) of letter usage in various human
languages (the English ranking is based on the British National
Corpus).  Based on Kelk <book letter_rank_03>.
</caption>
.E_TABLE


274

.FIG
cmpdnest
<caption>
Maximum nesting of blocks and
<c_syntax>compound-statement</c_syntax>s within function definitions,
based on the visible form of the <file>.c</file> files.
</caption>
.E_FIG


275

.FIG
ppifnest
<caption>
Nesting of conditional inclusion directives (the maximum nesting of
any sequence of conditional inclusion directives, plus local maxima
within that sequence were counted).  Based on the visible form of the
<file>.c</file> and <file>.h</file> files.
</caption>
.E_FIG


276

.FIG
nestdecl
<caption>
Number of full declarators containing a given number of modifiers,
based on the translated form of the books benchmark programs.
</caption>
.E_FIG


278

.FIG
parennest
<caption>
Nesting of all occurrences of parentheses.  Based on the visible
form of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_FIG


280

.FIG
exidlen
<caption>
Number of identifiers, with external linkage, having a given length,
based on the translated form of the books benchmark programs.
Information on the length of all identifiers in the visible source is
given elsewhere (see <figref href="idlen">).
</caption>
.E_FIG


282

External declaration usage information is given elsewhere (see
<figref href="extcount">).

.TABLE
: l c c l c c
Header, External Identifiers, Total Identifiers, Header, External Identifiers, Total Identifiers
<assert.h>,  &z2;1,  &z2;2, <signal.h>,   &z;2, 12
<complex.h>, &z;66,  &z;71, <stdarg.h>,   &z;3,  &z;5
<ctype.h>,   &z;15,  &z;15, <stdbool.h>,  &z;0,  &z;4
<errno.h>,   &z2;1,  &z2;4, <stddef.h>,   &z;0,  &z;5
<fenv.h>,    &z;11,  &z;24, <stdint.h>,   &z;0, 38
<float.h>,    &z2;0,  &z;31, <stdio.h>,     49, 65
<inttypes.h>, &z2;6,  &z;62, <stdlib.h>,    36, 37
<iso646.h>,   &z2;0,  &z;11, <string.h>,    22, 24
<limits.h>,   &z2;0,  &z;19, <tgmath.h>,   &z;0, 60
<locale.h>,   &z2;2,  &z;10, <time.h>,     &z;9, 15
<math.h>,     184, 203,     <wchar.h>,     59, 68
<setjmp.h>,   &z2;2,  &z2;3, <wctype.h>,    18, 22
<caption>
Number of identifiers with external linkage (total 487), and total
number of identifiers (total 810), implementations are required to
declare in the standard headers.
</caption>
.E_TABLE


283

The 53,630 function definitions in the translated form of the books
benchmark programs contained: definitions of 76 structure, union or
enumeration types that included a tag; 6 <keyword>typedef</keyword>
definitions; and definitions of 70 enumeration constants.

.FIG
loccount
<caption>
Number of declarations of identifiers as objects within all of the
blocks contained in a function definition.  Based on the translated
form of the books benchmark programs.
</caption>
.E_FIG


284

.FIG
numdefine
<caption>
Number of all identifiers, and unique identifiers, defined as macro
names in <keyword>#define</keyword> preprocessing directives.  Based
on the visible form of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_FIG

.FIG
macdefs
<caption>
Number of <keyword>#define</keyword> directives evaluated in each
translation unit, excluding the contents of system headers, during
translation of the books benchmark programs (there were a total of
1,432,735 macros defined, of which 313,620 were function-like macros).
</caption>
.E_FIG


285

.FIG
paramcnt
<caption>
Percentage of function definitions appearing in the source of
embedded applications (5,597 function definitions), the SPECint95
benchmark (2,713 function definitions), and the translated form of
the books benchmark programs (53,719 function definitions) declared
to have a specified number of parameters.  The embedded and SPECint95
figures are from Engblom <book Engblom_99a>.
</caption>
.E_FIG


286

.FIG
numargs
<caption>
Number of arguments passed in function calls.  Based on the
translated form of the books benchmark programs.
</caption>
.E_FIG


287

.FIG
mdefparam
<caption>
Number of parameters declared in function-like macro definitions,
based on the visible form of the <file>.c</file> and <file>.h</file>
files.
</caption>
.E_FIG


288

.FIG
macexargs
<caption>
Number of arguments in expansions of function-like macros, excluding
expansions that occurred while processing system headers, during
translation of the books benchmark programs.
</caption>
.E_FIG


289

.FIG
logicline
<caption>
Number of characters on a physical line.  Based on the visible form of
the <file>.c</file> and <file>.h</file> files.
</caption>
.E_FIG


290

.FIG
strlen
<caption>
Number of characters in character string literals (i.e., their
length).  Based on the visible form of the <file>.c</file> files
</caption>
.E_FIG


291

.FIG
objsize
<caption>
Number of objects requiring the specified amount of storage.  Based
on the translated form of the <file>.c</file> files, using integer
types whose sizes were <c_code>sizeof(short) == 2</c_code>,
<c_code>sizeof(int) == 4</c_code>, and <c_code>sizeof(long) ==
4</c_code>; and alignment requirements that were a multiple of a
types size.
</caption>
.E_FIG


292

.FIG
incnest
<caption>
Nesting of <keyword>#include</keyword> preprocessor directives that
specify a header name using the quote-delimited form (occurrences of
the <keyword><</keyword> <keyword>></keyword> delimited form were not
counted).  Based on the translated form of the books benchmark
programs.
</caption>
.E_FIG


293

.FIG
caseuse
<caption>
Number of <keyword>case</keyword> labels on an individual statement
(cross) and per <keyword>switch</keyword> statement (bullet).  Based
on the visible form of the <file>.c</file> files.  Note that counts
do not include occurrences of the <keyword>default</keyword> label.
</caption>
.E_FIG


294

Measurements of classes <book Wheeldon_03>, in large Java programs,
have found that the number of members follows the same pattern as
that in C (see <figref href="sunummem">).

.FIG
sunummem
<caption>
Number of members in structure and union type definitions (members in
nested definitions are not included in the count of members of the
outer definition).  Based on the visible form of the <file>.c</file>
and <file>.h</file> files.
</caption>
.E_FIG


295

.FIG
econst
<caption>
Number of enumeration constants defined in each definition of an
enumeration type.  Based on the visible form of the <file>.c</file>
and <file>.h</file> files.
</caption>
.E_FIG


296

.FIG
sunest
<caption>
Number of textually nested structure and union type definitions
(i.e., using <keyword>{</keyword> <keyword>}</keyword> not typedef
names).  Based on the visible form of the <file>.c</file> and
<file>.h</file> files.
</caption>
.E_FIG


300

.TABLE lim_std_id
: 2.5cm r r 2.5cm r r 2.5cm r r
Name, <file>.c</file> file, <file>.h</file> file, Name, <file>.c</file> file, <file>.h</file> file, Name, <file>.c</file> file, <file>.h</file> file
 LONG_MAX, &zs;47&ze;, &zs;28&ze;, CHAR_MAX, &zs;15&ze;, &zs;8&ze;, CHAR_BIT, &zs;36&ze;, &zs;3&ze;
 INT_MAX, &zs;106&ze;, &zs;17&ze;, INT_MIN, &zs;17&ze;, &zs;7&ze;, SCHAR_MIN, &zs;12&ze;, &zs;2&ze;
 UINT_MAX, &zs;30&ze;, &zs;14&ze;, UCHAR_MAX, &zs;16&ze;, &zs;5&ze;, LLONG_MAX, &zs;0&ze;, &zs;1&ze;
 SHRT_MAX, &zs;20&ze;, &zs;13&ze;, CHAR_MIN, &zs;9&ze;, &zs;5&ze;, ULLONG_MAX, &zs;0&ze;, &zs;0&ze;
 SHRT_MIN, &zs;19&ze;, &zs;12&ze;, SCHAR_MAX, &zs;13&ze;, &zs;4&ze;, LLONG_MIN, &zs;0&ze;, &zs;0&ze;
 USHRT_MAX, &zs;12&ze;, &zs;11&ze;, MB_LEN_MAX, &zs;15&ze;, &zs;4&ze;,  , , 
 ULONG_MAX, &zs;85&ze;, &zs;10&ze;, LONG_MIN, &zs;23&ze;, &zs;3&ze;,  , , 
<caption>
Number of identifiers defined as macros in
<keyword><limits.h></keyword> (see <tableref href="sptoksp"> for
information on the number of identifiers appearing in the source)
appearing in the visible form of the <file>.c</file> and
<file>.h</file> files.
</caption>
.E_TABLE


327

Many of the following identifiers were referenced from one program,
<file>enquire.c</file>, whose job was to deduce the characteristics
of a host's floating-point support.

.TABLE flt_std_id
: 2.6cm r r 2.6cm r r 2.6cm r r
Name, <file>.c</file> file, <file>.h</file> file, Name, <file>.c</file> file, <file>.h</file> file, Name, <file>.c</file> file, <file>.h</file> file
 DBL_MIN, &zs;9&ze;, &zs;21&ze;, FLT_MAX, &zs;5&ze;, &zs;15&ze;, FLT_ROUNDS, &zs;18&ze;, &zs;14&ze;
 DBL_MAX, &zs;20&ze;, &zs;19&ze;, FLT_DIG, &zs;5&ze;, &zs;15&ze;, FLT_RADIX, &zs;20&ze;, &zs;14&ze;
 DBL_DIG, &zs;41&ze;, &zs;17&ze;, LDBL_MIN_EXP, &zs;4&ze;, &zs;14&ze;, FLT_MIN_EXP, &zs;4&ze;, &zs;14&ze;
 FLT_EPSILON, &zs;4&ze;, &zs;16&ze;, LDBL_MIN, &zs;4&ze;, &zs;14&ze;, FLT_MIN_10_EXP, &zs;4&ze;, &zs;14&ze;
 DBL_MIN_EXP, &zs;4&ze;, &zs;16&ze;, LDBL_MIN_10_EXP, &zs;4&ze;, &zs;14&ze;, FLT_MAX_EXP, &zs;4&ze;, &zs;14&ze;
 DBL_MIN_10_EXP, &zs;4&ze;, &zs;16&ze;, LDBL_MAX_EXP, &zs;4&ze;, &zs;14&ze;, FLT_MAX_10_EXP, &zs;4&ze;, &zs;14&ze;
 DBL_MAX_EXP, &zs;27&ze;, &zs;16&ze;, LDBL_MAX, &zs;4&ze;, &zs;14&ze;, FLT_MANT_DIG, &zs;8&ze;, &zs;14&ze;
 DBL_MAX_10_EXP, &zs;14&ze;, &zs;16&ze;, LDBL_MAX_10_EXP, &zs;4&ze;, &zs;14&ze;, FLT_EVAL_METHOD, &zs;0&ze;, &zs;0&ze;
 DBL_MANT_DIG, &zs;14&ze;, &zs;16&ze;, LDBL_MANT_DIG, &zs;4&ze;, &zs;14&ze;, DECIMAL_DIG, &zs;0&ze;, &zs;0&ze;
 DBL_EPSILON, &zs;4&ze;, &zs;16&ze;, LDBL_EPSILON, &zs;4&ze;, &zs;14&ze;,  , , 
 FLT_MIN, &zs;5&ze;, &zs;15&ze;, LDBL_DIG, &zs;4&ze;, &zs;14&ze;,  , , 
<caption>
Number of identifiers defined as macros in
<keyword><float.h></keyword> (see <tableref href="sptoksp"> for
information on the number of identifiers appearing in the source)
appearing in the visible form of the <file>.c</file> and
<file>.h</file> files.
</caption>
.E_TABLE


331

The range of exponent values that can occur within programs may
depend on the application domain.  For instance, astronomy programs
may contain ranges of very large values and subatomic particle
programs contain ranges of very small values.  A study of software
for automotive control systems <book Connors_97> showed (see <tableref
href="connors97">) a relatively small range of exponents, close to
zero.

.TABLE connors97
: c r r r r c r r r r
Exponent, Compare, Add, Multiply, Divide, Exponent, Compare, Add, Multiply, Divide
0, 15.60, 11.4, 6.7, 3.0 ,     ,    ,    , 
-1, 2.5, 2.5, 1.9, 0.0, 1, 10.80, 9.3, 1.6, 1.0
-2, 0.7, 1.2, 0.6, 1.0, 2, 5.20, 2.6, 1.3, 3.0
-3, 0.1, 0.0, 0.7, 0.0, 3, 8.50, 4.3, 0.7, 0.0
-4, 0.0, 0.1, 0.2, 1.0, 4, 0.50, 0.0, 0.5, 0.0
-5, 0.0, 0.0, 0.5, 0.0   ,     ,    ,    , 
-6, 0.0, 0.6, 1.4, 0.0   ,     ,    ,    , 
<caption>
Dynamic distribution of decimal exponents, as a percentage, for
operands of various floating point operations.  Adapted from Connors,
Yamada, and Hwu <book Connors_97> (thanks to Connors for supplying
the raw data).
</caption>
.E_TABLE

.FIG
exprng
<caption>
Number of exponent values in floating constants
(that included an <c_syntax>exponent-part</c_syntax>).  Based on the
visible form of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_FIG

.FIG
oberman96
<caption>
Differences in the values of the exponents (in powers of 2) of the
operands of floating-point addition and subtraction operations while
executing the SPECfp92 benchmarks.  Adapted from Oberman <book
Oberman_96>.
</caption>
.E_FIG


394

.FIG
sameiddecl
<caption>
Number of declarations of an identifier with the same spelling in the
same translation unit.  Based on the translated form of the books
benchmark programs.  Note that members of the same type are likely to
be counted more than once (i.e., they are counted in every
translation unit that declares them), while parameters and objects
declared within function definitions are likely to be only counted
once.
</caption>
.E_FIG


405

.FIG
blkdeclnest
<caption>
Number of object declarations appearing at various block nesting
levels (level 1 is the outermost block).  Based on the translated
form of the books benchmark programs.
</caption>
.E_FIG


410

In the translated form of the books benchmark programs there were
1,945 identifier definitions (out of 270,394 identifiers defined in
block scope) where an identifier declared in an inner scope hid an
identifier declared in an outer block scope.


418

.FIG
linkage
<caption>
Number of objects and functions declared with internal and external
linkage (excluding declarations in system headers).  Based on the
translated form of the book benchmark programs.
</caption>
.E_FIG


435

.TABLE ns_tok_ident
: l r r l r r
Token, <file>.c</file> file, <file>.h</file> file, Token, <file>.c</file> file, <file>.h</file> file
<keyword>goto</keyword> identifier, &zp;99.9&ze;, &zp;100.0&ze;, <keyword>struct</keyword> identifier, &zp;99.0&ze;, &zp;88.4&ze;
<keyword>#define</keyword> identifier, &zp;99.9&ze;, &zp;100.0&ze;, <keyword>union</keyword> identifier, &zp;65.5&ze;, &zp;75.8&ze;
<keyword>.</keyword> identifier, &zp;100.0&ze;, &zp;99.8&ze;, <keyword>enum</keyword> identifier, &zp;86.6&ze;, &zp;53.6&ze;
<keyword>-></keyword> identifier, &zp;100.0&ze;, &zp;95.5&ze;, <keyword>case</keyword> identifier, &zp;71.3&ze;, &zp;47.2&ze;
<caption>
Identifiers appearing immediately to the right of the given token as
a percentage of all identifiers appearing in the visible source.  An
identifier appearing to the left of a <keyword>:</keyword> could be a
label or a <keyword>case</keyword> label.  However, C syntax is
designed to be parsed from left to right and the presence, or absence,
of a <keyword>case</keyword> keyword indicates the entity denoted by
an identifier.
</caption>
.E_TABLE


436

.TABLE id_namespace
: l r l r
Declaration Context, %, Declaration Context, %
 block scope objects, &zp;23.7&ze;, file scope objects, &zp;4.4&ze;
 macro definitions, &zp;19.3&ze;, macro parameters, &zp;4.3&ze;
 function parameters, &zp;16.8&ze;, enumeration constants, &zp;2.1&ze;
struct/union members, &zp;9.6&ze;, <keyword>typedef</keyword> names, &zp;1.2&ze;
 function declarations, &zp;8.6&ze;, tag names, &zp;1.0&ze;
 function definitions, &zp;8.1&ze;, label names, &zp;0.9&ze;
<caption>
Occurrence of various kinds of declarations of identifiers as a
percentage of all identifiers declared in all the given contexts.
Based on the translated form of the books benchmark programs.
</caption>
.E_TABLE


446

In the translated form of the books benchmark programs 37% of defined
objects had static storage duration and 63% had automatic storage
duration (objects with allocated storage duration were not included
in this count).

.TABLE
: l r r r r r
Program, Total Objects, Total Bytes, Average Size, Maximum Objects, Maximum Bytes
sis,     63&comma;395, 15&comma;797&comma;173, 249.2,  48.5, 1&comma;932.2
perl,     1&comma;604,    34&comma;089,  21.3,   2.3,  116.4
xfig,       25,     1&comma;852,  72.7,  19.8, 1&comma;129.3
ghost,     924,    89&comma;782,  97.2,  26.5, 2&comma;129.0
make,       23,      539,  23.0,  10.4,  208.1
espresso, 1&comma;675,   107&comma;062,  63.9,   4.4,  280.1
ptc,       103,     2&comma;386,  23.2, 102.7, 2&comma;385.8
gawk,     1&comma;704,    67&comma;559,  39.6,   1.6,   41.0
cfrac,     522,     8001,  15.3,   1.5,   21.4
<caption>
Total number of objects allocated (in thousands), the total amount of
storage they occupy (in thousands of bytes), their average size (in
bytes) and the high water mark of these values (also in thousands).
Adapted from Detlefs, Dosser and Zorn <book Detlefs_93>.
</caption>
.E_TABLE


452

In the visible form of the <file>.c</file> files approximately 5%
of occurrences of the keyword <keyword>static</keyword> occurred in
block scope.


476

In the visible form of the <file>.c</file> files 2.1%
(<file>.h</file> 2.9%) of characters in character constants are not
in the basic execution character set (assuming the Ascii character
set representation is used for escape sequences).


483

Usage information on integer type specifiers is given elsewhere
(see <tableref href="typespec_bigram">, which does not include uses of
integer types specified via typedef names).

.TABLE signed_unsigned_width
: r r r r
 , 8 bits, 16 bits, 32 bits
unsigned, 70.8/1.3, 14.0/0.4, 2.1/44.9
signed, 2.7/0.0, 9.4/0.3, 1.0/53.1
<caption>
Occurrence of objects having different width integer types (as a
percentage of all integer types) for embedded source and the
SPECint95 benchmark (separated by a forward slash,
e.g.,embedded/SPECint95).  Adapted from Engblom <book Engblom_99a>.
</caption>
.E_TABLE


494

.TABLE float_t_usage
: l r r r r r r
Type, Block Scope, Parameter, File Scope, <keyword>typedef</keyword>, Member, Total
<keyword>float</keyword>, &zp;35.2&ze;, &zp;15.1&ze;, &zp;8.3&ze;, &zp;0.7&ze;, &zp;21.0&ze;, &zp;80.3&ze;
<keyword>double</keyword>, &zp;8.5&ze;, &zp;7.9&ze;, &zp;0.5&ze;, &zp;0.7&ze;, &zp;2.2&ze;, &zp;19.7&ze;
<keyword>long</keyword> <keyword>double</keyword>, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;
 Total, &zp;43.6&ze;, &zp;22.9&ze;, &zp;8.8&ze;, &zp;1.5&ze;, &zp;23.2&ze;
<caption>
Occurrence of floating types in various declaration contexts (as a
percentage of all floating types appearing in these contexts).  Based
on the translated form of the books benchmark programs.
</caption>
.E_TABLE


512

.TABLE character_t_usage
: l r r r r r r
Type, Block Scope, Parameter, File Scope, <keyword>typedef</keyword>, Member, Total
<keyword>char</keyword>, &zp;16.4&ze;, &zp;3.6&ze;, &zp;1.2&ze;, &zp;0.1&ze;, &zp;6.6&ze;, &zp;28.0&ze;
<keyword>signed</keyword> <keyword>char</keyword>, &zp;0.2&ze;, &zp;0.3&ze;, &zp;0.0&ze;, &zp;0.1&ze;, &zp;0.3&ze;, &zp;1.0&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;18.1&ze;, &zp;10.6&ze;, &zp;0.4&ze;, &zp;0.8&ze;, &zp;41.2&ze;, &zp;71.1&ze;
 Total, &zp;34.7&ze;, &zp;14.6&ze;, &zp;1.5&ze;, &zp;1.0&ze;, &zp;48.2&ze;
<caption>
Occurrence of character types in various declaration contexts (as a
percentage of all character types appearing in these contexts).  Based
on the translated form of the books benchmark programs.
</caption>
.E_TABLE


516

.TABLE integer_t_usage
: l r r r r r r
Type, Block Scope, Parameter, File Scope, <keyword>typedef</keyword>, Member, Total
<keyword>char</keyword>, &zp;1.8&ze;, &zp;0.4&ze;, &zp;0.1&ze;, &zp;0.0&ze;, &zp;0.7&ze;, &zp;3.1&ze;
<keyword>signed</keyword> <keyword>char</keyword>, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.1&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.0&ze;, &zp;1.2&ze;, &zp;0.0&ze;, &zp;0.1&ze;, &zp;4.6&ze;, &zp;7.9&ze;
<keyword>short</keyword>, &zp;0.7&ze;, &zp;0.3&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.4&ze;, &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.3&ze;, &zp;0.8&ze;, &zp;0.1&ze;, &zp;0.1&ze;, &zp;3.2&ze;, &zp;6.5&ze;
<keyword>int</keyword>, &zp;28.4&ze;, &zp;10.6&ze;, &zp;4.2&ze;, &zp;0.1&ze;, &zp;6.4&ze;, &zp;49.7&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;5.6&ze;, &zp;3.6&ze;, &zp;0.3&ze;, &zp;0.1&ze;, &zp;4.2&ze;, &zp;13.8&ze;
<keyword>long</keyword>, &zp;3.0&ze;, &zp;1.2&ze;, &zp;0.1&ze;, &zp;0.1&ze;, &zp;0.8&ze;, &zp;5.1&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;4.8&ze;, &zp;1.9&ze;, &zp;0.2&ze;, &zp;0.1&ze;, &zp;2.1&ze;, &zp;9.1&ze;
<keyword>enum</keyword>, &zp;0.9&ze;, &zp;0.9&ze;, &zp;0.4&ze;, &zp;0.4&ze;, &zp;0.8&ze;, &zp;3.3&ze;
 Total, &zp;49.6&ze;, &zp;20.8&ze;, &zp;5.4&ze;, &zp;0.9&ze;, &zp;23.2&ze;
<caption>
Occurrence of integer types in various declaration contexts (as a
percentage of those all integer types appearing in these contexts),
based on the translated form of the books benchmark programs.
</caption>
.E_TABLE


522

.TABLE derived_t_usage
: l r r r r r r
Type, Block Scope, Parameter, File Scope, <keyword>typedef</keyword>, Member, Total
<keyword>*</keyword>, &zp;30.4&ze;, &zp;37.6&ze;, &zp;3.1&ze;, &zp;0.8&ze;, &zp;5.6&ze;, &zp;77.5&ze;
 array, &zp;3.3&ze;, &zp;0.0&ze;, &zp;4.4&ze;, &zp;0.0&ze;, &zp;3.0&ze;, &zp;10.8&ze;
<keyword>struct</keyword>, &zp;3.7&ze;, &zp;0.1&ze;, &zp;2.4&ze;, &zp;2.3&ze;, &zp;2.6&ze;, &zp;11.2&ze;
<keyword>union</keyword>, &zp;0.2&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.1&ze;, &zp;0.2&ze;, &zp;0.5&ze;
 Total, &zp;37.7&ze;, &zp;37.8&ze;, &zp;10.0&ze;, &zp;3.3&ze;, &zp;11.3&ze;
<caption>
Occurrence of derived types in various declaration contexts (as a
percentage of all derived types appearing in these contexts, e.g.,
<c_code>int **ap[2]</c_code> is counted as two pointer types and one
array type).  Based on the translated form of the books benchmark
programs.
</caption>
.E_TABLE


524

.FIG
elements
<caption>
Number of arrays defined to have the given number of elements.  Based
on the translated form of the books benchmark programs.
</caption>
.E_FIG

.TABLE elem_type
: l r l r
Element Type, %, Element Type, %
<keyword>char</keyword>, &zp;17.2&ze;, <keyword>struct</keyword> <keyword>*</keyword>, &zp;3.7&ze;
<keyword>struct</keyword>, &zp;16.6&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;2.7&ze;
<keyword>float</keyword>, &zp;14.6&ze;, <keyword>enum</keyword>, &zp;2.5&ze;
other-types, &zp;10.4&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.0&ze;
<keyword>int</keyword>, &zp;8.5&ze;, <keyword>float</keyword> [], &zp;1.9&ze;
<keyword>const</keyword> <keyword>char</keyword>, &zp;8.0&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>const</keyword>, &zp;1.3&ze;
<keyword>char</keyword> <keyword>*</keyword>, &zp;5.1&ze;, <keyword>short</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;4.4&ze;, , 
<caption>
Occurrence of arrays declared to have the given element type (as a
percentage of all objects declared to have an array type).  Based on
the translated form of the books benchmark programs.
</caption>
.E_TABLE


536

.TABLE pointed_to_type
: l r l r
Pointed-to Type, %, Pointed-to Type, %
<keyword>struct</keyword>, &zp;66.5&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;2.2&ze;  
<keyword>char</keyword>, &zp;8.0&ze;, <keyword>struct</keyword> <keyword>*</keyword>, &zp;1.8&ze;
<keyword>union</keyword>, &zp;6.0&ze;, <keyword>int</keyword>, &zp;1.8&ze;
other-types, &zp;5.5&ze;, <keyword>const</keyword> <keyword>char</keyword>, &zp;1.3&ze;
<keyword>void</keyword>, &zp;3.3&ze;, <keyword>char</keyword> <keyword>*</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.6&ze;, , 
<caption>
Occurrence of objects declared using a given pointer type (as a
percentage of all objects declared to have a pointer type).  Based on
the translated form of the books benchmark programs.
</caption>
.E_TABLE


550

.TABLE qual_types
: l r l r
Type Combination, %, Type Combination, %
array of <keyword>const</keyword>, &zp;26.7&ze;, <keyword>const</keyword> <keyword>*</keyword>, &zp;0.4&ze;
<keyword>const</keyword> integer-type, &zp;4.8&ze;, <keyword>const</keyword> <keyword>union</keyword>, &zp;0.3&ze;
<keyword>const</keyword> real-type, &zp;2.7&ze;, <keyword>volatile</keyword> <keyword>struct</keyword>, &zp;0.1&ze;
<keyword>*</keyword> <keyword>const</keyword>, &zp;2.6&ze;, <keyword>volatile</keyword> integer-type, &zp;0.1&ze;
<keyword>const</keyword> <keyword>struct</keyword>, &zp;2.4&ze;, <keyword>*</keyword> <keyword>volatile</keyword>, &zp;0.1&ze;
<caption>
Occurrence of qualified types as a percentage of all (i.e., qualified
and unqualified) occurrences of that kind of type (e.g.,
<keyword>*</keyword> denotes any pointer type,
<keyword>struct</keyword> any structure type, and <phrase>array
of</phrase> an array of some type).  Based on the translated form of
the books benchmark programs.
</caption>
.E_TABLE


551

.TABLE qual_context
: l r r r r r r
Type Qualifier, Local, Parameter, File Scope, <keyword>typedef</keyword>, Member, Total
<keyword>const</keyword>, &zp;18.5&ze;, &zp;4.3&ze;, &zp;50.8&ze;, &zp;0.0&ze;, &zp;1.2&ze;, &zp;74.8&ze;
<keyword>volatile</keyword>, &zp;1.6&ze;, &zp;0.1&ze;, &zp;3.0&ze;, &zp;0.1&ze;, &zp;20.4&ze;, &zp;25.2&ze;
<keyword>volatile</keyword> <keyword>const</keyword>, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;, &zp;0.0&ze;
 Total, &zp;20.1&ze;, &zp;4.4&ze;, &zp;53.8&ze;, &zp;0.1&ze;, &zp;21.6&ze;
<caption>
Occurrence of type qualifiers on the outermost type of declarations
occurring in various contexts (as a percentage of all type qualifiers
on the outermost type in these declarations).  Based on the translated
form of the books benchmark programs.
</caption>
.E_TABLE


649

Usage information on the cast operator is given elsewhere (see
<tableref href="cast_oprnd">).

.TABLE imp_conv
: l l r l l r
Converted to, Converted from, %, Converted to, Converted from, %
<keyword>(</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>)</keyword>, _<keyword>int</keyword>, &zp;33.0&ze;, <keyword>(</keyword> <keyword>int</keyword> <keyword>)</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.9&ze;
<keyword>(</keyword> <keyword>unsigned</keyword> <keyword>short</keyword> <keyword>)</keyword>, _<keyword>int</keyword>, &zp;17.7&ze;, <keyword>(</keyword> <keyword>unsigned</keyword> <keyword>long</keyword> <keyword>)</keyword>, _<keyword>int</keyword>, &zp;1.8&ze;
<keyword>(</keyword> other-types <keyword>)</keyword>, other-types, &zp;11.3&ze;, <keyword>(</keyword> <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;1.7&ze;
<keyword>(</keyword> <keyword>short</keyword> <keyword>)</keyword>, _<keyword>int</keyword>, &zp;7.6&ze;, <keyword>(</keyword> <keyword>short</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;1.7&ze;
<keyword>(</keyword> <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>)</keyword>, _<keyword>int</keyword>, &zp;5.1&ze;, <keyword>(</keyword> <keyword>enum</keyword> <keyword>)</keyword>, _<keyword>int</keyword>, &zp;1.3&ze;
<keyword>(</keyword> ptr-to <keyword>)</keyword>, ptr-to, &zp;4.7&ze;, <keyword>(</keyword> <keyword>unsigned</keyword> <keyword>long</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;1.2&ze;
<keyword>(</keyword> <keyword>char</keyword> <keyword>)</keyword>, _<keyword>int</keyword>, &zp;3.6&ze;, <keyword>(</keyword> <keyword>int</keyword> <keyword>)</keyword>, <keyword>char</keyword>, &zp;1.2&ze;
<keyword>(</keyword> ptr-to <keyword>)</keyword>, _ptr-to, &zp;2.9&ze;, <keyword>(</keyword> <keyword>int</keyword> <keyword>)</keyword>, <keyword>enum</keyword>, &zp;1.0&ze;
<keyword>(</keyword> <keyword>int</keyword> <keyword>)</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.3&ze;, , , 
<caption>
Occurrence of implicit conversions (as a percentage of all implicit
conversions; an <phrase>_</phrase> prefix indicates a literal
operand).  Based on the translated form of the books benchmark
programs.
</caption>
.E_TABLE


671

.TABLE int_promote
: l c l c
Original Type, %, Original Type, %
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.3&ze;, <keyword>char</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.9&ze;, <keyword>short</keyword>, &zp;0.5&ze;
<caption>
Occurrence of integer promotions (as a percentage of all operands
appearing in all expressions).  Based on the translated form of the
books benchmark programs.
</caption>
.E_TABLE


.FIG
var_rw
<caption>
Execution-time counts of the number of reads and writes of the same
object (declared in block or file scope, i.e., not allocated storage)
for a subset of the MediaBench benchmarks; items above the diagonal
indicate more writes than reads.  Data kindly supplied by Caspi,
based on his research <book Caspi_00>.
</caption>
.E_FIG


754

.TABLE imp_ptr
: l l r l l r
To Type, From Type, %, To Type, From Type, %
<keyword>(</keyword> <keyword>struct</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;44.0&ze;, <keyword>(</keyword> <keyword>void</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;4.2&ze;
<keyword>(</keyword> function <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;18.4&ze;, <keyword>(</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;3.4&ze;
<keyword>(</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;7.9&ze;, <keyword>(</keyword> ptr-to <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;2.0&ze;
<keyword>(</keyword> <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;6.9&ze;, <keyword>(</keyword> <keyword>int</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;1.9&ze;
<keyword>(</keyword> <keyword>union</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;5.5&ze;, <keyword>(</keyword> <keyword>long</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;1.1&ze;
<keyword>(</keyword> other-types <keyword>*</keyword> <keyword>)</keyword>, other-types <keyword>*</keyword>, &zp;4.7&ze;, , , 
<caption>
Occurrence of implicit conversions that involve pointer types (as a
percentage of all implicit conversions that involve such types),
based on the translated form of the books benchmark programs.
</caption>
.E_TABLE


766

.FIG
tokenonline
<caption>
Number of non-white-space characters and tokens on a physical line;
based on the visible form of the <file>.c</file> and <file>.h</file>
files.
</caption>
.E_FIG

A more detailed analysis of spacing between individual punctuators is
given elsewhere<ref preprocessing tokens, white space separation>.

.TABLE sptoksp
: l 1.7cm 1.7cm 1.6cm 1.5cm 1.7cm 1.7cm
Token, % of Tokens in <file>.c</file> files, % of Tokens in <file>.h</file> files, % Preceded by Space, % Followed by Space, % First Token on Line,  % Last Token on Line
punctuator, &zp;53.5&ze; (&zp;11.4&ze;), &zp;48.1&ze; (&zp;7.5&ze;), &zp;27.5&ze;, &zp;29.7&ze;, &zp;3.7&ze;, &zp;25.3&ze;
identifier, &zp;29.8&ze; (&zp;43.4&ze;), &zp;20.8&ze; (&zp;30.6&ze;), &zp;54.9&ze;, &zp;27.6&ze;, &zp;1.4&ze;, &zp;1.2&ze;
constant, &zp;6.9&ze; (&zp;3.8&ze;), &zp;21.6&ze; (&zp;15.3&ze;), &zp;70.3&ze;, &zp;4.4&ze;, &zp;0.1&ze;, &zp;1.6&ze;
keyword, &zp;6.9&ze; (&zp;5.8&ze;), &zp;5.4&ze; (&zp;4.2&ze;), &zp;79.9&ze;, &zp;82.5&ze;, &zp;10.3&ze;, &zp;3.6&ze;
comment, &zp;1.9&ze; (&zp;31.0&ze;), &zp;3.4&ze; (&zp;40.3&ze;), &zp;53.4&ze;, &zp;2.2&ze;, &zp;41.2&ze;, &zp;97.4&ze;
<c_syntax>string-literal</c_syntax>, &zp;1.0&ze; (&zp;4.6&ze;), &zp;0.8&ze; (&zp;2.2&ze;), &zp;59.9&ze;, &zp;5.7&ze;, &zp;0.7&ze;, &zp;8.0&ze;
pp-directive, &zp;0.9&ze; (&zp;1.1&ze;), &zp;4.9&ze; (&zp;4.4&ze;), &zp;4.7&ze;, &zp;78.4&ze;, &zp;0.0&ze;, &zp;18.2&ze;
header-name, &zp;0.0&ze; (&zp;0.0&ze;), &zp;0.0&ze; (&zp;0.0&ze;), &endash;, &endash;, &endash;, &endash;
<caption>
Occurrence of kinds of tokens in the visible form of the
<file>.c</file> and <file>.h</file> files as a percentage of all
tokens (value in parenthesis is the percentage of all non-white-space
characters contained in those tokens), percentage occurrence (for
<file>.c</file> files only) of token kind where it was
preceded/followed by a space character, or starts/finishes a visible
line.  While comments are not tokens they are the only other
construct that can contain non-white-space characters.  While the
start of a preprocessing directive contains two tokens, these are
generally treated by developers as a single entity.

</caption>
.E_TABLE


773

<tableref href="sptoksp"> shows the relative frequency of white
space occurring before and after various kinds of tokens.

.FIG
whitesp
<caption>
Number of white-space characters between preprocessing tokens (does
do not include white space at the start of a line&emdash; i.e.,
indentation white space, and end of line is not counted as a
white-space character).  Based on the visible form of the
<file>.c</file> and <file>.h</file> files.
</caption>
.E_FIG


783

Usage information on preprocessor directives is given elsewhere
(see <tableref href="direct_name">).

.TABLE key_freq
: l r r 1cm 1cm l r r 1cm 1cm
Keyword, <file>.c</file> Files, <file>.h</file> Files, % Start of Line, % End of Line, Keyword, <file>.c</file> Files, <file>.h</file> Files, % Start of Line, % End of Line
<keyword>if</keyword>, &z2p;21.46&ze;, &z2p;15.63&ze;, &z2p;93.60&ze;, &z2p;0.00&ze;, <keyword>const</keyword>, &z2p;0.94&ze;, &z2p;0.80&ze;, &z2p;35.50&ze;, &z2p;0.30&ze;
<keyword>int</keyword>, &z2p;11.31&ze;, &z2p;13.40&ze;, &z2p;47.00&ze;, &z2p;5.30&ze;, <keyword>switch</keyword>, &z2p;0.75&ze;, &z2p;0.77&ze;, &z2p;99.40&ze;, &z2p;0.00&ze;
<keyword>return</keyword>, &z2p;10.18&ze;, &z2p;12.23&ze;, &z2p;94.50&ze;, &z2p;0.10&ze;, <keyword>extern</keyword>, &z2p;0.61&ze;, &z2p;0.71&ze;, &z2p;99.60&ze;, &z2p;0.40&ze;
<keyword>struct</keyword>, &z2p;8.10&ze;, &z2p;10.33&ze;, &z2p;38.90&ze;, &z2p;0.30&ze;, <keyword>register</keyword>, &z2p;0.59&ze;, &z2p;0.64&ze;, &z2p;95.00&ze;, &z2p;0.00&ze;
<keyword>void</keyword>, &z2p;6.24&ze;, &z2p;10.27&ze;, &z2p;28.70&ze;, &z2p;18.20&ze;, <keyword>default</keyword>, &z2p;0.54&ze;, &z2p;0.58&ze;, &z2p;99.90&ze;, &z2p;0.00&ze;
<keyword>static</keyword>, &z2p;6.04&ze;, &z2p;8.07&ze;, &z2p;99.80&ze;, &z2p;0.60&ze;, <keyword>continue</keyword>, &z2p;0.49&ze;, &z2p;0.33&ze;, &z2p;91.30&ze;, &z2p;0.00&ze;
<keyword>char</keyword>, &z2p;4.90&ze;, &z2p;5.08&ze;, &z2p;30.50&ze;, &z2p;0.20&ze;, <keyword>short</keyword>, &z2p;0.38&ze;, &z2p;0.28&ze;, &z2p;16.00&ze;, &z2p;1.00&ze;
<keyword>case</keyword>, &z2p;4.67&ze;, &z2p;4.81&ze;, &z2p;97.80&ze;, &z2p;0.00&ze;, <keyword>enum</keyword>, &z2p;0.20&ze;, &z2p;0.27&ze;, &z2p;73.70&ze;, &z2p;1.80&ze;
<keyword>else</keyword>, &z2p;4.62&ze;, &z2p;3.30&ze;, &z2p;70.20&ze;, &z2p;42.20&ze;, <keyword>do</keyword>, &z2p;0.20&ze;, &z2p;0.25&ze;, &z2p;87.30&ze;, &z2p;21.30&ze;
<keyword>unsigned</keyword>, &z2p;4.17&ze;, &z2p;2.58&ze;, &z2p;46.80&ze;, &z2p;0.10&ze;, <keyword>volatile</keyword>, &z2p;0.18&ze;, &z2p;0.17&ze;, &z2p;50.00&ze;, &z2p;0.00&ze;
<keyword>break</keyword>, &z2p;3.77&ze;, &z2p;2.44&ze;, &z2p;91.80&ze;, &z2p;0.00&ze;, <keyword>float</keyword>, &z2p;0.16&ze;, &z2p;0.17&ze;, &z2p;54.00&ze;, &z2p;0.70&ze;
<keyword>sizeof</keyword>, &z2p;2.23&ze;, &z2p;2.24&ze;, &z2p;11.30&ze;, &z2p;0.00&ze;, <keyword>typedef</keyword>, &z2p;0.15&ze;, &z2p;0.09&ze;, &z2p;99.80&ze;, &z2p;0.00&ze;
<keyword>long</keyword>, &z2p;2.23&ze;, &z2p;1.49&ze;, &z2p;10.10&ze;, &z2p;1.70&ze;, <keyword>double</keyword>, &z2p;0.14&ze;, &z2p;0.08&ze;, &z2p;53.60&ze;, &z2p;3.10&ze;
<keyword>for</keyword>, &z2p;2.22&ze;, &z2p;1.06&ze;, &z2p;99.70&ze;, &z2p;0.00&ze;, <keyword>union</keyword>, &z2p;0.04&ze;, &z2p;0.06&ze;, &z2p;63.30&ze;, &z2p;6.20&ze;
<keyword>while</keyword>, &z2p;1.23&ze;, &z2p;0.95&ze;, &z2p;85.20&ze;, &z2p;0.10&ze;, <keyword>signed</keyword>, &z2p;0.02&ze;, &z2p;0.01&ze;, &z2p;27.20&ze;, &z2p;0.00&ze;
<keyword>goto</keyword>, &z2p;1.23&ze;, &z2p;0.89&ze;, &z2p;94.10&ze;, &z2p;0.00&ze;, <keyword>auto</keyword>, &z2p;0.00&ze;, &z2p;0.00&ze;, &z2p;0.00&ze;, &z2p;0.00&ze;
<caption>
Occurrence of keywords (as a percentage of all keywords in the
respective kind of file) and occurrence of those keywords as the
first and last token on a line (as a percentage of occurrences of the
respective keyword; for <file>.c</file> files only).  Based on the
visible form of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE


787

.FIG
idonline
<caption>
Number of physical lines containing the given number of identifiers,
based on the visible form of the <file>.c</file> files.
</caption>
.E_FIG


801

.FIG
idsignif
<caption>
Occurrence of unique identifiers whose significant characters match
those of a different identifier (as a percentage of all unique
identifiers in a program), for various numbers of significant
characters.  Based on the visible form of the <file>.c</file> files.
</caption>
.E_FIG


817

.TABLE constant
: l r r
Kind of Constant, <file>.c</file> files, <file>.h</file> files
<c_syntax>character-constant</c_syntax>, &z2p;0.16&ze;, &z2p;0.06&ze;
<c_syntax>integer-constant</c_syntax>, &z2p;6.70&ze;, &z2p;20.79&ze;
<c_syntax>floating-constant</c_syntax>, &z2p;0.02&ze;, &z2p;0.20&ze;
<c_syntax>string-literal</c_syntax>, &z2p;1.02&ze;, &z2p;0.74&ze;
<caption>
Occurrence of different kinds of constants (as a percentage of all
tokens).  Based on the visible form of the <file>.c</file> and
<file>.h</file> files.
</caption>
.E_TABLE


820

{ref integer constant, usage}
Having some kinds of constant tokens (also see <figref
href="benfordflt">) follow Benford's law <book Hill_98> would not be
surprising because the significant digits of a set of values created
by randomly sampling from a variety of different distributions
converges to a logarithmic distribution (i.e., Benford's law) <book
Hill_96>.  While the results for
<c_syntax>decimal-constant</c_syntax> (see <figref
href="benfordint">) may appear to be a reasonable fit, applying a
chi-squared test shows the fit to be remarkably poor (&chis; =
132,398).  The first nonzero digit of
<c_syntax>hexadecimal-constant</c_syntax>s appears to be
approximately evenly distributed.

.FIG
freqcons
<caption>
Number of integer constants having the lexical form of a
<c_syntax>decimal-constant</c_syntax> (the literal
<c_code>0</c_code> is also included in this set) and
<c_syntax>hexadecimal-constant</c_syntax>, with different values.
Based on the visible form of the <file>.c</file> and <file>.h</file>
files.
</caption>
.E_FIG

.FIG
benfordint
<caption>
Probability of a <c_syntax>decimal-constant</c_syntax> or
<c_syntax>hexadecimal-constant</c_syntax> starting with a particular
digit; based on <file>.c</file> files.  Dotted lines are the
probabilities predicted by Benford's law (for values expressed in
base 10 and base 16)&emdash; <equ>&log;(1+d<sup>-1</sup>)</equ>,
where <equ>d</equ> is the numeric value of the digit.
</caption>
.E_FIG

.TABLE int_cons_kind
: l r r
Kind of <c_syntax>integer-constant</c_syntax>, <file>.c</file> files, <file>.h</file> files
<c_syntax>decimal-constant</c_syntax>, &zp;64.1&ze;, &zp;17.8&ze;
<c_syntax>hexadecimal-constant</c_syntax>, &zp;35.8&ze;, &zp;82.1&ze;
<c_syntax>octal-constant</c_syntax>, &zp;0.1&ze;, &zp;0.2&ze;
<caption>
Occurrence of various kinds of <c_syntax>integer-constant</c_syntax>s
(as a percentage of all integer constants; note that zero is included
in the <c_syntax>decimal-constant</c_syntax> count rather than the
<c_syntax>octal-constant</c_syntax> count).  Based on the visible
form of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE

.TABLE int_suffix
: l r r l r r
Suffix Character Sequence, <file>.c</file> files, <file>h.</file> files, Suffix Character Sequence, <file>.c</file> files, <file>.h</file> files
 none, 99.6850, 99.5997, Lu/lU, 0.0005, 0.0001
 U/u, 0.0298, 0.0198, LL/lL/ll, 0.0072, 0.0022
 L/l, 0.1378, 0.2096, ULL/uLl/ulL/Ull, 0.0128, 0.0061
 U/uL/ul, 0.1269, 0.1625, LLU/lLu/LlU/llu, 0.0000, 0.0000
<caption>
Occurrence of various <c_syntax>integer-suffix</c_syntax> sequences
(as a percentage of all <c_syntax>integer-constants</c_syntax>),
based on the visible form of the <file>.c</file> and <file>.h</file>
files.
</caption>
.E_TABLE

.TABLE int_cons_bigram
: l 2.0cm 2.1cm l 2.0cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
&comma; <c_syntax>integer-constant</c_syntax>, &zp;42.9&ze;, &zp;56.5&ze;, <keyword>(</keyword> <c_syntax>integer-constant</c_syntax>, &zp;2.8&ze;, &zp;3.4&ze;
<c_syntax>integer-constant</c_syntax> <keyword>]</keyword>, &zp;6.4&ze;, &zp;44.4&ze;, <keyword>==</keyword> <c_syntax>integer-constant</c_syntax>, &zp;25.5&ze;, &zp;2.0&ze;
<c_syntax>integer-constant</c_syntax> &comma;, &zp;58.2&ze;, &zp;44.2&ze;, <keyword>return</keyword> <c_syntax>integer-constant</c_syntax>, &zp;18.6&ze;, &zp;1.9&ze;
<c_syntax>integer-constant</c_syntax> <keyword>;</keyword>, &zp;14.1&ze;, &zp;12.1&ze;, <keyword>+</keyword> <c_syntax>integer-constant</c_syntax>, &zp;33.7&ze;, &zp;1.9&ze;
<c_syntax>integer-constant</c_syntax> <keyword>)</keyword>, &zp;14.2&ze;, &zp;11.7&ze;, <keyword>&</keyword> <c_syntax>integer-constant</c_syntax>, &zp;30.6&ze;, &zp;1.5&ze;
<c_syntax>integer-constant</c_syntax> <keyword>#</keyword>, &zp;1.4&ze;, &zp;9.1&ze;, identifier <c_syntax>integer-constant</c_syntax>, &zp;0.3&ze;, &zp;1.5&ze;
<keyword>=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;19.6&ze;, &zp;9.0&ze;, <keyword>-</keyword> <c_syntax>integer-constant</c_syntax>, &zp;44.0&ze;, &zp;1.3&ze;
<keyword>[</keyword> <c_syntax>integer-constant</c_syntax>, &zp;39.3&ze;, &zp;5.6&ze;, <keyword><</keyword> <c_syntax>integer-constant</c_syntax>, &zp;40.0&ze;, &zp;1.3&ze;
<c_syntax>integer-constant</c_syntax> <keyword>}</keyword>, &zp;1.2&ze;, &zp;4.4&ze;, <keyword>{</keyword> <c_syntax>integer-constant</c_syntax>, &zp;4.2&ze;, &zp;1.2&ze;
<keyword>-v</keyword> <c_syntax>integer-constant</c_syntax>, &zp;69.0&ze;, &zp;4.1&ze;, , , 
<caption>
Common token pairs involving <c_syntax>integer-constant</c_syntax>s,
based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE

825

.TABLE hex_num_dig
: r r r r r r r r
Digits, Occurrence, Digits, Occurrence, Digits, Occurrence, Digits, Occurrence
 &zs;0&ze;, &z3p;0.003&ze;, &zs;5&ze;, &z3p;0.467&ze;, &zs;10&ze;, &z3p;0.005&ze;, &zs;15&ze;, &z3p;0.000&ze;
 &zs;1&ze;, &z3p;1.092&ze;, &zs;6&ze;, &z3p;0.226&ze;, &zs;11&ze;, &z3p;0.001&ze;, &zs;16&ze;, &z3p;0.209&ze;
 &zs;2&ze;, &z3p;59.406&ze;, &zs;7&ze;, &z3p;0.061&ze;, &zs;12&ze;, &z3p;0.001&ze;,  , 
 &zs;3&ze;, &z3p;1.157&ze;, &zs;8&ze;, &z3p;2.912&ze;, &zs;13&ze;, &z3p;0.000&ze;,  , 
 &zs;4&ze;, &z3p;34.449&ze;, &zs;9&ze;, &z3p;0.010&ze;, &zs;14&ze;, &z3p;0.000&ze;,  , 
<caption>
Occurrence of <c_syntax>hexadecimal-constant</c_syntax>s containing a
given number of digits (as a percentage of all such constants).
Based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE


830

.TABLE cons_int_type
: l r r
Type, 16-bit <keyword>int</keyword>, 32-bit <keyword>int</keyword>
<keyword>int</keyword>, &z3p;94.117&ze;, &z3p;99.271&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &z3p;3.493&ze;, &z3p;0.414&ze;
<keyword>long</keyword>, &z3p;1.805&ze;, &z3p;0.118&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, &z3p;0.557&ze;, &z3p;0.138&ze;
other-types, &z3p;0.029&ze;, &z3p;0.059&ze;
<caption>
Occurrence of <c_syntax>integer-constant</c_syntax>s having a
particular type (as a percentage of all such constants; with the type
denoted by any suffix taken into account) when using two possible
representations of the type <keyword>int</keyword> (i.e., 16- and
32-bit).  Based on the visible form of the <file>.c</file> and
<file>.h</file> files.
</caption>
.E_TABLE


836

Exponent usage information is given elsewhere<ref exponent>.  Also
see elsewhere <ref integer constant, usage> for a discussion of
Benford's law and the first non-zero digit of constants (&chis; =
1,680 is a very poor fit).

.FIG
benfordflt
<caption>
Probability of a <c_syntax>decimal-floating-constant</c_syntax>
(i.e., not hexadecimal) starting with a particular digit.  Based on
the visible form of the <file>.c</file> files.  Dotted line is the
probability predicted by Benford's law&emdash;
<equ>&log;(1+d<sup>-1</sup>)</equ>, where <equ>d</equ> is the numeric
value of the digit.
</caption>
.E_FIG

.TABLE flt_suffix
: l r r
Suffix Character Sequence, <file>.c</file> files, <file>.h</file> files
none, 98.3963, 99.7554
F/f, 1.4033, 0.1896
L/l, 0.2005, 0.0550
<caption>
Occurrence of various <c_syntax>floating-suffix</c_syntax>es (as a
percentage of all such constants).  Based on the visible form of the
<file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE

.TABLE flt_cons_bigram
: l 2.0cm 2.1cm l 2.0cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
&comma; <c_syntax>floating-constant</c_syntax>, &zp;0.0&ze;, &zp;20.4&ze;, <c_syntax>floating-constant</c_syntax> <keyword>/</keyword>, &zp;5.8&ze;, &zp;1.8&ze;
<keyword>=</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.1&ze;, &zp;15.7&ze;, <keyword>*=</keyword> <c_syntax>floating-constant</c_syntax>, &zp;6.3&ze;, &zp;1.6&ze;
<keyword>*</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.2&ze;, &zp;12.5&ze;, <c_syntax>floating-constant</c_syntax> <keyword>*</keyword>, &zp;6.8&ze;, &zp;0.1&ze;
<keyword>(</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.0&ze;, &zp;8.8&ze;, <c_syntax>floating-constant</c_syntax> <keyword>;</keyword>, &zp;26.5&ze;, &zp;0.1&ze;
<keyword>+</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.4&ze;, &zp;7.7&ze;, <c_syntax>floating-constant</c_syntax> <keyword>)</keyword>, &zp;25.9&ze;, &zp;0.1&ze;
<keyword>-v</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.3&ze;, &zp;6.7&ze;, <c_syntax>floating-constant</c_syntax> &comma;, &zp;25.8&ze;, &zp;0.1&ze;
<keyword>/</keyword> <c_syntax>floating-constant</c_syntax>, &zp;2.0&ze;, &zp;6.4&ze;, , , 
<caption>
Common token pairs involving <c_syntax>floating-constant</c_syntax>s.
Based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE


838

.FIG
fltconst
<caption>
Number of digit sequences before and after the decimal point (dp) in
<c_syntax>floating-constant</c_syntax>s that do not contain an
exponent part, and the total number of digit in a
<c_syntax>floating-constant</c_syntax>.  Based on the visible form of
the <file>.c</file> and <file>.h</file> files.
</caption>
.E_FIG


860

.TABLE char_cons_kind
: l r
Kind of <c_syntax>character-constant</c_syntax>, % of all <c_syntax>character-constant</c_syntax>s
not an escape sequence, &zp;76.1&ze;
<c_syntax>simple-escape-sequence</c_syntax>, &zp;8.8&ze;
<c_syntax>octal-escape-sequence</c_syntax>, &zp;15.1&ze;
<c_syntax>hexadecimal-escape-sequence</c_syntax>, &zp;0.0&ze;
<c_syntax>universal-character-name</c_syntax>, &zp;0.0&ze;
<caption>
Occurrence of various kinds of <c_syntax>character-constant</c_syntax>
(as a percentage of all such constants).  Based on the visible form
of the <file>.c</file> files.
</caption>
.E_TABLE

.TABLE escape_seq
: 1.3cm 2.6cm 2.5cm 1.3cm 2.6cm 2.5cm
Escape Sequence, % of <c_syntax>character-constant</c_syntax> Escape Sequences, % of <c_syntax>string-literal</c_syntax> escape sequences, Escape sequence, % of <c_syntax>character-constant</c_syntax> Escape Sequences, % of <c_syntax>string-literal</c_syntax> Escape Sequences
 \n, &z2p;18.10&ze;, &z2p;79.15&ze;, \b, &z2p;0.66&ze;, &z2p;0.04&ze;
 \t, &z2p;3.90&ze;, &z2p;11.62&ze;, \', &z2p;3.24&ze;, &z2p;0.02&ze;
 \", &z2p;1.29&ze;, &z2p;3.08&ze;, \%, &z2p;0.00&ze;, &z2p;0.02&ze;
 \0, &z2p;52.70&ze;, &z2p;2.06&ze;, \v, &z2p;0.31&ze;, &z2p;0.01&ze;
 \x, &z2p;0.12&ze;, &z2p;1.10&ze;, \p, &z2p;0.00&ze;, &z2p;0.01&ze;
 \2, &z2p;2.73&ze;, &z2p;1.01&ze;, \f, &z2p;0.44&ze;, &z2p;0.01&ze;
 \\, &z2p;5.70&ze;, &z2p;0.61&ze;, \?, &z2p;0.01&ze;, &z2p;0.01&ze;
 \r, &z2p;3.01&ze;, &z2p;0.46&ze;, \e, &z2p;0.00&ze;, &z2p;0.00&ze;
 \3, &z2p;4.95&ze;, &z2p;0.42&ze;, \a, &z2p;0.11&ze;, &z2p;0.00&ze;
 \1, &z2p;2.72&ze;, &z2p;0.35&ze;,  , , 
<caption>
Occurrence of <c_syntax>escape-sequence</c_syntax>s within
<c_syntax>character-constant</c_syntax>s and
<c_syntax>string-literal</c_syntax>s (as a percentage of
<c_syntax>escape-sequence</c_syntax>s for that kind of token).  Based
on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE

.TABLE cchar_bigram
: l 2.0cm 2.1cm l 2.0cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
<keyword>==</keyword> <c_syntax>character-constant</c_syntax>, &zp;7.1&ze;, &zp;22.8&ze;, <c_syntax>character-constant</c_syntax> <keyword>||</keyword>, &zp;4.2&ze;, &zp;4.2&ze;
&comma; <c_syntax>character-constant</c_syntax>, &zp;0.3&ze;, &zp;18.1&ze;, <c_syntax>character-constant</c_syntax> <keyword>&&</keyword>, &zp;5.3&ze;, &zp;3.3&ze;
<keyword>case</keyword> <c_syntax>character-constant</c_syntax>, &zp;8.5&ze;, &zp;16.7&ze;, <keyword><=</keyword> <c_syntax>character-constant</c_syntax>, &zp;7.1&ze;, &zp;1.7&ze;
<keyword>=</keyword> <c_syntax>character-constant</c_syntax>, &zp;0.8&ze;, &zp;14.2&ze;, <keyword>>=</keyword> <c_syntax>character-constant</c_syntax>, &zp;3.6&ze;, &zp;1.5&ze;
<keyword>!=</keyword> <c_syntax>character-constant</c_syntax>, &zp;5.3&ze;, &zp;8.4&ze;, <c_syntax>character-constant</c_syntax> <keyword>)</keyword>, &zp;33.0&ze;, &zp;0.7&ze;
<keyword>(</keyword> <c_syntax>character-constant</c_syntax>, &zp;0.1&ze;, &zp;6.1&ze;, <c_syntax>character-constant</c_syntax> &comma;, &zp;17.6&ze;, &zp;0.3&ze;
<c_syntax>character-constant</c_syntax> <keyword>:</keyword>, &zp;16.7&ze;, &zp;6.0&ze;, <c_syntax>character-constant</c_syntax> <keyword>;</keyword>, &zp;16.6&ze;, &zp;0.3&ze;
<caption>
Common token pairs involving
<c_syntax>character-constant</c_syntax>s.  Based on the visible form
of the <file>.c</file> files.
</caption>
.E_TABLE


878

.FIG
ccharc
<caption>
Occurrence of characters in an integer
<c_syntax>character-constant</c_syntax> (as a fraction of the most
common character, the null character).  Based on the visible form of
the <file>.c</file> files.
</caption>
.E_FIG

.TABLE cchar_op
: l r
Operator, %
Arithmetic operators, &zp;4.5&ze;
Bit operators, &zp;0.5&ze;
Equality operators, &zp;31.3&ze;
Relational operators, &zp;4.1&ze;
<caption>
Occurrence of a <c_syntax>character-constant</c_syntax> appearing as
one of the operands of various kinds of binary operators (as a
percentage of all such constants; includes escape sequences).  Based
on the visible form of the <file>.c</file> files.  See <tableref
href="cchar_bigram"> for more detailed information.
</caption>
.E_TABLE


879

.TABLE cchar_len
: c r c r
Number of Characters, Occurrences, Number of Characters, Occurrences
 &zs;0&ze;, &zs;27&ze;, &zs;4&ze;, &zs;21&ze;
 &zs;1&ze;, &zs;50590&ze;, &zs;5&ze;, &zs;4&ze;
 &zs;2&ze;, &zs;0&ze;, &zs;6&ze;, &zs;4&ze;
 &zs;3&ze;, &zs;8&ze;, &zs;7&ze;, &zs;0&ze;
<caption>
Number of <c_syntax>character-constant</c_syntax>s containing a
given number of characters.  Based on the visible form of the
<file>.c</file> files.
</caption>
.E_TABLE


902

.TABLE str_lit_info
: l r r r r r r r r
String Literals, gcc, idsoftware, linux, netscape, openafs, openMotif, postgresql, Total
Number of strings, &zs;38063&ze;, &zs;21811&ze;, &zs;177224&ze;, &zs;30358&ze;, &zs;30574&ze;, &zs;11285&ze;, &zs;16387&ze;, &zs;325702&ze;
Bytes in strings, &zs;656366&ze;, &zs;324667&ze;, &zs;4050258&ze;, &zs;512766&ze;, &zs;737015&ze;, &zs;288018&ze;, &zs;298888&ze;, &zs;6867978&ze;
Number of unique strings, &zs;18602&ze;, &zs;9148&ze;, &zs;114170&ze;, &zs;17192&ze;, &zs;18483&ze;, &zs;7401&ze;, &zs;7930&ze;, &zs;187549&ze;
Bytes in unique strings, &zs;434028&ze;, &zs;170170&ze;, &zs;3189466&ze;, &zs;378917&ze;, &zs;562555&ze;, &zs;240811&ze;, &zs;219690&ze;, &zs;5159385&ze;
<caption>
Number of <c_syntax>string-literal</c_syntax>s (the empty
<c_syntax>string-literal</c_syntax>, i.e., <c_code>""</c_code>, was
not counted).  Based on the visible form of the <file>.c</file> and
<file>.h</file> files.  Although many of the program source trees
contain more than one program, they were treated as a single entity.
A consequence of this is that the number of unique matches represents
a lower bound; having a smaller number of string literals is likely
to reduce the probability of matches occurring.
</caption>
.E_TABLE


906

.TABLE punct_freq
Punctuator, % of Tokens, Punctuator, % of Tokens, Punctuator, % of Tokens, Punctuator, % of Tokens
&comma;, &z2p;8.82&ze;, <keyword>:</keyword>, &z2p;0.46&ze;, <keyword>></keyword>, &z2p;0.11&ze;, <keyword>--v</keyword>, &z2p;0.01&ze;
<keyword>)</keyword>, &z2p;8.09&ze;, <keyword>-v</keyword>, &z2p;0.40&ze;, <keyword><<</keyword>, &z2p;0.09&ze;, <keyword>...</keyword>, &z2p;0.01&ze;
<keyword>(</keyword>, &z2p;8.09&ze;, <keyword>*p</keyword>, &z2p;0.40&ze;, <keyword>?:</keyword>, &z2p;0.08&ze;, <keyword>>>=</keyword>, &z2p;0.01&ze;
<keyword>;</keyword>, &z2p;7.80&ze;, <keyword>+</keyword>, &z2p;0.38&ze;, <keyword>?</keyword>, &z2p;0.08&ze;, <keyword>^</keyword>, &z2p;0.01&ze;
<keyword>=</keyword>, &z2p;3.08&ze;, <keyword>*v</keyword>, &z2p;0.34&ze;, <keyword>|=</keyword>, &z2p;0.08&ze;, <keyword>+v</keyword>, &z2p;0.00&ze;
<keyword>-></keyword>, &z2p;3.00&ze;, <keyword>&</keyword>, &z2p;0.32&ze;, <keyword>>=</keyword>, &z2p;0.07&ze;, <keyword>:b</keyword>, &z2p;0.00&ze;
<keyword>}</keyword>, &z2p;1.87&ze;, <keyword>!</keyword>, &z2p;0.31&ze;, <keyword>/</keyword>, &z2p;0.06&ze;, <keyword>%=</keyword>, &z2p;0.00&ze;
<keyword>{</keyword>, &z2p;1.87&ze;, <keyword>v++</keyword>, &z2p;0.27&ze;, <keyword>>></keyword>, &z2p;0.06&ze;, <keyword>##</keyword>, &z2p;0.00&ze;
<keyword>.</keyword>, &z2p;1.26&ze;, <keyword>&&</keyword>, &z2p;0.26&ze;, <keyword>~</keyword>, &z2p;0.05&ze;, <keyword>*=</keyword>, &z2p;0.00&ze;
<keyword>*</keyword>, &z2p;1.10&ze;, <keyword>!=</keyword>, &z2p;0.26&ze;, <keyword>v--</keyword>, &z2p;0.04&ze;, <keyword>/=</keyword>, &z2p;0.00&ze;
<keyword>#</keyword>, &z2p;1.00&ze;, <keyword><</keyword>, &z2p;0.22&ze;, <keyword>&=</keyword>, &z2p;0.04&ze;, <keyword><<=</keyword>, &z2p;0.00&ze;
<keyword>]</keyword>, &z2p;0.96&ze;, <keyword>-</keyword>, &z2p;0.19&ze;, <keyword><=</keyword>, &z2p;0.04&ze;, <keyword>^=</keyword>, &z2p;0.00&ze;
<keyword>[</keyword>, &z2p;0.96&ze;, <keyword>|</keyword>, &z2p;0.17&ze;, <keyword>-=</keyword>, &z2p;0.03&ze;, , 
<keyword>&v</keyword>, &z2p;0.58&ze;, <keyword>||</keyword>, &z2p;0.16&ze;, <keyword>++v</keyword>, &z2p;0.02&ze;, , 
<keyword>==</keyword>, &z2p;0.53&ze;, <keyword>+=</keyword>, &z2p;0.11&ze;, <keyword>%</keyword>, &z2p;0.02&ze;, , 
<caption>
Occurrence of <c_syntax>punctuator</c_syntax> tokens (as a percentage
of all tokens; multiply by 1.88 to express occurrence as a percentage
of all punctuator tokens).  Based on the visible form of the
<file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE


927

.TABLE comment_info
: l r r
Kind of Comment, <file>.c</file> files, <file>.h</file> files
/* comment */, &zp;91.0&ze;, &zp;90.1&ze;
// comment, &zp;9.0&ze;, &zp;9.9&ze;
/* on one line */, &zp;70.3&ze;, &zp;79.1&ze;
new-lines in /* comments, &zp;12.3&ze;, &zp;17.5&ze;
<caption>
Occurrence of kinds of comments (as a percentage of all comments; last
row as a percentage of all new-line characters).  Based on the visible
form of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE


933


.TABLE token_eol
: l 1.9cm 1.8cm l 1.9cm 1.8cm
Token, % Occurrence of Token, % Last Token on Line, Token, % Occurrence of Token, % Last Token on Line
<keyword>;</keyword>, &zp;92.2&ze;, &zp;36.0&ze;, <keyword>#else</keyword>, &zp;89.1&ze;, &zp;0.2&ze;
\* <keyword>...</keyword> *\, &zp;97.9&ze;, &zp;8.4&ze;, <keyword>int</keyword>, &zp;5.3&ze;, &zp;0.2&ze;
<keyword>)</keyword>, &zp;20.6&ze;, &zp;8.3&ze;, <keyword>||</keyword>, &zp;23.7&ze;, &zp;0.2&ze;
<keyword>{</keyword>, &zp;86.7&ze;, &zp;8.1&ze;, <keyword>|</keyword>, &zp;12.3&ze;, &zp;0.1&ze;
<keyword>}</keyword>, &zp;78.9&ze;, &zp;7.4&ze;, <keyword>+</keyword>, &zp;3.8&ze;, &zp;0.1&ze;
&comma;, &zp;13.9&ze;, &zp;6.1&ze;, <keyword>?:</keyword>, &zp;7.3&ze;, &zp;0.0&ze;
<keyword>:</keyword>, &zp;74.3&ze;, &zp;1.7&ze;, <keyword>?</keyword>, &zp;7.1&ze;, &zp;0.0&ze;
header-name, &zp;97.7&ze;, &zp;1.5&ze;, <keyword>do</keyword>, &zp;21.3&ze;, &zp;0.0&ze;
\\, &zp;100.0&ze;, &zp;0.9&ze;, <keyword>#error</keyword>, &zp;25.1&ze;, &zp;0.0&ze;
<keyword>#endif</keyword>, &zp;81.9&ze;, &zp;0.8&ze;, <keyword>:b</keyword>, &zp;7.2&ze;, &zp;0.0&ze;
<keyword>else</keyword>, &zp;42.2&ze;, &zp;0.7&ze;, <keyword>double</keyword>, &zp;3.1&ze;, &zp;0.0&ze;
<c_syntax>string-literal</c_syntax>, &zp;8.0&ze;, &zp;0.4&ze;, <keyword>^</keyword>, &zp;3.1&ze;, &zp;0.0&ze;
<keyword>void</keyword>, &zp;18.2&ze;, &zp;0.4&ze;, <keyword>union</keyword>, &zp;6.2&ze;, &zp;0.0&ze;
<keyword>&&</keyword>, &zp;17.8&ze;, &zp;0.2&ze;, , , 
<caption>
Occurrence of a token as the last token on a line (as a percentage of
all occurrences of that token and as a percentage of all lines).
Based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE

.TABLE sol_token
: l 1.8cm 1.9cm l 1.8cm 1.9cm
Token, % First Token on Line, % Occurrence of Token, Token, % First Token on Line, % Occurrence of Token
<keyword>default</keyword>, &zp;0.2&ze;, &zp;99.9&ze;, <keyword>volatile</keyword>, &zp;0.0&ze;, &zp;50.0&ze;
<keyword>#</keyword>, &zp;5.0&ze;, &zp;99.9&ze;, <keyword>int</keyword>, &zp;1.8&ze;, &zp;47.0&ze;
<keyword>typedef</keyword>, &zp;0.1&ze;, &zp;99.8&ze;, <keyword>unsigned</keyword>, &zp;0.7&ze;, &zp;46.8&ze;
<keyword>static</keyword>, &zp;2.1&ze;, &zp;99.8&ze;, <keyword>struct</keyword>, &zp;1.1&ze;, &zp;38.9&ze;
<keyword>for</keyword>, &zp;0.8&ze;, &zp;99.7&ze;, <keyword>const</keyword>, &zp;0.1&ze;, &zp;35.5&ze;
<keyword>extern</keyword>, &zp;0.2&ze;, &zp;99.6&ze;, <keyword>char</keyword>, &zp;0.5&ze;, &zp;30.5&ze;
<keyword>switch</keyword>, &zp;0.3&ze;, &zp;99.4&ze;, <keyword>void</keyword>, &zp;0.6&ze;, &zp;28.7&ze;
<keyword>case</keyword>, &zp;1.6&ze;, &zp;97.8&ze;, <keyword>*v</keyword>, &zp;0.5&ze;, &zp;28.7&ze;
\* new-line *\, &zp;13.7&ze;, &zp;97.7&ze;, <keyword>++v</keyword>, &zp;0.0&ze;, &zp;27.8&ze;
<keyword>register</keyword>, &zp;0.2&ze;, &zp;95.0&ze;, <keyword>signed</keyword>, &zp;0.0&ze;, &zp;27.2&ze;
<keyword>return</keyword>, &zp;3.3&ze;, &zp;94.5&ze;, <keyword>&&</keyword>, &zp;0.3&ze;, &zp;21.2&ze;
<keyword>goto</keyword>, &zp;0.4&ze;, &zp;94.1&ze;, identifier, &zp;31.1&ze;, &zp;20.8&ze;
<keyword>if</keyword>, &zp;6.9&ze;, &zp;93.6&ze;, <keyword>||</keyword>, &zp;0.2&ze;, &zp;18.4&ze;
<keyword>break</keyword>, &zp;1.2&ze;, &zp;91.8&ze;, <keyword>--v</keyword>, &zp;0.0&ze;, &zp;17.9&ze;
<keyword>continue</keyword>, &zp;0.2&ze;, &zp;91.3&ze;, <keyword>short</keyword>, &zp;0.0&ze;, &zp;16.0&ze;
<keyword>}</keyword>, &zp;8.3&ze;, &zp;88.3&ze;, <keyword>#error</keyword>, &zp;0.0&ze;, &zp;15.6&ze;
<keyword>do</keyword>, &zp;0.1&ze;, &zp;87.3&ze;, <c_syntax>string-literal</c_syntax>, &zp;0.6&ze;, &zp;12.4&ze;
<keyword>while</keyword>, &zp;0.4&ze;, &zp;85.2&ze;, <keyword>sizeof</keyword>, &zp;0.1&ze;, &zp;11.3&ze;
<keyword>enum</keyword>, &zp;0.1&ze;, &zp;73.7&ze;, <keyword>long</keyword>, &zp;0.1&ze;, &zp;10.1&ze;
\\, &zp;0.6&ze;, &zp;70.8&ze;, <c_syntax>integer-constant</c_syntax>, &zp;2.2&ze;, &zp;6.6&ze;
<keyword>else</keyword>, &zp;1.1&ze;, &zp;70.2&ze;, <keyword>?</keyword>, &zp;0.0&ze;, &zp;5.6&ze;
<keyword>union</keyword>, &zp;0.0&ze;, &zp;63.3&ze;, <keyword>&v</keyword>, &zp;0.1&ze;, &zp;5.2&ze;
\* <keyword>...</keyword> *\, &zp;5.4&ze;, &zp;62.6&ze;, <keyword>-v</keyword>, &zp;0.1&ze;, &zp;5.0&ze;
<keyword>{</keyword>, &zp;5.1&ze;, &zp;54.9&ze;, <keyword>?:</keyword>, &zp;0.0&ze;, &zp;5.0&ze;
<keyword>float</keyword>, &zp;0.0&ze;, &zp;54.0&ze;, <keyword>|</keyword>, &zp;0.0&ze;, &zp;4.2&ze;
<keyword>double</keyword>, &zp;0.0&ze;, &zp;53.6&ze;, <c_syntax>floating-constant</c_syntax>, &zp;0.0&ze;, &zp;4.1&ze;
<caption>
Occurrence of a token as the first token on a physical line (as a
percentage of all occurrences of that token and as a percentage of
all lines).  Based on the visible form of the <file>.c</file> files.
<phrase>/* new-line */</phrase> denotes a comment containing one or
more new-line characters, while <phrase>/* ... */</phrase> denotes
that form of comment on a single line.
</caption>
.E_TABLE

.TABLE
: l r r r r r r r r r r r r r
Program,     ILd,     FLd,    LdA,     St,   IMul,    FMul,   FDiv,  IArth,   FArth,    Cmp,   Shft,  CMov,   FOps
compress, 44(27),   0(0), 88(&z;2), 16(&z;9), 15(0),   0(0),  0(0), 11(36),   0(0), 92(2), 14( 9),  0(0),   0(0)
gcc,      46(24),  83(0), 59(&z;9), 48(11), 40(0),  30(0), 31(0), 46(28),   0(0), 87(3), 54(&z;7), 51(1),  95(0)
go,       36(30), 100(0), 71(13), 35(&z;8), 18(0), 100(0),  0(0), 29(31),   0(0), 73(4), 42(&z;0), 52(1), 100(0)
ijpeg,    19(18),  73(0),  9(11), 20(&z;5), 10(1),  68(0),  0(0), 15(37),   0(0), 96(2), 17(21), 15(0),  98(0)
li,       40(30), 100(0), 27(&z;8), 42(15), 30(0),  13(0),  0(0), 56(22),   0(0), 93(2), 79(&z;3), 60(0), 100(0)
perl,     70(24),  54(3), 81(&z;7), 59(15),  2(0),  50(0), 19(0), 65(22),  34(0), 87(4), 69(&z;6), 28(1),  51(1)
m88ksim,  76(22),  59(0), 68(&z;8), 79(11), 33(0),  53(0), 66(0), 64(28), 100(0), 91(5), 66(&z;6), 65(0), 100(0)
vortex,   61(29),  99(0), 46(&z;6), 65(14),  9(0),   4(0),  0(0), 70(31),   0(0), 98(2), 40(&z;3), 20(0), 100(0)
<caption>
Breakdown of invariance by instruction types. These categories
include integer loads (ILd), floating-point loads (FLd), load address
calculations (LdA), stores (St), integer multiplication (IMul),
floating-point multiplication (FMul), floating-point division (FDiv),
all other integer arithmetic (IArth), all other floating-point
arithmetic (FArith), compare (Cmp), shift (Shft), conditional moves
(CMov), and all other floating-point operations (FOps). The first
number shown is the percent invariance of the topmost value for a
class type, while the number in parenthesis is the dynamic execution
frequency of that type.  Results are not shown for instruction types
that do not write a register (e.g., branches).  Adapted from Calder,
Feller, and Eustace <book Calder_97>.
</caption>
.E_TABLE

Studies of operand values during program execution (investigating
ways of minimizing processor power consumption) have found that a
significant percentage of these values use fewer representation bits
than are available to them (i.e., they are small positive
quantities).  Brooks and Martonosi <book Brooks_00> found that 50% of
operand values in SPECint95 required less than 16 bits.

.TABLE obj_val_bits
: r r c
Bits, Objects Defined, Objects Requiring Specified Bits
1,    0, 203
8,    7, 134
16,  27, 108
32, 686, 275
<caption>
Number of objects defined (in a variety of small multimedia and
scientific programs) to have types represented using the given number
of bits (i.e., mostly 32-bit <keyword>int</keyword>) and number of
objects having a maximum bit-width usage (i.e., number of bits
required to represent any of the values stored in the object; rounded
up to the nearest byte boundary).  Adapted from Stephenson <book
Stephenson_00>, whose analysis was performed by static analysis of
the source.
</caption>
.E_TABLE


968

.TABLE
: l r r r r r r r r r r r r
Class, compress, gcc, go, ijpeg,     li, m88ksim,  perl, vortex,   bzip,  gzip,   mcf,   Mean
SSN,   &endash;,  1.28,     3.50,    0.42,   4.40,  12.10,   6.23,   7.26,   0.12,  0.15,   0.15,  2.97
SAN,   &endash;,  0.63,     1.01,   16.61,  &endash;,   0.45,   2.58,      &endash;,  12.73,  0.01,   &endash;   ,  2.84
SMN,   &endash;,  0.67, &endash;,    3.62,  &endash;,   0.30,      &endash;,   2.60,      &endash;,     &endash;,   &endash;   ,  0.60
SSP,   &endash;,  0.37, &endash;,    0.17,   1.40,    &endash;,      &endash;,   0.33,      &endash;,  0.02,   &endash;   ,  0.19
SAP,   &endash;,  0.25, &endash;,    0.17,  &endash;, &endash;,      &endash;,      &endash;,      &endash;,     &endash;,   &endash;   ,  0.04
SMP,   &endash;,  0.29, &endash;,    0.25,   0.01,   0.24,   2.15,   0.05,      &endash;,     &endash;,   &endash;   ,  0.25
HSN,   &endash;,  0.88, &endash;,   14.75,   3.51,    &endash;,   8.07,   7.32,   0.27,  0.01,   0.20,  2.92
HAN,   &endash;,  7.39, &endash;,   48.55,  &endash;, &endash;,   4.30,   5.39,  31.83,     &endash;,   2.75,  8.35
HMN,   &endash;, 16.37, &endash;,    0.76,   8.80,   6.11,   8.42,   0.85,      &endash;,  3.54,  27.35,  6.02
HSP,   &endash;,  0.33, &endash;, &endash;,  1.82,    &endash;,  20.01,   7.64,      &endash;,     &endash;,   &endash; ,    2.48
HAP,   &endash;,  9.42, &endash;,    1.33,   0.56,    &endash;,   3.02,   4.97,      &endash;,     &endash;,   0.88,  1.68
HMP,   &endash;,  1.82, &endash;,    0.11,  24.44,   0.57,   6.29,   0.16,      &endash;,  0.01,  17.47,  4.24
GSN,      43.46, 11.10,    14.23,    0.45,  12.76,  17.49,  16.81,  27.79,  43.71, 43.75,   3.12, 19.56
GAN,      19.27,  6.51,    52.03,    3.00,  &endash;,  21.86,      &endash;,   0.03,   3.63, 26.24,   &endash;   , 11.05
GMN,   &endash;,  0.81, &endash;,    0.41,  &endash;,  10.96,      &endash;,   0.16,      &endash;,     &endash;,   2.79,  1.26
GSP,   &endash;,  0.68, &endash;,    0.04,  &endash;, &endash;,      &endash;,      &endash;,      &endash;,     &endash;,   0.48,  0.10
GAP,   &endash;,  2.17, &endash;, &endash;, &endash;,   0.86,   &endash;,   0.60,   0.41,     &endash;,   4.72,  0.73
GMP,   &endash;,  0.77, &endash;,    0.20,  &endash;,   0.07,      &endash;,      &endash;,      &endash;,     &endash;,   0.26,  0.11
RA,        7.65,  5.16,     3.68,    0.91,   8.84,   4.58,   4.11,   4.60,   0.76,  2.52,   7.29,  4.17
CS,       29.62, 33.10,    25.55,    8.27,  33.46,  24.40,  18.01,  30.24,   6.54, 23.75,  32.55, 22.12
<caption>
Dynamic percentage of load instructions from different
<phrase>classes</phrase>.  The <phrase>Class</phrase> column is a
three-letter acronym: the first letter represents the region of
storage (Stack, Heap, or Global), the second denotes the kind of
reference (Array, Member, or Scalar), and the third indicates the
type of the reference (Pointer or Nonpointer).  For instance,
<phrase>HFP</phrase> is a load of pointer-typed member from a
heap-allocated object.  There are two kinds of loads generated as a
result of internal translator housekeeping: <phrase>RA</phrase> is a
load of the return address from a function-call, and any register
values saved to memory prior to the call also need to be reloaded
when the call returns, <phrase>CS</phrase> callee-saved registers

The figures were obtained by instrumenting the source prior to
translation.  As such they provide a count of loads that would be
made by the abstract machine (apart from <phrase>RA</phrase> and
<phrase>CS</phrase>).  The number of loads performed by the machine
code generated by translators is likely to be optimized (evaluation
of constructs moved out of loops and register contents reused) and
resulting in fewer loads.  Whether these optimizations will change
the distribution of loads in different classes is not known.

Adapted from Burtscher, Diwan and Hauswirth <book Burtscher_02>.
</caption>
.E_TABLE

.TABLE calder_load
: l r r r l r r r
Program,  Mean,    Leaf,   NonLeaf, Program,  Mean,    Leaf,   Non-Leaf
burg,     21.7,    12.9,   26.7,     eqntott,  12.8,    11.8,   20.2
ditroff,  30.3,    18.6,   32.9,     espresso, 21.6,    20.1,   22.9
tex,      30.7,    19.6,   31.3,     gcc,      23.9,    16.7,   24.6
xfig,     23.5,    15.6,   25.8,     li,       28.1,    44.1,   26.3
xtex,     23.2,    16.1,   28.2,     sc,       21.2,    15.3,   22.8
compress, 26.4,     0.1,   26.5,     Mean,     23.9,    17.3,   26.2
<caption>

Occurrence of load instructions (as a percentage of all instructions
executed on &HP; Alpha).  The column headed <phrase>Leaf</phrase>
lists percentage of calls to leaf functions, <phrase>NonLeaf</phrase>
is for nonleaf functions.  Adapted from Calder, Grunwald, and Zorn
<book Calder_95b>.

</caption>
.E_TABLE

.TABLE calder_mips_alpha
Program,   MIPS,   Alpha, Program,   MIPS,   Alpha
compress,   17.3,   26.4, li,   21.8,   28.1
eqntott,   14.6,   12.8, sc,   19.2,   21.2
espresso,   17.9,   21.6, Program mean,   18.2,   22.3
gcc,   18.7,   23.9, , , 
<caption>
Comparison of dynamic load percentages on Alpha and MIPS.
Adapted from Calder, Grunwald, and Zorn <book Calder_95b>.
</caption>
.E_TABLE


977

.TABLE postfix_oprnd
: c l r c l r
Operator, Type, %, Operator, Type, %
<keyword>v++</keyword>, <keyword>int</keyword>, &zp;54.0&ze;, <keyword>[</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;5.1&ze;
<keyword>v--</keyword>, <keyword>int</keyword>, &zp;52.5&ze;, <keyword>[</keyword>, other-types, &zp;4.7&ze;
<keyword>[</keyword>, <keyword>*</keyword>, &zp;38.0&ze;, <keyword>[</keyword>, <keyword>int</keyword>, &zp;4.1&ze;
<keyword>v++</keyword>, <keyword>*</keyword>, &zp;25.7&ze;, <keyword>v++</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;3.1&ze;
<keyword>v--</keyword>, <keyword>long</keyword>, &zp;15.9&ze;, <keyword>v--</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.7&ze;
<keyword>[</keyword>, <keyword>struct</keyword>, &zp;14.5&ze;, <keyword>v--</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.6&ze;
<keyword>v++</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;13.3&ze;, <keyword>[</keyword>, <keyword>const</keyword> <keyword>char</keyword>, &zp;2.4&ze;
<keyword>[</keyword>, <keyword>float</keyword>, &zp;12.0&ze;, <keyword>[</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.2&ze;
<keyword>v--</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;11.5&ze;, <keyword>v++</keyword>, <keyword>long</keyword>, &zp;1.1&ze;
<keyword>[</keyword>, <keyword>union</keyword>, &zp;10.2&ze;, <keyword>[</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.1&ze;
<keyword>v--</keyword>, <keyword>*</keyword>, &zp;7.1&ze;, <keyword>v++</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.0&ze;
<keyword>[</keyword>, <keyword>char</keyword>, &zp;6.8&ze;, <keyword>v++</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.0&ze;
<keyword>v--</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;6.1&ze;, <keyword>v--</keyword>, <keyword>short</keyword>, &zp;1.0&ze;
<caption>
Occurrence postfix operators having particular operand types (as a
percentage of all occurrences of each operator, with
<keyword>[</keyword> denoting array subscripting).  Based on the
translated form of the books benchmark programs.
</caption>
.E_TABLE

.TABLE postfix_op_tok
: l 1.8cm 2.1cm l 1.8cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword>-></keyword>, &zp;9.8&ze;, &zp;97.5&ze;, <keyword>v++</keyword> <keyword>)</keyword>, &zp;41.4&ze;, &zp;1.4&ze;
identifier <keyword>v++</keyword>, &zp;0.9&ze;, &zp;96.9&ze;, <keyword>v++</keyword> <keyword>;</keyword>, &zp;39.9&ze;, &zp;1.4&ze;
identifier <keyword>v--</keyword>, &zp;0.1&ze;, &zp;96.1&ze;, <keyword>v++</keyword> <keyword>]</keyword>, &zp;4.6&ze;, &zp;1.3&ze;
identifier <keyword>.</keyword>, &zp;3.6&ze;, &zp;83.8&ze;, <keyword>v++</keyword> <keyword>=</keyword>, &zp;7.6&ze;, &zp;0.7&ze;
<keyword>]</keyword> <keyword>.</keyword>, &zp;20.3&ze;, &zp;15.4&ze;, <keyword>v--</keyword> <keyword>;</keyword>, &zp;58.4&ze;, &zp;0.3&ze;
<keyword>-></keyword> identifier, &zp;100.0&ze;, &zp;10.1&ze;, <keyword>v--</keyword> <keyword>)</keyword>, &zp;29.1&ze;, &zp;0.1&ze;
<keyword>.</keyword> identifier, &zp;100.0&ze;, &zp;4.2&ze;, , , 
<caption>
Common token pairs involving <keyword>.</keyword>,
<keyword>-></keyword>, <keyword>++</keyword>, or
<keyword>--</keyword> (as a percentage of all occurrences of each
token).  Based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE


983

.TABLE array_dims
: c r r r
Dimensions, Parameters, Block Scope, File Scope
 1 , 100.0 , 97.9 , 91.9
 2 , 0.0 , 2.0 , 7.5
 3 , 0.0 , 0.1 , 0.6
<caption>
Occurrence of object declarations having an array type with the given
number of dimensions (as a percentage of all array types in the given
scope; with local scope separated into parameters and everything
else).  Based on the translated form of the books benchmark programs.
</caption>
.E_TABLE


992

.TABLE
Name, Within File, Not in File, Via Pointer
cccp,     191 (&z2;&zcz;1&comma;414),   &z2;4 (&z2;&zcz;&zcz;3),  &z;1 (&z;&zcz;140)
compress, &z;27 (&z2;&zcz;4&comma;283), &z2;0 (&z2;&zcz;&zcz;0),  &z;0 (&z3;&zcz;0)
eqn,    &z;81 (&z2;&zcz;6&comma;959), 144 (&zcz;33&comma;534),  &z;0 (&z3;&zcz;0)
espresso, 167 (&z;&zcz;55&comma;696), 982 (&zc;925&comma;710),   11 (&z;60&comma;965)
lex,      110 (&z;&zcz;63&comma;240), 234 (&z;&zcz;4&comma;675),  &z;0 (&z3;&zcz;0)
tbl,    &z;91 (&z2;&zcz;9&comma;616), 364 (&zcz;37&comma;809),  &z;0 (&z3;&zcz;0)
xlist,    331 (10&comma;308&comma;201), 834 (8&comma;453&comma;735),  &z;4 (479&comma;473)
yacc,     118 (&z;&zcz;34&comma;146), &z;81 (&z;&zcz;3&comma;323),  &z;0 (&z3;&zcz;0)
<caption>

Static count of number of calls: to functions defined within the same
source file as the call, not defined in the file containing the call,
and made via pointers-to functions.  Parenthesized numbers are the
corresponding dynamic count.  Adapted from Chang, Mahlke, Chen, and Hwu
<book Chang_92>.

</caption>
.E_TABLE

.TABLE
: l r r r r l r r r r
Program,   Leaf, Non-Leaf, Indirect, Direct, Program,   Leaf, NonLeaf, Indirect, Direct
burg,      72.3,   27.7,  0.1,   99.9, eqntott,   85.3,   14.7, 68.7,   31.3
ditroff,   14.7,   85.3,  1.0,   99.0, espresso,  75.0,   25.0,  4.0,   96.0
tex,       20.0,   80.0,  0.0,  100.0, gcc,       28.9,   71.1,  5.4,   94.6
xfig,      35.5,   64.5,  6.2,   93.8, li,        13.4,   86.6,  2.9,   97.1
xtex,      50.6,   49.4,  3.0,   97.0, sc,        29.1,   70.9,  0.1,   99.9
compress,   0.1,   99.9,  0.0,  100.0, Mean,      38.6,   61.4,  8.3,   91.7
<caption>
Percentage of function invocations during execution of various
programs in SPECint92.  The column headed <phrase>Leaf</phrase> lists
percentage of calls to leaf functions, <phrase>NonLeaf</phrase> is
for nonleaf functions (the issues surrounding this distinction are
discussed elsewhere).  The column headed <phrase>Direct</phrase>
lists percentages of calls where a function name appeared in the
expression, <phrase>Indirect</phrase> is where the function address
was obtained via expression evaluation.  Adapted from Calder,
Grunwald, and Zorn <book Calder_95b>.
</caption>
.E_TABLE

.TABLE Calder95b1
: l r r r r r
Program Name, Instructions Executed, Function Calls Invoked, Instructions/Call, Total I-calls, Instructions/I-call
burg,       390&comma;772&comma;349,       6&comma;342&comma;378,    61.6,      8&comma;753,  44&comma;644.4
ditroff,     38&comma;893&comma;571,     663&comma;454,    58.6,      6&comma;920,   5&comma;620.5
tex,        147&comma;811&comma;789,     853&comma;193,   173.2,          0,       &endash;
xfig,        33&comma;203&comma;506,     536&comma;004,    61.9,     33&comma;312,    996.7
xtex,        23&comma;797&comma;633,     207&comma;047,   114.9,      6&comma;227,   3&comma;821.7
compress,    92&comma;629&comma;716,     251&comma;423,   368.4,          0,       &endash;
eqntott,  1&comma;810&comma;540&comma;472,   4&comma;680&comma;514,   386.8,  3&comma;215&comma;048,    563.1
espresso,   513&comma;008&comma;232,   2&comma;094&comma;635,   244.9,     84&comma;751,   6&comma;053.1
gcc,        143&comma;737&comma;904,   1&comma;490&comma;292,    96.4,     80&comma;809,   1&comma;778.7
li,       1&comma;354&comma;926&comma;022,  31&comma;857&comma;867,    42.5,    919&comma;965,   1&comma;472.8
sc,         917&comma;754&comma;841,  12&comma;903&comma;351,    71.1,     13&comma;785,  66&comma;576.3
dhrystone,  608&comma;057&comma;060,  18&comma;000&comma;726,    33.8,          0,      &endash;
Program mean, 497&comma;006&comma;912,   5&comma;625&comma;468,   152.8,    397&comma;233,  14&comma;614.1
<caption>
Count of instructions executed and function calls made during
execution of various SPECint92 programs on an Alpha AXP21064
processor.  <phrase>Function calls invoked</phrase> includes indirect
function calls; <phrase>Instructions/Call</phrase> is the number of
instructions executed per call; <phrase>Total I-calls</phrase> is the
number of indirect function calls made; and
<phrase>Instructions/I-call</phrase> is the number of instructions
executed per indirect call.
Adapted from Calder, Grunwald, and Zorn <book Calder_95b>.
</caption>
.E_TABLE

.TABLE
: l r r l r r
Program,   Mean,   Std. Dev., Program,   Mean,   Std. Dev.
burg,     10.5,   30.84, eqntott,   6.5,    1.39
ditroff,   7.1,    2.45, espresso, 11.5,    4.67
tex,       7.9,    2.71, gcc,       9.9,    2.44
xfig,     11.6,    4.47, li,       42.0,   14.50
xtex,     14.2,    4.27, sc,        6.8,    1.41
compress,  4.0,    0.07, Mean,     12.0,    6.29
<caption>
Mean and standard deviation of call stack depth for various programs in
SPECint92.  Adapted from Calder, Grunwald, and Zorn <book Calder_95b>.
</caption>
.E_TABLE


993

.TABLE cheng_calls
: l r r r r r r
Benchmark, Lines Code, Functions Defined, Library Functions, Direct Calls, Indirect Calls, &amp; Function
008.espresso, 14&comma;838,  361,  24,  2&comma;674,  15,  12
023.eqntott,  12&comma;053,   62,  21,   358,  11,   5
072.sc,        8&comma;639,  179,  53,  1&comma;459,   2,  20
085.cc1,      90&comma;857, 1&comma;452,  44,  8&comma;332,  67, 588
124.m88ksim,  19&comma;092,  252,  36,  1&comma;496,   3,  57
126.gcc,     205&comma;583, 2&comma;019,  45, 19&comma;731, 132, 229
130.li,        7&comma;597,  357,  27,  1&comma;267,   4, 190
132.ijpeg,    29&comma;290,  477,  18,  1&comma;016, 641, 188
134.perl,     26&comma;874,  276,  72,  4&comma;367,   3,   3
147.vortex,   67&comma;205,  923,  33,  8&comma;521,  15,  44
<caption>
Static count of functions defined, library functions called, direct
and indirect calls to them and number of functions that had their
addresses taken in SPECint95.  Adapted from Cheng <book Cheng_00>.
</caption>
.E_TABLE


995

Information on parameter types is given elsewhere (see <tableref
href="param_type">).

.TABLE arg_type
: l r l r
Type, %, Type, %
<keyword>struct</keyword> <keyword>*</keyword>, &zp;26.8&ze;, <keyword>void</keyword> <keyword>*</keyword>, &zp;4.0&ze;
<keyword>int</keyword>, &zp;16.5&ze;, <keyword>union</keyword> <keyword>*</keyword>, &zp;3.4&ze;
<keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;9.7&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.5&ze;
<keyword>char</keyword> <keyword>*</keyword>, &zp;8.4&ze;, <keyword>enum</keyword>, &zp;2.1&ze;
other-types, &zp;8.0&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.9&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;7.1&ze;, <keyword>const</keyword> <keyword>void</keyword> <keyword>*</keyword>, &zp;1.8&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;6.3&ze;, <keyword>long</keyword>, &zp;1.4&ze;
<caption>
Occurrence of various argument types in calls to functions (as a
percentage of argument types in all calls).  Based on the translated
form of the books benchmark programs.
</caption>
.E_TABLE


997

.TABLE ret_type
: l r l r
Type, %, Type, %
<keyword>void</keyword>, &zp;35.8&ze;, <keyword>union</keyword> <keyword>*</keyword>, &zp;3.2&ze;
<keyword>int</keyword>, &zp;30.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;3.1&ze;
<keyword>struct</keyword> <keyword>*</keyword>, &zp;9.1&ze;, <keyword>char</keyword> <keyword>*</keyword>, &zp;3.1&ze;
<keyword>void</keyword> <keyword>*</keyword>, &zp;6.3&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;2.1&ze;
other-types, &zp;5.2&ze;, <keyword>char</keyword>, &zp;1.6&ze;
<caption>
Occurrence of various return types in calls to functions (as a
percentage of the return types of all calls).  Based on the translated
form of the books benchmark programs.
</caption>
.E_TABLE


1023

.TABLE selnest
: l r r r r r r
<keyword>.</keyword> \ <keyword>-></keyword> , 0, 1, 2, 3, 4, 5
0, &zs;0&ze; , &zs;165745&ze; , &zs;10396&ze; , &zs;522&ze; , &zs;36&ze; , &zs;4&ze; 
1, &zs;28160&ze; , &zs;34065&ze; , &zs;3437&ze; , &zs;230&ze; , &zs;7&ze; , &zs;0&ze; 
2, &zs;3252&ze; , &zs;6643&ze; , &zs;579&ze; , &zs;26&ze; , &zs;0&ze; , &zs;0&ze; 
3, &zs;363&ze; , &zs;309&ze; , &zs;35&ze; , &zs;5&ze; , &zs;0&ze; , &zs;0&ze; 
4, &zs;16&ze; , &zs;33&ze; , &zs;2&ze; , &zs;0&ze; , &zs;0&ze; , &zs;0&ze; 
5, &zs;0&ze; , &zs;15&ze; , &zs;0&ze; , &zs;0&ze; , &zs;0&ze; , &zs;0&ze; 
<caption>
Number of member selection operators of the same
object (number of dot selections is indicated down the left, and the
number of indirect selections across the top).  For instance,
<c_code>x.m1->m2</c_code> is counted as one occurrence of the dot
selection operator with one instance of the indirect selection
operator.  Based on the translated form of the books benchmark
programs.
</caption>
.E_TABLE


1070

See the Usage section of <c_syntax>postfix-expression</c_syntax><ref
postfix-expression, syntax> for <keyword>++</keyword> and
<keyword>--</keyword> digraph percentages.

.TABLE unary_op_tok
: l 1.8cm 2.1cm l 1.8cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
<keyword>!</keyword> defined, &zp;2.0&ze;, &zp;16.7&ze;, <keyword>!</keyword> <keyword>(</keyword>, &zp;14.5&ze;, &zp;0.5&ze;
<keyword>*v</keyword> <keyword>--v</keyword>, &zp;0.3&ze;, &zp;7.8&ze;, <keyword>-v</keyword> identifier, &zp;30.2&ze;, &zp;0.4&ze;
<keyword>-v</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.3&ze;, &zp;6.7&ze;, <keyword>*v</keyword> <keyword>(</keyword>, &zp;9.0&ze;, &zp;0.4&ze;
<keyword>*v</keyword> <keyword>++v</keyword>, &zp;0.5&ze;, &zp;6.3&ze;, <keyword>~</keyword> <c_syntax>integer-constant</c_syntax>, &zp;20.1&ze;, &zp;0.2&ze;
<keyword>!</keyword> <keyword>--v</keyword>, &zp;0.2&ze;, &zp;4.8&ze;, <keyword>++v</keyword> identifier, &zp;97.3&ze;, &zp;0.1&ze;
<keyword>-v</keyword> <c_syntax>integer-constant</c_syntax>, &zp;69.0&ze;, &zp;4.1&ze;, <keyword>~</keyword> identifier, &zp;56.3&ze;, &zp;0.1&ze;
<keyword>&v</keyword> identifier, &zp;96.1&ze;, &zp;1.9&ze;, <keyword>~</keyword> <keyword>(</keyword>, &zp;23.4&ze;, &zp;0.1&ze;
<keyword>sizeof</keyword> <keyword>(</keyword>, &zp;97.5&ze;, &zp;1.8&ze;, <keyword>+v</keyword> <c_syntax>integer-constant</c_syntax>, &zp;49.0&ze;, &zp;0.0&ze;
<keyword>*v</keyword> identifier, &zp;86.8&ze;, &zp;1.0&ze;, <keyword>--v</keyword> identifier, &zp;97.1&ze;, &zp;0.0&ze;
<keyword>!</keyword> identifier, &zp;81.9&ze;, &zp;0.8&ze;, , , 
<caption>
Common token pairs involving <keyword>sizeof</keyword>,
<c_syntax>unary-operator</c_syntax>, prefix <keyword>++</keyword>, or
prefix <keyword>--</keyword> (as a percentage of all occurrences of
each token).  Based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE

.FIG
unarycons
<caption>
Integer constant values appearing as the operand of the unary minus
and unary <keyword>~</keyword> operators.  Based on the visible form
of the <file>.c</file> files.
</caption>
.E_FIG

.TABLE unary_oprnd
: c l r c l r c l r
Operator, Type, %, Operator, Type, %, Operator, Type, %
<keyword>-v</keyword>, _<keyword>int</keyword>, &zp;96.0&ze;, <keyword>~</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;6.8&ze;, <keyword>!</keyword>, _<keyword>long</keyword>, &zp;2.7&ze;
<keyword>*v</keyword>, ptr-to, &zp;95.3&ze;, <keyword>&v</keyword>, <keyword>int</keyword>, &zp;6.2&ze;, <keyword>~</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.5&ze;
<keyword>+v</keyword>, _<keyword>int</keyword>, &zp;72.2&ze;, <keyword>~</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;6.0&ze;, <keyword>&v</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.4&ze;
<keyword>--v</keyword>, <keyword>int</keyword>, &zp;54.7&ze;, <keyword>+v</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;5.6&ze;, <keyword>!</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.1&ze;
<keyword>!</keyword>, <keyword>int</keyword>, &zp;50.0&ze;, <keyword>+v</keyword>, <keyword>long</keyword>, &zp;5.6&ze;, <keyword>~</keyword>, <keyword>long</keyword>, &zp;2.0&ze;
<keyword>~</keyword>, _<keyword>int</keyword>, &zp;49.3&ze;, <keyword>+v</keyword>, <keyword>float</keyword>, &zp;5.6&ze;, <keyword>++v</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.9&ze;
<keyword>&v</keyword>, other-types, &zp;45.1&ze;, <keyword>!</keyword>, other-types, &zp;5.6&ze;, <keyword>~</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.7&ze;
<keyword>++v</keyword>, <keyword>int</keyword>, &zp;43.8&ze;, <keyword>++v</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;5.2&ze;, <keyword>~</keyword>, _<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.7&ze;
<keyword>++v</keyword>, ptr-to, &zp;33.3&ze;, <keyword>&v</keyword>, <keyword>struct</keyword> <keyword>*</keyword>, &zp;4.9&ze;, <keyword>!</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.6&ze;
<keyword>~</keyword>, <keyword>int</keyword>, &zp;28.5&ze;, <keyword>--v</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;4.7&ze;, <keyword>~</keyword>, other-types, &zp;1.6&ze;
<keyword>--v</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;22.1&ze;, <keyword>!</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;4.7&ze;, <keyword>-v</keyword>, _<keyword>double</keyword>, &zp;1.4&ze;
<keyword>!</keyword>, ptr-to, &zp;20.1&ze;, <keyword>*v</keyword>, fnptr-to, &zp;4.1&ze;, <keyword>-v</keyword>, other-types, &zp;1.3&ze;
<keyword>--v</keyword>, ptr-to, &zp;14.6&ze;, <keyword>&v</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;4.0&ze;, <keyword>++v</keyword>, <keyword>long</keyword>, &zp;1.2&ze;
<keyword>&v</keyword>, <keyword>struct</keyword>, &zp;13.9&ze;, <keyword>--v</keyword>, other-types, &zp;4.0&ze;, <keyword>-v</keyword>, <keyword>int</keyword>, &zp;1.2&ze;
<keyword>&v</keyword>, <keyword>char</keyword>, &zp;13.1&ze;, <keyword>&v</keyword>, <keyword>long</keyword>, &zp;3.4&ze;, <keyword>!</keyword>, _<keyword>int</keyword>, &zp;1.2&ze;
<keyword>++v</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;12.6&ze;, <keyword>&v</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.0&ze;, <keyword>++v</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.1&ze;
<keyword>+v</keyword>, <keyword>int</keyword>, &zp;11.1&ze;, <keyword>&v</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.9&ze;, <keyword>&v</keyword>, <keyword>char</keyword> <keyword>*</keyword>, &zp;1.1&ze;
<keyword>!</keyword>, <keyword>char</keyword>, &zp;9.2&ze;, <keyword>!</keyword>, <keyword>enum</keyword>, &zp;2.9&ze;, , , 
<caption>
Occurrence of the <c_syntax>unary-operator</c_syntax>s, prefix
<keyword>++</keyword>, and prefix <keyword>--</keyword> having
particular operand types (as a percentage of all occurrences of the
particular operator; an <phrase>_</phrase> prefix indicates a literal
operand).  Based on the translated form of the books benchmark
programs.
</caption>
.E_TABLE


1093

.TABLE log_not_context
: l r r
Context, % of <keyword>!</keyword>, % of Contexts
<keyword>if</keyword> control-expression, &zp;91.0&ze;, &zp;17.4&ze;
<keyword>while</keyword> control-expression, &zp;2.3&ze;, &zp;8.2&ze;
<keyword>for</keyword> control-expression, &zp;0.3&ze;, &zp;0.7&ze;
<keyword>switch</keyword> control-expression, &zp;0.0&ze;, &zp;0.0&ze;
other contexts, &zp;6.4&ze;, &emdash;
<caption>
Occurrence of the unary <keyword>!</keyword> operator in various
contexts (as a percentage of all occurrences of this operator and the
percentage of all occurrences of the given context that contains this
operator).  Based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE


1108

.TABLE sizeof_oprnd
: l r l r
Type, %, Type, %
<keyword>struct</keyword>, &zp;48.2&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.7&ze;
<keyword>[</keyword> <keyword>]</keyword>, &zp;12.2&ze;, <keyword>struct</keyword> <keyword>*</keyword>, &zp;2.6&ze;
<keyword>int</keyword>, &zp;11.6&ze;, <keyword>char</keyword>, &zp;2.0&ze;
other-types, &zp;4.7&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.5&ze;
<keyword>long</keyword>, &zp;3.8&ze;, <keyword>char</keyword> <keyword>*</keyword>, &zp;1.5&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.6&ze;, <keyword>signed</keyword> <keyword>int</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;3.4&ze;, <keyword>union</keyword>, &zp;1.1&ze;
<caption>
Occurrence of the <keyword>sizeof</keyword> operator having
particular operand types (as a percentage of all occurrences of this
operator).  Based on the translated form of the books benchmark
programs.
</caption>
.E_TABLE


1124

Usage information on implicit conversions is given elsewhere (see
<tableref href="imp_conv">).

.TABLE cast_oprnd
: l l r l l r
To Type, From Type, %, To Type, From Type, %
<keyword>(</keyword> other-types <keyword>)</keyword>, other-types, &zp;40.1&ze;, <keyword>(</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;1.6&ze;
<keyword>(</keyword> <keyword>void</keyword> <keyword>*</keyword> <keyword>)</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;18.9&ze;, <keyword>(</keyword> <keyword>union</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;1.5&ze;
<keyword>(</keyword> <keyword>struct</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>struct</keyword> <keyword>*</keyword>, &zp;11.2&ze;, <keyword>(</keyword> <keyword>void</keyword> <keyword>)</keyword>, <keyword>long</keyword>, &zp;1.3&ze;
<keyword>(</keyword> <keyword>struct</keyword> <keyword>*</keyword> <keyword>)</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;4.2&ze;, <keyword>(</keyword> <keyword>unsigned</keyword> <keyword>long</keyword> <keyword>)</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.3&ze;
<keyword>(</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>char</keyword> <keyword>*</keyword>, &zp;4.0&ze;, <keyword>(</keyword> <keyword>int</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;1.3&ze;
<keyword>(</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>struct</keyword> <keyword>*</keyword>, &zp;3.9&ze;, <keyword>(</keyword> <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;1.2&ze;
<keyword>(</keyword> <keyword>struct</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;2.8&ze;, <keyword>(</keyword> <keyword>enum</keyword> <keyword>)</keyword>, int:8 &zs;24&ze;, &zp;1.2&ze;
<keyword>(</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>)</keyword>, <keyword>int</keyword>, &zp;1.7&ze;, <keyword>(</keyword> <keyword>char</keyword> <keyword>)</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.2&ze;
<keyword>(</keyword> <keyword>struct</keyword> <keyword>*</keyword> <keyword>)</keyword>, <keyword>char</keyword> <keyword>*</keyword>, &zp;1.7&ze;, <keyword>(</keyword> <keyword>unsigned</keyword> <keyword>long</keyword> <keyword>)</keyword>, ptr-to <keyword>*</keyword>, &zp;1.0&ze;
<caption>
Occurrence of the cast operator having particular operand types (as a
percentage of all occurrences of this operator).  Based on the
translated form of the books benchmark programs.
</caption>
.E_TABLE


1133

.TABLE mult_op_tok
: l 1.8cm 2.1cm l 1.8cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword>*</keyword>, &zp;3.4&ze;, &zp;92.1&ze;, <keyword>/</keyword> <keyword>sizeof</keyword>, &zp;9.0&ze;, &zp;3.6&ze;
identifier <keyword>%</keyword>, &zp;0.0&ze;, &zp;57.7&ze;, <keyword>*</keyword> identifier, &zp;76.5&ze;, &zp;2.8&ze;
identifier <keyword>/</keyword>, &zp;0.1&ze;, &zp;54.3&ze;, <keyword>*</keyword> <keyword>)</keyword>, &zp;14.4&ze;, &zp;2.0&ze;
<keyword>)</keyword> <keyword>/</keyword>, &zp;0.3&ze;, &zp;33.9&ze;, <c_syntax>floating-constant</c_syntax> <keyword>/</keyword>, &zp;5.8&ze;, &zp;1.8&ze;
<keyword>)</keyword> <keyword>%</keyword>, &zp;0.1&ze;, &zp;31.8&ze;, <keyword>/</keyword> <c_syntax>integer-constant</c_syntax>, &zp;53.5&ze;, &zp;0.5&ze;
<keyword>*</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.2&ze;, &zp;12.5&ze;, <keyword>%</keyword> <c_syntax>integer-constant</c_syntax>, &zp;44.8&ze;, &zp;0.1&ze;
<keyword>*</keyword> <keyword>sizeof</keyword>, &zp;1.6&ze;, &zp;11.2&ze;, <keyword>/</keyword> identifier, &zp;27.5&ze;, &zp;0.1&ze;
<c_syntax>integer-constant</c_syntax> <keyword>/</keyword>, &zp;0.1&ze;, &zp;8.5&ze;, <c_syntax>floating-constant</c_syntax> <keyword>*</keyword>, &zp;6.8&ze;, &zp;0.1&ze;
&comma; <keyword>%</keyword>, &zp;0.0&ze;, &zp;6.5&ze;, <keyword>/</keyword> <keyword>(</keyword>, &zp;7.9&ze;, &zp;0.1&ze;
<keyword>/</keyword> <c_syntax>floating-constant</c_syntax>, &zp;2.0&ze;, &zp;6.4&ze;, <keyword>%</keyword> identifier, &zp;47.6&ze;, &zp;0.0&ze;
<keyword>*</keyword> <keyword>*v</keyword>, &zp;1.4&ze;, &zp;4.4&ze;, , , 
<caption>
Common token pairs involving multiplicative operators (as a
percentage of all occurrences of each token).  Based on the
visible form of the <file>.c</file> files.  Note: a consequence of
the method used to perform the counts is that occurrences of the
sequence <phrase>identifier <keyword>*</keyword></phrase> are over
estimated (e.g., occurrences of a typedef name followed by a
<keyword>*</keyword> are included in the counts).
</caption>
.E_TABLE

.FIG
multcons
<caption>
Number of integer constants appearing as the right operand of the
multiplicative operators.  Based on the visible form of the
<file>.c</file> files.
</caption>
.E_FIG


1134

.TABLE mult_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>int</keyword>, <keyword>%</keyword>, _<keyword>int</keyword>, &zp;40.6&ze;, _<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>*</keyword>, _<keyword>int</keyword>, &zp;2.8&ze;
<keyword>int</keyword>, <keyword>/</keyword>, _<keyword>int</keyword>, &zp;25.6&ze;, <keyword>int</keyword>, <keyword>/</keyword>, <keyword>float</keyword>, &zp;2.7&ze;
other-types, <keyword>*</keyword>, other-types, &zp;18.1&ze;, <keyword>long</keyword>, <keyword>/</keyword>, _<keyword>int</keyword>, &zp;2.5&ze;
other-types, <keyword>/</keyword>, other-types, &zp;16.2&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>%</keyword>, <keyword>int</keyword>, &zp;2.3&ze;
_<keyword>int</keyword>, <keyword>*</keyword>, _<keyword>int</keyword>, &zp;13.4&ze;, _<keyword>int</keyword>, <keyword>*</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.2&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>%</keyword>, _<keyword>int</keyword>, &zp;12.6&ze;, _<keyword>int</keyword>, <keyword>*</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.2&ze;
<keyword>int</keyword>, <keyword>%</keyword>, <keyword>int</keyword>, &zp;12.2&ze;, _<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>*</keyword>, <keyword>int</keyword>, &zp;2.1&ze;
<keyword>int</keyword>, <keyword>*</keyword>, _<keyword>int</keyword>, &zp;12.1&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>*</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.9&ze;
_<keyword>int</keyword>, <keyword>/</keyword>, _<keyword>int</keyword>, &zp;11.0&ze;, <keyword>int</keyword>, <keyword>%</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.8&ze;
_<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>/</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;9.9&ze;, <keyword>float</keyword>, <keyword>/</keyword>, <keyword>float</keyword>, &zp;1.8&ze;
_<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>*</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;9.5&ze;, _<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>/</keyword>, _<keyword>int</keyword>, &zp;1.6&ze;
<keyword>int</keyword>, <keyword>*</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;8.8&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>%</keyword>, <keyword>int</keyword>, &zp;1.6&ze;
<keyword>float</keyword>, <keyword>*</keyword>, <keyword>float</keyword>, &zp;8.8&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>%</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.5&ze;
other-types, <keyword>%</keyword>, other-types, &zp;7.3&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>/</keyword>, _<keyword>int</keyword>, &zp;1.3&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>/</keyword>, _<keyword>int</keyword>, &zp;6.6&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>/</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.3&ze;
_<keyword>int</keyword>, <keyword>*</keyword>, <keyword>int</keyword>, &zp;6.5&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>*</keyword>, _<keyword>int</keyword>, &zp;1.3&ze;
<keyword>int</keyword>, <keyword>*</keyword>, <keyword>int</keyword>, &zp;5.9&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>*</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>/</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;5.8&ze;, <keyword>int</keyword>, <keyword>/</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>/</keyword>, _<keyword>int</keyword>, &zp;5.3&ze;, _<keyword>double</keyword>, <keyword>/</keyword>, _<keyword>double</keyword>, &zp;1.2&ze;
<keyword>int</keyword>, <keyword>/</keyword>, <keyword>int</keyword>, &zp;5.0&ze;, <keyword>float</keyword>, <keyword>*</keyword>, _<keyword>int</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>%</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;4.2&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>*</keyword>, _<keyword>int</keyword>, &zp;1.0&ze;
<keyword>int</keyword>, <keyword>%</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;4.2&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>%</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.0&ze;
<keyword>int</keyword>, <keyword>%</keyword>, _<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;3.9&ze;, <keyword>int</keyword>, <keyword>/</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.0&ze;
<keyword>long</keyword>, <keyword>%</keyword>, _<keyword>int</keyword>, &zp;3.7&ze;, _<keyword>int</keyword>, <keyword>*</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.0&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>%</keyword>, _<keyword>int</keyword>, &zp;3.1&ze;, , , , 
<caption>
Occurrence of multiplicative operators having particular (left and
right) operand types (as a percentage of all occurrences of each
operator; an <phrase>_</phrase> prefix indicates a literal operand).
Based on the translated form of the books benchmark programs.
</caption>
.E_TABLE


1143

.TABLE add_op_tok
: l 1.8cm 2.1cm l 1.8cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword>+</keyword>, &zp;1.0&ze;, &zp;77.5&ze;, <keyword>+</keyword> <keyword>sizeof</keyword>, &zp;1.5&ze;, &zp;3.8&ze;
identifier <keyword>-</keyword>, &zp;0.5&ze;, &zp;75.7&ze;, <keyword>+</keyword> <c_syntax>integer-constant</c_syntax>, &zp;33.7&ze;, &zp;1.9&ze;
<keyword>)</keyword> <keyword>-</keyword>, &zp;0.3&ze;, &zp;14.7&ze;, <keyword>-</keyword> <c_syntax>integer-constant</c_syntax>, &zp;44.0&ze;, &zp;1.3&ze;
<keyword>)</keyword> <keyword>+</keyword>, &zp;0.6&ze;, &zp;12.9&ze;, <keyword>+</keyword> identifier, &zp;55.4&ze;, &zp;0.7&ze;
<keyword>+</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.4&ze;, &zp;7.7&ze;, <keyword>+</keyword> <keyword>(</keyword>, &zp;8.3&ze;, &zp;0.4&ze;
<c_syntax>integer-constant</c_syntax> <keyword>+</keyword>, &zp;0.4&ze;, &zp;6.3&ze;, <keyword>-</keyword> identifier, &zp;46.1&ze;, &zp;0.3&ze;
<c_syntax>integer-constant</c_syntax> <keyword>-</keyword>, &zp;0.2&ze;, &zp;5.8&ze;, <keyword>-</keyword> <keyword>(</keyword>, &zp;6.2&ze;, &zp;0.1&ze;
<caption>
Common token pairs involving additive operators (as a percentage of
all occurrences of each token).  Based on the visible form of the
<file>.c</file> files.
</caption>
.E_TABLE

.FIG
addcons
<caption>
Number of integer constants appearing as the right operand of
additive operators; based on the visible form of the <file>.c</file>
files.
</caption>
.E_FIG


1144

.TABLE add_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>int</keyword>, <keyword>+</keyword>, _<keyword>int</keyword>, &zp;37.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>+</keyword>, _<keyword>int</keyword>, &zp;2.6&ze;
<keyword>int</keyword>, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;19.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>-</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.4&ze;
other-types, <keyword>+</keyword>, other-types, &zp;16.2&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>-</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;2.2&ze;
other-types, <keyword>-</keyword>, other-types, &zp;16.0&ze;, <keyword>long</keyword>, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;2.2&ze;
_<keyword>int</keyword>, <keyword>+</keyword>, _<keyword>int</keyword>, &zp;11.8&ze;, _<keyword>int</keyword>, <keyword>-</keyword>, <keyword>int</keyword>, &zp;2.1&ze;
<keyword>int</keyword>, <keyword>-</keyword>, <keyword>int</keyword>, &zp;10.8&ze;, ptr-to, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;2.0&ze;
_<keyword>int</keyword>, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;8.8&ze;, <keyword>long</keyword>, <keyword>-</keyword>, <keyword>long</keyword>, &zp;2.0&ze;
ptr-to, <keyword>-</keyword>, ptr-to, &zp;6.4&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>+</keyword>, _<keyword>int</keyword>, &zp;1.7&ze;
ptr-to, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;6.2&ze;, <keyword>float</keyword>, <keyword>+</keyword>, <keyword>float</keyword>, &zp;1.7&ze;
ptr-to, <keyword>+</keyword>, <keyword>long</keyword>, &zp;5.8&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>-</keyword>, <keyword>int</keyword>, &zp;1.5&ze;
<keyword>float</keyword>, <keyword>-</keyword>, <keyword>float</keyword>, &zp;5.0&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;4.9&ze;, <keyword>int</keyword>, <keyword>-</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.4&ze;
<keyword>int</keyword>, <keyword>+</keyword>, <keyword>int</keyword>, &zp;4.7&ze;, _<keyword>int</keyword>, <keyword>+</keyword>, <keyword>int</keyword>, &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;4.2&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>+</keyword>, _<keyword>int</keyword>, &zp;1.2&ze;
ptr-to, <keyword>+</keyword>, <keyword>int</keyword>, &zp;3.7&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;1.1&ze;
_<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;3.1&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>-</keyword>, _<keyword>int</keyword>, &zp;1.1&ze;
ptr-to, <keyword>-</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;3.1&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.0&ze;
ptr-to, <keyword>+</keyword>, _<keyword>int</keyword>, &zp;3.0&ze;, , , , 
<caption>
Occurrence of additive operators having particular operand types (as
a percentage of all occurrences of each operator; an
<phrase>_</phrase> prefix indicates a literal operand).  Based on the
translated form of the books benchmark programs.
</caption>
.E_TABLE


1149

.TABLE sub_ptr_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>char</keyword> <keyword>*</keyword>, &zp;48.9&ze;, <keyword>void</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;26.2&ze;, <keyword>int</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>int</keyword> <keyword>*</keyword>, &zp;1.4&ze;
<keyword>struct</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>struct</keyword> <keyword>*</keyword>, &zp;13.7&ze;, <keyword>unsigned</keyword> <keyword>short</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword> <keyword>*</keyword>, &zp;1.2&ze;
<keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;4.6&ze;, other-types, <keyword>-</keyword>, other-types, &zp;0.0&ze;
<caption>
Occurrence of operands of the subtraction operator having a pointer
type (as a percentage of all occurrences of this operator with
operands having a pointer type).  Based on the translated form of the
books benchmark programs.
</caption>
.E_TABLE


1150

.TABLE addsub_ptr_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;46.0&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>int</keyword>, &zp;1.7&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;27.3&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.7&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>long</keyword>, &zp;26.8&ze;, <keyword>short</keyword> <keyword>*</keyword>, <keyword>-</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.6&ze;
other-types, <keyword>+</keyword>, other-types, &zp;10.6&ze;, <keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.6&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;9.5&ze;, <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, <keyword>int</keyword>, &zp;1.6&ze;
<keyword>struct</keyword> <keyword>*</keyword>, <keyword>-</keyword>, array-index, &zp;9.1&ze;, <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, array-index, &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;8.8&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.3&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;7.4&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, array-index, &zp;1.3&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>int</keyword>, &zp;6.6&ze;, <keyword>void</keyword> <keyword>*</keyword>, <keyword>-</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>int</keyword>, &zp;5.7&ze;, <keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>signed</keyword> <keyword>int</keyword>, &zp;1.2&ze;
<keyword>struct</keyword> <keyword>*</keyword>, <keyword>-</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;4.7&ze;, <keyword>unsigned</keyword> <keyword>long</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>int</keyword>, &zp;1.1&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;3.6&ze;, <keyword>struct</keyword> <keyword>*</keyword>, <keyword>+</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>-</keyword>, _<keyword></keyword> <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.1&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.0&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.9&ze;, <keyword>char</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.0&ze;
<keyword>struct</keyword> <keyword>*</keyword>, <keyword>+</keyword>, <keyword>int</keyword>, &zp;1.8&ze;, other-types, <keyword>-</keyword>, other-types, &zp;0.0&ze;
<caption>
Occurrence of additive operators one of whose operands has a pointer
type (as a percentage of all occurrences of each operator with one
operand having a pointer type).  Based on the translated form of the
books benchmark programs.  Note: in the translator used the result of
the <keyword>sizeof</keyword> operator had type <keyword>unsigned
long</keyword>.
</caption>
.E_TABLE


1171

.TABLE shift_op_tok
: l 1.8cm 2.1cm l 1.8cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword>>></keyword>, &zp;0.1&ze;, &zp;63.9&ze;, <keyword>]</keyword> <keyword><<</keyword>, &zp;0.5&ze;, &zp;5.3&ze;
identifier <keyword><<</keyword>, &zp;0.1&ze;, &zp;37.3&ze;, <keyword><<</keyword> <c_syntax>integer-constant</c_syntax>, &zp;63.4&ze;, &zp;0.8&ze;
<c_syntax>integer-constant</c_syntax> <keyword><<</keyword>, &zp;0.5&ze;, &zp;36.1&ze;, <keyword>>></keyword> <c_syntax>integer-constant</c_syntax>, &zp;79.8&ze;, &zp;0.7&ze;
<keyword>)</keyword> <keyword>>></keyword>, &zp;0.2&ze;, &zp;28.0&ze;, <keyword><<</keyword> identifier, &zp;28.4&ze;, &zp;0.1&ze;
<keyword>)</keyword> <keyword><<</keyword>, &zp;0.2&ze;, &zp;20.3&ze;, <keyword><<</keyword> <keyword>(</keyword>, &zp;8.1&ze;, &zp;0.1&ze;
<keyword>]</keyword> <keyword>>></keyword>, &zp;0.4&ze;, &zp;6.2&ze;, <keyword>>></keyword> identifier, &zp;15.9&ze;, &zp;0.0&ze;
<caption>
Common token pairs involving the shift operators (as a percentage of
all occurrences of each token).  Based on the visible form of the
<file>.c</file> files.
</caption>
.E_TABLE

.FIG
shiftcons
<caption>
Number of integer constants appearing as the right operand of the
shift operators.  Based on the visible form of the <file>.c</file>
files.
</caption>
.E_FIG


1172

.TABLE shift_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>int</keyword>, <keyword>>></keyword>, _<keyword>int</keyword>, &zp;29.4&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;2.8&ze;
_<keyword>int</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;27.1&ze;, _<keyword>long</keyword>, <keyword><<</keyword>, _<keyword>long</keyword>, &zp;2.8&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>>></keyword>, _<keyword>int</keyword>, &zp;26.1&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>>></keyword>, <keyword>int</keyword>, &zp;2.6&ze;
_<keyword>long</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;11.9&ze;, _<keyword>int</keyword>, <keyword>>></keyword>, _<keyword>int</keyword>, &zp;2.5&ze;
<keyword>int</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;11.8&ze;, <keyword>int</keyword>, <keyword>>></keyword>, <keyword>int</keyword>, &zp;2.1&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>>></keyword>, _<keyword>int</keyword>, &zp;11.3&ze;, <keyword>long</keyword>, <keyword>>></keyword>, _<keyword>int</keyword>, &zp;2.0&ze;
_<keyword>int</keyword>, <keyword><<</keyword>, <keyword>int</keyword>, &zp;7.3&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>>></keyword>, <keyword>int</keyword>, &zp;1.8&ze;
<keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>>></keyword>, _<keyword>int</keyword>, &zp;7.0&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;1.8&ze;
other-types, <keyword>>></keyword>, other-types, &zp;6.9&ze;, <keyword>long</keyword>, <keyword>>></keyword>, <keyword>int</keyword>, &zp;1.7&ze;
<keyword>int</keyword>, <keyword><<</keyword>, <keyword>int</keyword>, &zp;6.0&ze;, _<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><<</keyword>, <keyword>int</keyword>, &zp;1.3&ze;
other-types, <keyword><<</keyword>, other-types, &zp;5.8&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>>></keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword><<</keyword>, <keyword>int</keyword>, &zp;5.3&ze;, <keyword>signed</keyword> <keyword>long</keyword>, <keyword>>></keyword>, _<keyword>int</keyword>, &zp;1.2&ze;
_<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;4.9&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;4.2&ze;, <keyword>long</keyword>, <keyword><<</keyword>, _<keyword>int</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>>></keyword>, _<keyword>int</keyword>, &zp;4.0&ze;, <keyword>int</keyword>, <keyword><<</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><<</keyword>, <keyword>int</keyword>, &zp;3.8&ze;, , , , 
<caption>
Occurrence of shift operators having particular operand types (as a
percentage of all occurrences of each operator; an <phrase>_</phrase>
prefix indicates a literal operand).  Based on the translated form of
the books benchmark programs.
</caption>
.E_TABLE


1187

.TABLE rel_op_tok
: l 1.9cm 2.1cm l 1.9cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword><</keyword>, &zp;0.7&ze;, &zp;87.9&ze;, <keyword>>=</keyword> <c_syntax>character-constant</c_syntax>, &zp;3.6&ze;, &zp;1.5&ze;
identifier <keyword>>=</keyword>, &zp;0.2&ze;, &zp;85.9&ze;, <keyword><</keyword> <c_syntax>integer-constant</c_syntax>, &zp;40.0&ze;, &zp;1.3&ze;
identifier <keyword>></keyword>, &zp;0.3&ze;, &zp;85.0&ze;, <keyword>></keyword> <c_syntax>integer-constant</c_syntax>, &zp;53.2&ze;, &zp;0.9&ze;
identifier <keyword><=</keyword>, &zp;0.1&ze;, &zp;84.8&ze;, <keyword>>=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;41.2&ze;, &zp;0.4&ze;
<keyword>)</keyword> <keyword><=</keyword>, &zp;0.1&ze;, &zp;10.4&ze;, <keyword><</keyword> identifier, &zp;53.9&ze;, &zp;0.4&ze;
<keyword>)</keyword> <keyword>>=</keyword>, &zp;0.1&ze;, &zp;10.1&ze;, <keyword><=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;41.0&ze;, &zp;0.2&ze;
<keyword>)</keyword> <keyword><</keyword>, &zp;0.3&ze;, &zp;9.9&ze;, <keyword>></keyword> identifier, &zp;40.1&ze;, &zp;0.2&ze;
<keyword>)</keyword> <keyword>></keyword>, &zp;0.1&ze;, &zp;9.6&ze;, <keyword>>=</keyword> identifier, &zp;50.0&ze;, &zp;0.1&ze;
<keyword><=</keyword> <c_syntax>character-constant</c_syntax>, &zp;7.1&ze;, &zp;1.7&ze;, <keyword><=</keyword> identifier, &zp;45.7&ze;, &zp;0.1&ze;
<caption>
Common token pairs involving relational operators (as a percentage of
all occurrences of each token).  Based on the visible form of the
<file>.c</file> files.
</caption>
.E_TABLE

.FIG
relatcons
<caption>
Number of integer constants appearing as the right operand of
relational operators.  Based on the visible form of the
<file>.c</file> files.
</caption>
.E_FIG

.TABLE
: l 2.2cm l 2.2cm
Word, Occurrences per Million Words, Word, Occurrences per Million Words
great, 464, less, 344
greater, 154, lesser, &z;18
greatest, &z;51, least, &z;45
greatly, &z;33, &endash;, &endash;
&endash;, &endash;, less than, &z;40
<caption>
Occurrences (per million words) of English words that may
be used in natural language sentences expressing some relative state
of affairs.
Based on data from the British National Corpus <book Leech_01>.
</caption>
.E_TABLE

.TABLE rel_context
: l r r r r
Context, % of <keyword><</keyword>, % of <keyword><=</keyword>, % of <keyword>></keyword>, % of <keyword>>=</keyword>
other contexts, &zp;11.5&ze; (&emdash;), (&emdash;), (&emdash;), (&emdash;)
<keyword>if</keyword> control-expression, &zp;76.7&ze; (&zp;3.4&ze;), (&zp;6.7&ze;), (&zp;1.8&ze;), (&zp;6.0&ze;)
<keyword>for</keyword> control-expression, &zp;7.1&ze; (&zp;3.1&ze;), (&zp;65.9&ze;), (&zp;4.5&ze;), (&zp;2.6&ze;)
<keyword>while</keyword> control-expression, &zp;4.8&ze; (&zp;3.9&ze;), (&zp;12.0&ze;), (&zp;2.2&ze;), (&zp;10.4&ze;)
<keyword>switch</keyword> control-expression, &zp;0.0&ze; (&zp;0.0&ze;), (&zp;0.0&ze;), (&zp;0.0&ze;), (&zp;0.0&ze;)
<caption>
Occurrence of relational operators (as a percentage of all
occurrences of the given operator; the parenthesized value is the
percentage of all occurrences of the context that contains the
operator).  Based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE


1189

.TABLE rel_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>int</keyword>, <keyword>>=</keyword>, _<keyword>int</keyword>, &zp;35.3&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>></keyword>, _<keyword>int</keyword>, &zp;2.3&ze;
<keyword>int</keyword>, <keyword>></keyword>, _<keyword>int</keyword>, &zp;35.2&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>>=</keyword>, _<keyword>int</keyword>, &zp;2.3&ze;
<keyword>int</keyword>, <keyword><</keyword>, _<keyword>int</keyword>, &zp;34.8&ze;, ptr-to, <keyword><=</keyword>, ptr-to, &zp;2.3&ze;
<keyword>int</keyword>, <keyword><=</keyword>, _<keyword>int</keyword>, &zp;28.2&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>>=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;2.1&ze;
<keyword>int</keyword>, <keyword><</keyword>, <keyword>int</keyword>, &zp;25.5&ze;, <keyword>long</keyword>, <keyword><=</keyword>, <keyword>long</keyword>, &zp;2.1&ze;
<keyword>int</keyword>, <keyword><=</keyword>, <keyword>int</keyword>, &zp;17.5&ze;, <keyword>long</keyword>, <keyword>>=</keyword>, _<keyword>int</keyword>, &zp;2.0&ze;
other-types, <keyword>></keyword>, other-types, &zp;15.8&ze;, <keyword>float</keyword>, <keyword>></keyword>, _<keyword>int</keyword>, &zp;2.0&ze;
other-types, <keyword><</keyword>, other-types, &zp;15.4&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>></keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.9&ze;
<keyword>int</keyword>, <keyword>></keyword>, <keyword>int</keyword>, &zp;15.0&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>></keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.8&ze;
other-types, <keyword><=</keyword>, other-types, &zp;14.5&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>></keyword>, _<keyword>int</keyword>, &zp;1.8&ze;
other-types, <keyword>>=</keyword>, other-types, &zp;13.2&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword><=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.7&ze;
<keyword>enum</keyword>, <keyword><=</keyword>, _<keyword>int</keyword>, &zp;12.6&ze;, ptr-to, <keyword>>=</keyword>, ptr-to, &zp;1.7&ze;
<keyword>int</keyword>, <keyword>>=</keyword>, <keyword>int</keyword>, &zp;10.8&ze;, <keyword>int</keyword>, <keyword><=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.7&ze;
<keyword>enum</keyword>, <keyword>>=</keyword>, <keyword>enum</keyword>, &zp;7.5&ze;, <keyword>float</keyword>, <keyword>></keyword>, <keyword>float</keyword>, &zp;1.7&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>>=</keyword>, <keyword>int</keyword>, &zp;7.3&ze;, <keyword>char</keyword>, <keyword>>=</keyword>, _<keyword>int</keyword>, &zp;1.7&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>></keyword>, _<keyword>int</keyword>, &zp;6.0&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>>=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.6&ze;
<keyword>long</keyword>, <keyword><</keyword>, _<keyword>int</keyword>, &zp;5.3&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>></keyword>, _<keyword>int</keyword>, &zp;1.5&ze;
ptr-to, <keyword>></keyword>, ptr-to, &zp;4.1&ze;, <keyword>double</keyword>, <keyword><=</keyword>, _<keyword>double</keyword>, &zp;1.5&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword><=</keyword>, _<keyword>int</keyword>, &zp;4.0&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword><</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.7&ze;, <keyword>long</keyword>, <keyword>>=</keyword>, <keyword>long</keyword>, &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>>=</keyword>, _<keyword>int</keyword>, &zp;3.5&ze;, <keyword>int</keyword>, <keyword><</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.4&ze;
<keyword>char</keyword>, <keyword><=</keyword>, _<keyword>int</keyword>, &zp;3.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.3&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>></keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.3&ze;, <keyword>long</keyword>, <keyword><</keyword>, <keyword>long</keyword>, &zp;1.3&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword><=</keyword>, _<keyword>int</keyword>, &zp;3.1&ze;, _<keyword>long</keyword>, <keyword>>=</keyword>, _<keyword>long</keyword>, &zp;1.3&ze;
<keyword>long</keyword>, <keyword>></keyword>, <keyword>long</keyword>, &zp;2.9&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword><=</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.2&ze;
ptr-to, <keyword><</keyword>, ptr-to, &zp;2.8&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>></keyword>, <keyword>int</keyword>, &zp;1.2&ze;
<keyword>int</keyword>, <keyword><</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;2.7&ze;, <keyword>float</keyword>, <keyword><</keyword>, _<keyword>int</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><=</keyword>, _<keyword>int</keyword>, &zp;2.6&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword><=</keyword>, _<keyword>int</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword><</keyword>, _<keyword>int</keyword>, &zp;2.5&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword><</keyword>, _<keyword>int</keyword>, &zp;1.1&ze;
_<keyword>long</keyword>, <keyword>>=</keyword>, <keyword>long</keyword>, &zp;2.5&ze;, <keyword>float</keyword>, <keyword><</keyword>, <keyword>float</keyword>, &zp;1.1&ze;
<keyword>long</keyword>, <keyword>></keyword>, _<keyword>int</keyword>, &zp;2.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>></keyword>, <keyword>int</keyword>, &zp;1.0&ze;
<keyword>enum</keyword>, <keyword>>=</keyword>, _<keyword>int</keyword>, &zp;2.5&ze;, <keyword>long</keyword>, <keyword>>=</keyword>, <keyword>int</keyword>, &zp;1.0&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>>=</keyword>, <keyword>int</keyword>, &zp;2.4&ze;, <keyword>float</keyword>, <keyword><=</keyword>, _<keyword>int</keyword>, &zp;1.0&ze;
<caption>
Occurrence of relational operators having particular operand types
(as a percentage of all occurrences of each operator; an
<phrase>_</phrase> prefix indicates a literal operand).  Based on the
translated form of the books benchmark programs.
</caption>
.E_TABLE


1190

.TABLE rel_ptr_oprnd
: 2.9cm 0.15cm 2.9cm 0.5cm 2.9cm 0.15cm 2.9cm 0.3cm
Left Operand, Op, Right Operand, %, Left Operand, Op, Right Operand, %
<keyword>char</keyword> <keyword>*</keyword>, <keyword>></keyword>, <keyword>char</keyword> <keyword>*</keyword>, &zp;67.5&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>></keyword>, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;4.0&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>char</keyword> <keyword>*</keyword>, &zp;39.6&ze;, other-types, <keyword>></keyword>, other-types, &zp;3.8&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>char</keyword> <keyword>*</keyword>, &zp;26.9&ze;, <keyword>int</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>int</keyword> <keyword>*</keyword>, &zp;3.6&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>char</keyword> <keyword>*</keyword>, &zp;25.8&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;3.6&ze;
<keyword>struct</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>struct</keyword> <keyword>*</keyword>, &zp;23.2&ze;, <keyword>struct</keyword> <keyword>*</keyword>, <keyword>></keyword>, <keyword>struct</keyword> <keyword>*</keyword>, &zp;3.1&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;22.8&ze;, <keyword>short</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>short</keyword> <keyword>*</keyword>, &zp;3.0&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;21.0&ze;, other-types, <keyword><</keyword>, other-types, &zp;2.8&ze;
<keyword>short</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>short</keyword> <keyword>*</keyword>, &zp;16.1&ze;, <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>*</keyword>, &zp;2.6&ze;
<keyword>struct</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>struct</keyword> <keyword>*</keyword>, &zp;14.9&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;2.6&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;13.4&ze;, <keyword>const</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>const</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;2.0&ze;
<keyword>signed</keyword> <keyword>int</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>signed</keyword> <keyword>int</keyword> <keyword>*</keyword>, &zp;13.1&ze;, <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>*</keyword>, <keyword>></keyword>, <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>*</keyword>, &zp;1.9&ze;
<keyword>struct</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>struct</keyword> <keyword>*</keyword>, &zp;13.0&ze;, <keyword>unsigned</keyword> <keyword>long</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword> <keyword>*</keyword>, &zp;1.8&ze;
<keyword>void</keyword> <keyword>*</keyword>, <keyword>></keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;11.0&ze;, other-types, <keyword><=</keyword>, other-types, &zp;1.8&ze;
<keyword>void</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;9.4&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;1.8&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>></keyword>, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;8.7&ze;, <keyword>void</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;1.6&ze;
<keyword>unsigned</keyword> <keyword>short</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword> <keyword>*</keyword>, &zp;7.9&ze;, <keyword>unsigned</keyword> <keyword>short</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword> <keyword>*</keyword>, &zp;1.2&ze;
<keyword>const</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>const</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;4.9&ze;, <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>*</keyword>, &zp;1.2&ze;
ptr-to <keyword>*</keyword>, <keyword><</keyword>, ptr-to <keyword>*</keyword>, &zp;4.8&ze;, <keyword>union</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>union</keyword> <keyword>*</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>short</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword> <keyword>*</keyword>, &zp;4.7&ze;, <keyword>int</keyword> <keyword>*</keyword>, <keyword><</keyword>, <keyword>int</keyword> <keyword>*</keyword>, &zp;1.2&ze;
<keyword>const</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>>=</keyword>, <keyword>const</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;4.7&ze;, <keyword>int</keyword> <keyword>*</keyword>, <keyword><=</keyword>, <keyword>int</keyword> <keyword>*</keyword>, &zp;1.2&ze;
<caption>
Occurrence of relational operators having particular operand pointer
types (as a percentage of all occurrences of each operator with
operands having a pointer type).  Based on the translated form of the
books benchmark programs.
</caption>
.E_TABLE


1202

.TABLE equal_op_tok
: l 1.9cm 2.1cm l 1.9cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword>!=</keyword>, &zp;0.6&ze;, &zp;69.2&ze;, <keyword>]</keyword> <keyword>!=</keyword>, &zp;1.4&ze;, &zp;5.1&ze;
identifier <keyword>==</keyword>, &zp;1.2&ze;, &zp;67.9&ze;, <keyword>==</keyword> <keyword>-v</keyword>, &zp;2.6&ze;, &zp;3.5&ze;
<keyword>)</keyword> <keyword>==</keyword>, &zp;1.6&ze;, &zp;25.1&ze;, <keyword>==</keyword> <c_syntax>integer-constant</c_syntax>, &zp;25.5&ze;, &zp;2.0&ze;
<keyword>)</keyword> <keyword>!=</keyword>, &zp;0.8&ze;, &zp;24.7&ze;, <keyword>==</keyword> identifier, &zp;62.1&ze;, &zp;1.1&ze;
<keyword>==</keyword> <c_syntax>character-constant</c_syntax>, &zp;7.1&ze;, &zp;22.8&ze;, <keyword>!=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;22.7&ze;, &zp;0.9&ze;
<keyword>!=</keyword> <c_syntax>character-constant</c_syntax>, &zp;5.3&ze;, &zp;8.4&ze;, <keyword>!=</keyword> identifier, &zp;65.0&ze;, &zp;0.6&ze;
<keyword>]</keyword> <keyword>==</keyword>, &zp;3.1&ze;, &zp;5.6&ze;, , , 
<caption>
Common token pairs involving the equality operators (as a percentage
of all occurrences of each token).  Based on the visible form of the
<file>.c</file> files.  Note: entries do not always sum to 100%
because several token sequences that have very low percentages are
not listed.
</caption>
.E_TABLE

.FIG
equalcons
<caption>
Number of integer constants appearing as the right operand of
equality operators.  Based on the visible form of the <file>.c</file>
files.
</caption>
.E_FIG


1204

.TABLE equal_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
ptr-to, <keyword>!=</keyword>, ptr-to, &zp;28.5&ze;, <keyword>char</keyword>, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;3.9&ze;
<keyword>int</keyword>, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;21.1&ze;, ptr-to, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;3.5&ze;
<keyword>int</keyword>, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;15.8&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>!=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.5&ze;
ptr-to, <keyword>==</keyword>, ptr-to, &zp;15.3&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;2.2&ze;
other-types, <keyword>==</keyword>, other-types, &zp;12.7&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;2.0&ze;
other-types, <keyword>!=</keyword>, other-types, &zp;12.6&ze;, int:16 &zs;16&ze;, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;2.0&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;9.5&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>!=</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.9&ze;
<keyword>enum</keyword>, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;9.1&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>!=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.9&ze;
int:16 &zs;16&ze;, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;8.2&ze;, ptr-to, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;1.8&ze;
<keyword>int</keyword>, <keyword>!=</keyword>, <keyword>int</keyword>, &zp;6.5&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;1.7&ze;
<keyword>int</keyword>, <keyword>==</keyword>, <keyword>int</keyword>, &zp;6.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>==</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.7&ze;
<keyword>char</keyword>, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;5.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;1.6&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;4.8&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>!=</keyword>, _<keyword>long</keyword>, &zp;1.3&ze;
<keyword>enum</keyword>, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;4.8&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>!=</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.3&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>!=</keyword>, _<keyword>int</keyword>, &zp;4.4&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>==</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>==</keyword>, _<keyword>int</keyword>, &zp;4.0&ze;, , , , 
<caption>
Occurrence of equality operators having particular operand types (as
a percentage of all occurrences of each operator).  Based on the
translated form of the books benchmark programs.
</caption>
.E_TABLE


1205

.TABLE equal_ptr_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>struct</keyword> <keyword>*</keyword>, <keyword>==</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;59.9&ze;, <keyword>int</keyword> <keyword>*</keyword>, <keyword>!=</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;3.0&ze;
<keyword>struct</keyword> <keyword>*</keyword>, <keyword>!=</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;52.2&ze;, <keyword>void</keyword> <keyword>*</keyword>, <keyword>==</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;2.2&ze;
<keyword>union</keyword> <keyword>*</keyword>, <keyword>!=</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;18.3&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>==</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.8&ze;
<keyword>union</keyword> <keyword>*</keyword>, <keyword>==</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;18.1&ze;, <keyword>int</keyword>, <keyword>==</keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;1.4&ze;
other-types, <keyword>==</keyword>, other-types, &zp;8.1&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>!=</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.4&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>!=</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;8.1&ze;, <keyword>int</keyword>, <keyword>!=</keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;1.3&ze;
<keyword>char</keyword> <keyword>*</keyword>, <keyword>==</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;7.3&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, <keyword>==</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.1&ze;
array-index, <keyword>!=</keyword>, <keyword>void</keyword> <keyword>*</keyword>, &zp;6.9&ze;, ptr-to <keyword>*</keyword>, <keyword>!=</keyword>, _<keyword></keyword> <keyword>int</keyword>, &zp;1.1&ze;
other-types, <keyword>!=</keyword>, other-types, &zp;6.4&ze;, <keyword>char</keyword> <keyword>*</keyword>, <keyword>!=</keyword>, array-index, &zp;1.1&ze;
<caption>
Occurrence of equality operators having particular operand pointer
types (as a percentage of all occurrences of each operator with
operands having a pointer type; <phrase>_int</phrase> is probably the
<c_code>0</c_code> representation of the null-pointer constant).
Based on the translated form of the books benchmark programs.
</caption>
.E_TABLE


1224

.TABLE and_context
: l r r
Context, Binary <keyword>&</keyword>, <keyword>&&</keyword>
other contexts, &zp;45.3&ze; (&emdash;), (&emdash;)
<keyword>for</keyword> control-expression, &zp;0.3&ze; (&zp;0.6&ze;), (&zp;4.7&ze;)
<keyword>while</keyword> control-expression, &zp;2.1&ze; (&zp;8.1&ze;), (&zp;18.4&ze;)
<keyword>if</keyword> control-expression, &zp;51.4&ze; (&zp;10.5&ze;), (&zp;10.4&ze;)
<keyword>switch</keyword> control-expression, &zp;0.8&ze; (&zp;5.2&ze;), (&zp;0.0&ze;)
<caption>
Occurrence of the <keyword>&</keyword> and <keyword>&&</keyword>
operator (as a percentage of all occurrences of each operator; the
parenthesized value is the percentage of all occurrences of the
context that contains the operator).  Based on the visible form of
the <file>.c</file> files.
</caption>
.E_TABLE

.TABLE bitwise_op_tok
: l 1.9cm 2.1cm l 1.9cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword>|</keyword>, &zp;0.4&ze;, &zp;74.0&ze;, <keyword>&</keyword> identifier, &zp;57.1&ze;, &zp;0.6&ze;
identifier <keyword>&</keyword>, &zp;0.7&ze;, &zp;67.5&ze;, <keyword>|</keyword> identifier, &zp;79.8&ze;, &zp;0.4&ze;
identifier <keyword>^</keyword>, &zp;0.0&ze;, &zp;51.1&ze;, <keyword>&</keyword> <keyword>(</keyword>, &zp;7.4&ze;, &zp;0.3&ze;
<keyword>)</keyword> <keyword>^</keyword>, &zp;0.0&ze;, &zp;38.7&ze;, <keyword>|</keyword> <keyword>(</keyword>, &zp;14.4&ze;, &zp;0.3&ze;
<keyword>&</keyword> <keyword>~</keyword>, &zp;4.6&ze;, &zp;30.1&ze;, <keyword>^</keyword> <keyword>*v</keyword>, &zp;5.5&ze;, &zp;0.1&ze;
<keyword>)</keyword> <keyword>&</keyword>, &zp;1.1&ze;, &zp;27.7&ze;, <keyword>|</keyword> <c_syntax>integer-constant</c_syntax>, &zp;5.5&ze;, &zp;0.1&ze;
<keyword>)</keyword> <keyword>|</keyword>, &zp;0.4&ze;, &zp;20.8&ze;, <keyword>^</keyword> <c_syntax>integer-constant</c_syntax>, &zp;20.8&ze;, &zp;0.0&ze;
<keyword>]</keyword> <keyword>^</keyword>, &zp;0.0&ze;, &zp;5.1&ze;, <keyword>^</keyword> identifier, &zp;55.5&ze;, &zp;0.0&ze;
<keyword>]</keyword> <keyword>&</keyword>, &zp;1.4&ze;, &zp;4.2&ze;, <keyword>^</keyword> <keyword>(</keyword>, &zp;16.1&ze;, &zp;0.0&ze;
<keyword>&</keyword> <c_syntax>integer-constant</c_syntax>, &zp;30.6&ze;, &zp;1.5&ze;, , , 
<caption>
Common token pairs involving one of the operators
<keyword>&</keyword>, <keyword>|</keyword>, or <keyword>^</keyword>
(as a percentage of all occurrences of each token).  Based on the
visible form of the <file>.c</file> files.  Note: entries do not
always sum to 100% because several token sequences that have very low
percentages are not listed.
</caption>
.E_TABLE

.FIG
bandcons
<caption>
Number of integer constants appearing as the right operand of the
binary <keyword>&</keyword> operator.  Based on the visible form of
the <file>.c</file> files.
</caption>
.E_FIG


1225

.TABLE bitwise_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>int</keyword>, <keyword>|</keyword>, _<keyword>int</keyword>, &zp;27.1&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>|</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;4.0&ze;
<keyword>int</keyword>, <keyword>&</keyword>, _<keyword>int</keyword>, &zp;24.3&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>&</keyword>, _<keyword>int</keyword>, &zp;3.8&ze;
_<keyword>int</keyword>, <keyword>|</keyword>, _<keyword>int</keyword>, &zp;23.0&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>|</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;3.4&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>^</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;17.7&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>^</keyword>, _<keyword>int</keyword>, &zp;3.3&ze;
other-types, <keyword>&</keyword>, other-types, &zp;13.9&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>^</keyword>, <keyword>int</keyword>, &zp;3.1&ze;
<keyword>int</keyword>, <keyword>|</keyword>, <keyword>int</keyword>, &zp;13.6&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>&</keyword>, <keyword>int</keyword>, &zp;2.6&ze;
_<keyword>int</keyword>, <keyword>^</keyword>, _<keyword>int</keyword>, &zp;13.5&ze;, <keyword>long</keyword>, <keyword>^</keyword>, <keyword>long</keyword>, &zp;2.6&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>^</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;12.2&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>&</keyword>, <keyword>int</keyword>, &zp;2.5&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>&</keyword>, _<keyword>int</keyword>, &zp;11.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>|</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.4&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>&</keyword>, _<keyword>int</keyword>, &zp;10.3&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>&</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.0&ze;
<keyword>int</keyword>, <keyword>^</keyword>, _<keyword>int</keyword>, &zp;10.3&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>^</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.8&ze;
other-types, <keyword>^</keyword>, other-types, &zp;9.9&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>^</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.7&ze;
<keyword>int</keyword>, <keyword>^</keyword>, <keyword>int</keyword>, &zp;9.8&ze;, <keyword>int</keyword>, <keyword>^</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.7&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>|</keyword>, <keyword>int</keyword>, &zp;9.6&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>&</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.5&ze;
other-types, <keyword>|</keyword>, other-types, &zp;8.9&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>^</keyword>, _<keyword>int</keyword>, &zp;1.5&ze;
<keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>&</keyword>, _<keyword>int</keyword>, &zp;7.1&ze;, <keyword>long</keyword>, <keyword>&</keyword>, <keyword>int</keyword>, &zp;1.4&ze;
<keyword>int</keyword>, <keyword>&</keyword>, <keyword>int</keyword>, &zp;6.3&ze;, <keyword>int</keyword>, <keyword>|</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>&</keyword>, <keyword>int</keyword>, &zp;5.7&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>&</keyword>, <keyword>int</keyword>, &zp;1.3&ze;
<keyword>long</keyword>, <keyword>|</keyword>, <keyword>long</keyword>, &zp;5.5&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>^</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.3&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>&</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;4.6&ze;, <keyword>long</keyword>, <keyword>&</keyword>, _<keyword>int</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>^</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;4.6&ze;, _<keyword>int</keyword>, <keyword>|</keyword>, <keyword>int</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>^</keyword>, _<keyword>int</keyword>, &zp;4.2&ze;, <keyword>int</keyword>, <keyword>^</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.1&ze;
<caption>
Occurrence of bitwise operators having particular operand types (as a
percentage of all occurrences of each operator).  Based on the
translated form of the books benchmark programs.
</caption>
.E_TABLE


1234

.TABLE or_context
: l r r
Context, <keyword>|</keyword>, <keyword>||</keyword>
other contexts, &zp;90.7&ze; (&emdash;), (&emdash;)
<keyword>if</keyword> control-expression, &zp;8.8&ze; (&zp;0.7&ze;), (&zp;6.9&ze;)
<keyword>while</keyword> control-expression, &zp;0.3&ze; (&zp;0.5&ze;), (&zp;2.7&ze;)
<keyword>for</keyword> control-expression, &zp;0.0&ze; (&zp;0.0&ze;), (&zp;0.2&ze;)
<keyword>switch</keyword> control-expression, &zp;0.1&ze; (&zp;0.3&ze;), (&zp;0.0&ze;)
<caption>
Occurrence of the <keyword>|</keyword> and <keyword>||</keyword>
operator (as a percentage of all occurrences of each operator; the
parenthesized value is the percentage of all occurrences of the
context that contains the operator).  Based on the visible form of
the <file>.c</file> files.
</caption>
.E_TABLE

.FIG
borcons
<caption>
Number of integer constants appearing as the right operand of the
bitwise-OR operator.  Based on the visible form of the <file>.c</file>
files.
</caption>
.E_FIG


1238

.TABLE logical_op_tok
: l 1.9cm 2.1cm l 1.9cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword>&&</keyword>, &zp;0.4&ze;, &zp;48.5&ze;, <keyword>&&</keyword> defined, &zp;0.9&ze;, &zp;6.2&ze;
<keyword>)</keyword> <keyword>||</keyword>, &zp;0.9&ze;, &zp;42.7&ze;, <keyword>||</keyword> <keyword>!</keyword>, &zp;11.3&ze;, &zp;6.0&ze;
identifier <keyword>||</keyword>, &zp;0.2&ze;, &zp;39.3&ze;, <c_syntax>character-constant</c_syntax> <keyword>||</keyword>, &zp;4.2&ze;, &zp;4.2&ze;
<keyword>)</keyword> <keyword>&&</keyword>, &zp;1.1&ze;, &zp;34.9&ze;, <c_syntax>character-constant</c_syntax> <keyword>&&</keyword>, &zp;5.3&ze;, &zp;3.3&ze;
<keyword>||</keyword> defined, &zp;4.8&ze;, &zp;21.0&ze;, <keyword>&&</keyword> <keyword>(</keyword>, &zp;28.7&ze;, &zp;0.9&ze;
<c_syntax>integer-constant</c_syntax> <keyword>||</keyword>, &zp;0.3&ze;, &zp;12.4&ze;, <keyword>||</keyword> <keyword>(</keyword>, &zp;29.7&ze;, &zp;0.6&ze;
<c_syntax>integer-constant</c_syntax> <keyword>&&</keyword>, &zp;0.4&ze;, &zp;11.5&ze;, <keyword>&&</keyword> identifier, &zp;53.9&ze;, &zp;0.5&ze;
<keyword>&&</keyword> <keyword>!</keyword>, &zp;13.5&ze;, &zp;11.3&ze;, <keyword>||</keyword> identifier, &zp;51.8&ze;, &zp;0.3&ze;
<caption>
Common token pairs involving <keyword>&&</keyword>, or
<keyword>||</keyword> (as a percentage of all occurrences of each
token).  Based on the visible form of the <file>.c</file> files.
Note: entries do not always sum to 100% because several token
sequences that have very low percentages are not listed.
</caption>
.E_TABLE


1239

.TABLE logical_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
<keyword>int</keyword>, <keyword>||</keyword>, <keyword>int</keyword>, &zp;87.7&ze;, _<keyword>long</keyword>, <keyword>||</keyword>, _<keyword>long</keyword>, &zp;2.2&ze;
<keyword>int</keyword>, <keyword>&&</keyword>, <keyword>int</keyword>, &zp;73.9&ze;, <keyword>int</keyword>, <keyword>&&</keyword>, ptr-to, &zp;2.2&ze;
other-types, <keyword>&&</keyword>, other-types, &zp;12.8&ze;, <keyword>int</keyword>, <keyword>&&</keyword>, <keyword>char</keyword>, &zp;1.8&ze;
other-types, <keyword>||</keyword>, other-types, &zp;8.4&ze;, <keyword>int</keyword>, <keyword>||</keyword>, _<keyword>long</keyword>, &zp;1.7&ze;
ptr-to, <keyword>&&</keyword>, <keyword>int</keyword>, &zp;4.5&ze;, <keyword>int</keyword>, <keyword>&&</keyword>, _<keyword>int</keyword>, &zp;1.3&ze;
<keyword>char</keyword>, <keyword>&&</keyword>, <keyword>int</keyword>, &zp;2.3&ze;, ptr-to, <keyword>&&</keyword>, ptr-to, &zp;1.1&ze;
<caption>
Occurrence of logical operators having particular operand types (as a
percentage of all occurrences of each operator).  Based on the
translated form of the books benchmark programs.
</caption>
.E_TABLE


1254

.TABLE ternary_op_tok
: l 1.9cm 2.1cm l 1.9cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
<keyword>)</keyword> <keyword>?</keyword>, &zp;0.4&ze;, &zp;44.7&ze;, <keyword>?</keyword> <c_syntax>string-literal</c_syntax>, &zp;20.1&ze;, &zp;1.5&ze;
identifier <keyword>?</keyword>, &zp;0.1&ze;, &zp;44.0&ze;, <keyword>?:</keyword> <c_syntax>integer-constant</c_syntax>, &zp;28.7&ze;, &zp;0.3&ze;
identifier <keyword>?:</keyword>, &zp;0.1&ze;, &zp;40.3&ze;, <keyword>?</keyword> <c_syntax>integer-constant</c_syntax>, &zp;20.2&ze;, &zp;0.2&ze;
<c_syntax>integer-constant</c_syntax> <keyword>?:</keyword>, &zp;0.3&ze;, &zp;23.1&ze;, <keyword>?</keyword> identifier, &zp;43.9&ze;, &zp;0.1&ze;
<c_syntax>string-literal</c_syntax> <keyword>?:</keyword>, &zp;1.5&ze;, &zp;20.2&ze;, <keyword>?:</keyword> identifier, &zp;35.9&ze;, &zp;0.1&ze;
<keyword>)</keyword> <keyword>?:</keyword>, &zp;0.1&ze;, &zp;11.6&ze;, <keyword>?:</keyword> <keyword>(</keyword>, &zp;7.2&ze;, &zp;0.1&ze;
<c_syntax>integer-constant</c_syntax> <keyword>?</keyword>, &zp;0.1&ze;, &zp;9.6&ze;, <keyword>?</keyword> <keyword>(</keyword>, &zp;6.2&ze;, &zp;0.1&ze;
<keyword>?:</keyword> <c_syntax>string-literal</c_syntax>, &zp;21.0&ze;, &zp;1.6&ze;, , , 
<caption>
Common token pairs involving <keyword>?</keyword> or
<keyword>:</keyword> (denoted by the character sequence
<keyword>?:</keyword>) (as a percentage of all occurrences of each
token).  Based on the visible form of the <file>.c</file> files.
Note: entries do not always sum to 100% because several token
sequences that have very low percentages are not listed.
</caption>
.E_TABLE


1256

.TABLE ternary_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
ptr-to, <keyword>?:</keyword>, ptr-to, &zp;29.5&ze;, <keyword>int</keyword>, <keyword>?:</keyword>, _<keyword>int</keyword>, &zp;5.7&ze;
other-types, <keyword>?:</keyword>, other-types, &zp;12.1&ze;, _<keyword>char</keyword>, <keyword>?:</keyword>, _<keyword>char</keyword>, &zp;3.4&ze;
_<keyword>int</keyword>, <keyword>?:</keyword>, _<keyword>int</keyword>, &zp;10.4&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>?:</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;2.2&ze;
<keyword>int</keyword>, <keyword>?:</keyword>, <keyword>int</keyword>, &zp;10.0&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>?:</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.2&ze;
<keyword>void</keyword>, <keyword>?:</keyword>, <keyword>void</keyword>, &zp;9.4&ze;, <keyword>signed</keyword> <keyword>int</keyword>, <keyword>?:</keyword>, _<keyword>int</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>?:</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;7.9&ze;, <keyword>char</keyword>, <keyword>?:</keyword>, <keyword>void</keyword>, &zp;1.1&ze;
_<keyword>int</keyword>, <keyword>?:</keyword>, <keyword>int</keyword>, &zp;6.0&ze;, , , , 
<caption>
Occurrence of the ternary operator having particular operand types
(as a percentage of all occurrences of each operator).  Based on the
translated form of the books benchmark programs.  <file>.c</file>
files.
</caption>
.E_TABLE


1278

For a comparison with load frequencies see <tableref
href="calder_load">.

.TABLE assign_op_tok
: l 1.9cm 2.1cm l 1.9cm 2.1cm
Token Sequence, % Occurrence of First Token, % Occurrence of Second Token, Token Sequence, % Occurrence of First Token, % Occurrence of Second Token
identifier <keyword>%=</keyword>, &zp;0.0&ze;, &zp;100.0&ze;, <keyword>v++</keyword> <keyword>=</keyword>, &zp;7.6&ze;, &zp;0.7&ze;
identifier <keyword>/=</keyword>, &zp;0.0&ze;, &zp;99.3&ze;, <keyword>+=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;21.7&ze;, &zp;0.3&ze;
identifier <keyword>>>=</keyword>, &zp;0.0&ze;, &zp;99.3&ze;, <keyword>|=</keyword> identifier, &zp;77.0&ze;, &zp;0.2&ze;
identifier <keyword><<=</keyword>, &zp;0.0&ze;, &zp;97.5&ze;, <keyword>+=</keyword> identifier, &zp;68.0&ze;, &zp;0.2&ze;
identifier <keyword>+=</keyword>, &zp;0.3&ze;, &zp;96.3&ze;, <keyword>>>=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;87.1&ze;, &zp;0.1&ze;
identifier <keyword>*=</keyword>, &zp;0.0&ze;, &zp;96.0&ze;, <keyword>-=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;24.2&ze;, &zp;0.1&ze;
identifier <keyword>-=</keyword>, &zp;0.1&ze;, &zp;95.2&ze;, <keyword>&=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;12.4&ze;, &zp;0.1&ze;
identifier <keyword>|=</keyword>, &zp;0.3&ze;, &zp;93.9&ze;, <keyword>|=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;10.7&ze;, &zp;0.1&ze;
identifier <keyword>&=</keyword>, &zp;0.1&ze;, &zp;93.1&ze;, <keyword>-=</keyword> identifier, &zp;65.1&ze;, &zp;0.1&ze;
identifier <keyword>=</keyword>, &zp;9.4&ze;, &zp;90.9&ze;, <keyword>+=</keyword> <keyword>(</keyword>, &zp;6.5&ze;, &zp;0.1&ze;
identifier <keyword>^=</keyword>, &zp;0.0&ze;, &zp;85.9&ze;, <keyword>|=</keyword> <keyword>(</keyword>, &zp;12.0&ze;, &zp;0.1&ze;
<keyword>&=</keyword> <keyword>~</keyword>, &zp;75.0&ze;, &zp;52.5&ze;, <keyword><<=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;85.1&ze;, &zp;0.0&ze;
<keyword>=</keyword> <keyword>+v</keyword>, &zp;0.0&ze;, &zp;45.1&ze;, <keyword>/=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;52.1&ze;, &zp;0.0&ze;
<keyword>=</keyword> <c_syntax>floating-constant</c_syntax>, &zp;0.1&ze;, &zp;15.7&ze;, <keyword>*=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;39.8&ze;, &zp;0.0&ze;
<keyword>=</keyword> <c_syntax>character-constant</c_syntax>, &zp;0.8&ze;, &zp;14.2&ze;, <keyword>^=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;34.5&ze;, &zp;0.0&ze;
<keyword>=</keyword> <keyword>-v</keyword>, &zp;1.6&ze;, &zp;12.0&ze;, <keyword>%=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;31.5&ze;, &zp;0.0&ze;
<keyword>]</keyword> <keyword>^=</keyword>, &zp;0.0&ze;, &zp;11.1&ze;, <keyword>&=</keyword> identifier, &zp;8.6&ze;, &zp;0.0&ze;
<keyword>=</keyword> <keyword>&v</keyword>, &zp;1.9&ze;, &zp;10.2&ze;, <keyword>%=</keyword> identifier, &zp;68.1&ze;, &zp;0.0&ze;
<keyword>=</keyword> <keyword>*v</keyword>, &zp;1.1&ze;, &zp;9.9&ze;, <keyword>^=</keyword> identifier, &zp;46.4&ze;, &zp;0.0&ze;
<keyword>=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;19.6&ze;, &zp;9.0&ze;, <keyword>*=</keyword> identifier, &zp;44.2&ze;, &zp;0.0&ze;
<keyword>]</keyword> <keyword>=</keyword>, &zp;21.8&ze;, &zp;6.8&ze;, <keyword>/=</keyword> identifier, &zp;34.6&ze;, &zp;0.0&ze;
<keyword>=</keyword> identifier, &zp;62.5&ze;, &zp;6.5&ze;, <keyword><<=</keyword> identifier, &zp;13.4&ze;, &zp;0.0&ze;
<keyword>=</keyword> <keyword>sizeof</keyword>, &zp;0.3&ze;, &zp;5.9&ze;, <keyword>>>=</keyword> identifier, &zp;10.5&ze;, &zp;0.0&ze;
<keyword>]</keyword> <keyword>&=</keyword>, &zp;0.2&ze;, &zp;5.7&ze;, <keyword>#error</keyword> <keyword>=</keyword>, &zp;16.9&ze;, &zp;0.0&ze;
<keyword>]</keyword> <keyword>|=</keyword>, &zp;0.4&ze;, &zp;4.6&ze;, <keyword>-=</keyword> <keyword>(</keyword>, &zp;7.0&ze;, &zp;0.0&ze;
<keyword>=</keyword> <keyword>(</keyword>, &zp;9.1&ze;, &zp;3.5&ze;, <keyword>/=</keyword> <keyword>(</keyword>, &zp;5.8&ze;, &zp;0.0&ze;
<keyword>*=</keyword> <c_syntax>floating-constant</c_syntax>, &zp;6.3&ze;, &zp;1.6&ze;, <keyword>^=</keyword> <keyword>(</keyword>, &zp;13.9&ze;, &zp;0.0&ze;
<caption>
Common token pairs involving the assignment operators (as a
percentage of all occurrences of each token).  Based on the visible
form of the <file>.c</file> files.  Note: entries do not always sum
to 100% because several token sequences that have very low
percentages are not listed.
</caption>
.E_TABLE

.TABLE
: l r r l r r
Program,  Leaf,   Non-Leaf, Program,  Leaf,   Non-Leaf
burg,     34.3,    7.7, eqntott,   0.0,   11.4
ditroff,   8.3,    8.3, espresso,  6.5,    3.9
tex,      15.1,    9.8, gcc,       9.6,   12.0
xfig,      8.0,   11.7, li,        0.0,   16.3
xtex,      8.3,   11.2, sc,        1.2,   11.1
compress, 83.5,    9.2, Mean,     15.9,   10.2
<caption>
Occurrence of executed store instructions (as a percentage of all
instructions executed for various program) in two different kinds of
functions (<phrase>Leaf</phrase> functions do not call any other
functions, while <phrase>Non-Leaf</phrase> do).
Adapted from Calder, Grunwald, and Zorn <book Calder_95b>.
</caption>
.E_TABLE


1280

.TABLE silent_store
: l 1.7cm 1.1cm 1.1cm l 1.7cm 1.1cm 1.1cm
Program, Silent stores (PPC/SS), PSSVL (PPC), MPSVL (PPC), Program, Silent stores (PPC/SS), PSSVL (PPC), MPSVL (PPC)
go,       38/27, 30, 36, tomcatv,  47/33, 40, 45
m88ksim,  68/62, 56, 65, swim,     34/26, 20, 19
gcc,      53/46, 37, 49, mgrid,    23/&z;7,  24, 17
compress, 42/39, 35, 16, applu,    37/35, 35, 28
li,       34/20, 32, 34, apsi,     21/25, 22, 20
ijpeg,    43/33, 52, 46, fpppp,    15/15, 15, 14
perl,     49/36, 39, 42, wave5,    25/22, 30, 20
vortex,   64/55, 71, 57, , , , 
<caption>
Percentage of stores that are <phrase>silent</phrase>.  The results
from two instruction sets, the PowerPC (PPC) and SimpleScalar (SS),
are given for silent stores.  The measurements for Program Structure
Store Value Locality (PSSVL) and Message-Passing Store Value Locality
(MPSVL) are for the PowerPC only.  Adapted from Lepak, Bell, and Lipasti
<book Lepak_01>.
</caption>
.E_TABLE


1300

.TABLE assign_oprnd
: l c l r l c l r
Left Operand, Operator, Right Operand, %, Left Operand, Operator, Right Operand, %
other-types, <keyword>-=</keyword>, other-types, &zp;34.5&ze;, <keyword>float</keyword>, <keyword>/=</keyword>, <keyword>float</keyword>, &zp;6.4&ze;
other-types, <keyword>+=</keyword>, other-types, &zp;33.5&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>|=</keyword>, _<keyword>int</keyword>, &zp;6.2&ze;
other-types, <keyword>=</keyword>, other-types, &zp;32.8&ze;, ptr-to, <keyword>+=</keyword>, _<keyword>int</keyword>, &zp;6.2&ze;
<keyword>int</keyword>, <keyword>%=</keyword>, _<keyword>int</keyword>, &zp;31.0&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>|=</keyword>, <keyword>int</keyword>, &zp;6.1&ze;
ptr-to, <keyword>=</keyword>, ptr-to, &zp;29.7&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>-=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;5.9&ze;
<keyword>int</keyword>, <keyword>*=</keyword>, _<keyword>int</keyword>, &zp;29.5&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>>>=</keyword>, _<keyword>int</keyword>, &zp;5.8&ze;
<keyword>long</keyword>, <keyword>-=</keyword>, <keyword>long</keyword>, &zp;28.9&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword><<=</keyword>, _<keyword>int</keyword>, &zp;5.7&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword><<=</keyword>, _<keyword>int</keyword>, &zp;28.3&ze;, other-types, <keyword>%=</keyword>, other-types, &zp;5.7&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>>>=</keyword>, _<keyword>int</keyword>, &zp;28.2&ze;, <keyword>long</keyword>, <keyword>+=</keyword>, _<keyword>int</keyword>, &zp;5.6&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>^=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;26.7&ze;, <keyword>long</keyword>, <keyword>*=</keyword>, _<keyword>int</keyword>, &zp;5.3&ze;
<keyword>int</keyword>, <keyword>>>=</keyword>, _<keyword>int</keyword>, &zp;26.2&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>&=</keyword>, <keyword>int</keyword>, &zp;5.1&ze;
<keyword>int</keyword>, <keyword><<=</keyword>, _<keyword>int</keyword>, &zp;25.5&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>/=</keyword>, _<keyword>int</keyword>, &zp;5.0&ze;
<keyword>int</keyword>, <keyword>/=</keyword>, _<keyword>int</keyword>, &zp;23.8&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>&=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;4.6&ze;
<keyword>int</keyword>, <keyword>+=</keyword>, <keyword>int</keyword>, &zp;22.1&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>|=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;4.6&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>&=</keyword>, <keyword>int</keyword>, &zp;19.7&ze;, <keyword>long</keyword>, <keyword>%=</keyword>, _<keyword>int</keyword>, &zp;4.6&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>&=</keyword>, <keyword>int</keyword>, &zp;19.4&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>/=</keyword>, _<keyword>int</keyword>, &zp;4.5&ze;
<keyword>int</keyword>, <keyword>-=</keyword>, <keyword>int</keyword>, &zp;17.4&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>&=</keyword>, _<keyword>int</keyword>, &zp;4.3&ze;
<keyword>long</keyword>, <keyword>^=</keyword>, <keyword>long</keyword>, &zp;16.9&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>|=</keyword>, _<keyword>int</keyword>, &zp;4.1&ze;
other-types, <keyword>*=</keyword>, other-types, &zp;16.8&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>|=</keyword>, <keyword>int</keyword>, &zp;3.9&ze;
other-types, <keyword>&=</keyword>, other-types, &zp;16.7&ze;, <keyword>long</keyword>, <keyword><<=</keyword>, _<keyword>int</keyword>, &zp;3.8&ze;
<keyword>int</keyword>, <keyword>&=</keyword>, <keyword>int</keyword>, &zp;16.2&ze;, <keyword>float</keyword>, <keyword>*=</keyword>, _<keyword>double</keyword>, &zp;3.7&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><<=</keyword>, _<keyword>int</keyword>, &zp;15.9&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>+=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.5&ze;
other-types, <keyword>^=</keyword>, other-types, &zp;15.3&ze;, <keyword>long</keyword>, <keyword>&=</keyword>, <keyword>int</keyword>, &zp;3.5&ze;
other-types, <keyword>/=</keyword>, other-types, &zp;14.4&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.4&ze;
other-types, <keyword>|=</keyword>, other-types, &zp;13.5&ze;, <keyword>int</keyword>, <keyword>%=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.4&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>/=</keyword>, _<keyword>int</keyword>, &zp;12.9&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>^=</keyword>, <keyword>int</keyword>, &zp;3.3&ze;
ptr-to, <keyword>+=</keyword>, <keyword>int</keyword>, &zp;12.8&ze;, <keyword>float</keyword>, <keyword>*=</keyword>, <keyword>double</keyword>, &zp;3.3&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>%=</keyword>, _<keyword>int</keyword>, &zp;12.6&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>*=</keyword>, _<keyword>int</keyword>, &zp;3.1&ze;
<keyword>int</keyword>, <keyword>%=</keyword>, <keyword>int</keyword>, &zp;12.6&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>^=</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;3.1&ze;
<keyword>int</keyword>, <keyword>=</keyword>, <keyword>int</keyword>, &zp;12.3&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>^=</keyword>, <keyword>int</keyword>, &zp;3.1&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>|=</keyword>, _<keyword>int</keyword>, &zp;12.1&ze;, ptr-to, <keyword>+=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;3.1&ze;
<keyword>float</keyword>, <keyword>*=</keyword>, <keyword>float</keyword>, &zp;12.1&ze;, <keyword>double</keyword>, <keyword>*=</keyword>, <keyword>double</keyword>, &zp;3.1&ze;
<keyword>int</keyword>, <keyword>|=</keyword>, _<keyword>int</keyword>, &zp;12.0&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>/=</keyword>, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;3.0&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>|=</keyword>, _<keyword>int</keyword>, &zp;11.7&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>|=</keyword>, <keyword>int</keyword>, &zp;3.0&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>%=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;11.5&ze;, <keyword>int</keyword>, <keyword>/=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.0&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>%=</keyword>, _<keyword>int</keyword>, &zp;11.5&ze;, <keyword>float</keyword>, <keyword>/=</keyword>, <keyword>int</keyword>, &zp;3.0&ze;
<keyword>int</keyword>, <keyword>/=</keyword>, <keyword>int</keyword>, &zp;11.4&ze;, <keyword>double</keyword>, <keyword>/=</keyword>, <keyword>double</keyword>, &zp;3.0&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>^=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;11.3&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>+=</keyword>, _<keyword>int</keyword>, &zp;2.9&ze;
<keyword>int</keyword>, <keyword>^=</keyword>, _<keyword>int</keyword>, &zp;11.1&ze;, <keyword>float</keyword>, <keyword>*=</keyword>, _<keyword>int</keyword>, &zp;2.9&ze;
<keyword>int</keyword>, <keyword>=</keyword>, _<keyword>int</keyword>, &zp;11.0&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>+=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.8&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>>>=</keyword>, _<keyword>int</keyword>, &zp;10.3&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>|=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.8&ze;
other-types, <keyword>>>=</keyword>, other-types, &zp;9.6&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>|=</keyword>, <keyword>long</keyword>, &zp;2.8&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>>>=</keyword>, _<keyword>int</keyword>, &zp;9.5&ze;, <keyword>long</keyword>, <keyword>=</keyword>, <keyword>long</keyword>, &zp;2.8&ze;
<keyword>int</keyword>, <keyword>*=</keyword>, <keyword>int</keyword>, &zp;9.3&ze;, <keyword>int</keyword>, <keyword>&=</keyword>, _<keyword>int</keyword>, &zp;2.8&ze;
<keyword>unsigned</keyword> <keyword>short</keyword>, <keyword><<=</keyword>, _<keyword>int</keyword>, &zp;8.9&ze;, <keyword>float</keyword>, <keyword>=</keyword>, <keyword>float</keyword>, &zp;2.8&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>*=</keyword>, _<keyword>int</keyword>, &zp;8.4&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>-=</keyword>, <keyword>int</keyword>, &zp;2.7&ze;
<keyword>int</keyword>, <keyword>-=</keyword>, _<keyword>int</keyword>, &zp;8.0&ze;, <keyword>int</keyword>, <keyword>>>=</keyword>, <keyword>int</keyword>, &zp;2.7&ze;
<keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>&=</keyword>, <keyword>int</keyword>, &zp;7.9&ze;, <keyword>int</keyword>, <keyword>^=</keyword>, <keyword>int</keyword>, &zp;2.7&ze;
<keyword>long</keyword>, <keyword>>>=</keyword>, _<keyword>int</keyword>, &zp;7.7&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>=</keyword>, _<keyword>int</keyword>, &zp;2.6&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, <keyword>|=</keyword>, <keyword>int</keyword>, &zp;7.5&ze;, <keyword>float</keyword>, <keyword>-=</keyword>, <keyword>float</keyword>, &zp;2.6&ze;
<keyword>long</keyword>, <keyword>/=</keyword>, _<keyword>int</keyword>, &zp;7.4&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword>=</keyword>, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.5&ze;
<keyword>int</keyword>, <keyword>+=</keyword>, _<keyword>int</keyword>, &zp;7.4&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, <keyword><<=</keyword>, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;2.5&ze;
<keyword>int</keyword>, <keyword>|=</keyword>, <keyword>int</keyword>, &zp;7.4&ze;, <keyword>int</keyword>, <keyword><<=</keyword>, <keyword>int</keyword>, &zp;2.5&ze;
<keyword>unsigned</keyword> <keyword>short</keyword>, <keyword>%=</keyword>, _<keyword>int</keyword>, &zp;6.9&ze;, <keyword>float</keyword>, <keyword>/=</keyword>, _<keyword>double</keyword>, &zp;2.5&ze;
other-types, <keyword><<=</keyword>, other-types, &zp;6.7&ze;, <keyword>int</keyword>, <keyword>*=</keyword>, <keyword>float</keyword>, &zp;2.4&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>^=</keyword>, _<keyword>int</keyword>, &zp;6.4&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, <keyword>|=</keyword>, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.3&ze;
<caption>
Occurrence of assignment operators having particular operand types
(as a percentage of all occurrences of each operator; occurrences
below 2.3% were counted as <hlight>other-types</hlight>).  Based on
the translated form of the books benchmark programs.
</caption>
.E_TABLE


1338

.TABLE obj_decl_type
Type, Embedded, Books' benchmarks
integer, 55.97, 37.5
float, &z;0.05, &z;1.6
pointer, 22.08 (data)/0.23 (code), 48.2
struct/union, &z;9.88, &z;6.1
array, 11.80, &z;6.6
<caption>
Occurrence of types used in declarations of objects (as a percentage
of all types).  Adapted from Engblom <book Engblom_98> and the books
benchmark programs.
</caption>
.E_TABLE

.TABLE loc_obj_type
: l r l r
Type, %, Type, %
<keyword>int</keyword>, &zp;28.1&ze;, <keyword>long</keyword>, &zp;3.0&ze;
<keyword>struct</keyword> <keyword>*</keyword>, &zp;27.7&ze;, <keyword>union</keyword> <keyword>*</keyword>, &zp;2.9&ze;
other-types, &zp;10.8&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.3&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;5.5&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;2.0&ze;
<keyword>struct</keyword>, &zp;4.9&ze;, <keyword>char</keyword>, &zp;1.8&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;4.8&ze;, <keyword>char</keyword> [], &zp;1.5&ze;
<keyword>char</keyword> <keyword>*</keyword>, &zp;3.5&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;1.3&ze;
<caption>
Occurrence of types used to declare objects in block scope (as a
percentage of all such declarations).  Based on the translated form
of the books benchmark programs.
</caption>
.E_TABLE

.TABLE int_obj_type
: l r l r
Type, %, Type, %
<keyword>int</keyword>, &zp;20.9&ze;, <keyword>const</keyword> <keyword>char</keyword> [], &zp;2.4&ze;
other-types, &zp;14.4&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.8&ze;
<keyword>struct</keyword>, &zp;13.0&ze;, <keyword>const</keyword> <keyword>struct</keyword>, &zp;1.8&ze;
<keyword>struct</keyword> <keyword>*</keyword>, &zp;8.2&ze;, <keyword>void</keyword> *(), &zp;1.7&ze;
<keyword>struct</keyword> [], &zp;7.4&ze;, <keyword>const</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> [], &zp;1.6&ze;
<keyword>(</keyword> <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>const</keyword> <keyword>)</keyword> [], &zp;4.0&ze;, <keyword>unsigned</keyword> <keyword>int</keyword> [], &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>char</keyword> [], &zp;3.4&ze;, <keyword>int</keyword> *(), &zp;1.4&ze;
<keyword>unsigned</keyword> <keyword>short</keyword> [], &zp;3.3&ze;, <keyword>(</keyword> <keyword>struct</keyword> <keyword>*</keyword> <keyword>)</keyword> [], &zp;1.3&ze;
<keyword>int</keyword> [], &zp;2.9&ze;, <keyword>(</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>)</keyword> [], &zp;1.3&ze;
<keyword>char</keyword> <keyword>*</keyword>, &zp;2.8&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;1.2&ze;
<keyword>char</keyword> [], &zp;2.7&ze;, <keyword>const</keyword> <keyword>short</keyword> [], &zp;1.2&ze;
<caption>
Occurrence of types used to declare objects with internal linkage (as
a percentage of all such declarations).  Based on the translated form
of the books benchmark programs.
</caption>
.E_TABLE

.TABLE ext_obj_type
: l r l r
Type, %, Type, %
<keyword>int</keyword>, &zp;22.8&ze;, <keyword>char</keyword> <keyword>*</keyword>, &zp;3.2&ze;
<keyword>const</keyword> <keyword>char</keyword> [], &zp;15.4&ze;, <keyword>union</keyword> <keyword>*</keyword>, &zp;3.0&ze;
other-types, &zp;10.6&ze;, <keyword>enum</keyword>, &zp;2.4&ze;
<keyword>struct</keyword> <keyword>*</keyword>, &zp;10.3&ze;, <keyword>float</keyword>, &zp;1.4&ze;
<keyword>const</keyword> <keyword>struct</keyword>, &zp;10.2&ze;, <keyword>char</keyword> [], &zp;1.4&ze;
<keyword>struct</keyword>, &zp;8.2&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;1.2&ze;
<keyword>void</keyword> *(), &zp;4.6&ze;, <keyword>int</keyword> [], &zp;1.2&ze;
<keyword>struct</keyword> [], &zp;4.1&ze;, , 
<caption>
Occurrence of types used to declare objects with external linkage (as
a percentage of all such declarations).  Based on the translated form
of the books benchmark programs.
</caption>
.E_TABLE


1354

.TABLE storclass_bigram
: l 1.8cm 2.1cm l 1.8cm 2.1cm
Token Sequence, % Occurrence First Token, % Occurrence of Second Token, Token Sequence, % Occurrence First Token, % Occurrence of Second Token
<keyword>static</keyword> <keyword>void</keyword>, &zp;33.7&ze;, &zp;32.7&ze;, <keyword>extern</keyword> <keyword>int</keyword>, &zp;32.1&ze;, &zp;1.7&ze;
<keyword>static</keyword> <keyword>int</keyword>, &zp;28.2&ze;, &zp;15.1&ze;, <keyword>register</keyword> <keyword>struct</keyword>, &zp;19.1&ze;, &zp;1.4&ze;
<keyword>typedef</keyword> <keyword>union</keyword>, &zp;3.2&ze;, &zp;11.0&ze;, <keyword>typedef</keyword> <keyword>struct</keyword>, &zp;62.4&ze;, &zp;1.2&ze;
<keyword>static</keyword> <keyword>const</keyword>, &zp;1.5&ze;, &zp;10.0&ze;, <keyword>register</keyword> <keyword>int</keyword>, &zp;23.0&ze;, &zp;1.2&ze;
<keyword>static</keyword> <keyword>volatile</keyword>, &zp;0.3&ze;, &zp;8.6&ze;, <keyword>register</keyword> <keyword>char</keyword>, &zp;10.2&ze;, &zp;1.2&ze;
<keyword>typedef</keyword> <keyword>enum</keyword>, &zp;10.8&ze;, &zp;8.2&ze;, <keyword>register</keyword> <keyword>unsigned</keyword>, &zp;6.1&ze;, &zp;0.9&ze;
<keyword>static</keyword> <keyword>signed</keyword>, &zp;0.0&ze;, &zp;6.5&ze;, <keyword>extern</keyword> <keyword>char</keyword>, &zp;7.4&ze;, &zp;0.9&ze;
<keyword>static</keyword> <keyword>unsigned</keyword>, &zp;3.8&ze;, &zp;5.5&ze;, <keyword>extern</keyword> <keyword>struct</keyword>, &zp;6.9&ze;, &zp;0.5&ze;
<keyword>extern</keyword> <keyword>double</keyword>, &zp;1.3&ze;, &zp;5.5&ze;, <keyword>static</keyword> identifier, &zp;21.0&ze;, &zp;0.3&ze;
<keyword>static</keyword> <keyword>char</keyword>, &zp;4.1&ze;, &zp;5.1&ze;, <keyword>typedef</keyword> <keyword>unsigned</keyword>, &zp;6.2&ze;, &zp;0.2&ze;
<keyword>static</keyword> <keyword>struct</keyword>, &zp;6.4&ze;, &zp;4.8&ze;, <keyword>typedef</keyword> identifier, &zp;7.9&ze;, &zp;0.0&ze;
<keyword>register</keyword> <keyword>enum</keyword>, &zp;1.6&ze;, &zp;4.6&ze;, <keyword>register</keyword> identifier, &zp;35.9&ze;, &zp;0.0&ze;
<keyword>extern</keyword> <keyword>void</keyword>, &zp;21.5&ze;, &zp;2.1&ze;, <keyword>extern</keyword> identifier, &zp;23.7&ze;, &zp;0.0&ze;
<caption>
Common token pairs involving a <c_syntax>storage-class</c_syntax>.
Based on the visible form of the <file>.c</file> files (the keyword
<keyword>auto</keyword> occurred 14 times).
</caption>
.E_TABLE

.TABLE storclass_bigram_h
: l 1.8cm 2.1cm l 1.8cm 2.1cm
Token Sequence, % Occurrence First Token, % Occurrence of Second Token, Token Sequence, % Occurrence First Token, % Occurrence of Second Token
<keyword>typedef</keyword> <keyword>union</keyword>, &zp;12.4&ze;, &zp;67.1&ze;, <keyword>typedef</keyword> <keyword>unsigned</keyword>, &zp;6.6&ze;, &zp;3.1&ze;
<keyword>typedef</keyword> <keyword>enum</keyword>, &zp;6.2&ze;, &zp;37.2&ze;, <keyword>extern</keyword> <keyword>unsigned</keyword>, &zp;2.9&ze;, &zp;2.8&ze;
<keyword>typedef</keyword> <keyword>signed</keyword>, &zp;0.5&ze;, &zp;28.6&ze;, <keyword>static</keyword> <keyword>void</keyword>, &zp;10.3&ze;, &zp;2.2&ze;
<keyword>extern</keyword> <keyword>void</keyword>, &zp;28.6&ze;, &zp;24.0&ze;, <keyword>typedef</keyword> <keyword>void</keyword>, &zp;4.0&ze;, &zp;1.6&ze;
<keyword>extern</keyword> <keyword>double</keyword>, &zp;0.3&ze;, &zp;17.9&ze;, <keyword>static</keyword> <keyword>int</keyword>, &zp;7.0&ze;, &zp;1.2&ze;
<keyword>typedef</keyword> <keyword>struct</keyword>, &zp;46.3&ze;, &zp;16.6&ze;, <keyword>extern</keyword> identifier, &zp;32.2&ze;, &zp;0.9&ze;
<keyword>extern</keyword> <keyword>int</keyword>, &zp;23.2&ze;, &zp;15.2&ze;, <keyword>register</keyword> <keyword>long</keyword>, &zp;16.0&ze;, &zp;0.8&ze;
<keyword>extern</keyword> <keyword>float</keyword>, &zp;0.3&ze;, &zp;9.8&ze;, <keyword>register</keyword> <keyword>unsigned</keyword>, &zp;24.8&ze;, &zp;0.6&ze;
<keyword>register</keyword> <keyword>signed</keyword>, &zp;2.6&ze;, &zp;8.2&ze;, <keyword>static</keyword> identifier, &zp;70.3&ze;, &zp;0.5&ze;
<keyword>static</keyword> <keyword>const</keyword>, &zp;6.4&ze;, &zp;5.0&ze;, <keyword>register</keyword> <keyword>int</keyword>, &zp;18.4&ze;, &zp;0.3&ze;
<keyword>extern</keyword> <keyword>char</keyword>, &zp;3.8&ze;, &zp;4.8&ze;, <keyword>typedef</keyword> identifier, &zp;16.7&ze;, &zp;0.2&ze;
<keyword>extern</keyword> <keyword>struct</keyword>, &zp;4.3&ze;, &zp;3.3&ze;, <keyword>register</keyword> identifier, &zp;18.4&ze;, &zp;0.0&ze;
<caption>
Common token pairs involving a <c_syntax>storage-class</c_syntax>.
Based on the visible form of the <file>.h</file> files (the keyword
<keyword>auto</keyword> occurred 6 times).
</caption>
.E_TABLE


1368

.TABLE typespec_bigram
: l 1.8cm 2.2cm l 1.8cm 2.2cm
Token Sequence, % Occurrence First Token, % Occurrence of Second Token, Token Sequence, % Occurrence First Token, % Occurrence of Second Token
<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;38.7&ze;, &zp;72.2&ze;, <keyword>;</keyword> <keyword>long</keyword>, &zp;0.1&ze;, &zp;6.2&ze;
<keyword>unsigned</keyword> <keyword>short</keyword>, &zp;5.8&ze;, &zp;63.8&ze;, &comma; <keyword>void</keyword>, &zp;0.3&ze;, &zp;5.8&ze;
<keyword>char</keyword> <keyword>*p</keyword>, &zp;74.5&ze;, &zp;63.3&ze;, <keyword>static</keyword> <keyword>unsigned</keyword>, &zp;3.8&ze;, &zp;5.5&ze;
<keyword>(</keyword> <keyword>signed</keyword>, &zp;0.0&ze;, &zp;60.5&ze;, <keyword>extern</keyword> <keyword>double</keyword>, &zp;1.3&ze;, &zp;5.5&ze;
<keyword>;</keyword> <keyword>enum</keyword>, &zp;0.1&ze;, &zp;45.5&ze;, <keyword>}</keyword> <keyword>int</keyword>, &zp;2.2&ze;, &zp;5.3&ze;
<keyword>(</keyword> <keyword>struct</keyword>, &zp;2.9&ze;, &zp;41.8&ze;, <keyword>{</keyword> <keyword>signed</keyword>, &zp;0.0&ze;, &zp;5.2&ze;
<keyword>;</keyword> <keyword>float</keyword>, &zp;0.1&ze;, &zp;40.0&ze;, <keyword>static</keyword> <keyword>char</keyword>, &zp;4.1&ze;, &zp;5.1&ze;
<keyword>;</keyword> <keyword>union</keyword>, &zp;0.0&ze;, &zp;33.7&ze;, header-name <keyword>double</keyword>, &zp;0.2&ze;, &zp;5.1&ze;
<keyword>static</keyword> <keyword>void</keyword>, &zp;33.7&ze;, &zp;32.7&ze;, <keyword>static</keyword> <keyword>struct</keyword>, &zp;6.4&ze;, &zp;4.8&ze;
<keyword>(</keyword> <keyword>float</keyword>, &zp;0.0&ze;, &zp;32.0&ze;, <keyword>register</keyword> <keyword>enum</keyword>, &zp;1.6&ze;, &zp;4.6&ze;
<keyword>(</keyword> <keyword>unsigned</keyword>, &zp;1.0&ze;, &zp;29.0&ze;, <keyword>long</keyword> <keyword>*p</keyword>, &zp;7.1&ze;, &zp;2.8&ze;
<keyword>(</keyword> <keyword>void</keyword>, &zp;1.4&ze;, &zp;26.6&ze;, <keyword>int</keyword> identifier, &zp;87.6&ze;, &zp;2.3&ze;
<keyword>;</keyword> <keyword>unsigned</keyword>, &zp;1.0&ze;, &zp;26.4&ze;, <keyword>extern</keyword> <keyword>void</keyword>, &zp;21.5&ze;, &zp;2.1&ze;
<keyword>;</keyword> <keyword>int</keyword>, &zp;2.5&ze;, &zp;24.8&ze;, <keyword>struct</keyword> identifier, &zp;99.0&ze;, &zp;1.9&ze;
<keyword>(</keyword> <keyword>char</keyword>, &zp;1.0&ze;, &zp;23.9&ze;, <keyword>extern</keyword> <keyword>int</keyword>, &zp;32.1&ze;, &zp;1.7&ze;
<keyword>{</keyword> <keyword>union</keyword>, &zp;0.0&ze;, &zp;23.4&ze;, <keyword>short</keyword> <keyword>*p</keyword>, &zp;21.8&ze;, &zp;1.4&ze;
<keyword>(</keyword> <keyword>double</keyword>, &zp;0.0&ze;, &zp;22.9&ze;, <keyword>register</keyword> <keyword>struct</keyword>, &zp;19.1&ze;, &zp;1.4&ze;
<keyword>;</keyword> <keyword>double</keyword>, &zp;0.0&ze;, &zp;19.8&ze;, <keyword>const</keyword> <keyword>unsigned</keyword>, &zp;6.2&ze;, &zp;1.4&ze;
<keyword>void</keyword> <keyword>*p</keyword>, &zp;17.5&ze;, &zp;19.0&ze;, <keyword>const</keyword> <keyword>struct</keyword>, &zp;11.1&ze;, &zp;1.3&ze;
&comma; <keyword>unsigned</keyword>, &zp;0.6&ze;, &zp;18.9&ze;, <keyword>typedef</keyword> <keyword>struct</keyword>, &zp;62.4&ze;, &zp;1.2&ze;
<keyword>}</keyword> <keyword>void</keyword>, &zp;4.1&ze;, &zp;18.0&ze;, <keyword>register</keyword> <keyword>int</keyword>, &zp;23.0&ze;, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;21.2&ze;, &zp;18.0&ze;, <keyword>register</keyword> <keyword>char</keyword>, &zp;10.2&ze;, &zp;1.2&ze;
<keyword>;</keyword> <keyword>struct</keyword>, &zp;1.3&ze;, &zp;17.6&ze;, <keyword>volatile</keyword> <keyword>unsigned</keyword>, &zp;25.6&ze;, &zp;1.1&ze;
<keyword>;</keyword> <keyword>char</keyword>, &zp;0.8&ze;, &zp;17.5&ze;, <keyword>void</keyword> identifier, &zp;61.7&ze;, &zp;0.9&ze;
&comma; <keyword>int</keyword>, &zp;1.4&ze;, &zp;15.9&ze;, <keyword>void</keyword> <keyword>)</keyword>, &zp;17.5&ze;, &zp;0.9&ze;
<keyword>static</keyword> <keyword>int</keyword>, &zp;28.2&ze;, &zp;15.1&ze;, <keyword>register</keyword> <keyword>unsigned</keyword>, &zp;6.1&ze;, &zp;0.9&ze;
<keyword>;</keyword> <keyword>signed</keyword>, &zp;0.0&ze;, &zp;14.7&ze;, <keyword>extern</keyword> <keyword>char</keyword>, &zp;7.4&ze;, &zp;0.9&ze;
<keyword>{</keyword> <keyword>struct</keyword>, &zp;4.3&ze;, &zp;14.5&ze;, <keyword>const</keyword> <keyword>void</keyword>, &zp;5.3&ze;, &zp;0.8&ze;
identifier <keyword>double</keyword>, &zp;0.0&ze;, &zp;13.1&ze;, <keyword>signed</keyword> <keyword>short</keyword>, &zp;11.3&ze;, &zp;0.7&ze;
<keyword>{</keyword> <keyword>unsigned</keyword>, &zp;1.9&ze;, &zp;12.5&ze;, <keyword>int</keyword> <keyword>)</keyword>, &zp;6.6&ze;, &zp;0.6&ze;
&comma; <keyword>struct</keyword>, &zp;0.8&ze;, &zp;12.2&ze;, <keyword>extern</keyword> <keyword>struct</keyword>, &zp;6.9&ze;, &zp;0.5&ze;
<keyword>{</keyword> <keyword>int</keyword>, &zp;4.8&ze;, &zp;11.5&ze;, <keyword>volatile</keyword> <keyword>struct</keyword>, &zp;15.5&ze;, &zp;0.4&ze;
<keyword>{</keyword> <keyword>enum</keyword>, &zp;0.1&ze;, &zp;11.1&ze;, <keyword>long</keyword> identifier, &zp;68.3&ze;, &zp;0.4&ze;
<keyword>typedef</keyword> <keyword>union</keyword>, &zp;3.2&ze;, &zp;11.0&ze;, <keyword>long</keyword> <keyword>)</keyword>, &zp;21.7&ze;, &zp;0.4&ze;
<keyword>(</keyword> <keyword>short</keyword>, &zp;0.0&ze;, &zp;11.0&ze;, <keyword>float</keyword> <keyword>*p</keyword>, &zp;9.2&ze;, &zp;0.3&ze;
<keyword>;</keyword> <keyword>short</keyword>, &zp;0.0&ze;, &zp;10.6&ze;, <keyword>char</keyword> identifier, &zp;22.6&ze;, &zp;0.3&ze;
<keyword>(</keyword> <keyword>int</keyword>, &zp;1.0&ze;, &zp;10.6&ze;, <keyword>typedef</keyword> <keyword>unsigned</keyword>, &zp;6.2&ze;, &zp;0.2&ze;
&comma; <keyword>float</keyword>, &zp;0.0&ze;, &zp;10.6&ze;, <keyword>signed</keyword> <keyword>long</keyword>, &zp;20.8&ze;, &zp;0.2&ze;
<keyword>const</keyword> <keyword>char</keyword>, &zp;54.1&ze;, &zp;10.4&ze;, <keyword>double</keyword> <keyword>*p</keyword>, &zp;7.9&ze;, &zp;0.2&ze;
<keyword>{</keyword> <keyword>float</keyword>, &zp;0.1&ze;, &zp;10.2&ze;, <keyword>volatile</keyword> <keyword>int</keyword>, &zp;7.4&ze;, &zp;0.1&ze;
<keyword>(</keyword> <keyword>union</keyword>, &zp;0.0&ze;, &zp;9.9&ze;, <keyword>unsigned</keyword> identifier, &zp;7.0&ze;, &zp;0.1&ze;
&comma; <keyword>char</keyword>, &zp;0.4&ze;, &zp;9.9&ze;, <keyword>union</keyword> <keyword>{</keyword>, &zp;34.5&ze;, &zp;0.1&ze;
<keyword>(</keyword> <keyword>long</keyword>, &zp;0.2&ze;, &zp;9.2&ze;, <keyword>signed</keyword> <keyword>char</keyword>, &zp;22.6&ze;, &zp;0.1&ze;
&comma; <keyword>enum</keyword>, &zp;0.0&ze;, &zp;9.2&ze;, <keyword>short</keyword> identifier, &zp;60.9&ze;, &zp;0.1&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;24.6&ze;, &zp;9.1&ze;, <keyword>enum</keyword> <keyword>{</keyword>, &zp;13.4&ze;, &zp;0.1&ze;
<keyword>{</keyword> <keyword>double</keyword>, &zp;0.0&ze;, &zp;8.6&ze;, <keyword>union</keyword> identifier, &zp;65.5&ze;, &zp;0.0&ze;
<keyword>typedef</keyword> <keyword>enum</keyword>, &zp;10.8&ze;, &zp;8.2&ze;, <keyword>signed</keyword> <keyword>int</keyword>, &zp;7.5&ze;, &zp;0.0&ze;
&comma; <keyword>double</keyword>, &zp;0.0&ze;, &zp;8.2&ze;, <keyword>signed</keyword> <keyword>)</keyword>, &zp;37.9&ze;, &zp;0.0&ze;
<keyword>int</keyword> <keyword>*p</keyword>, &zp;4.1&ze;, &zp;8.1&ze;, <keyword>short</keyword> <keyword>)</keyword>, &zp;14.0&ze;, &zp;0.0&ze;
&comma; <keyword>union</keyword>, &zp;0.0&ze;, &zp;8.0&ze;, <keyword>float</keyword> identifier, &zp;64.3&ze;, &zp;0.0&ze;
&comma; <keyword>signed</keyword>, &zp;0.0&ze;, &zp;7.9&ze;, <keyword>float</keyword> <keyword>)</keyword>, &zp;26.1&ze;, &zp;0.0&ze;
<keyword>)</keyword> <keyword>enum</keyword>, &zp;0.0&ze;, &zp;7.1&ze;, <keyword>enum</keyword> identifier, &zp;86.6&ze;, &zp;0.0&ze;
<keyword>{</keyword> <keyword>char</keyword>, &zp;1.3&ze;, &zp;7.1&ze;, <keyword>double</keyword> identifier, &zp;70.7&ze;, &zp;0.0&ze;
<keyword>static</keyword> <keyword>signed</keyword>, &zp;0.0&ze;, &zp;6.5&ze;, <keyword>double</keyword> <keyword>)</keyword>, &zp;19.1&ze;, &zp;0.0&ze;
<keyword>;</keyword> <keyword>void</keyword>, &zp;0.3&ze;, &zp;6.3&ze;, , , 
<caption>
Common token pairs involving a
<c_syntax>type-specifier</c_syntax>.  Based on the visible form of the
<file>.c</file> files.  The type specifiers <keyword>_Bool</keyword>,
<keyword>_Complex</keyword>, and <keyword>_Imaginary</keyword> did
not appear in the visible form of the <file>.c</file> files.
</caption>
.E_TABLE


1372

.TABLE typespec_seq
: l r l r
Type Specifier Sequence, %, Type Specifier Sequence, %
<keyword>int</keyword>, &zp;39.9&ze;, <keyword>long</keyword>, &zp;2.2&ze;
<keyword>void</keyword>, &zp;24.3&ze;, <keyword>unsigned</keyword>, &zp;1.6&ze;
<keyword>char</keyword>, &zp;15.6&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;0.9&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;6.2&ze;, <keyword>float</keyword>, &zp;0.6&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;4.0&ze;, <keyword>short</keyword>, &zp;0.5&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;3.4&ze;, <keyword>double</keyword>, &zp;0.5&ze;
<caption>
Occurrence of <c_syntax>type-specifier</c_syntax> sequences (as a
percentage of all type specifier sequences; cut-off below 0.1%).
Based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE


1380

.TABLE esu_tok_tok
: l r l r
Token Sequence, Occurrences, Token Sequence, Occurrences
<keyword>enum</keyword> <keyword>{</keyword>, &zc;456 (1&comma;591), <keyword>struct</keyword> id <keyword>;</keyword>, &z;&zcz;76 (13&comma;384)
<keyword>enum</keyword> id <keyword>;</keyword>, &zcz;&z;0 (&zcz;&z;0), <keyword>struct</keyword> id id, 122&comma;974 (27&comma;589)
<keyword>enum</keyword> id <keyword>{</keyword>, &zc;474 (1&comma;059), <keyword>union</keyword> <keyword>{</keyword>, &z;&zc;297 (&z;&zc;725)
<keyword>enum</keyword> id id, 2&comma;922 (&zc;633), <keyword>union</keyword> id <keyword>;</keyword>, &z2;&zcz;0 (&z;&zcz;11)
<keyword>struct</keyword> <keyword>{</keyword>, 1&comma;567 (6&comma;503), <keyword>union</keyword> id <keyword>{</keyword>, &z;&zc;105 (&z;2&comma;624)
<keyword>struct</keyword> id <keyword>{</keyword>, 4&comma;407 (1&comma;311), <keyword>union</keyword> id id, &z2;&zc;330 (&z;&zc;231)
<caption>
Number of occurrences of the given token sequence.  Based on the
visible source of the <file>.c</file> files (<file>.h</file> files in
parentheses).
</caption>
.E_TABLE


1383

.FIG
bitwidth
<caption>
Number of bit-field declarations specifying the given number of
bits.  Based on the translated form of the books benchmark programs.
(Declarations encountered in any source or header file were only
counted once, the contents of system headers were ignored.)
</caption>
.E_FIG


1393

.TABLE st_member_type
: l r l r l r l r
Type, %, Type, %, Type, %, Type, %
<keyword>int</keyword>, &zp;15.8&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;7.7&ze;, <keyword>char</keyword> <keyword>*</keyword>, &zp;2.3&ze;, <keyword>void</keyword> *(), &zp;1.3&ze;
other-types, &zp;12.7&ze;, <keyword>struct</keyword>, &zp;7.2&ze;, <keyword>enum</keyword>, &zp;1.9&ze;, <keyword>float</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;11.1&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;5.2&ze;, <keyword>long</keyword>, &zp;1.8&ze;, <keyword>short</keyword>, &zp;1.0&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;10.4&ze;, <keyword>unsigned</keyword>, &zp;4.0&ze;, <keyword>char</keyword>, &zp;1.8&ze;, <keyword>int</keyword> *(), &zp;1.0&ze;
<keyword>struct</keyword> <keyword>*</keyword>, &zp;8.8&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> [], &zp;3.1&ze;, <keyword>char</keyword> [], &zp;1.5&ze;, , 
<caption>
Occurrence of structure member types (as a percentage of the types of
all such members).  Based on the translated form of the books
benchmark programs.
</caption>
.E_TABLE

.TABLE un_member_type
: l r l r l r l r
Type, %, Type, %, Type, %, Type, %
<keyword>struct</keyword>, &zp;46.9&ze;, <keyword>unsigned</keyword> <keyword>int</keyword>, &zp;3.8&ze;, <keyword>double</keyword>, &zp;1.9&ze;, <keyword>char</keyword> [], &zp;1.3&ze;
other-types, &zp;11.3&ze;, <keyword>char</keyword> <keyword>*</keyword>, &zp;2.8&ze;, <keyword>enum</keyword>, &zp;1.7&ze;, <keyword>union</keyword> <keyword>*</keyword>, &zp;1.1&ze;
<keyword>struct</keyword> <keyword>*</keyword>, &zp;8.3&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.4&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.5&ze;, , 
<keyword>int</keyword>, &zp;6.0&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.1&ze;, <keyword>struct</keyword> [], &zp;1.3&ze;, , 
<keyword>unsigned</keyword> <keyword>char</keyword> [], &zp;4.3&ze;, <keyword>long</keyword>, &zp;2.1&ze;, <keyword>(</keyword> <keyword>struct</keyword> <keyword>*</keyword> <keyword>)</keyword> [], &zp;1.3&ze;, , 
<caption>
Occurrence of union member types (as a percentage of the types of all
such members).  Based on the translated form of the books benchmark
programs.
</caption>
.E_TABLE


1430

.FIG
ecvals
<caption>
Number of enumeration constants in an enumeration type and number
whose value is explicitly or implicitly specified.  Based on the
translated form of the books benchmark programs (also see <figref
href="econst">).
</caption>
.E_FIG

.TABLE enum_const_role
: 7cm r
Property, %
All value assigned implicitly, &zp;79.1&ze;
All values are bitwise distinct and zero is not used, &zp;1.7&ze;
One or more constants share the same value, &zp;1.8&ze;
All values are continuous &comma; i.e.&comma; number of enumeration constants equals maximum value minus minimum value plus &zs;1&ze;, &zp;94.9&ze;
<caption>
Some properties of the set of values (the phrase <phrase>all
values</phrase> refers to all the values in a particular enumeration
definition) assigned to the enumeration constants in enumeration
definitions.  Based on the translated form of the books benchmark
programs.
</caption>
.E_TABLE


1453

.TABLE esu_ident_cnt
 , <file>.c</file> files, <file>.h</file> files
<keyword>union</keyword> identifier, &zp;65.5&ze;, &zp;75.8&ze;
<keyword>struct</keyword> identifier, &zp;99.0&ze;, &zp;88.4&ze;
<keyword>enum</keyword> identifier, &zp;86.6&ze;, &zp;53.6&ze;
<caption>
Occurrence of types declared with tag names (as a percentage of all
occurrences of the each keyword).  Based on the visible form of the
<file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE


1462

.FIG
esutag
<caption>
Number of references to each tag previously defined in the visible
source (times, bullet, square; the definition itself is not included
in the count), tags with no definition visible in the <file>.c</file>
file (triangle; i.e., it is defined in a header) and anonymous
structure/union/enumeration definitions (star).  Based on the visible
form of the <file>.c</file> files.
</caption>
.E_FIG


1466

.TABLE typequal_bigram
: l 1.8cm 2.1cm l 1.8cm 2.1cm
Token Sequence, % Occurrence First Token, % Occurrence of Second Token, Token Sequence, % Occurrence First Token, % Occurrence of Second Token
<keyword>;</keyword> <keyword>volatile</keyword>, &zp;0.1&ze;, &zp;36.1&ze;, <keyword>{</keyword> <keyword>const</keyword>, &zp;0.2&ze;, &zp;5.6&ze;
&comma; <keyword>const</keyword>, &zp;0.2&ze;, &zp;32.8&ze;, <keyword>const</keyword> <keyword>unsigned</keyword>, &zp;6.2&ze;, &zp;1.4&ze;
<keyword>(</keyword> <keyword>const</keyword>, &zp;0.2&ze;, &zp;28.1&ze;, <keyword>const</keyword> <keyword>struct</keyword>, &zp;11.1&ze;, &zp;1.3&ze;
<keyword>(</keyword> <keyword>volatile</keyword>, &zp;0.0&ze;, &zp;26.2&ze;, <keyword>volatile</keyword> <keyword>unsigned</keyword>, &zp;25.6&ze;, &zp;1.1&ze;
<keyword>;</keyword> <keyword>const</keyword>, &zp;0.1&ze;, &zp;14.1&ze;, <keyword>const</keyword> <keyword>void</keyword>, &zp;5.3&ze;, &zp;0.8&ze;
identifier <keyword>volatile</keyword>, &zp;0.0&ze;, &zp;11.4&ze;, <keyword>volatile</keyword> <keyword>struct</keyword>, &zp;15.5&ze;, &zp;0.4&ze;
<keyword>{</keyword> <keyword>volatile</keyword>, &zp;0.1&ze;, &zp;11.0&ze;, <keyword>volatile</keyword> <keyword>int</keyword>, &zp;7.4&ze;, &zp;0.1&ze;
<keyword>const</keyword> <keyword>char</keyword>, &zp;54.1&ze;, &zp;10.4&ze;, <keyword>volatile</keyword> identifier, &zp;36.2&ze;, &zp;0.0&ze;
<keyword>static</keyword> <keyword>const</keyword>, &zp;1.5&ze;, &zp;10.0&ze;, <keyword>volatile</keyword> <keyword>(</keyword>, &zp;8.9&ze;, &zp;0.0&ze;
<keyword>static</keyword> <keyword>volatile</keyword>, &zp;0.3&ze;, &zp;8.6&ze;, <keyword>const</keyword> identifier, &zp;17.6&ze;, &zp;0.0&ze;
<caption>
Common token sequences containing
<c_syntax>type-qualifier</c_syntax>s (as a percentage of each
<c_syntax>type-qualifier</c_syntax>).  Based on the visible form of
the <file>.c</file> files.
</caption>
.E_TABLE


1618

.TABLE typedef_type
: l r l r
Type, Occurrences, Type, Occurrences
<keyword>struct</keyword>, &z2p;58.00&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, &z2p;1.47&ze;
<keyword>enum</keyword>, &z2p;9.50&ze;, <keyword>int</keyword> *(), &z2p;1.46&ze;
other-types, &z2p;8.86&ze;, <keyword>enum</keyword> *(), &z2p;1.46&ze;
<keyword>struct</keyword> <keyword>*</keyword>, &z2p;6.97&ze;, <keyword>union</keyword>, &z2p;1.38&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &z2p;2.68&ze;, <keyword>long</keyword>, &z2p;1.29&ze;
<keyword>int</keyword>, &z2p;2.46&ze;, <keyword>void</keyword> *(), &z2p;1.18&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &z2p;2.21&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &z2p;1.07&ze;
<caption>
Occurrences of types defined in a <keyword>typedef</keyword>
definition (as a percentage of all types appearing in
<keyword>typedef</keyword> definition).  Based on the translated form
of the books benchmark programs.
</caption>
.E_TABLE


1630

.TABLE loc_init_type
: l r l r
Type, %, Type, %
<keyword>struct</keyword> <keyword>*</keyword>, &zp;39.5&ze;, <keyword>long</keyword>, &zp;2.6&ze;
<keyword>int</keyword>, &zp;22.6&ze;, <keyword>char</keyword>, &zp;2.5&ze;
other-types, &zp;9.1&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.4&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;4.5&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.5&ze;
<keyword>union</keyword> <keyword>*</keyword>, &zp;4.3&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;1.4&ze;
<keyword>char</keyword> <keyword>*</keyword>, &zp;4.0&ze;, <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>*</keyword>, &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;3.4&ze;, <keyword>enum</keyword>, &zp;1.1&ze;
<caption>
Occurrence of object types, in block scope, whose declarations
include an initializer (as a percentage of the type of all such
declarations with initializers).  Based on the translated form of the
books benchmark programs.  Usage information on the types of all
objects declared at file scope is given elsewhere (see <tableref
href="loc_obj_type">).
</caption>
.E_TABLE

.TABLE glob_init_type
: l r l r
Type, %, Type, %
<keyword>const</keyword> <keyword>char</keyword> [], &zp;22.5&ze;, <keyword>char</keyword> <keyword>*</keyword>, &zp;2.2&ze;
<keyword>const</keyword> <keyword>struct</keyword>, &zp;14.7&ze;, <keyword>int</keyword> [], &zp;2.1&ze;
<keyword>int</keyword>, &zp;11.1&ze;, <keyword>char</keyword> [], &zp;2.0&ze;
<keyword>struct</keyword>, &zp;10.4&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> [], &zp;1.7&ze;
other-types, &zp;10.4&ze;, <keyword>void</keyword> *(), &zp;1.3&ze;
<keyword>struct</keyword> [], &zp;8.3&ze;, <keyword>(</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>)</keyword> [], &zp;1.3&ze;
<keyword>struct</keyword> <keyword>*</keyword>, &zp;2.9&ze;, <keyword>int</keyword> *(), &zp;1.2&ze;
<keyword>(</keyword> <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword> <keyword>const</keyword> <keyword>)</keyword> [], &zp;2.9&ze;, <keyword>const</keyword> <keyword>unsigned</keyword> <keyword>char</keyword> [], &zp;1.2&ze;
<keyword>unsigned</keyword> <keyword>short</keyword> [], &zp;2.5&ze;, <keyword>const</keyword> <keyword>short</keyword> [], &zp;1.2&ze;
<caption>
Occurrence of object types with internal linkage, at file scope,
whose declarations include an initializer (as a percentage of the
type of all such declarations with initializers).  Based on the
translated form of the books benchmark programs.  Usage information
on the types of all objects declared at file scope is given elsewhere
(see <tableref href="ext_obj_type">).
</caption>
.E_TABLE

1641

.FIG
obj_init
<caption>
Number of object declarations that include an initializer (as a
percentage of all corresponding object declarations), either within
function definitions (functions that did not contain any object
definitions were not included), or within translation units having
internal linkage (while there are a number of ways of counting
objects with external linkage, none seemed appropriate and no usage
information is given here).  Based on the translated form of the books
benchmark programs.
</caption>
.E_FIG


1696

.FIG
stmtlendiff
<caption>
Visible difference in offset of right margin between successive
lines, in the visible form of the <file>.c</file> files (horizontal
tab characters are mapped to 8 space characters), for lines of
various lengths, i.e., those whose previous line contained 60 or more
characters, and those whose previous line contains less than 20
characters.  There are ten times fewer lines sharing the same right
offset as sharing the same left offset (see <figref href="indentdiff">).
</caption>
.E_FIG

.FIG
indentdiff
<caption>
Visible difference in offset of indentation of left margin between
successive lines in the visible form of the <file>.c</file> files
(horizontal tab characters are mapped to 8 space characters).  The
smaller peaks around zero are indentation differences of two
characters.  The wider spaced peaks have a separation of eight
characters.  Individual files had more pronounced peaks; this plot is
for all the source.
</caption>
.E_FIG

.FIG
stmtperfunc
<caption>
Number of each kind of statement in function definitions.  Based on
the translated form of the books benchmark programs.
</caption>
.E_FIG


1699

Usage information on block nesting is discussed elsewhere<ref limit,
block nesting>.

.FIG
cmpdperfunc
<caption>
Number of <c_syntax>compound-statement</c_syntax>s in function
definitions.  Based on the translated form of the books benchmark
programs.
</caption>
.E_FIG


1702

.TABLE full_expr_per_func
Context of Full Expression, Occurrence, Context of Full Expression, Occurrence
expression statement, &zp;65.9&ze;, <keyword>for</keyword> expr-1, &zp;1.6&ze;
<keyword>if</keyword> controlling expression, &zp;16.4&ze;, <keyword>for</keyword> controlling expression, &zp;1.5&ze;
<keyword>return</keyword> expression, &zp;6.2&ze;, <keyword>for</keyword> clause-1, &zp;1.5&ze;
object declaration initializer, &zp;4.2&ze;, <keyword>switch</keyword> controlling expression, &zp;0.6&ze;
<keyword>while</keyword> controlling expression, &zp;2.1&ze;, , 
<caption>
Occurrence of full expressions in various contexts (as a percentage
of all full expressions).  Based on the translated form of the books
benchmark programs.
</caption>
.E_TABLE


1711

In the translated form of the books benchmark programs 2% of labels
were not the destination of any <keyword>goto</keyword> statement.
Usage information on <keyword>goto</keyword> statements is given
elsewhere<ref jump statement, causes jump to>.

.TABLE numlabels
Labels, % Functions, Labels, % Functions
 &zs;1&ze;, &zp;3.5&ze;, &zs;3&ze;, &zp;0.3&ze;
 &zs;2&ze;, &zp;0.9&ze;, &zs;4&ze;, &zp;0.1&ze;
<caption>
Percentage of function definitions containing the given number of
labeled statements (other than a <keyword>case</keyword> or
<keyword>default</keyword> label).  Based on the visible form of the
<file>.c</file> files.
</caption>
.E_TABLE


1716

.TABLE case_bigram
: l r r
Token Sequence, % Occurrence First Token, % Occurrence of Second Token
<keyword>;</keyword> <keyword>default</keyword>, &zp;0.4&ze;, &zp;81.4&ze;
<keyword>;</keyword> <keyword>case</keyword>, &zp;2.1&ze;, &zp;52.1&ze;
<keyword>:</keyword> <keyword>case</keyword>, &zp;15.5&ze;, &zp;22.1&ze;
<keyword>{</keyword> <keyword>case</keyword>, &zp;2.6&ze;, &zp;15.0&ze;
<keyword>}</keyword> <keyword>case</keyword>, &zp;1.3&ze;, &zp;7.3&ze;
<keyword>:</keyword> <keyword>default</keyword>, &zp;0.5&ze;, &zp;5.7&ze;
<keyword>#endif</keyword> <keyword>default</keyword>, &zp;0.8&ze;, &zp;4.4&ze;
<caption>
Common token pairs involving a <keyword>case</keyword> or
<keyword>default</keyword> label.  Based on the visible form of the
<file>.c</file> files.  Almost all of the sequences <c_code>{
case</c_code> occur immediately after the controlling expression of
the <keyword>switch</keyword> statement.
</caption>
.E_TABLE


1718

Usage information on the number of declarations occurring in nested
blocks is given elsewhere (see <figref href="blkdeclnest">).

.FIG
scopelines
<caption>
Number of physical lines occurring within a
<c_syntax>compound-statement</c_syntax> (including the opening and
closing braces and any nested
<c_syntax>compound-statement</c_syntax>s, but excluding the lines
between the braces denoting the start/end of the function
definition).  Based on the translated form of the books benchmark
programs.
</caption>
.E_FIG


1720

.TABLE exprstmt
: l r l r
Form of <c_syntax>expression-statement</c_syntax>, %, Form of <c_syntax>expression-statement</c_syntax>, %
function-call, &zs;37&ze;, identifier <keyword>=</keyword> expression, &zs;4&ze;
identifier <keyword>=</keyword> identifier, &zs;16&ze;, identifier <keyword>v++</keyword>, &zs;2&ze;
identifier <keyword>=</keyword> function-call, &zs;10&ze;, expression, &zs;1&ze;
identifier <keyword>=</keyword> constant, &zs;7&ze;, other-expr-stmt, &zs;22&ze;
<caption>
Occurrence of the most common forms of expression statement (as a
percentage of all expression statements).  Based on the translated
form of the books benchmark programs.
</caption>
.E_TABLE


1728

.TABLE if_cntrl
: c r c r
Abstract Form of Control Expression, %, Abstract Form of Control Expression, %
object, &zp;15.5&ze;, object <keyword><</keyword> <c_syntax>integer-constant</c_syntax>, &zp;2.2&ze;
object <keyword>==</keyword> object, &zp;8.9&ze;, object <keyword>></keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.8&ze;
function-call, &zp;7.4&ze;, function-call <keyword>==</keyword> object, &zp;1.6&ze;
<keyword>!</keyword> object, &zp;7.4&ze;, object <keyword>></keyword> object, &zp;1.4&ze;
expression, &zp;5.7&ze;, object <keyword>!=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.3&ze;
object <keyword>!=</keyword> object, &zp;4.2&ze;, function-call <keyword>==</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.2&ze;
object <keyword>==</keyword> <c_syntax>integer-constant</c_syntax>, &zp;4.0&ze;, object <keyword><</keyword> object, &zp;1.1&ze;
<keyword>!</keyword> function-call, &zp;3.8&ze;, others, &zp;32.4&ze;
<caption>
Occurrence of various kinds of <keyword>if</keyword> statement
controlling expressions (as a percentage of all <keyword>if</keyword>
statements).  Based on the visible form of the <file>.c</file> files.
Where <phrase>object</phrase> is a reference to a single object,
which may be an identifier, a member (e.g., <c_code>s.m</c_code>,
<c_code>s->m->n</c_code>, or <c_code>a[expr]</c_code>),
<c_syntax>integer-constant</c_syntax> is an integer constant
expression, and <phrase>expression</phrase> represents all other
expressions.
</caption>
.E_TABLE

.TABLE switch_cntrl
: c r
Abstract Form of Control Expression, %
 object, &zp;75.3&ze;
 function-call, &zp;14.2&ze;
 expression, &zp;5.2&ze;
<keyword>*v</keyword> object, &zp;2.0&ze;
others, &zp;3.3&ze;
<caption>
Occurrence of <keyword>switch</keyword> statement controlling
expressions (as a percentage of all <keyword>switch</keyword>
statements).  Based on the visible form of the <file>.c</file> files.
Where <phrase>object</phrase> is a reference to a single object,
which may be an identifier, a member (e.g., <c_code>s.m</c_code>,
<c_code>s->m->n</c_code>, or <c_code>a[expr]</c_code>),
<c_syntax>integer-constant</c_syntax> is an integer constant
expression, and <phrase>expression</phrase> represents all other
expressions.
</caption>
.E_TABLE

.TABLE if_releqlog_op
: c 1.9cm 2.0cm c 1.9cm 2.0cm
Operator, % Controlling Expression, % Occurrence of Operator, Operator, % Controlling Expression, % Occurrence of Operator
<keyword>==</keyword>, &zp;31.7&ze;, &zp;88.6&ze;, <keyword>>=</keyword>, &zp;3.5&ze;, &zp;76.8&ze;
<keyword>!=</keyword>, &zp;14.1&ze;, &zp;79.7&ze;, no relational/equality, &zp;47.5&ze;, &emdash;
<keyword><</keyword>, &zp;6.9&ze;, &zp;45.6&ze;, <keyword>||</keyword>, &zp;9.6&ze;, &zp;85.9&ze;
<keyword><=</keyword>, &zp;1.9&ze;, &zp;68.6&ze;, <keyword>&&</keyword>, &zp;14.5&ze;, &zp;82.3&ze;
<keyword>></keyword>, &zp;3.5&ze;, &zp;84.9&ze;, no logical operators, &zp;84.2&ze;, &emdash;
<caption>
Occurrence of equality, relational, and logical operators in the
conditional expression of an <keyword>if</keyword> statement (as a
percentage of all such controlling expressions and as a percentage of
each operator).  Based on the visible form of the <file>.c</file>
files.  The percentage of controlling expressions may not sum to 100%
because more than one of the operators occurs in the same expression.
</caption>
.E_TABLE

.FIG
selectperfunc
<caption>
Number of functions containing a given number of
<c_syntax>selection-statement</c_syntax>s.  Based on the translated
form of the books benchmark programs.
</caption>
.E_FIG

.FIG
selectnest
<caption>
Number of <c_syntax>selection-statement</c_syntax>s having a given
maximum nesting level for embedded C <book Engblom_98> (whose data
was multiplied by a constant to allow comparison; the data for
nesting depth 5 was interpolated) and the visible form of the
<file>.c</file> files.
</caption>
.E_FIG


1737

.FIG
caseden
<caption>
<phrase>Density</phrase> of <keyword>case</keyword> label values
(calculated as (maximum <keyword>case</keyword> label value minus
minimum <keyword>case</keyword> label value minus one) divided by the
number of <keyword>case</keyword> labels associated with a
<keyword>switch</keyword> statement) and span of
<keyword>case</keyword> label values (calculated as (maximum
<keyword>case</keyword> label value minus minimum
<keyword>case</keyword> label value minus one)).  Based on the
translated form of the books benchmark programs and embedded results
from Engblom <book Engblom_98> (which were scaled, i.e., multiplied
by a constant, to allow comparison).  The results were scaled to
match the total count of <keyword>switch</keyword> statements that
included a <keyword>default</keyword> label.
</caption>
.E_FIG

.FIG
stmtcase
<caption>
Number of statements following (and not including) one or more
<keyword>case</keyword> or <keyword>default</keyword> labels
(statements from any nested <keyword>switch</keyword> statements did
not contribute towards the count of a label).  Based on the visible
form of the <file>.c</file> files.
</caption>
.E_FIG

.TABLE switch_cntrl_type
: l r l r
Type, %, Type, %
<keyword>int</keyword>, &zp;29.5&ze;, bit-field, &zp;3.1&ze;
<keyword>unsigned</keyword> <keyword>long</keyword>, &zp;18.7&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;2.8&ze;
<keyword>enum</keyword>, &zp;14.6&ze;, <keyword>short</keyword>, &zp;2.5&ze;
<keyword>unsigned</keyword> <keyword>char</keyword>, &zp;12.4&ze;, <keyword>long</keyword>, &zp;0.9&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;10.0&ze;, other-types, &zp;0.2&ze;
<keyword>char</keyword>, &zp;5.1&ze;, , 
<caption>
Occurrence of <keyword>switch</keyword> statements having a
controlling expression of the given type (as a percentage of all
<keyword>switch</keyword> statements).  Based on the translated form
of the books benchmark programs.
</caption>
.E_TABLE


1752

A study by Bod&iup;k, Gupta, and Soffa <book Bodik_98> found that
11.3% of the expressions in SPEC95 were loop invariant.

.FIG
iterperfunc
<caption>
Number of function definitions containing the given number of
<c_syntax>iteration-statement</c_syntax>s.  Based on the translated
form of the books benchmark programs.
</caption>
.E_FIG

.FIG
loopnest
<caption>
Number of <c_syntax>iteration-statement</c_syntax>s having a
given maximum nesting level for embedded C <book Engblom_98> (whose
data was multiplied by a constant to allow comparison) and the
visible form of the <file>.c</file> files.
</caption>
.E_FIG

.TABLE for_header_cnt
: c r
Abstract Form of <keyword>for</keyword> loop header, %
assignment <keyword>;</keyword> object <keyword><</keyword> object <keyword>;</keyword> object <keyword>v++</keyword>, &zp;33.2&ze;
assignment <keyword>;</keyword> object <keyword><</keyword> <c_syntax>integer-constant</c_syntax> <keyword>;</keyword> object <keyword>v++</keyword>, &zp;11.3&ze;
assignment <keyword>;</keyword> object <keyword>;</keyword> assignment, &zp;7.0&ze;
assignment <keyword>;</keyword> object <keyword><</keyword> expression <keyword>;</keyword> object <keyword>v++</keyword>, &zp;3.3&ze;
assignment <keyword>;</keyword> object <keyword><</keyword> object <keyword>;</keyword> <keyword>++v</keyword> object, &zp;2.7&ze;
<keyword>;</keyword> <keyword>;</keyword>, &zp;2.5&ze;
assignment <keyword>;</keyword> object <keyword>!=</keyword> object <keyword>;</keyword> assignment, &zp;2.5&ze;
assignment <keyword>;</keyword> object <keyword><=</keyword> object <keyword>;</keyword> object <keyword>v++</keyword>, &zp;2.2&ze;
assignment <keyword>;</keyword> object <keyword>>=</keyword> <c_syntax>integer-constant</c_syntax> <keyword>;</keyword> object <keyword>v--</keyword>, &zp;1.6&ze;
assignment <keyword>;</keyword> object <keyword><</keyword> function-call <keyword>;</keyword> object <keyword>v++</keyword>, &zp;1.4&ze;
assignment <keyword>;</keyword> object <keyword><</keyword> object <keyword>;</keyword> object <keyword>v++</keyword> &comma; object <keyword>v++</keyword>, &zp;1.4&ze;
others, &zp;31.1&ze;
<caption>
Occurrence of various kinds of <keyword>for</keyword> statement
controlling expressions (as a percentage of all such expressions),
based on the visible form of the <file>.c</file> files.  Where
<phrase>object</phrase> is a reference to a single object, which may
be an identifier, a member (e.g., <c_code>s.m</c_code>,
<c_code>s->m->n</c_code>, or <c_code>a[expr]</c_code>);
<phrase>assignment</phrase> is an assignment expression,
<c_syntax>integer-constant</c_syntax> is an integer constant
expression, and <phrase>expression</phrase> represents all other
expressions.
</caption>
.E_TABLE

.TABLE while_cntrl
: c r c r
Abstract Form of Control Expression, %, Abstract Form of Control Expression, %
object, &zp;12.2&ze;, <keyword>*v</keyword> object, &zp;2.0&ze;
object <keyword>!=</keyword> object, &zp;7.0&ze;, assignment, &zp;1.8&ze;
<c_syntax>integer-constant</c_syntax>, &zp;6.2&ze;, <keyword>!</keyword> object, &zp;1.6&ze;
object <keyword><</keyword> object, &zp;4.7&ze;, <keyword>!</keyword> function-call, &zp;1.3&ze;
function-call, &zp;4.4&ze;, object <keyword>!=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.2&ze;
object <keyword>></keyword> <c_syntax>integer-constant</c_syntax>, &zp;4.0&ze;, object <keyword>v--</keyword> <keyword>></keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.1&ze;
object <keyword>v--</keyword>, &zp;3.2&ze;, <keyword>!</keyword> expression, &zp;1.0&ze;
assignment <keyword>!=</keyword> object, &zp;2.4&ze;, others, &zp;43.5&ze;
  expression, &zp;2.2&ze;,  , 
<caption>
Occurrence of various kinds of <keyword>while</keyword> statement
controlling expressions (as a percentage of all such statements).
Based on the visible form of the <file>.c</file> files.  Where
<phrase>object</phrase> is a reference to a single object, which may
be an identifier, a member (e.g., <c_code>s.m</c_code>,
<c_code>s->m->n</c_code>, or <c_code>a[expr]</c_code>);
<phrase>assignment</phrase> is an assignment expression,
<c_syntax>integer-constant</c_syntax> is an integer constant
expression, and <phrase>expression</phrase> represents all other
expressions.
</caption>
.E_TABLE


1760

.TABLE for_omit_expr
Components Omitted, Percentage
<c_syntax>clause-1</c_syntax>, &zp;6.8&ze;
<c_syntax>clause-1</c_syntax> <c_syntax>expr-2</c_syntax>, &zp;2.8&ze;
<c_syntax>clause-1</c_syntax> <c_syntax>expr-2</c_syntax> <c_syntax>expr-3</c_syntax>, &zp;2.7&ze;
<c_syntax>clause-1</c_syntax> <c_syntax>expr-3</c_syntax>, &zp;2.8&ze;
<c_syntax>expr-2</c_syntax>, &zp;3.6&ze;
<c_syntax>expr-2</c_syntax> <c_syntax>expr-3</c_syntax>, &zp;2.9&ze;
<c_syntax>expr-3</c_syntax>, &zp;4.5&ze;
<caption>
Occurrence of components omitted from <keyword>for</keyword>
statements (as a percentage of all <keyword>for</keyword> statements),
based on the visible form of the <file>.c</file> files.
</caption>
.E_TABLE


1768

.FIG
jumpperfunc
<caption>
Number of function definitions containing a given number of
<c_syntax>jump-statement</c_syntax>s.  Based on the translated form of
the books benchmark programs.
</caption>
.E_FIG

.FIG
brkcon
<caption>
Number of <keyword>break</keyword> and <keyword>continue</keyword>
statements per <c_syntax>iteration-statement</c_syntax>.  Based on the
visible form of the <file>.c</file> files.
</caption>
.E_FIG

.TABLE branch_kind
: l 2cm r r r r r r 2cm 1.5cm
Program, %Instructions Altering Control Flow, %CB, %UB, %IC, %PC, %Ret, %Oth, %Conditional Branch Taken, Instructions Between Branches
burg,     17.1,   74.1,   6.9,   0.0,   9.5,   9.5,   0.0,   68.8, &z;7.9
ditroff,  17.5,   76.3,   4.2,   0.1,   9.7,   9.8,   0.0,   58.1, &z;7.5
tex,      10.0,   75.9,  10.7,   0.0,   5.8,   5.8,   1.9,   57.5,  13.2
xfig,     17.5,   73.6,   7.7,   0.6,   8.6,   9.2,   0.3,   54.8, &z;7.8
xtex,     14.1,   78.2,   8.5,   0.2,   6.0,   6.2,   1.0,   53.3, &z;9.1
compress, 13.9,   88.5,   7.6,   0.0,   2.0,   2.0,   0.0,   68.3, &z;8.1
eqntott,  11.5,   93.5,   2.1,   1.5,   0.7,   2.2,   0.0,   90.3, &z;9.3
espresso, 17.1,   93.2,   1.9,   0.1,   2.3,   2.4,   0.1,   61.9, &z;6.3
gcc,      16.0,   78.9,   7.4,   0.4,   6.1,   6.5,   0.8,   59.4, &z;7.9
li,       17.7,   63.9,   8.7,   0.4,  12.9,  13.2,   0.9,   49.3, &z;8.9
sc,       22.3,   83.5,   3.9,   0.0,   6.3,   6.3,   0.0,   64.3, &z;5.4
Mean,     15.9,   80.0,   6.3,   0.3,   6.3,   6.6,   0.5,   62.4, &z;8.3
<caption>
Dynamic occurrence of different kinds of instructions that can change
the flow of control.  <phrase>%instructions altering control
flow</phrase> is expressed as a percentage of all executed
instructions.  All but the last row are expressed as percentages of
these, control flow altering, instructions only.  The kinds of
instructions that change control flow are: conditional branches
<phrase>CB</phrase>, unconditional branches <phrase>UB</phrase>,
indirect procedure calls <phrase>IC</phrase>, procedure calls
<phrase>PC</phrase>, procedure returns <phrase>Ret</phrase>, and
other breaks <phrase>Oth</phrase> (e.g., signals and
<keyword>switch</keyword> statements).  <phrase>Instructions between
branches</phrase> is the mean number of instructions between
conditional branches.  Based on Calder, Grunwald, and Zorn <book
Calder_95b>.
</caption>
.E_TABLE

.TABLE branch_often
: l r r r r r r r r r r r r r
Program,  10%, 20%, 30%, 40%, 50%, 60%,  70%,  80%,   90%,   95%,   99%,  100%,   Static count
burg,       1,   3,   5,   9,  19,  33,   58,   95,   135,   162,   268,   859,   1&comma;766
ditroff,    3,  11,  19,  28,  38,  50,   64,   91,   132,   201,   359,   867,   1&comma;974
tex,        3,   7,  15,  26,  39,  58,   89,  139,   259,   416,   788,   2&comma;369, 6&comma;050
xfig,       8,  31,  74, 138, 230, 356,  538,  814, 1&comma;441,   2&comma;060,   3&comma;352,   7&comma;476,   25&comma;224
xtex,       2,   8,  15,  22,  36,  63,  104,  225,   644, 1&comma;187,   2&comma;647,   6&comma;325,   21&comma;597
compress,   1,   2,   2,   3,   4,   5,    6,    8,    12,    14,    16,   230,   1&comma;124 
eqntott,    1,   1,   1,   2,   2,   2,    2,    3,    14,    42,    72,   466,   1&comma;536
espresso,   4,  10,  19,  30,  44,  63,   88,  121,   163,   221,   470,   1&comma;737,   4&comma;568
gcc,       13,  38,  77, 143, 245, 405,  641,  991, 1&comma;612,   2&comma;309,   3&comma;724,   7&comma;639,   16&comma;294
li,         2,   4,   7,  11,  16,  22,   29,   38,    52,    80,   128,   557,   2&comma;428 
sc,         2,   3,   4,   6,   9,  16,   30,   47,    76,   135,   353,   1&comma;465,   4&comma;478
Mean,       3,  10,  21,  38,  62,  97,  149,  233,   412,   620,   1&comma;107,   2&comma;726,   7&comma;912
<caption>
Number of static conditional branches sites that are responsible for
the quantile percentage of dynamically executed conditional branches.
For instance, 19 conditional branch sites are responsible for over
50% of the dynamically executed branches executed by
<tool>burg</tool>.  <phrase>Static count</phrase> is the total number
of conditional branch instructions in the program image.  Of the
17,565 static branch sites, 69 branches account for the execution of
50% of all dynamic conditional branches.  Not all branches will be
executed during each program execution because many branches are only
encountered during error conditions, or may reside in unreachable or
unused code.  Based on Calder, Grunwald, and Zorn <book Calder_95b>.
</caption>
.E_TABLE


1769

.FIG
gotodist
<caption>
Number of visible source lines between a <keyword>goto</keyword>
statement and its destination label (negative values denote backward
jumps).  Based on the translated form of the books benchmark programs.
</caption>
.E_FIG

.FIG
gotoscope
<caption>
Scope nesting level of <keyword>goto</keyword> and labeled statements
(nesting level 1 is the outermost block of a function definition),
and difference in scope levels between a <keyword>goto</keyword>
statement and its corresponding labeled statement (negative values
denote a jump to a less nested scope), based on the translated form
of the books benchmark programs.
</caption>
.E_FIG

1794

.FIG
extcount
<caption>
Number of <c_syntax>external-declaration</c_syntax>s and
<c_syntax>function-definition</c_syntax>s declared during the
translation of the books benchmark programs (rounded to the nearest
fifty and excluding identifiers declared in any system headers that
are <keyword>#include</keyword>d).
</caption>
.E_FIG

.FIG
calluse
<caption>
Number of functions defined in each translation unit and percentage
of functions that are called within the translation unit that defines
them.  Based on the translated form of the books benchmark programs.
</caption>
.E_FIG


1805

.FIG
numstmt
<caption>
Number of statements and visible source lines contained in function
definitions.  Based on the translated form of the book benchmark
programs.
</caption>
.E_FIG

.TABLE cheng_dead_func
: l 1cm 1.4cm 1.4cm l 1cm 1.4cm 1.4cm
Benchmark, Lines of Code, Number of Functions, Uncalled Functions, Benchmark, Lines of Code, Number of Functions, Uncalled Functions
008.espresso, 14&comma;838,  &ptz;361,  46,    126.gcc,    205&comma;583, 2&comma;019, 187
023.eqntott,  12&comma;053, &ptz;&z;62, &z;2, 130.li,      &z2;7&comma;597,  &ptz;357,   &z2;1
072.sc,     &z;8&comma;639,  &ptz;179, &z;8, 132.ijpeg,    &z;29&comma;290,  &ptz;477,  &z;16
085.cc1,      90&comma;857, 1&comma;452, 51, 134.perl,     &z;26&comma;874,  &ptz;276,  &z;13
124.m88ksim,  19&comma;092,  &ptz;252,  13,    147.vortex, &z;67&comma;205,  &ptz;923, 295
<caption>
Static count of number of functions and uncalled functions in
SPECint95.  Adapted from Cheng <book Cheng_00>.
</caption>
.E_TABLE

How many instructions are executed, on average, in a function
definition?  It will depend on the characteristics of the translator
and host processor<ref translation technology> (see <tableref
href="Calder95b2">).

.TABLE Calder95b2
: l r r r l r r r
Program,   Mean,    Leaf,   Non-Leaf, Program, Mean,   Leaf,   Non-Leaf
burg,      61.6,    30.6,   142.8, eqntott,  386.8,   402.8,   294.2
ditroff,   58.6,    72.3,    56.3, espresso, 244.9,   151.3,   526.5
tex,      173.2,    44.3,   205.4, gcc,       96.4,    30.1,   123.5
xfig,      61.9,    38.6,    74.8, li,        42.5,    31.9,    44.2
xtex,     114.9,    93.9,   136.5, sc,        71.1,    49.4,    80.1
compress, 368.4, 1&comma;360.2, 367.5, Mean, 152.8,   209.6,   186.5
<caption>
Mean number of instructions executed per function invocation.
Based on Calder, Grunwald, and Zorn <book Calder_95b>.
</caption>
.E_TABLE

What are the general control flow characteristics of function bodies?
<tableref href="func_cntrl"> gives a broad breakdown.  One
explanation for the larger number of functions containing iteration
statements in the SPECint benchmarks is that these programs were
selected on the basis of primarily spending there time cpu bound.
The only practical way of using lots of cpu time is to iterate.
Hence this benchmark is biased in favour functions that iterate.

.TABLE func_cntrl
   ,  Embedded,     SPECint95, Book benchmarks
Trivial (one basic block), 32.7,  16.2, 57.1
Non-looping, 47.9, 48.1, 18.1
Looping, 19.4, 35.7, 24.8
<caption>
Contents of function bodies (as a percentage of all bodies), for
embedded <file>.c</file> source <book Engblom_99a>, SPECint95, and
the translated form of the books benchmark programs.
</caption>
.E_TABLE

Usage information on the number of objects defined within a function
definition is given elsewhere (see <figref href="loccount">).

.FIG
totobjuse
<caption>
Number of references (i.e., an access or modification) to all
objects, having various kinds of linkage, within individual function
definitions.  Based on the translated form of the books benchmark
programs.
</caption>
.E_FIG

.FIG
indobjuse
<caption>
Number of references (i.e., an access or modification) to the same
object, having various kinds of linkage, within individual function
definitions.  Based on the translated form of the books benchmark
programs.
</caption>
.E_FIG


1807

Usage information on function return types in the <file>.c</file>
files is given elsewhere (see <tableref href="ret_type">).

.TABLE
: l r r l r r
Type/Representation, Embedded, SPECint95, Type/Representation, Embedded, SPECint95
<keyword>void</keyword>,  59.4, 31.2, ptr-to &ellipsis;,  2.0, 17.1
unsigned 32 bit, 0.5,  2.2, signed 32 bit,   0.3, 48.4
unsigned 16 bit, 3.3,  0.0, signed 16 bit,   1.6,  0.2
unsigned 8 bit, 31.6,  0.5, signed 8 bit,    0.8,  0.0
<caption>
Occurrence of function return types (as a percentage of all return
types; signedness and number of bits appearing in value
representation form) appearing in the source of embedded applications
(5,597 function definitions) and the SPECint95 benchmark (2,713
function definitions).  A likely explanation of the greater use of
type <keyword>void</keyword> is the perceived performance issues
associated with returning values via the stack causing developers to
return values via objects at file scope.  Adapted from Engblom <book
Engblom_99a>.
</caption>
.E_TABLE


1815

Information on argument types is given elsewhere (see <tableref
href="arg_type">).

.TABLE param_type
: l r l r l r l r
Type, %, Type, %, Type, %, Type, %
<keyword>struct</keyword> <keyword>*</keyword>, &zp;44.4&ze;, <keyword>void</keyword> <keyword>*</keyword>, &zp;3.4&ze;, <keyword>long</keyword>, &zp;1.6&ze;, <keyword>struct</keyword> <keyword>*</keyword> <keyword>*</keyword>, &zp;1.2&ze;
<keyword>int</keyword>, &zp;14.7&ze;, <keyword>union</keyword> <keyword>*</keyword>, &zp;3.1&ze;, <keyword>int</keyword> <keyword>*</keyword>, &zp;1.5&ze;, <keyword>enum</keyword>, &zp;1.2&ze;
other-types, &zp;6.8&ze;, <keyword>unsigned</keyword> <keyword>long</keyword>, &zp;2.7&ze;, <keyword>unsigned</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;1.4&ze;, <keyword>const</keyword> <keyword>char</keyword> <keyword>*</keyword>, &zp;1.1&ze;
<keyword>unsigned</keyword> <keyword>int</keyword>, &zp;5.1&ze;, <keyword>unsigned</keyword> <keyword>int</keyword> <keyword>*</keyword>, &zp;2.0&ze;, <keyword>char</keyword> <keyword>*</keyword> <keyword>*</keyword>, &zp;1.3&ze;, <keyword>long</keyword> <keyword>*</keyword>, &zp;1.0&ze;
<keyword>char</keyword> <keyword>*</keyword>, &zp;4.7&ze;, <keyword>unsigned</keyword> <keyword>char</keyword>, &zp;1.6&ze;, <keyword>unsigned</keyword> <keyword>short</keyword>, &zp;1.2&ze;, , 
<caption>
Occurrence of parameter types in function definitions (as a
percentage of the parameters in all such definitions).  Based on the
translated form of the books benchmark programs.
</caption>
.E_TABLE


1838

A study by Ernst, Badros, and Notkin <book Ernst_02> provides one of
the few empirical studies of C preprocessor use.

.TABLE direct_name
: l r r l r r
Directive Name, <file>.c</file> file, <file>.h</file> file, Directive Name, <file>.c</file> file, <file>.h</file> file
<keyword>#define</keyword>, &zp;19.9&ze;, &zp;75.0&ze;, <keyword>#if</keyword>, &zp;6.2&ze;, &zp;1.5&ze;
<keyword>#endif</keyword>, &zp;19.9&ze;, &zp;7.2&ze;, <keyword>##</keyword>, &zp;0.3&ze;, &zp;0.9&ze;
<keyword>#include</keyword>, &zp;28.6&ze;, &zp;4.1&ze;, <keyword>#elif</keyword>, &zp;0.2&ze;, &zp;0.2&ze;
<keyword>#ifndef</keyword>, &zp;2.4&ze;, &zp;3.2&ze;, <keyword>#pragma</keyword>, &zp;0.1&ze;, &zp;0.1&ze;
<keyword>#ifdef</keyword>, &zp;11.3&ze;, &zp;2.5&ze;, <keyword>#error</keyword>, &zp;0.2&ze;, &zp;0.1&ze;
<keyword>#else</keyword>, &zp;4.8&ze;, &zp;1.7&ze;, <keyword>#</keyword>, &zp;0.0&ze;, &zp;0.1&ze;
defined, &zp;3.6&ze;, &zp;1.7&ze;, <keyword>#line</keyword>, &zp;1.4&ze;, &zp;0.0&ze;
<keyword>#undef</keyword>, &zp;1.0&ze;, &zp;1.6&ze;, , , 
<caption>
Occurrence of preprocessor directive names and preprocessor operators
(as a percentage of all directive names and operators).  Based on the
visible form of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE


1854

.TABLE defined
: c r
Preprocessing Directive, %
<keyword>#if</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;15.7&ze;
<keyword>#if</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>||</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;5.8&ze;
<keyword>#if</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>&&</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;2.0&ze;
<keyword>#if</keyword> <keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;1.9&ze;
<keyword>#elif</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;1.9&ze;
<keyword>#if</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>&&</keyword> <keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;1.3&ze;
<keyword>#if</keyword> <keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>&&</keyword> <keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;0.9&ze;
<keyword>#if</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>||</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>||</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;0.8&ze;
<keyword>#if</keyword> defined identifier <keyword>||</keyword> defined identifier, &zp;0.5&ze;
<keyword>#if</keyword> <keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>&&</keyword> <keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>&&</keyword> <keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;0.3&ze;
others, &zp;5.3&ze;
<caption>
Occurrence of controlling expressions containing the
<keyword>defined</keyword> operator (as a percentage of all
<keyword>#if</keyword> and <keyword>#elif</keyword> preprocessing
directives).  The <keyword>#elif</keyword> preprocessing directive
was followed by the <keyword>defined</keyword> operator in 66.5% of
the occurrences of that preprocessing directive&emdash; in the
<file>.c</file> files (<file>.h</file> 75.5%).  Based on the visible
form of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE


1856

.TABLE ppif_cntrl
: c r
Abstract Form of Control Expression, %
 identifier, &zp;26.5&ze;
<c_syntax>integer-constant</c_syntax>, &zp;20.3&ze;
defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;16.4&ze;
defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>||</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;6.0&ze;
identifier <keyword>==</keyword> identifier, &zp;2.4&ze;
identifier <keyword>></keyword> <c_syntax>integer-constant</c_syntax>, &zp;2.4&ze;
identifier <keyword>>=</keyword> function-call, &zp;2.1&ze;
defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>&&</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;2.0&ze;
<keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;2.0&ze;
defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>&&</keyword> <keyword>!</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;1.3&ze;
identifier <keyword>>=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.3&ze;
identifier <keyword>!=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.1&ze;
identifier <keyword><</keyword> function-call, &zp;1.1&ze;
<keyword>!</keyword> identifier, &zp;1.1&ze;
others, &zp;14.0&ze;
<caption>
Common <keyword>#if</keyword> preprocessing directive controlling
expressions (as a percentage of all <keyword>#if</keyword>
directives).  Based on the visible form of the <file>.c</file> files.
Where <c_syntax>integer-constant</c_syntax> is an integer constant
expression, and <phrase>function-call</phrase> is an invocation of a
function-like macro.
</caption>
.E_TABLE

.TABLE ppelif_cntrl
: c r
Abstract Form of Control Expression, %
defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;49.7&ze;
identifier <keyword>==</keyword> identifier, &zp;19.4&ze;
 defined identifier, &zp;6.6&ze;
defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>||</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;5.7&ze;
 identifier, &zp;4.7&ze;
defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>&&</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;2.6&ze;
identifier <keyword>==</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.9&ze;
identifier <keyword>>=</keyword> function-call, &zp;1.2&ze;
defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>||</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword> <keyword>||</keyword> defined <keyword>(</keyword> identifier <keyword>)</keyword>, &zp;1.2&ze;
identifier <keyword>>=</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.0&ze;
others, &zp;6.1&ze;
<caption>
Common <keyword>#elif</keyword> preprocessing directive controlling
expressions (as a percentage of all <keyword>#elif</keyword>
directives).  Based on the visible form of the <file>.c</file> files.
Where <c_syntax>integer-constant</c_syntax> is an integer constant
expression, and <phrase>function-call</phrase> is a function-like
macro.
</caption>
.E_TABLE


1870

.FIG
skipif
<caption>
Number of lines skipped in the top-level source file (i.e., the
contents of any included files are not counted) and the complete
translation unit (including the contents of any files
<keyword>#include</keyword>d more than once) during translation of
the books benchmark programs.
</caption>
.E_FIG


1877

.FIG
unnecincl
<caption>
Number of <keyword>#include</keyword>s of
<c_syntax>header-name</c_syntax>s whose contents are not referenced
during translation.  Based on the translated form of the books
benchmark programs.
</caption>
.E_FIG

.FIG
numincl
<caption>
Number of <keyword>#include</keyword> directives (dashed lines
represent number of unique headers).  Based on the visible form of
the <file>.c</file> files.
</caption>
.E_FIG

.FIG
sameincl
<caption>
Number of <c_syntax>header-name</c_syntax>s in
<keyword>#include</keyword> directives specifying the same character
sequence.  Based on the visible form of the <file>.c</file> files for
various program build trees.
</caption>
.E_FIG

.TABLE include_hdr
: l r r c
Header Form, % Occurrence, % Uses Path, Number Absolute Paths
<h-char-sequence>, &zp;75.0&ze;, &zp;86.4&ze;, &zs;0&ze;
"q-char-sequence", &zp;25.0&ze;, &zp;17.2&ze;, &zs;0&ze;
<caption>
Occurrence of two forms of <c_syntax>header-name</c_syntax>s (as a
percentage of all <keyword>#include</keyword> directives), the
percentage of each kind that specifies a path to the header file, and
number of absolute paths specified.  Based on the visible form of the
<file>.c</file> files.
</caption>
.E_TABLE


1878

.TABLE usr_include
: l r r r r r r
Information , Linux 2.0, AIX on RS/6000, HP/UX 9, SunOS 4, Solaris 2, ISO C
Number of headers,                 2&comma;006, 1&comma;514, 1&comma;264, 987, 1&comma;495, 24
macro definitions,                 10&comma;252, 18&comma;637, 13&comma;314, 11&comma;987, 10&comma;903, 446
identifiers with external linkage,  1&comma;672, 1&comma;542,   1&comma;935,   616,  1&comma;281, 487
identifiers with internal linkage,    80, 34,     2012,     0,     5, 0
tag declaration,                       716, 1&comma;088,    899,  1&comma;208,   945, 3
typedef name declared,              1&comma;024, 828,      15,   493,  1&comma;027, 55
<caption>
Number of various kinds of identifiers declared in the headers
contained in the <file>/usr/include</file> directory of various
translation environments.  Information was automatically extracted
and represents an approximate lower bound.  Versions of the
translation environments from approximately the same year (mid 1990s)
were used.  The counts for ISO C assumes that the minimum set of
required identifiers are declared and excludes the type generic
macros.
</caption>
.E_TABLE


1912

Usage information on the number of macro names defined in source
files is given elsewhere<ref limit, macro definitions>.

.FIG
macexpand
<caption>
Number of macro names expanded, excluding expansions occurring while
processing the contents of system headers, during translation of the
books benchmark programs.
</caption>
.E_FIG

.TABLE rep_list_form
: l r l
Replacement List, %, Example
empty,              6.9, <c_code>#define DUMMY</c_code>
constant,          42&ptz;, <c_code>#define ARG_MAX 1000</c_code>
expression,        33&ptz;, <c_code>#define SHFT_UP(x) ((x) << 8)</c_code>
statement,          5.1, <c_code>#define TERMINATE goto func_end</c_code>
type,               2.1, <c_code>#define NODE_PTR void *</c_code>
syntactic,          0.5, <c_code>#define begin {</c_code>
symbol,             1.4, <c_code>#define ALLOC_STORAGE malloc</c_code>
unknown identifier, 6.9, <c_code>#define INTERN_BUF buffer</c_code>
other,              1.9, <c_code>#define OPTION -X=23</c_code>
<caption>
Detailed breakdown of the kinds of replacement lists occurring in
macro definitions.  Adapted from Ernst, Badros, and Notkin <book
Ernst_02>.
</caption>
.E_TABLE

.TABLE def_rep_list
: l r
Kind of Macro Defined and Abstract Form of its Replacement List, %
object-macro <c_syntax>integer-constant</c_syntax>, &zp;50.7&ze;
  object-macro identifier, &zp;5.9&ze;
  object-macro expression, &zp;5.8&ze;
  function-macro function-call, &zp;4.7&ze;
  object-macro function-call, &zp;3.7&ze;
object-macro <c_syntax>string-literal</c_syntax>, &zp;3.4&ze;
  function-macro expression, &zp;3.4&ze;
  object-macro, &zp;3.4&ze;
  object-macro constant-expression, &zp;2.0&ze;
  function-macro, &zp;1.7&ze;
others, &zp;15.4&ze;
<caption>
Common macro definitions with an abstract form of their replacement
list (as a percentage of all macro definitions).  Based on the
visible form of the <file>.c</file> and <file>.h</file> files.  Note
that <phrase>function-call</phrase> may also be a macro invocation.
</caption>
.E_TABLE


1938

.TABLE hashhash
: l r
Preprocessing Token Sequence, %
identifier <keyword>##</keyword> identifier, &zp;70.2&ze;
<keyword>,</keyword> <keyword>##</keyword> identifier, &zp;24.2&ze;
identifier <keyword>##</keyword> identifier <keyword>##</keyword> identifier, &zp;15.7&ze;
others, &zp;4.8&ze;
<c_syntax>integer-constant</c_syntax> <keyword>##</keyword> identifier, &zp;1.8&ze;
<c_syntax>integer-constant</c_syntax> <keyword>##</keyword> identifier <keyword>##</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.0&ze;
identifier <keyword>##</keyword> <c_syntax>integer-constant</c_syntax>, &zp;1.0&ze;
<caption>
Occurrence of the <keyword>##</keyword> preprocessor operator (as a
percentage of all occurrences of that operator).  Based on the
visible form of the <file>.c</file> and <file>.h</file> files.  The
form <c_code>, ## identifier</c_code> is a <tool>gcc</tool> extension
(described in the Common implementations subclause).
</caption>
.E_TABLE


1956

Approximate 5% of all <keyword>#undef</keyword> directives occur
before a <keyword>#include</keyword> directive.  Based on the visible
form of the <file>.c</file> files.

.TABLE undef_seq
: l r
Following Directive Sequences, %
, &zp;53.0&ze;
<keyword>#ifdef</keyword>, &zp;20.4&ze;
<keyword>#define</keyword>, &zp;16.2&ze;
others, &zp;4.8&ze;
<keyword>#define</keyword> <keyword>#undef</keyword>, &zp;2.7&ze;
<keyword>#if[n]def</keyword>, &zp;1.5&ze;
<keyword>#define</keyword> #und-def <keyword>#undef</keyword>, &zp;1.4&ze;
<caption>
Occurrence of different sequences of preprocessing directives (as a
percentage of all such sequences) that follow a
<keyword>#undef</keyword> and reference the same identifier (e.g.,
2.7% of the first occurrence of <keyword>#undef</keyword> are
followed by one or more <keyword>#define</keyword>s followed by one
or more <keyword>#undef</keyword>s).  Based on the visible form of
the <file>.c</file> files.
<keyword>#define</keyword> represents one or more
<keyword>#define</keyword> preprocessing directives.
<keyword>#undef</keyword> represents one or more
<keyword>#undef</keyword> preprocessing directives.
<keyword>#if[n]def</keyword> represents two or more
<keyword>#if</keyword>s and <keyword>#ifndef</keyword>s, in any order.
<keyword>#und-def</keyword> represents one or more pairs of
<keyword>#undef #define</keyword> preprocessing directives.
</caption>
.E_TABLE


1984

.TABLE predef_macro
: l 0.6cm 0.6cm l 0.6cm 0.6cm l 0.6cm 0.6cm
Predefined Macro, <file>.c</file> files, <file>.h</file> files, Predefined Macro, <file>.c</file> files, <file>.h</file> files, Predefined Macro, <file>.c</file> files, <file>.h</file> files
 __LINE__, &z2p;42.17&ze;, &z2p;43.47&ze;, __TIME__, &z2p;2.52&ze;, &z2p;0.00&ze;, __STDC_IEC_559__, &z2p;0.00&ze;, &z2p;0.00&ze;
 __FILE__, &z2p;36.31&ze;, &z2p;37.77&ze;, __STDC_VERSION__, &z2p;0.00&ze;, &z2p;0.00&ze;, __STDC_HOSTED__, &z2p;0.00&ze;, &z2p;0.00&ze;
 __STDC__, &z2p;15.77&ze;, &z2p;18.11&ze;, __STDC_ISO_10646__, &z2p;0.00&ze;, &z2p;0.00&ze;,  , , 
 __DATE__, &z2p;3.23&ze;, &z2p;0.65&ze;, __STDC_IEC_559_COMPLEX__, &z2p;0.00&ze;, &z2p;0.00&ze;,  , , 
<caption>
Occurrence of predefined macro names (as a percentage of all
predefined macro names; a total of 1,826).  Based on the visible form
of the <file>.c</file> and <file>.h</file> files.
</caption>
.E_TABLE


2023

.TABLE lib_func_use
: l r l r l r l r
Function, %, Function, %, Function, %, Function, %
 fprintf, &z3p;1.468&ze;, memmove, &z3p;0.093&ze;, strstr, &z3p;0.028&ze;, ferror, &z3p;0.016&ze;
 sprintf, &z3p;0.978&ze;, fclose, &z3p;0.085&ze;, sin, &z3p;0.028&ze;, atof, &z3p;0.016&ze;
 printf, &z3p;0.902&ze;, strchr, &z3p;0.077&ze;, mblen, &z3p;0.028&ze;, strncat, &z3p;0.015&ze;
 strlen, &z3p;0.824&ze;, fopen, &z3p;0.077&ze;, realloc, &z3p;0.026&ze;, ftell, &z3p;0.015&ze;
 strcmp, &z3p;0.730&ze;, fabs, &z3p;0.065&ze;, memcmp, &z3p;0.021&ze;, tolower, &z3p;0.014&ze;
 strcpy, &z3p;0.533&ze;, signal, &z3p;0.045&ze;, fputs, &z3p;0.021&ze;, fscanf, &z3p;0.014&ze;
 free, &z3p;0.397&ze;, getenv, &z3p;0.045&ze;, strerror, &z3p;0.020&ze;, abort, &z3p;0.014&ze;
 memcpy, &z3p;0.324&ze;, abs, &z3p;0.044&ze;, cos, &z3p;0.020&ze;, qsort, &z3p;0.013&ze;
 memset, &z3p;0.321&ze;, perror, &z3p;0.040&ze;, strtok, &z3p;0.019&ze;, mbtowc, &z3p;0.013&ze;
 exit, &z3p;0.218&ze;, fwrite, &z3p;0.034&ze;, strrchr, &z3p;0.019&ze;, fseek, &z3p;0.013&ze;
 malloc, &z3p;0.201&ze;, fflush, &z3p;0.034&ze;, sqrt, &z3p;0.019&ze;, calloc, &z3p;0.013&ze;
 strncmp, &z3p;0.194&ze;, sscanf, &z3p;0.032&ze;, ungetc, &z3p;0.018&ze;, mbstowcs, &z3p;0.012&ze;
 strcat, &z3p;0.190&ze;, vsprintf, &z3p;0.031&ze;, floor, &z3p;0.017&ze;, feof, &z3p;0.012&ze;
 rand, &z3p;0.179&ze;, fread, &z3p;0.030&ze;, ceil, &z3p;0.017&ze;, atol, &z3p;0.012&ze;
 strncpy, &z3p;0.145&ze;, snprintf, &z3p;0.029&ze;, toupper, &z3p;0.016&ze;, wcstombs, &z3p;0.011&ze;
 atoi, &z3p;0.110&ze;, time, &z3p;0.028&ze;, fgets, &z3p;0.016&ze;,  , 
<caption>
Occurrence of calls to C library functions (as a percentage of all
calls).  Based on the translated form of the books benchmark programs.
</caption>
.E_TABLE

.TABLE
: l r r r r r l r r r r r
Programs,   main, libc,  libm, libots, libcurses, Programs,   main, libc,  libm, libots, libcurses
alvinn,    97.25,  2.12, 0.63,       ,  , li,        99.71,  0.29,     ,       , 
compress,  99.98,  0.02,     ,       ,  , m88ksim,   99.75,  0.03, &emdash;,   0.22, 
ditroff,   87.80, 12.20,     ,       ,  , perl,      70.70, 29.30,     ,       , 
ear,       90.33,  6.12, 3.55,       ,  , sc,        53.03, 18.42, &emdash;, &emdash;, 28.55
eqntott,   94.29,  5.71,     ,       ,  , vortex,    95.11,  4.89,     ,       , 
espresso,  93.93,  6.07,     ,       ,  , Mean,      90.15,  7.10, 0.35,   0.02,  2.38
go,        99.99,  0.01,     ,       ,  , , , , , , 
<caption>
Percentage of instructions executed in developer written code and
implementation libraries (main library <file>libc</file>, and maths
library <file>libm</file>) of C programs that do not use the X11
libraries.
Based on Calder, Grunwald, and Srivastava <book Calder_95c>.
</caption>
.E_TABLE

.TABLE
: l r r r r r r r r r
Programs,    main,  libc,  libm, libX11, libXaw, libXext, libXm, libXmu,   libXt
cbzone,     48.10, 11.80,  7.60,  32.14, &emdash;,       ,        ,       ,   0.36
ghostview,   3.38, 23.39, &emdash;,  20.93,  7.53,   0.02,        ,   0.08,  44.68
gs,         91.88,  4.99,  0.18,   2.93, &emdash;,       ,        ,       ,   0.02
xanim,      62.40, 29.96,  0.06,   4.36,  0.09,       ,        ,       ,   3.13
xfig,        4.95, 15.05,  0.15,  28.58,  9.84,       ,        ,   0.14,  41.30
xkeycaps,    6.47, 18.45,      ,  43.15,  3.70,    0.01,       ,   0.06,  28.15
xmgr,       22.95, 12.13,  0.04,  23.24, &emdash;,       ,   17.05, &emdash;,  24.60
xpaint,     14.11, 11.01, &emdash;,  25.43,  0.77,       ,        ,   0.02,  48.66
xpilot,     68.64, 24.24,  0.03,   7.09, &emdash;,       ,        ,       , 
xpool,      53.17,  0.26, 44.91,   1.65, &emdash;,       ,        ,       , 
xtex,       45.02, 23.86, &emdash;,  23.09,  2.95,       ,        ,   0.03,   5.05
xv,         74.07, 25.46,  0.01,   0.46, &emdash;,       ,        ,       , 
Mean,       41.26, 16.72,  4.41,  17.75,  2.07,   0.00,    1.42,   0.03,  16.33
<caption>
Percentage of instructions executed in developer written code and
implementation libraries of C programs that use the X11 libraries.
Based on Calder, Grunwald, and Srivastava <book Calder_95c>.
</caption>
.E_TABLE



2042

.TABLE stdhdrh
: l r r l r r
Header name, <file>.c</file> file, <file>.h</file> file, Header name, <file>.c</file> file, <file>.h</file> file
 stdio.h, &zs;1424&ze;, &zs;175&ze;, signal.h, &zs;213&ze;, &zs;10&ze;
 stdlib.h, &zs;860&ze;, &zs;100&ze;, locale.h, &zs;23&ze;, &zs;7&ze;
 stddef.h, &zs;107&ze;, &zs;90&ze;, stdint.h, &zs;0&ze;, &zs;3&ze;
 string.h, &zs;828&ze;, &zs;83&ze;, inttypes.h, &zs;1&ze;, &zs;1&ze;
 errno.h, &zs;481&ze;, &zs;82&ze;, float.h, &zs;25&ze;, &zs;1&ze;
 setjmp.h, &zs;81&ze;, &zs;80&ze;, wctype.h, &zs;1&ze;, &zs;0&ze;
 stdarg.h, &zs;167&ze;, &zs;54&ze;, wchar.h, &zs;2&ze;, &zs;0&ze;
 time.h, &zs;185&ze;, &zs;47&ze;, tgmath.h, &zs;0&ze;, &zs;0&ze;
 ctype.h, &zs;291&ze;, &zs;35&ze;, stdbool.h, &zs;0&ze;, &zs;0&ze;
 limits.h, &zs;88&ze;, &zs;32&ze;, iso646.h, &zs;0&ze;, &zs;0&ze;
 assert.h, &zs;91&ze;, &zs;26&ze;, fenv.h, &zs;1&ze;, &zs;0&ze;
 math.h, &zs;246&ze;, &zs;21&ze;, complex.h, &zs;0&ze;, &zs;0&ze;
<caption>
Number of standard headers appearing in a <keyword>#include</keyword>
directive.  Based on the visible form of the <file>.c</file> and
<file>.h</file> files.
</caption>
.E_TABLE


2054

.TABLE reserved_id
: 10cm r
Reserved spelling, Occurrences
Identifier&comma; starting with <phrase>&uu;</phrase>&comma; declared to have any form, 3&comma;071
Identifier&comma; starting with <phrase>_[A-Z]</phrase>&comma; declared to have any form, 10&comma;255
Identifier&comma; starting with <phrase>wcs[a-z]</phrase>&comma; declared to have any form, 1
Identifier&comma; with external  linkage&comma; defined in C99, 12
File scope identifier or tag, 6&comma;832
File scope identifier, 2
Macro name reserved when appropriate header is <keyword>#include</keyword>d, 6
Possible macro covered identifier, 144
Macro name starting with <phrase>E[A-Z]</phrase>, 339
Macro name starting with <phrase>SIG[A-Z]</phrase>, 2
Identifier&comma; starting with <phrase>is[a-z]</phrase>&comma; with external linkage (possibly macro covered), 47
Identifier&comma; starting with <phrase>mem[a-z]</phrase>&comma; with external linkage (possibly macro covered), 108
Identifier&comma; starting with <phrase>str[a-z]</phrase>&comma; with external linkage (possibly macro covered), 904
Identifier&comma; starting with <phrase>to[a-z]</phrase>&comma; with external linkage (possibly macro covered), 338
Identifier&comma; starting with <phrase>is[a-z]</phrase>&comma; with external linkage, 33
Identifier&comma; starting with <phrase>mem[a-z]</phrase>&comma; with external linkage, 7
Identifier&comma; starting with <phrase>str[a-z]</phrase>&comma; with external linkage, 28
Identifier&comma; starting with <phrase>to[a-z]</phrase>&comma; with external linkage, 62
<caption>
Number of developer declared identifiers (the contents of any header
was only counted once) whose spelling (the notation
<phrase>[a-z]</phrase> denotes a regular expression, i.e., a
character between <hlight>a</hlight> and <hlight>z</hlight>) is
reserved for use by the implementation or future revisions of the C
Standard.  Based on the translated form of the books benchmark
programs.  How many identifiers declared###
</caption>
.E_TABLE


2815

.TABLE
: l r r r l r r r
Program,  mallocs,  frees,   size, Program,  mallocs,  frees,   size
burg,      23&comma;098,   2&comma;895,    843.4, eqntott,      85,      0,  23&comma;981.6
ditroff,       0,      0,  &emdash;, espresso, 190&comma;386, 190&comma;077,    122.5
tex,          60,     32,   1&comma;727.1, gcc,        1&comma;043,    903,   1&comma;353.4
xfig,       7&comma;260,   4&comma;070,    193.6, li,           27,      0,   3&comma;407.5
xtex,       2&comma;944,   1&comma;131,    358.9, sc,         6&comma;985,   2&comma;419,     52.0
compress,      1,      0,     16.0, , , , 
<caption>
Memory management function usage.  <phrase>mallocs</phrase> is the
number of calls to the <c_func>malloc</c_func> library function,
<phrase>frees</phrase> the number of calls to the
<c_func>free</c_func> library function, and <phrase>size</phrase> the
mean number of bytes of the objects allocated.  Based on Calder,
Grunwald, and Zorn <book Calder_95b>.
</caption>
.E_TABLE

