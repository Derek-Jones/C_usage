#ifndef __STD_ISTREAM
#define __STD_ISTREAM

#include "char_traits.h"
#include <ios>

namespace std
{
//   template <class charT, class traits = char_traits<charT> >
//      class basic_istream;
//   typedef basic_istream<char> istream ;
//   typedef basic_istream<wchar_t> wistream;

//   template <class charT, class traits = char_traits<charT> >
//      class basic_iostream;
//   typedef basic_iostream<char> iostream;
//   typedef basic_iostream<wchar_t> wiostream;

   template <class charT, class traits>
      class basic_istream<charT, traits>& ws(basic_istream<charT,traits>& );

   template <class charT, class traits>
   class basic_istream : public basic_ios<charT, traits>
   {
   public:
      typedef charT char_type;
      typedef typename traits::int_type int_type;
      typedef typename traits::pos_type pos_type;
      typedef typename traits::off_type off_type;
      typedef traits traits_type;

      explicit basic_istream(basic_streambuf<charT,traits>*);
      virtual ~basic_istream();

      // 27.6.1.1.2, Prefix/suffix:

      class sentry
      {
         typedef traits traits_type;
         bool ok_;
      public: 
         explicit sentry(basic_istream<charT,traits>&, bool = false);
         ~sentry();
         operator bool() const { return ok_; }
      private:
         sentry(const sentry&);
         sentry& operator=(const sentry&);
      };

      // 27.6.1.2, Formatted input:

      basic_istream<charT,traits>& operator>>
         (basic_istream<charT,traits>& (*pf)(basic_istream<charT,traits>&));
	 
      basic_istream<charT,traits>& operator>>
         (basic_ios<charT,traits>& (*pf)(basic_ios<charT,traits>&));

      basic_istream<charT,traits>& operator>>
         (ios_base& (*pf)(ios_base&));

      basic_istream<charT,traits>& operator>> (bool&);
      basic_istream<charT,traits>& operator>> (short&);
      basic_istream<charT,traits>& operator>> (unsigned short&);
      basic_istream<charT,traits>& operator>> (int&);
      basic_istream<charT,traits>& operator>> (unsigned int&);
      basic_istream<charT,traits>& operator>> (long&);
      basic_istream<charT,traits>& operator>> (unsigned long&);
      basic_istream<charT,traits>& operator>> (float&);
      basic_istream<charT,traits>& operator>> (double&);
      basic_istream<charT,traits>& operator>> (long double&);

      basic_istream<charT,traits>& operator>> (void*&);
      basic_istream<charT,traits>& operator>> 
         (basic_streambuf<char_type,traits>*);

      streamsize gcount() const;
      int_type get();
      basic_istream<charT,traits>& get(char_type&);
      basic_istream<charT,traits>& get(char_type*, streamsize);
      basic_istream<charT,traits>& get(char_type*, streamsize,char_type);
      basic_istream<charT,traits>& get(basic_streambuf<charT,traits>&);
      basic_istream<charT,traits>& get(basic_streambuf<charT,traits>&,
          char_type);
     
      basic_istream<charT,traits>& getline(char_type*, streamsize);
      basic_istream<charT,traits>& getline(char_type*, streamsize,char_type);
      
      basic_istream<charT,traits>& ignore(streamsize = 1, int_type = traits::eof());
      int_type peek();
      basic_istream<charT,traits>& read(char_type*, streamsize);
      //streamsize read(char_type*, streamsize);
     //********
     //****** WHICH READ SIGNITURE IS CORRECT !?!?!?
    
      basic_istream<charT,traits>& putback(char_type);
      basic_istream<charT,traits>& unget();
      int sync();

      pos_type tellg();
      basic_istream<charT,traits>& seekg(pos_type); 
      basic_istream<charT,traits>& seekg(off_type,ios_base::seekdir); 
   };

   // 27.6.1.2.3, character extraction templates:

   template <class charT, class traits>
      basic_istream<charT,traits>& operator>>(basic_istream<charT,traits>&,
         charT&); 

   template <class traits>
      basic_istream<char,traits>& operator>>(basic_istream<char,traits>&,
         unsigned char&); 

   template <class traits>
      basic_istream<char,traits>& operator>>(basic_istream<char,traits>&,
         signed char&); 

   template <class charT, class traits>
      basic_istream<charT,traits>& operator>>(basic_istream<charT,traits>&,
         charT*); 

   template <class traits>
      basic_istream<char,traits>& operator>>(basic_istream<char,traits>&,
         unsigned char*); 

   template <class traits>
      basic_istream<char,traits>& operator>>(basic_istream<char,traits>&,
         signed char*); 

   template <class charT, class traits>
   class basic_iostream : public basic_istream<charT, traits>
                        , public basic_ostream<charT, traits>
   {
   public:
      explicit basic_iostream(basic_streambuf<charT,traits>*);
      virtual ~basic_iostream();
   };
}

#endif
