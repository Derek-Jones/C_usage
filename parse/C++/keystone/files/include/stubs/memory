#ifndef _MEMORY_
#define _MEMORY_

#include <cstddef>
//#include <iterator>

#include "allocator.h"
/*namespace std {
   template<class T> class allocator {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef T* pointer;
      typedef const T* const_pointer;
      typedef T& reference;
      typedef const T& const_reference;
      typedef T value_type;
      template<class U> struct rebind { typedef allocator<U> other; };

      allocator() throw();
      allocator( const allocator& ) throw();
      template<class U> allocator( const allocator<U>& ) throw();
      ~allocator() throw();

      pointer
      address(reference x) const;
      const_pointer
      address(const_reference x) const;

      pointer
      allocate( size_type, const void* hint = 0);
      void
      deallocate(pointer p, size_type n);
      size_type
      max_size() const throw();

      void
      construct(pointer p, const T& val);
      void
      destroy(pointer p);
   };
   
   template<> class allocator<void> {
   public:
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;
      template<class U> struct rebind { typedef allocator<U> other; };
   };

   template<class T, class U>
   bool
   operator==(const allocator<T>&, const allocator<U>&) throw();
   template<class T, class U>
   bool
   operator!=(const allocator<T>&, const allocator<U>&) throw();
   
}  // namespace std
*/
#include <iterator>

namespace std
{
   template<class OutputIterator, class T>
   class raw_storage_iterator : public iterator<output_iterator_tag,void,void,void,void> {
   public:
      explicit raw_storage_iterator(OutputIterator x);

      raw_storage_iterator<OutputIterator,T>& operator*();
      raw_storage_iterator<OutputIterator,T>& operator=(const T&);
      raw_storage_iterator<OutputIterator,T>& operator++();
      raw_storage_iterator<OutputIterator,T> operator++(int);
   };
} // namespace std

#include <utility>
namespace std
{
   template<class T>
   pair<T*, ptrdiff_t>
   get_temporary_buffer(ptrdiff_t n);

   template<class T>
   void return_temporary_buffer(T* p);

   template<class InputIterator, class ForwardIterator>
   ForwardIterator
   uninitialized_copy(InputIterator first, InputIterator last,
                      ForwardIterator result);
   template<class ForwardIterator, class T>
   void
   unitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);

   template<class ForwardIterator, class Size, class T>
   void
   uninitialized_fill_n(ForwardIterator first, Size n, const T& x);

   template<class X> class auto_ptr {
      template<class Y> struct auto_ptr_ref {};
   public:
      typedef X element_type;
      explicit auto_ptr(X* p=0) throw();
      auto_ptr(auto_ptr&) throw();
      template<class Y> auto_ptr(auto_ptr<Y>&) throw();
      auto_ptr&
      operator=(auto_ptr&) throw();
      template<class Y> auto_ptr& operator=(auto_ptr<Y>&) throw();
      ~auto_ptr() throw();

      X& operator*() const throw();
      X* operator->() const throw();
      X* get() const throw();
      X* release() throw();
      void reset(X* p=0) throw();

      auto_ptr(auto_ptr_ref<X>) throw();
      template<class Y> operator auto_ptr_ref<Y>() throw();
      template<class Y> operator auto_ptr<Y>() throw();
   };
}
#endif
