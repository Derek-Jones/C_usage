
1  #DEFINE OBJ_MAC IDENT IDENT STRING IDENT STRING IDENT STRING IDENT STRING IDENT STRING
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT -> IDENT += IDENT ; IDENT -> IDENT -= IDENT ; IDENT -> IDENT -= IDENT ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT IDENT ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ~ ( ( ( ~ ( UNSIGNED LONG ) INT_CONST ) >> ( IDENT ) ) << ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ( IDENT ) ; IF ( ( IDENT < IDENT ) || ( IDENT >= IDENT ) ) RETURN -v INT_CONST ; IDENT ( IDENT , IDENT ) ; IDENT += IDENT + INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) < INT_CONST ) ? -v INT_CONST ?: ( ( IDENT ) > INT_CONST ) ? INT_CONST ?: ( ( IDENT ) - INT_CONST ) * INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT + IDENT ( IDENT -> IDENT -> IDENT , IDENT -> IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { STRUCT IDENT IDENT ; STRUCT IDENT IDENT ; IDENT ( &v IDENT , &v IDENT ) ; IDENT = IDENT . IDENT ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) { }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT >= ( IDENT - INT_CONST ) ) { IDENT ( IDENT ( IDENT [ IDENT ] . IDENT ) , STRING ) ; IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) ; IF ( ! IDENT ) { IF ( IDENT ) IDENT ( IDENT ) ; RETURN -v IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( INT ) ( ( IDENT -> IDENT [ ( IDENT -> IDENT - INT_CONST + IDENT -> IDENT * INT_CONST ) % IDENT -> IDENT + IDENT ] - IDENT -> IDENT [ ( IDENT -> IDENT - INT_CONST - IDENT -> IDENT [ IDENT ] / IDENT -> IDENT [ INT_CONST ] + IDENT -> IDENT * INT_CONST ) % IDENT -> IDENT + IDENT ] ) / IDENT -> IDENT [ IDENT ] * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = IDENT -> IDENT ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT == ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) & ( IDENT ) ) / ( ( IDENT ) & -v ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ? ( IDENT ) ?: ( ( IDENT ) & ~ INT_CONST ) * IDENT + ( ( IDENT ) & INT_CONST ) )
2  #DEFINE OBJ_MAC ( IDENT ( IDENT ) -> IDENT [ IDENT -> IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( IDENT -> IDENT -> IDENT [ INT_CONST ] ) )
3  #DEFINE OBJ_MAC { IF ( IDENT -> IDENT == INT_CONST ) GOTO IDENT ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT v++ ] = IDENT )
2  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( IDENT IDENT STRING ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT = ( IDENT ) ) < INT_CONST ? ( IDENT >> ( IDENT ) ) | ( ( ~ ( ( IDENT ) INT_CONST ) ) << ( IDENT - ( IDENT ) ) ) ?: ( IDENT >> ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( ) { *v ( VOLATILE UNSIGNED CHAR *p ) ( IDENT -> IDENT ) &= ~ IDENT ; }
8  #DEFINE OBJ_MAC ( IDENT ( IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) EXTERN IDENT VOID IDENT ( VOID ) ;
1  #DEFINE FUNC_MAC ( ) IF ( IDENT ) { IF ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; } ELSE IDENT ( IDENT , IDENT , IDENT ) ;
23  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT > ( IDENT ) ) IDENT ( IDENT IDENT )
1  #DEFINE OBJ_MAC ( ( CHAR_CONST << INT_CONST ) | CHAR_CONST )
8  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( IDENT ) < IDENT || ( IDENT ) > IDENT ) ( IDENT ) = IDENT ; IDENT [ IDENT ] = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) == IDENT ) ? STRING ?: STRING )
1  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT ( IDENT , &v IDENT -> IDENT ) ) || ( IDENT ( IDENT , &v IDENT -> IDENT ) ) || ( IDENT ( IDENT , &v IDENT -> IDENT ) ) || ( IDENT ( IDENT , &v IDENT -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT <<= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = ( IDENT ) , IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT , IDENT , ++v IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IF ( ! ( IDENT ) ) { IF ( ( ( IDENT ) -> IDENT . IDENT > ( ( ( IDENT ) == INT_CONST ) ? IDENT ?: ( IDENT ) -> IDENT . IDENT ) ) || ( ( IDENT ) && ( ( IDENT ) -> IDENT . IDENT > IDENT ) ) ) { IDENT ( INT_CONST , ( STRING ) ) ; IDENT ( IDENT ) ; IDENT ( ( IDENT ) -> IDENT , IDENT ) ; IDENT = IDENT ; IDENT = IDENT ; } } }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT * IDENT / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) ; IF ( ! IDENT ( IDENT ) ) { IDENT ( IDENT STRING , ( UNSIGNED LONG ) IDENT ) ; IDENT ( ) ; } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT < INT_CONST ) { *v ( --v IDENT ) = CHAR_CONST ; RETURN INT_CONST ; } *v IDENT v++ = IDENT ; IDENT v-- ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( IDENT ) * INT_CONST ) )
1  #DEFINE OBJ_MAC RETURN ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT == INT_CONST ) ? IDENT ?: ( ( IDENT == INT_CONST ) ? IDENT * SIZEOF ( SHORT ) ?: ( IDENT * SIZEOF ( LONG ) ) ) )
24  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) > ( IDENT ) ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT |= ( IDENT ) . IDENT . IDENT , IDENT |= ( IDENT ) . IDENT . IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( ( IDENT ) <= IDENT ) IDENT ( # IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT + INT_CONST ) * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST ? INT_CONST ?: INT_CONST )
1  #DEFINE OBJ_MAC ( ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) )
8  #DEFINE OBJ_MAC ( IDENT == IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ## IDENT ## IDENT ,
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT <= IDENT ) ( IDENT IDENT )
1  #DEFINE FUNC_MAC ( ) { IDENT IDENT = IDENT ( IDENT ) ; IF ( IDENT != IDENT ) IDENT ( IDENT ) ; }
8  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) << IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT ) { IDENT &= ~ INT_CONST ; IDENT = IDENT ; } ELSE IDENT ( IDENT , IDENT , IDENT ) ; RETURN ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT [ IDENT -> IDENT - INT_CONST ] = IDENT ; IDENT ( ( IDENT * ) IDENT -> IDENT , ( UNSIGNED ) ( IDENT -> IDENT - INT_CONST ) * SIZEOF ( *v IDENT -> IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( INT_CONST | ( ( IDENT & INT_CONST ) << INT_CONST ) | ( IDENT & INT_CONST ) )
9  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT v-- )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == IDENT || ( IDENT ) == IDENT || IDENT [ IDENT ] || IDENT [ IDENT ] ) && ! IDENT ( ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( CHAR *p ) & ( ( IDENT * ) INT_CONST ) -> IDENT - ( CHAR *p ) INT_CONST )
2  #DEFINE OBJ_MAC ( IDENT * SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) * ( VOLATILE UNSIGNED CHAR *p ) ( IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) * INT_CONST / INT_CONST )
9  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT , IDENT , IDENT ) ; IDENT IDENT ;
1  #DEFINE OBJ_MAC ( IDENT -> IDENT - IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) INT IDENT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { IF ( IDENT -> IDENT -> IDENT > INT_CONST ) { IDENT ## IDENT ## IDENT ( IDENT , IDENT ) RETURN IDENT ; } IDENT ## IDENT ( IDENT , IDENT ( IDENT , IDENT ) , IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == IDENT -> IDENT . IDENT || ( IDENT ) == IDENT -> IDENT . IDENT || ( IDENT ) == IDENT -> IDENT . IDENT || ( IDENT ) == IDENT -> IDENT . IDENT || ( IDENT ) == IDENT -> IDENT . IDENT || ( IDENT ) == IDENT -> IDENT . IDENT )
12  #DEFINE OBJ_MAC ( ( VOID *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) ^ ( ( IDENT ) & ( ( IDENT ) ^ ( IDENT ) ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) << INT_CONST )
22  #DEFINE OBJ_MAC ( ( STRUCT IDENT * ) IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT - INT_CONST ) / IDENT ( INT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT / ( ( IDENT ) * INT_CONST ) )
7  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ( IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT [ ( IDENT ) ] . IDENT -> IDENT , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) + ( IDENT << INT_CONST ) + IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) ( IDENT ( IDENT , IDENT ( IDENT , IDENT ( IDENT , IDENT ( IDENT , IDENT ) ) ) ) )
78  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , INT_CONST , STRUCT IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT ) + SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) ( IDENT + IDENT ) , IDENT )
12  #DEFINE OBJ_MAC ( IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) > INT_CONST ? ( IDENT ) ?: -v ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = IDENT ; IDENT ( IDENT STRING , IDENT ) ; WHILE ( IDENT ) { IDENT -> IDENT = IDENT ; IDENT ( IDENT ) ; IDENT v-- ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ( IDENT , INT_CONST ) ) == IDENT && ( IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT ) ) || IDENT ( IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT STRING , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT . IDENT = IDENT + ( IDENT ) ; IDENT ( &v IDENT ) ; IDENT = INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT -> IDENT == IDENT ) { IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( ( STRUCT IDENT * ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT -> IDENT & IDENT ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( UNSIGNED LONG ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >= ( IDENT ) -> IDENT ) ? IDENT ( ( IDENT ) , SIZEOF ( CHAR ) , INT_CONST , &v ( IDENT ) -> IDENT , &v ( IDENT ) -> IDENT ) ?: INT_CONST )
1  #DEFINE OBJ_MAC IDENT = ( STRUCT IDENT * ) IDENT -> IDENT . IDENT . IDENT [ IDENT ] -> IDENT ; IF ( IDENT ( IDENT , IDENT -> IDENT . IDENT ) ) GOTO IDENT ; FOR ( IDENT = IDENT ; IDENT < IDENT -> IDENT ; IDENT v++ ) IF ( IDENT ( IDENT , IDENT -> IDENT [ IDENT ] ) ) GOTO IDENT ;
1  #DEFINE FUNC_MAC ( ) IDENT ( &v IDENT , IDENT , INT_CONST , INT_CONST ) , IDENT ( &v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( &v IDENT ) ; RETURN ( IDENT ) ; }
1  #DEFINE OBJ_MAC { STRING , STRING , STRING , STRING , STRING }
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT > INT_CONST ) ? ( IDENT ) ?: IDENT )
4  #DEFINE OBJ_MAC IDENT ( &v ( IDENT -> IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IF ( ! IDENT -> IDENT -> IDENT ) BREAK ; IDENT ( ) ; IF ( IDENT == INT_CONST ) { IDENT ( IDENT STRING , IDENT -> IDENT , IDENT ) ; IDENT ( ) ; } } }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | ( IDENT << IDENT ) | IDENT << INT_CONST | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) IDENT ( &v IDENT ) ) + ( IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , IDENT ( INT_CONST , IDENT , IDENT ) , { INT_CONST , STRING , IDENT [ IDENT ] . IDENT , INT_CONST , INT_CONST , IDENT , &v IDENT }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & ( INT_CONST << ( IDENT ) ) )
8  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( UNSIGNED LONG ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( IDENT , IDENT ) == INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) INT IDENT = IDENT -> IDENT ; IDENT ( &v IDENT -> IDENT , IDENT ) ; RETURN IDENT ;
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) |= ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( STRING ) ; IF ( IDENT ( INT_CONST , &v IDENT -> IDENT . IDENT ) ) { IDENT ( STRING ) ; IDENT ( IDENT -> IDENT . IDENT + ( INT_CONST * IDENT * IDENT -> IDENT . IDENT ) , IDENT -> IDENT + IDENT ) ; IF ( IDENT -> IDENT . IDENT == IDENT -> IDENT . IDENT ) IDENT ( IDENT STRING , IDENT -> IDENT . IDENT ) ; IDENT ( IDENT ) ; } } WHILE ( INT_CONST )
9  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT + ( IDENT ? INT_CONST ?: INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT << INT_CONST )
7  #DEFINE FUNC_MAC ( IDENT ) ( *v ( VOLATILE IDENT * ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT )
6  #DEFINE OBJ_MAC ( CHAR_CONST + ( CHAR_CONST << INT_CONST ) + ( ( INT ) CHAR_CONST << INT_CONST ) + ( ( INT ) CHAR_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT IDENT ; IDENT ( STRING IDENT ( IDENT ) STRING : STRING ( IDENT ) ) ; IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT ) |= ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT < IDENT ? IDENT - IDENT ?: IDENT - IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) | ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , SIZEOF ( IDENT ) - INT_CONST )
1  #DEFINE OBJ_MAC * IDENT v++ != *v IDENT v++
3  #DEFINE OBJ_MAC ( IDENT [ IDENT - INT_CONST ] )
1  #DEFINE OBJ_MAC { IF ( ! IDENT -> IDENT && ! IDENT -> IDENT ) { IDENT -> IDENT = INT_CONST ; IDENT ( &v IDENT -> IDENT , &v IDENT ) ; IDENT ( IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT , INT_CONST ) , *v IDENT v++ = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT = ( IDENT ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) ( IDENT ) ) >= ( ( IDENT ) ( IDENT ) -> IDENT ) ) && ( ( ( IDENT ) ( IDENT ) ) < ( ( IDENT ) ( IDENT ) -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( IDENT - IDENT ) * ( IDENT - INT_CONST - ( IDENT ) -> IDENT ) / ( IDENT - INT_CONST ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( SIZEOF ( IDENT ) != IDENT ) RETURN ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { INT IDENT = IDENT ( IDENT ) ; STRUCT IDENT * IDENT ; IF ( IDENT ( IDENT ) < IDENT ( IDENT ) ) GOTO IDENT ; IDENT = ( VOID *p ) IDENT ( IDENT , IDENT ( IDENT ) ) ; IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ; IDENT ( IDENT ) ; } )
1  #DEFINE OBJ_MAC IF ( IDENT -> IDENT ) { INT IDENT = IDENT ( IDENT , IDENT -> IDENT ) ; IF ( IDENT >= INT_CONST ) RETURN IDENT ; IDENT = INT_CONST ; CONTINUE ; } IF ( ! IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) << INT_CONST | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( &v IDENT , INT_CONST ) ; IDENT -> IDENT = IDENT ; IDENT = IDENT ; IDENT ( &v IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT += IDENT ( IDENT , IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) WHILE ( IDENT ) { IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT IF ( IDENT ) { IDENT += INT_CONST ; IDENT = IDENT ( IDENT ) ; GOTO IDENT ; } IDENT += INT_CONST ; IDENT v-- ; }
1  #DEFINE OBJ_MAC { IDENT , IDENT , IDENT , IDENT , }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
3  #DEFINE OBJ_MAC ENUM IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IDENT ( STRING IDENT STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) : STRING ( IDENT ) : STRING )
4  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT [ IDENT ] == -v INT_CONST ) IDENT [ IDENT ] = IDENT ; ELSE IF ( IDENT [ IDENT [ IDENT ] ] > IDENT [ IDENT ] ) IDENT ( IDENT , IDENT ) ; ELSE IF ( IDENT [ IDENT [ IDENT ] ] < IDENT [ IDENT ] ) { IDENT ( IDENT , IDENT [ IDENT ] ) ; IDENT [ IDENT ] = IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ) { IDENT ( ) ; ( *v ( VOLATILE IDENT * ) ( ( IDENT * ) ( IDENT + INT_CONST ) ) = ( IDENT * INT_CONST ) ) ; IDENT ( ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( INT ) IDENT ( IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( ( IDENT ) ( IDENT ) >> INT_CONST )
1  #DEFINE OBJ_MAC ( *v ( UNSIGNED SHORT *p ) & ( IDENT -> IDENT . IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST + IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( ) ( ( STRUCT IDENT * ) IDENT ( &v IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( --v ( IDENT ) -> IDENT >= INT_CONST ) { ( IDENT ) = IDENT ( IDENT ) ; }
14  #DEFINE OBJ_MAC ( &v IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT [ IDENT ] , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED INT IDENT ; IDENT = INT_CONST ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IF ( ( IDENT & IDENT -> IDENT -> IDENT ) == INT_CONST ) BREAK ; IDENT ( INT_CONST ) ; } IDENT = IDENT -> IDENT -> IDENT ; IDENT ( ( STRING , IDENT ) ) ; IDENT -> IDENT -> IDENT = IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( IDENT ) = ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v IDENT , IDENT ( IDENT ) , IDENT ( IDENT ) ) )
2  #DEFINE OBJ_MAC INT_CONST ;
2  #DEFINE OBJ_MAC { IF ( IDENT ) IDENT = IDENT ; ELSE IDENT }
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT [ INT_CONST ] = INT_CONST ; IDENT = INT_CONST ; RETURN ( IDENT ) ; }
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT , IDENT , ( IDENT ) -> IDENT . IDENT -> IDENT , ## IDENT )
6  #DEFINE OBJ_MAC ( INT_CONST * IDENT ) / INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( LONG ) ( IDENT ) ^ ( ( LONG ) ( IDENT ) >> INT_CONST ) ^ ( ( LONG ) ( IDENT ) << INT_CONST ) ) & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC VOID IDENT ## IDENT ( STRUCT IDENT * IDENT , IDENT IDENT , IDENT ## IDENT IDENT ) { UNSIGNED LONG IDENT ; IDENT ( &v ( IDENT ( IDENT ) -> IDENT ) , IDENT ) ; IDENT ( ( IDENT ) IDENT , IDENT -> IDENT + IDENT ) ; IDENT ## IDENT ( IDENT ## IDENT ( IDENT ) , IDENT -> IDENT + IDENT + ( IDENT & IDENT ) ) ; IDENT ( &v ( IDENT ( IDENT ) -> IDENT ) , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT )
1  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT [ IDENT ## IDENT ]
1  #DEFINE OBJ_MAC ( ( INT ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , INT_CONST , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( ( IDENT ) && ( IDENT ) -> IDENT != IDENT ) IDENT ( STRING , ( IDENT ) , ( IDENT ) -> IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ( &v IDENT ) ) { IDENT ( IDENT , IDENT STRING , IDENT ( IDENT ) , IDENT , IDENT , IDENT , IDENT ) ; } IDENT ( IDENT , IDENT STRING , IDENT ( IDENT ) , IDENT , IDENT ) ; IDENT ( &v IDENT , IDENT ) ; IDENT ( IDENT , IDENT STRING , IDENT ( IDENT ) , IDENT , IDENT ) ; IDENT = IDENT ; IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) )
2  #DEFINE OBJ_MAC ( IDENT + IDENT + INT_CONST + INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ## IDENT * IDENT = ( IDENT ## IDENT * ) & ( IDENT [ ( IDENT ) + ( ( ( IDENT >> INT_CONST ) - INT_CONST ) & ( ~ ( ( IDENT >> INT_CONST ) - INT_CONST ) ) ) ] ) ; IDENT ( ( *v IDENT & IDENT ) == IDENT ) ; *v IDENT &= ~ IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) )
14  #DEFINE OBJ_MAC ( &v IDENT [ INT_CONST ] )
3  #DEFINE OBJ_MAC ( INT_CONST >> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( ( FLOAT ) ( IDENT / FLOAT_CONST ) * ( INT_CONST << INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ( ) ) IDENT ( STRING IDENT , IDENT ? STRING ?: STRING , ## IDENT ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT -> IDENT ( IDENT , IDENT , IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( UNSIGNED CHAR *p ) IDENT ( IDENT ( IDENT , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( { UNSIGNED LONG IDENT , IDENT ; IDENT IDENT ( STRING STRING STRING STRING : STRING ( IDENT ) : STRING ( IDENT ) ) ; IDENT = ( IDENT & IDENT ) ? ( IDENT & IDENT ) ?: INT_CONST ; IDENT ; } )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) && ( ( IDENT ) -> IDENT == IDENT ) )
9  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) ( IDENT / IDENT ) - INT_CONST )
1  #DEFINE OBJ_MAC ( ( INT_CONST * INT_CONST + INT_CONST ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT ; RETURN ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT != IDENT ) { IDENT ( IDENT -> IDENT , IDENT , IDENT ) ; GOTO IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT [ IDENT ] . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT != IDENT ) IDENT += IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT || ( IDENT ) == IDENT || IDENT [ IDENT ] || IDENT [ IDENT ] )
1  #DEFINE OBJ_MAC { *v IDENT = IDENT ( ) ; IDENT ( STRING ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) <= CHAR_CONST ? CHAR_CONST - ( IDENT ) ?: CHAR_CONST - ( IDENT ) - INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) | ( ( IDENT ) & INT_CONST ) )
6  #DEFINE OBJ_MAC ( IDENT + IDENT + IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT ) + ( INT_CONST >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( IDENT ) * ( IDENT ) IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , IDENT ( IDENT ) | ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT != IDENT && IDENT ( IDENT ) == IDENT && IDENT ( IDENT ) > INT_CONST && IDENT ( IDENT , INT_CONST ) != IDENT && IDENT ( IDENT ( IDENT , INT_CONST ) ) == IDENT )
1  #DEFINE FUNC_MAC ( ) ( ( STRUCT IDENT * ) IDENT ( SIZEOF ( STRUCT IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { INT IDENT = INT_CONST ; IDENT IDENT = INT_CONST ; *v IDENT = IDENT ( IDENT , &v IDENT , &v IDENT , IDENT , IDENT ) ; IF ( IDENT >= ( IDENT + IDENT ) ) RETURN INT_CONST ; *v IDENT = IDENT + IDENT - IDENT ; RETURN ( IDENT < ( IDENT + IDENT - IDENT ) ) ? IDENT ?: IDENT + IDENT - IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST << ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST - IDENT ( FLOAT_CONST * IDENT * ( IDENT ) ) ) / FLOAT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ) -> IDENT
2  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ( IDENT , IDENT ) < INT_CONST ) GOTO #ERROR ; IDENT v++ ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT ( ) ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT ) ; IDENT ; IDENT ( IDENT ) ; IF ( ! IDENT ) { IDENT = IDENT ; GOTO IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT == IDENT ) || ( IDENT == IDENT ) || ( IDENT == IDENT ) || ( IDENT == IDENT ) || ( IDENT == IDENT ) || ( IDENT == IDENT ) || ( IDENT == IDENT ) || ( IDENT ( IDENT , IDENT ) ) )
12  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) ; IDENT ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( ! IDENT ( IDENT , IDENT -> IDENT , IDENT , &v IDENT ) ) { IDENT ( IDENT ) ; RETURN IDENT ; } IF ( IDENT ( IDENT , IDENT ) == IDENT ) { IDENT * IDENT = IDENT ( IDENT , IDENT ) ; IF ( ! IDENT ) { IDENT ( IDENT ) ; RETURN IDENT ; } IDENT = IDENT ( IDENT , IDENT , INT_CONST ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IF ( IDENT && IDENT [ IDENT - INT_CONST ] == CHAR_CONST ) IDENT v-- ; IDENT = IDENT ( IDENT , STRING , IDENT , IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( UNSIGNED IDENT * ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) - ( IDENT ) ) >= ( ( IDENT ) - ( IDENT ) ) )
5  #DEFINE OBJ_MAC ( IDENT ? IDENT ?: IDENT )
8  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) . IDENT . IDENT [ INT_CONST ] == INT_CONST && ( ( IDENT ) . IDENT . IDENT == INT_CONST || ( IDENT ) . IDENT . IDENT == INT_CONST ) ) ? IDENT ?: ( ( IDENT ) . IDENT . IDENT >= INT_CONST ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >= CHAR_CONST && IDENT <= CHAR_CONST ) || ( IDENT >= CHAR_CONST && IDENT <= CHAR_CONST ) || ( IDENT >= CHAR_CONST && IDENT <= CHAR_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT + IDENT + ( INT_CONST - IDENT ) * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) IDENT ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT ( UNSIGNED IDENT ; ) IDENT IDENT ; CONST UNSIGNED CHAR *p IDENT ; IDENT ( ! IDENT ( ) ) ; IDENT ( STRING ) ; IDENT ( STRING , IDENT . IDENT ) ; IDENT ( STRING , IDENT . IDENT ) ; IDENT ( IDENT . IDENT >= IDENT ) ; IDENT ( &v IDENT ) ; IDENT ( STRING , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT ) -> IDENT . IDENT
2  #DEFINE OBJ_MAC ( ( IDENT - INT_CONST ) * SIZEOF ( IDENT ) )
10  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT == IDENT || IDENT ( IDENT ) || ( IDENT ( IDENT [ IDENT ] , IDENT ( IDENT ( IDENT ( IDENT ) ) ) , IDENT ) ) )
247  #DEFINE OBJ_MAC IDENT ( INT_CONST , STRING , INT_CONST , INT_CONST , INT_CONST , STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) STRUCT IDENT * IDENT = ( STRUCT IDENT * ) IDENT -> IDENT . IDENT . IDENT ; IF ( ( ! IDENT ) || ( IDENT -> IDENT != IDENT ) ) { IDENT ( IDENT STRING IDENT STRING ) ; RETURN IDENT ; } ELSE { IDENT ( IDENT , ( IDENT STRING IDENT STRING , IDENT -> IDENT -> IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT [ ( IDENT ) ] -> IDENT == IDENT ) IDENT ( ( IDENT [ ( IDENT ) ] -> IDENT | IDENT ) , IDENT [ ( IDENT ) ] -> IDENT ) ;
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( ! ( IDENT ) ) #ERROR ( IDENT ) ; }
15  #DEFINE OBJ_MAC DO { } WHILE ( INT_CONST )
5  #DEFINE OBJ_MAC ( FLOAT_CONST )
2  #DEFINE OBJ_MAC ( IDENT ( IDENT IDENT STRING IDENT STRING ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ ( IDENT ) ] * INT_CONST + INT_CONST ) / INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT / INT_CONST * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED CHAR *p ) ( IDENT ) ) [ INT_CONST ] << INT_CONST ) + ( ( UNSIGNED CHAR *p ) ( IDENT ) ) [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ENUM { IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## IDENT }
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT >= IDENT || IDENT -> IDENT < INT_CONST ) { IDENT ( STRING , IDENT -> IDENT , IDENT -> IDENT , IDENT -> IDENT ) ; IDENT -> IDENT v-- ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( IDENT ) & INT_CONST ) )
2  #DEFINE OBJ_MAC ( IDENT [ INT_CONST ] | ( IDENT [ INT_CONST ] << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( INT ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED CHAR *p ) & IDENT -> IDENT ) [ IDENT ]
1  #DEFINE OBJ_MAC ( IDENT * IDENT + IDENT )
1  #DEFINE OBJ_MAC ( ( UNSIGNED LONG *p ) & IDENT . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ( IDENT ) & ~ ( IDENT ) ) | ( ( IDENT ) & ( IDENT ) ) ) ;
5  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( ( IDENT ) < INT_CONST ? ( ( ( IDENT ) - INT_CONST ) / INT_CONST ) ?: ( ( IDENT ) + INT_CONST ) / INT_CONST ) , INT_CONST , INT_CONST ) )
40  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ... ) DO { IF ( IDENT > INT_CONST ) IDENT ( IDENT STRING IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT > INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , REGISTER , IDENT ) ( { IDENT IDENT = IDENT ( &v IDENT -> IDENT -> IDENT . REGISTER ) ; IF ( IDENT -> IDENT & IDENT ) WHILE ( IDENT & IDENT ) IDENT = IDENT ( &v IDENT -> IDENT -> IDENT . REGISTER ) ; IDENT ; } )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT |= INT_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) ( *v ( IDENT ) ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT == IDENT ) ? INT_CONST ?: IDENT ( ( ( IDENT ) -> IDENT ) + IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT ? INT_CONST ?: ( IDENT ( IDENT ) == IDENT ? IDENT ( IDENT ) ?: IDENT ( IDENT ) ) )
4  #DEFINE OBJ_MAC ( IDENT == INT_CONST ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( *v ( ( UNSIGNED CHAR *p ) ( IDENT ) + IDENT ) ) & ( ( UNSIGNED CHAR ) IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) WHILE ( ( IDENT ( IDENT ) & IDENT ) == INT_CONST ) { ; } ( VOID ) IDENT ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) ( IDENT ) ) -> IDENT == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = ( *v IDENT -> IDENT ) ( IDENT , IDENT ? IDENT ?: IDENT ( IDENT ) , IDENT ? IDENT ( IDENT ) ?: INT_CONST ) ; IF ( IDENT < INT_CONST ) GOTO IDENT ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) [ IDENT ] = INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( VOLATILE IDENT * ) IDENT ) [ ( ( IDENT ) / INT_CONST ) ^ INT_CONST ] )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p ) ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT && ( IDENT == INT_CONST ) ) RETURN IDENT ## IDENT ( IDENT , IDENT )
2  #DEFINE OBJ_MAC INT_CONST + IDENT + IDENT
1  #DEFINE OBJ_MAC { IDENT = IDENT ( IDENT -> IDENT . IDENT . IDENT ) ; IDENT = IDENT ( IDENT -> IDENT . IDENT . IDENT ) ; IDENT = IDENT ( IDENT -> IDENT . IDENT . IDENT ) ; }
16  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) && IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT [ INT_CONST ] & ( INT_CONST << ( IDENT ) ) ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( VOLATILE UNSIGNED INT *p ) IDENT + IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT ) ( INT_CONST ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( VOLATILE IDENT * ) IDENT ) [ ( ( IDENT ^ INT_CONST ) / INT_CONST ) ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT + IDENT ( STRUCT IDENT , IDENT ) )
7  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) << ( IDENT ) -> IDENT )
2  #DEFINE OBJ_MAC IDENT ( &v IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( INT_CONST | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT , IDENT , IDENT ## IDENT , IDENT ## IDENT } ,
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT . IDENT , STRING , SIZEOF ( IDENT . IDENT ) ) ; IDENT ( IDENT . IDENT , STRING , SIZEOF ( IDENT . IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT -> IDENT = ( IDENT ) ; RETURN ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( ) DO { IF ( ! IDENT ) { IDENT IDENT ; IDENT = INT_CONST ; FOR ( IDENT = IDENT ; IDENT <= IDENT ; IDENT v++ ) { IDENT ( IDENT [ IDENT ] ) = IDENT ( IDENT [ IDENT ] ) = INT_CONST ; } } } WHILE ( INT_CONST )
18  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { LONG IDENT ; IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( INT_CONST & ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT = ( IDENT ) ) { IDENT &= ~ INT_CONST ; RETURN ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( ( IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , IDENT , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT + IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) & ~ ( INT ) IDENT ) << ( INT ) IDENT ) | ( ( INT ) IDENT << ( INT ) IDENT ) | ( ( IDENT ) & ( INT ) IDENT ) )
1  #DEFINE OBJ_MAC { INT IDENT = INT_CONST ; WHILE ( IDENT > INT_CONST && ( IDENT ( IDENT -> IDENT ) & INT_CONST ) != INT_CONST ) { IDENT v-- ; } IF ( IDENT == INT_CONST ) { IDENT ( IDENT STRING , IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! IDENT ) IDENT ( STRING , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( ( IDENT ) & ( IDENT - INT_CONST ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT ) ) IDENT ( IDENT )
1  #DEFINE OBJ_MAC ( IDENT + ( SIZEOF ( STRUCT IDENT ) / INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT + IDENT / ( IDENT / INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) [ IDENT + ( IDENT ) ] |= ( IDENT ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( ) ( ( IDENT ( &v IDENT ) / SIZEOF ( STRUCT IDENT ) ) - IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) VOID IDENT ( CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT ) { IDENT IDENT ; STRUCT IDENT * IDENT = IDENT -> IDENT ; IDENT -> IDENT = ( STRUCT IDENT * ) IDENT ; IDENT = IDENT ( INT_CONST , IDENT , ( CHAR *p ) IDENT , &v IDENT , IDENT , IDENT ) ; IF ( IDENT > INT_CONST ) IDENT ( ( STRUCT IDENT * ) IDENT ) ; ELSE ( *v IDENT [ IDENT ] . IDENT ) ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; IDENT -> IDENT = IDENT ; RETURN ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( IDENT ) -> IDENT ?: STRING )
3  #DEFINE FUNC_MAC ( IDENT ) ( ! ( ( IDENT ) & ( INT_CONST << INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ ( INT_CONST - ( ( IDENT ) & INT_CONST ) ) << INT_CONST ] = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT -> IDENT . IDENT < IDENT -> IDENT . IDENT ) ? IDENT -> IDENT . IDENT ?: IDENT -> IDENT . IDENT ) * IDENT ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ## IDENT , &v IDENT ( IDENT ) )
12  #DEFINE OBJ_MAC STRUCT IDENT
6  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT -> IDENT -> IDENT ) ( IDENT -> IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT IDENT ; IF ( ! ( IDENT ) ) { IDENT = IDENT ( ( IDENT ) -> IDENT . IDENT ) ; IDENT ( ( IDENT ) , IDENT ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT [ IDENT -> IDENT ] ) ;
1  #DEFINE OBJ_MAC ( ( STRUCT IDENT * *v ) IDENT -> IDENT . IDENT - IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT * IDENT ; IDENT IDENT ; CHAR IDENT [ IDENT ] ; IDENT ( IDENT , INT_CONST , IDENT ) ; IDENT ( IDENT , IDENT - INT_CONST , STRING , IDENT ) ; IDENT = ( IDENT * ) IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( IDENT ) IDENT = IDENT -> IDENT ; ELSE IDENT = IDENT ; } WHILE ( INT_CONST )
43  #DEFINE FUNC_MAC ( ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) && ( ( IDENT ) -> IDENT . IDENT > -v ( INT ) ( ( IDENT ) -> IDENT . IDENT + ( IDENT ) -> IDENT . IDENT * INT_CONST ) ) && ( ( IDENT ) -> IDENT . IDENT > -v ( INT ) ( ( IDENT ) -> IDENT . IDENT + ( IDENT ) -> IDENT . IDENT * INT_CONST ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT -> IDENT = IDENT + ( IDENT ) ; IDENT ( ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT || ( IDENT ) == IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( ( VOID *p ) IDENT , &v IDENT -> IDENT ) ; IDENT = IDENT + SIZEOF ( IDENT ) ; }
1  #DEFINE OBJ_MAC ( IDENT - INT_CONST - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ IDENT ] << INT_CONST ) | IDENT [ IDENT + INT_CONST ] )
4  #DEFINE OBJ_MAC ( VOID ) IDENT ( IDENT , IDENT , INT_CONST , IDENT )
2  #DEFINE OBJ_MAC ( ( IDENT * ) IDENT ( &v IDENT ) )
4  #DEFINE FUNC_MAC ( ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IF ( ! IDENT -> IDENT -> IDENT ) BREAK ; IDENT ( ) ; IF ( IDENT == INT_CONST ) { IDENT ( STRING , IDENT -> IDENT , IDENT -> IDENT -> IDENT , IDENT -> IDENT -> IDENT ) ; IF ( ! IDENT -> IDENT ) { IDENT -> IDENT = INT_CONST ; IDENT ( ) ; } } } }
1  #DEFINE FUNC_MAC ( ) ( *v ( VOLATILE UNSIGNED CHAR *p ) IDENT )
1  #DEFINE OBJ_MAC DO { IF ( IDENT . IDENT && ( IDENT & ( IDENT | IDENT ) ) ) IDENT ( IDENT , IDENT ) ; RETURN ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) >= IDENT . IDENT ) && ( ( IDENT ) >= IDENT . IDENT ) && ( ( IDENT ) <= IDENT . IDENT + IDENT . IDENT ) && ( ( IDENT ) <= IDENT . IDENT + IDENT . IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT = IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = ( *v IDENT -> IDENT ) ( IDENT , IDENT ? IDENT ?: STRING , IDENT ? IDENT ( IDENT ) ?: INT_CONST ) ; IF ( IDENT < INT_CONST ) GOTO IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( SIZEOF ( IDENT ) > INT_CONST ) ? INT_CONST ?: IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? ( IDENT ) & INT_CONST ?: ( ( IDENT ) >> ( ( IDENT ) - INT_CONST ) ) & INT_CONST )
21  #DEFINE OBJ_MAC IDENT / INT_CONST
1  #DEFINE OBJ_MAC ( IDENT ( INT_CONST * IDENT + INT_CONST , IDENT * INT_CONST ) - IDENT )
70  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT )
1  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) INT_CONST * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( ( ( IDENT ) > FLOAT_CONST ) ? ( ( IDENT ) + FLOAT_CONST ) ?: ( ( IDENT ) - FLOAT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) != IDENT && ( IDENT ) != IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( &v ( IDENT ) -> IDENT ) ; ( *v IDENT ) ( IDENT ) ; IDENT ( &v ( IDENT ) -> IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT : IDENT , IDENT : IDENT , IDENT : IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT < INT_CONST ) ? ( INT_CONST + ( IDENT ) ) ?: ( INT_CONST + ( IDENT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT , IDENT ) IDENT IDENT ; IDENT IDENT ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) | ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT * ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , #LINE ) IDENT ( IDENT , IDENT , INT_CONST , #LINE , SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( ( ( ( ( IDENT ) + INT_CONST ) * INT_CONST ) / INT_CONST ) << INT_CONST ) , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC INT IDENT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { INT IDENT = IDENT ( IDENT , IDENT ) ; IF ( IDENT == IDENT ) { IDENT ## IDENT ## IDENT ( IDENT , IDENT ) RETURN IDENT ; } IF ( IDENT == IDENT ) RETURN IDENT ## IDENT ## IDENT ## IDENT ( IDENT , IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT [ IDENT ]
2  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( &v ( ( STRUCT IDENT * ) IDENT ) -> IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( IDENT ) -> IDENT . IDENT )
21  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) -> IDENT [ IDENT ] )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED CHAR ) IDENT == IDENT )
8  #DEFINE OBJ_MAC ( IDENT -> IDENT [ INT_CONST ] )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( IDENT ) * ( INT_CONST << IDENT ) + FLOAT_CONST ) )
164  #DEFINE FUNC_MAC ( IDENT , IDENT ... )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ INT_CONST * IDENT ] & INT_CONST ) + INT_CONST * ( IDENT [ INT_CONST * IDENT + INT_CONST ] & INT_CONST ) )
4  #DEFINE OBJ_MAC { STRING , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { *v ( ( VOLATILE UNSIGNED INT *p ) IDENT + IDENT ) = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT [ INT_CONST ] |= ( IDENT )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) RETURN IDENT ( -v IDENT )
62  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & INT_CONST )
2  #DEFINE FUNC_MAC ( ) ( IDENT ? ( IDENT ( &v IDENT , IDENT ) , INT_CONST ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ) IDENT ( STRING , ( INT ) ( IDENT ) ) ; *v ( VOLATILE UNSIGNED INT *p ) ( IDENT + IDENT ) = IDENT ; IDENT += INT_CONST ; IDENT &= IDENT ; } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC ( UNSIGNED INT ) ( IDENT )
2  #DEFINE FUNC_MAC ( ) ( IDENT & IDENT ? IDENT ( IDENT , UNSIGNED LONG ) ?: IDENT & IDENT ? ( UNSIGNED LONG ) ( UNSIGNED SHORT ) IDENT ( IDENT , INT ) ?: ( UNSIGNED LONG ) IDENT ( IDENT , UNSIGNED INT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT -> IDENT . IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT ( IDENT ) [ INT_CONST ] ) ; ELSE IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT -> IDENT . IDENT , IDENT , IDENT ( IDENT ) , &v IDENT , &v IDENT , &v IDENT , &v IDENT ) ; IDENT = IDENT . IDENT - IDENT . IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ) IDENT ( IDENT STRING IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC STRUCT IDENT IDENT ## IDENT [ ] IDENT = {
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( UNSIGNED LONG ) IDENT ) - ( ( UNSIGNED LONG ) ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) ) == ( IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT + IDENT . IDENT + INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT ( IDENT -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( -v ( IDENT ) )
1  #DEFINE OBJ_MAC ( ! IDENT [ IDENT ] && ! IDENT ( IDENT ) )
16  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT )
3  #DEFINE OBJ_MAC ( ( IDENT ) ( ( INT_CONST << INT_CONST ) / IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST * SIZEOF ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( IDENT ) )
1  #DEFINE OBJ_MAC { INT_CONST , STRING , &v IDENT , SIZEOF ( INT ) , INT_CONST , IDENT , &v IDENT } , { INT_CONST , STRING , &v IDENT , SIZEOF ( INT ) , INT_CONST , IDENT , &v IDENT } ,
2  #DEFINE OBJ_MAC ( ( IDENT | IDENT ) + INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , STRING , IDENT ) ; IDENT ( INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( VOID *p ) ( IDENT ) , ( IDENT ) )
18  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT + ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT ) ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT ## IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT == IDENT ) || ( IDENT -> IDENT == IDENT ) || ( IDENT -> IDENT == IDENT ) || ( IDENT -> IDENT == IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( SIZEOF ( IDENT ) == INT_CONST ) ? ( ( IDENT ) = ( IDENT ) IDENT ( IDENT ) ) ?: ( ( IDENT ) = ( ( IDENT ) IDENT ( IDENT ) << INT_CONST ) | ( IDENT ) IDENT ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( VOID ) ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ( ( IDENT ) , IDENT ) ) >> INT_CONST ) | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , IDENT ) ; IDENT v++ ; IDENT v++ ; CONTINUE ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { STRUCT IDENT * IDENT ; REGISTER UNSIGNED LONG IDENT ; IF ( ! ( IDENT ) ) IDENT = INT_CONST ; ELSE IF ( ( IDENT ) < INT_CONST ) { IDENT = IDENT -> IDENT [ ( IDENT ) ] ; } ELSE { IDENT = ( STRUCT IDENT * ) IDENT -> IDENT [ IDENT ] ; IF ( IDENT ( IDENT , &v IDENT -> IDENT [ ( IDENT ) - INT_CONST ] ) ) RETURN -v INT_CONST ; } IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( UNSIGNED LONG ) IDENT IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT ( IDENT + IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( ( CHAR *p ) ( IDENT ) ) [ ( IDENT ) / INT_CONST ] |= ( INT_CONST << ( ( IDENT ) % INT_CONST ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT == IDENT ) GOTO IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) -> IDENT = IDENT , ( IDENT ) -> IDENT = IDENT , ( IDENT ) -> IDENT = IDENT , ( IDENT ) -> IDENT = INT_CONST , ( IDENT ) -> IDENT = IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( *v ( VOLATILE UNSIGNED INT *p ) ( IDENT ) ) = ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ## IDENT
1  #DEFINE OBJ_MAC ( ( UNSIGNED ) INT_CONST * INT_CONST - ( IDENT -> IDENT - IDENT -> IDENT ) )
13  #DEFINE OBJ_MAC ( IDENT == INT_CONST )
5  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST | IDENT )
1  #DEFINE OBJ_MAC INT IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ## IDENT ( IDENT * IDENT , IDENT * IDENT , IDENT IDENT , UNSIGNED LONG IDENT , VOID *p IDENT ) { STRUCT IDENT IDENT [ INT_CONST ] ; IDENT IDENT ; IDENT ( IDENT ) ; IDENT = IDENT ## IDENT ( ( IDENT * ) IDENT ( IDENT -> IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) , IDENT , IDENT , IDENT ( IDENT ) ) ; IDENT ( IDENT ) ; RETURN IDENT ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT |= ( INT_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT & IDENT ) { IF ( IDENT ) IDENT ( IDENT ( IDENT ) | IDENT , IDENT ) ; ELSE IDENT ( IDENT ( IDENT ) & ~ IDENT , IDENT ) ; IDENT &= ~ IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) & IDENT ( IDENT ) , IDENT )
1  #DEFINE OBJ_MAC ( ~ IDENT >> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) WHILE ( IDENT -> IDENT & IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT -> IDENT ) { IF ( IDENT -> IDENT -> IDENT ( IDENT , ( IDENT ) , INT_CONST ) != ( IDENT ) ) GOTO IDENT ; } ELSE IDENT -> IDENT = ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( ( IDENT ( ( IDENT ) , IDENT ) & INT_CONST ) | ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) * IDENT / INT_CONST )
1  #DEFINE OBJ_MAC SIZEOF ( LONG )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == ( IDENT ? IDENT ?: IDENT ) || ! IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { ( *v ( VOLATILE UNSIGNED CHAR *p ) IDENT ) = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , IDENT , IDENT , IDENT ( IDENT ( IDENT ) ) , IDENT ( SIZEOF ( IDENT ) ) , IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) , INT_CONST )
14  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( ) { UNSIGNED IDENT = INT_CONST ; WHILE ( ! ( IDENT ( IDENT ( IDENT ) ) & IDENT ) && IDENT ) IDENT v-- ; IF ( ! IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) ( IDENT ) & ~ INT_CONST )
2  #DEFINE FUNC_MAC ( ) ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( INT *p ) ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) > INT_CONST ) ? ( IDENT ) + CHAR_CONST ?: ( IDENT ) + CHAR_CONST )
1  #DEFINE OBJ_MAC ( ( SHORT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) ( IDENT ) ) -> IDENT . IDENT ) ? ( ( ( IDENT ) ( IDENT ) ) -> IDENT . IDENT + IDENT ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) & ( INT_CONST << ( IDENT ) ) ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( UNSIGNED LONG ) ( ( ( UNSIGNED LONG ) ( IDENT ) + ( ( IDENT ) - INT_CONST ) ) & ~ ( ( IDENT ) - INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) [ INT_CONST ] & INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT ( STRING , IDENT , ( VOID *p ) ( IDENT ) , ( VOID *p ) ( IDENT ) , ( VOID *p ) ( IDENT ) , ( VOID *p ) ( IDENT ) ) ; IF ( ( IDENT ) == ( IDENT ) ) IDENT ( INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) CASE IDENT ## IDENT ## IDENT : IDENT = IDENT ## IDENT ## IDENT ; IDENT = INT_CONST ; BREAK
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT * IDENT ; IDENT IDENT ; IDENT = ( IDENT * ) IDENT ( IDENT , ( CHAR *p ) & ( IDENT ) , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( IDENT ) IDENT = IDENT -> IDENT ; ELSE IDENT = IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) - INT_CONST ) * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( IDENT ( ( IDENT ) , IDENT ) & ~ ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) [ INT_CONST ] << INT_CONST | ( IDENT ) [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT >> INT_CONST ) ] >> ( ( IDENT & INT_CONST ) << INT_CONST ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) FOR ( ( IDENT ) = ( IDENT ) , ( IDENT ) = ( ( IDENT ) ? ( IDENT ) -> IDENT ?: IDENT ) ; ( IDENT ) != IDENT ; ( IDENT ) = ( IDENT ) , ( IDENT ) = ( ( IDENT ) ? ( IDENT -> IDENT ) ?: IDENT ) )
1  #DEFINE OBJ_MAC IDENT | IDENT | IDENT | IDENT | IDENT
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * SIZEOF ( IDENT ) )
19  #DEFINE OBJ_MAC IDENT [ INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT & INT_CONST ) | ( ( IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT & INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) > INT_CONST ) && ( ( IDENT ) > ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT * ) ( ( CHAR *p ) IDENT + SIZEOF ( *v IDENT ) + ( IDENT -> IDENT - SIZEOF ( IDENT -> IDENT ) + IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT == IDENT )
38  #DEFINE OBJ_MAC UNSIGNED LONG
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , -v INT_CONST , ( IDENT ) | INT_CONST , INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT . IDENT != IDENT )
12  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) + INT_CONST ] )
3  #DEFINE OBJ_MAC IDENT * ( ( IDENT -> IDENT ) / ( INT_CONST * INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( IDENT << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT -> IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( UNSIGNED SHORT ) ( ( UNSIGNED LONG ) ( IDENT ) - ( UNSIGNED LONG ) IDENT -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( &v ( IDENT ) -> IDENT ) ; ( IDENT ) -> IDENT . IDENT = IDENT + IDENT * IDENT ; ( IDENT ) -> IDENT . IDENT = ( UNSIGNED LONG ) IDENT ; ( IDENT ) -> IDENT . IDENT = ( VOID ( *v ) ( UNSIGNED LONG ) ) IDENT ; IDENT ( &v ( IDENT ) -> IDENT ) ; ( IDENT ) -> IDENT = INT_CONST ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) IDENT <= ( INT ) ( IDENT ) && ( INT ) ( IDENT ) <= ( INT ) IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING # IDENT STRING , IDENT ( STRUCT IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) . IDENT != IDENT ) ? ( *v ( IDENT ( IDENT ) . IDENT ) ) ( IDENT ) ?: ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) [ INT_CONST ] ) == IDENT ( ( IDENT ) [ INT_CONST ] ) && IDENT ( IDENT , IDENT , IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( IDENT - IDENT ( ( IDENT ) - IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT / IDENT
6  #DEFINE OBJ_MAC ( IDENT ( IDENT ) )
14  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( IDENT ) & INT_CONST ) )
2  #DEFINE OBJ_MAC IDENT - INT_CONST + INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT == INT_CONST ) IDENT ( IDENT , STRING , IDENT ) ; ELSE IDENT ( IDENT , STRING , IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT + ( IDENT == -v INT_CONST ? INT_CONST ?: ( IDENT ? INT_CONST ?: INT_CONST ) ) , IDENT )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) + ( IDENT ( IDENT ) << INT_CONST ) + ( IDENT ( IDENT ) << INT_CONST ) + ( IDENT ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST * ( ( IDENT ) / IDENT ) + INT_CONST * ( ( IDENT ) % IDENT ) / IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) STRUCT IDENT IDENT = { IDENT ( IDENT , IDENT , IDENT ) , &v IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT , IDENT , IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT |= ( UNSIGNED LONG ) IDENT << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT IDENT ; IDENT ; IDENT = ( *v ( VOLATILE IDENT * ) ( ( IDENT ) + ( IDENT ) IDENT ( IDENT ) ) ) ; IDENT ; IDENT ; } )
3  #DEFINE OBJ_MAC ( FLOAT_CONST / ( INT_CONST * IDENT ) )
1  #DEFINE FUNC_MAC ( ) ( ( *v IDENT >> IDENT ) & INT_CONST )
146  #DEFINE OBJ_MAC ( IDENT | IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT * INT_CONST ) + INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) IDENT ( ( IDENT ) IDENT ( IDENT ) , IDENT ) != IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) ( IDENT ( IDENT IDENT , ## IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = ( UNSIGNED ) INT_CONST << ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT = IDENT -> IDENT [ IDENT ] ; IDENT -> IDENT [ IDENT ] = IDENT -> IDENT [ IDENT -> IDENT v-- ] ; IDENT ( IDENT , IDENT , IDENT ) ; }
3  #DEFINE FUNC_MAC ( ) IDENT -> IDENT . IDENT = IDENT ; IDENT -> IDENT . IDENT = IDENT ; IDENT -> IDENT . IDENT = IDENT ; IDENT -> IDENT . IDENT = IDENT ; IDENT -> IDENT . IDENT = IDENT ; IDENT -> IDENT . IDENT = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( *v IDENT -> IDENT -> IDENT ) ( IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( ( IDENT ) & INT_CONST ) , ( IDENT ) + IDENT ) ; IDENT ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) , ( IDENT ) + IDENT ) ; IF ( IDENT ) { IDENT ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) , ( IDENT ) + IDENT ) ; IDENT ( INT_CONST , ( IDENT ) + IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) . IDENT [ ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( ) { *v ( VOLATILE UNSIGNED CHAR *p ) ( IDENT -> IDENT ) |= IDENT ; *v ( VOLATILE UNSIGNED CHAR *p ) ( IDENT -> IDENT ) &= ~ IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v IDENT , ( IDENT ) , IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , ( LONG ) IDENT , ( LONG ) IDENT , ( LONG ) IDENT ) ; IDENT ( IDENT , IDENT -> IDENT , IDENT ) ; }
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT & IDENT )
2  #DEFINE OBJ_MAC UNSIGNED LONG IDENT = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , INT_CONST , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) = IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST ? -v ( IDENT ) ?: ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { REGISTER IDENT IDENT , IDENT ; REGISTER INT IDENT ; FOR ( IDENT = IDENT . IDENT , IDENT = IDENT . IDENT ; IDENT > INT_CONST ; IDENT v-- , IDENT = IDENT ) { IDENT = IDENT -> IDENT ; IDENT } }
2  #DEFINE OBJ_MAC ( ( IDENT > IDENT ) ? INT_CONST * IDENT ?: INT_CONST * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ) ) , IDENT ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT + IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT ( IDENT , IDENT -> IDENT + ( ( IDENT ) << IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( ) DO { IF ( IDENT ) IDENT ( STRING ) ; IDENT -> IDENT . IDENT = IDENT ; IDENT ( IDENT + IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST && ( ( ( IDENT ) < IDENT ) || ( ( IDENT ) >= IDENT && ( IDENT ) < IDENT && IDENT ( IDENT ) ) || ( ( IDENT ) >= IDENT && ( IDENT ) < IDENT && ! ( ( IDENT ) & INT_CONST ) && IDENT ( IDENT ) ) || ( ( IDENT ) >= IDENT && ( IDENT ) < IDENT + IDENT && IDENT & ( INT_CONST << ( ( IDENT ) - IDENT ) ) ) ) )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ^= IDENT ; IDENT ( INT_CONST , IDENT ) ; }
11  #DEFINE OBJ_MAC ( &v IDENT [ IDENT ] )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT |= IDENT ( IDENT -> IDENT , &v IDENT -> IDENT )
2  #DEFINE OBJ_MAC ( IDENT / INT_CONST ? ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >> INT_CONST ) ^ IDENT ) & ( IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT ) IDENT & INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) IF ( INT_CONST ) { IF ( IDENT ( ) ) { IDENT ( IDENT , STRING , STRING ) ; IDENT = STRING ; BREAK ; } } ELSE
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT <= INT_CONST )
1  #DEFINE FUNC_MAC ( ) IDENT IDENT ( STRING : : : STRING )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT > INT_CONST ) { CHAR IDENT = IDENT [ IDENT ] ; IDENT [ IDENT ] = IDENT [ IDENT ] ; IDENT [ IDENT ] = IDENT ; }
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT , IDENT , IDENT )
3  #DEFINE OBJ_MAC ( ( IDENT + INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT , IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT STRING , IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT ( ) ; IDENT = IDENT ( ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IF ( IDENT == IDENT ) { IF ( IDENT == IDENT ) { IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT ) IDENT INT_CONST ; } ELSE IF ( IDENT == IDENT ) { IDENT = *v IDENT ( IDENT ) ; IDENT = *v IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT , IDENT ) ; } ELSE { IDENT = IDENT IDENT IDENT ; } } ELSE { IF ( IDENT ( IDENT ) || IDENT ( IDENT ) ) { IDENT = ( IDENT ( IDENT ) || IDENT ( IDENT ) ) IDENT INT_CONST ; } ELSE IF ( IDENT ( IDENT ) || IDENT ( IDENT ) ) { IDENT = INT_CONST IDENT INT_CONST ; } ELSE { IDENT = IDENT , IDENT = IDENT ; IDENT ( IDENT , IDENT , &v IDENT ) ; IDENT ( IDENT , IDENT , &v IDENT ) ; IF ( IDENT ( IDENT ) && IDENT ( IDENT ) ) { IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT ) IDENT INT_CONST ; } ELSE { IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT , IDENT ) ; } } } IDENT ( IDENT ( IDENT ) ) ; }
1  #DEFINE OBJ_MAC ( CHAR_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( ( IDENT ) & INT_CONST ) << IDENT ) & INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> ( INT_CONST - IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( CHAR *p ) ( IDENT ) ) - IDENT -> IDENT )
1  #DEFINE OBJ_MAC ( IDENT + SIZEOF ( STRUCT IDENT ) + SIZEOF ( STRUCT IDENT ) + SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( &v IDENT , IDENT + IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT IDENT ; IDENT . IDENT = ( IDENT ) ; IDENT . IDENT = IDENT ; IDENT . IDENT = ( IDENT ) ; IDENT . IDENT = ( IDENT ) ; IDENT ( ( IDENT ) , ( IDENT ) , IDENT | IDENT | IDENT | IDENT , &v IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT ( ( IDENT ) , ( IDENT ) ) ) RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT ) ; IDENT ( IDENT , &v IDENT , SIZEOF ( IDENT ) ) ; IDENT += SIZEOF ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT ( IDENT ) )
142  #DEFINE OBJ_MAC ( ( IDENT ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ) ( ( UNSIGNED LONG ) ( IDENT ) + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT = &v ( IDENT ) ; IDENT = &v ( IDENT ) ; *v IDENT = IDENT ( ( UNSIGNED LONG ) IDENT , ( UNSIGNED LONG ) IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) , IDENT ( IDENT , STRING )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT ) - INT_CONST ]
1  #DEFINE OBJ_MAC ( IDENT [ ( IDENT - INT_CONST ) * INT_CONST + IDENT - INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED LONG ) ( IDENT ) & ~ INT_CONST ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) * INT_CONST , INT_CONST , INT_CONST )
1  #DEFINE OBJ_MAC { IDENT ( IDENT , IDENT ) ; BREAK ; }
22  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT ) | ( IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( &v IDENT ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST | ( ( IDENT ) << INT_CONST ) | ( INT_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , INT_CONST )
5  #DEFINE OBJ_MAC ( VOID *p ) IDENT
1  #DEFINE FUNC_MAC ( ) ( ( IDENT & IDENT ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE OBJ_MAC UNSIGNED INT IDENT ; UNSIGNED INT IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) RETURN IDENT ( IDENT )
3  #DEFINE OBJ_MAC STATIC CONST CHAR
1  #DEFINE OBJ_MAC ( ( IDENT * ) STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT * ) IDENT ( IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) & IDENT ) >> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ? ( ( IDENT ) - ( IDENT ) ) ?: ( ( IDENT ) - ( IDENT ) + ( ( IDENT ) < ( IDENT ) ? INT_CONST / IDENT ?: INT_CONST ) ) )
4  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( STRING # IDENT STRING , IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC IDENT ## IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , IDENT IDENT ) { IDENT ## IDENT IDENT ; UNSIGNED LONG IDENT ; IDENT ( &v ( IDENT ( IDENT ) -> IDENT ) , IDENT ) ; IDENT ( ( IDENT ) IDENT & ~ INT_CONST , IDENT -> IDENT + IDENT ) ; IDENT = IDENT ## IDENT ( IDENT -> IDENT + IDENT + ( IDENT & IDENT ) ) ; IDENT ( &v ( IDENT ( IDENT ) -> IDENT ) , IDENT ) ; RETURN IDENT ## IDENT ## IDENT ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( ) ( IDENT == IDENT || IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT & ~ ( IDENT ) , IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , ... ) IDENT ( IDENT IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( ( IDENT ) == IDENT ? IDENT ?: ( CHAR *p ) IDENT ( ( CHAR *p ) IDENT ( IDENT ( ( IDENT ) ) + INT_CONST ) , ( IDENT ) ) ) )
4  #DEFINE OBJ_MAC IDENT IDENT ( STRING )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT == IDENT ( IDENT ) || IDENT == IDENT ( IDENT ) || IDENT == IDENT ( IDENT ) || IDENT == IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( IDENT ( IDENT ( IDENT ) ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) < IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( INT *p ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] ? IDENT [ IDENT ] ?: IDENT [ IDENT ] * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ( IDENT ) . IDENT != IDENT ) { ( *v ( IDENT ( IDENT ) . IDENT ) ) ( IDENT ) ; } ELSE
4  #DEFINE OBJ_MAC ( INT_CONST << ( INT_CONST + INT_CONST ) )
1  #DEFINE OBJ_MAC CHAR *p IDENT , *v IDENT , *v IDENT , *v IDENT , *v IDENT , *v IDENT , *v IDENT , *v IDENT ;
38  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST )
4  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) {
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) . IDENT != IDENT ) ? ( *v ( IDENT ( IDENT ) . IDENT ) ) ( IDENT ) ?: IDENT )
9  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT [ IDENT ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) -> IDENT == INT_CONST )
42  #DEFINE OBJ_MAC ( IDENT * IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT == IDENT ( IDENT ) || IDENT == IDENT ( IDENT ) || IDENT == IDENT ( IDENT ) || IDENT == IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = INT_CONST ; STRUCT IDENT * IDENT = ( STRUCT IDENT * ) ( ( IDENT ) -> IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ )
1  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST + INT_CONST + INT_CONST + INT_CONST + INT_CONST + INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) == INT_CONST ? IDENT ?: IDENT )
7  #DEFINE FUNC_MAC ( IDENT ) { # IDENT , IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) CONST CHAR IDENT ## IDENT [ ] IDENT ( ( IDENT ( STRING ) ) ) = IDENT ( IDENT ) ; CONST STRUCT IDENT IDENT ## IDENT IDENT ( ( IDENT ( STRING ) ) ) = { ( UNSIGNED LONG ) & IDENT , IDENT ## IDENT } ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) ( IDENT + IDENT ) , ( IDENT ) ( IDENT & INT_CONST ) ) , IDENT >>= INT_CONST , IDENT ( ( IDENT ) ( IDENT + IDENT ) , ( IDENT ) ( IDENT & INT_CONST ) ) , IDENT ( IDENT , IDENT , IDENT ) , IDENT ( ( IDENT ) ( IDENT + IDENT ) , ( IDENT ) ( IDENT & INT_CONST ) ) , IDENT >>= INT_CONST , IDENT ( IDENT + IDENT , ( IDENT & INT_CONST ) ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) IDENT ( &v IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( UNSIGNED LONG ) ( ( IDENT ) << ( IDENT ) ) >> ( IDENT ) ) == ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) , ( IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( ( IDENT ) -> IDENT ) + IDENT )
1  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST - ( INT_CONST + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( INT_CONST ) ( VOID ) IDENT ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT == IDENT ) ? ( IDENT & IDENT ) ?: ( IDENT & IDENT ) ? IDENT ?: INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT & INT_CONST ) >> INT_CONST ) * INT_CONST ) | ( ( IDENT & INT_CONST ) ? -v INT_CONST ?: INT_CONST ) )
2  #DEFINE OBJ_MAC ( ( IDENT ) IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( STRING , IDENT , IDENT ) ; RETURN ( IDENT ) ; }
1  #DEFINE OBJ_MAC { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT IDENT = IDENT ( IDENT ) ; IDENT IDENT , IDENT ; IDENT IDENT = IDENT ( IDENT ) ; IDENT ( ) ; IDENT ( INT_CONST , IDENT , IDENT , STRING ) ; IDENT ( ) ; WHILE ( --v IDENT >= INT_CONST ) { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT IDENT = IDENT ( IDENT , IDENT < INT_CONST ? -v INT_CONST ?: INT_CONST ) ; IDENT ( IDENT ) = IDENT ; IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; IDENT ( IDENT + IDENT ) ; } IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , INT_CONST , IDENT , &v IDENT ) ; IDENT ( IDENT + IDENT ) ; IDENT ( ) ; IDENT ( IDENT ) ; }
1  #DEFINE OBJ_MAC ( ( CHAR_CONST << INT_CONST ) | ( CHAR_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT [ IDENT . IDENT v++ ] = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( &v IDENT , IDENT + ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IF ( IDENT ( IDENT , IDENT , IDENT ) != IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; IDENT ; } IDENT
1  #DEFINE FUNC_MAC ( IDENT ) STRUCT IDENT IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) IDENT ) - ( ( IDENT ) IDENT ) ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( &v ( ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT [ ( IDENT ) >> INT_CONST ] |= INT_CONST << ( ( IDENT ) % INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) && IDENT ( ( IDENT ) ) && IDENT ( IDENT ( ( IDENT ) ) ) ) ? IDENT ( IDENT ( ( IDENT ) ) ) ?: ( CHAR *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ ( IDENT ( IDENT ( IDENT ) , IDENT ) & IDENT ) ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( ( ( IDENT ) & ~ INT_CONST ) , ( IDENT ) -> IDENT . IDENT + IDENT ) ;
1  #DEFINE OBJ_MAC INT *p
1  #DEFINE FUNC_MAC ( IDENT ) ( *v --v IDENT = ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT , { IDENT : IDENT } , INT_CONST , INT_CONST , INT_CONST , INT_CONST } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( ( ( ( IDENT ) IDENT & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) IDENT & INT_CONST ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ( ( IDENT * ) ( IDENT ) , &v ( IDENT ) , SIZEOF ( IDENT ) ) ) RETURN -v IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT * IDENT = ( IDENT ) -> IDENT . IDENT ; IDENT * IDENT ; IF ( IDENT == IDENT ) { GOTO IDENT ; } IDENT = IDENT ( IDENT ) ; IF ( IDENT == IDENT ) { GOTO IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) INT IDENT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { STRUCT IDENT * IDENT = IDENT -> IDENT ; IDENT ( IDENT -> IDENT , IDENT ( IDENT -> IDENT -> IDENT , IDENT -> IDENT , IDENT ) ) ; IDENT ## IDENT ( IDENT , IDENT -> IDENT + ( IDENT & IDENT ) , IDENT , IDENT ) ; RETURN IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ) IDENT ( IDENT STRING IDENT STRING IDENT , IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
7  #DEFINE OBJ_MAC IDENT | IDENT
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT VOLATILE ( STRING # IDENT STRING : : STRING ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT [ IDENT ( ) ] )
1  #DEFINE FUNC_MAC ( ) * IDENT = ( IDENT |= IDENT ( IDENT , IDENT ) )
10  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >= CHAR_CONST ) && ( ( IDENT ) <= CHAR_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( IDENT ) - ( IDENT ) ) > INT_CONST )
2  #DEFINE OBJ_MAC ( IDENT | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) )
16  #DEFINE OBJ_MAC IDENT + IDENT
4  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) { IDENT ( STRING , IDENT -> IDENT ) ; IDENT ( IDENT , ## IDENT ) ; IDENT ( STRING ) ; }
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & -v INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p ) ( ( ( UNSIGNED LONG ) ( IDENT ) ) & ~ ( ( UNSIGNED LONG ) ( IDENT - INT_CONST ) ) ) )
1  #DEFINE OBJ_MAC IDENT = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT = IDENT ( IDENT v++ )
2  #DEFINE OBJ_MAC ( IDENT . IDENT & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) * ( IDENT ) * INT_CONST / INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT ? ( IDENT ) -> IDENT ?: IDENT ( ( IDENT ) -> IDENT ) + ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) -> IDENT , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ; IDENT ( IDENT , IDENT , IDENT , ( IDENT ) [ ( INT_CONST << IDENT ) + ( IDENT ) [ INT_CONST ] ] ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ## IDENT ( IDENT ( IDENT , IDENT ) )
9  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT + ( IDENT ? INT_CONST ?: INT_CONST ) , IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST ) ; IDENT ( IDENT , INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ! IDENT ) ? ( IDENT ) -> IDENT ?: INT_CONST
1  #DEFINE FUNC_MAC ( CHAR , IDENT , IDENT , IDENT ) IF ( IDENT ( IDENT , IDENT , IDENT ) ) { IDENT -> IDENT = IDENT ; IDENT ( IDENT , IDENT ) ; IDENT -> IDENT = IDENT - IDENT -> IDENT - INT_CONST ; IDENT ( CHAR IDENT STRING , IDENT -> IDENT ) ; BREAK ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT [ IDENT & ( IDENT - INT_CONST ) ]
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( INT_CONST << ( IDENT ) )
1  #DEFINE OBJ_MAC ( SIZEOF ( UNSIGNED LONG ) / INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) << INT_CONST ) + IDENT ( ( IDENT ) + INT_CONST ) )
1  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST ) IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( INT_CONST & ( ( IDENT ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( ( IDENT ) = ( CHAR *p ) IDENT ( ( IDENT ) , CHAR_CONST ) ) == IDENT ) RETURN ( IDENT ) ; ( IDENT ) v++
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( VOID *p ) ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT == INT_CONST )
10  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO IF ( IDENT == IDENT && IDENT == INT_CONST ) { IDENT = ( IDENT ) , IDENT = ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT ; GOTO IDENT ; } ELSE { IDENT ( STRING ) ; IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT = ( CHAR *p ) IDENT ( IDENT ) , IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { SWITCH ( IDENT ## IDENT ) { CASE IDENT : IF ( IDENT ## IDENT > IDENT ## IDENT + IDENT ## IDENT ) { } ELSE IF ( IDENT ## IDENT <= IDENT ## IDENT + IDENT ## IDENT && IDENT ## IDENT > IDENT ## IDENT ) { IDENT ## IDENT ( IDENT , IDENT ## IDENT , IDENT ## IDENT - IDENT ## IDENT + IDENT ## IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ## IDENT ( IDENT , IDENT ## IDENT - IDENT ## IDENT + IDENT ## IDENT ) ; } ELSE { IDENT ( IDENT ) ; IDENT ## IDENT = IDENT ; } BREAK ; CASE IDENT : CASE IDENT : CASE IDENT : BREAK ; } } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) -> IDENT v++ ) [ INT_CONST ] = IDENT ( ( ( IDENT ) << INT_CONST ) | ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED SHORT IDENT ; IDENT |= IDENT ( IDENT , &v IDENT -> IDENT ) ; IDENT ## IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( ( IDENT ) -> IDENT & INT_CONST ) >> INT_CONST ) ^ IDENT ) << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( LONG ) ( IDENT ) >> INT_CONST == ( LONG ) ( IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) RETURN ( IDENT ) IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT == ( IDENT ) )
2  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( ( IDENT ) << INT_CONST ) | IDENT , IDENT ) , IDENT ( ( ( IDENT ) & INT_CONST ) | IDENT | IDENT , IDENT ) )
9  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT = IDENT -> IDENT -> IDENT [ IDENT ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT - IDENT >= IDENT ) { UNSIGNED CHAR *p IDENT ; IDENT *= INT_CONST ; IDENT = IDENT ; IDENT = IDENT ( IDENT , IDENT ) ; IF ( ! IDENT ) { IDENT ( IDENT ) ; RETURN IDENT ; } IDENT = IDENT + ( IDENT / INT_CONST ) ; } *v IDENT v++ = IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT ) & ~ ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( ( IDENT ) & INT_CONST )
1  #DEFINE OBJ_MAC IDENT -> IDENT . IDENT |= IDENT
15  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) [ INT_CONST ] == CHAR_CONST ) && ( ( IDENT ) [ INT_CONST ] == CHAR_CONST ) && ( ( IDENT ) [ INT_CONST ] == CHAR_CONST ) && ( ( IDENT ) [ INT_CONST ] == CHAR_CONST ) && ( ! ( IDENT ) [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT IDENT IDENT ; IDENT -> IDENT = IDENT || IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT = IDENT ( ( IDENT ) , IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) * ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT . IDENT , ( IDENT ) -> IDENT . IDENT )
1  #DEFINE OBJ_MAC IF ( ! IDENT ) { IDENT ( IDENT STRING ) ; RETURN ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT ? IDENT -> IDENT ?: IDENT ( ( IDENT ) -> IDENT ) + ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ IDENT ] [ ( IDENT ) IDENT ] ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) == IDENT ) || ( IDENT ( IDENT ) == ( IDENT ) ) )
1  #DEFINE OBJ_MAC ( UNSIGNED CHAR ) ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) IF ( IDENT && IDENT ) IDENT ( IDENT ? STRING ?: STRING , IDENT ) ;
1  #DEFINE OBJ_MAC IDENT ( &v IDENT -> IDENT ) ; IDENT ( IDENT , &v IDENT ) ; IDENT ( &v IDENT -> IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT = IDENT )
73  #DEFINE OBJ_MAC ( IDENT + IDENT * IDENT / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT * ) ( IDENT ) ) ; IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) ( IDENT ) - ( LONG ) ( IDENT ) >= INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { CHAR IDENT [ INT_CONST ] ; IDENT ( IDENT , SIZEOF IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ; }
1  #DEFINE OBJ_MAC CASE IDENT : IDENT = ( IDENT != IDENT && *v IDENT != CHAR_CONST ) ; IDENT = INT_CONST ; BREAK ; IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ~ INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) { WHILE ( IDENT ( IDENT + IDENT ) & IDENT ) { } IDENT ( IDENT + IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) != ( IDENT ) IDENT && ( IDENT ) != ( IDENT ) IDENT && ( IDENT ) != IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) <= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( IDENT ) & INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
1  #DEFINE OBJ_MAC ( INT_CONST * ( IDENT - IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT . IDENT . IDENT == ( IDENT ) && IDENT . IDENT . IDENT == ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( STRING , IDENT ) ; RETURN ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT == ( IDENT * ) IDENT )
5  #DEFINE OBJ_MAC IDENT ( ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) FOR ( ; ( ( IDENT ) = *v ( IDENT ) ) != IDENT && IDENT ( ( IDENT ) -> IDENT , ( IDENT ) ) && ( IDENT ) -> IDENT == ( IDENT ) ; ( IDENT ) = &v ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v IDENT -> IDENT ) ( IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST + INT_CONST + ( IDENT >> INT_CONST ) )
3  #DEFINE OBJ_MAC ( IDENT [ IDENT ] [ INT_CONST ] != CHAR_CONST || IDENT [ IDENT ] [ INT_CONST ] == CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT = ( IDENT / IDENT ) ; IF ( IDENT != INT_CONST ) IDENT -= ( IDENT * IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( &v IDENT -> IDENT , IDENT , IDENT , IDENT ) ; IF ( IDENT ( IDENT ) ) { IDENT = IDENT -> IDENT ; IDENT = ( IDENT ) IDENT -> IDENT ; IDENT = IDENT -> IDENT [ IDENT ] ; IDENT = IDENT -> IDENT ( IDENT , IDENT , IDENT -> IDENT , &v IDENT ) ; IF ( IDENT ) IDENT -> IDENT [ IDENT ] = IDENT ; ELSE IDENT = IDENT ; } ELSE { IDENT ( IDENT ) ; IDENT = IDENT ; IF ( IDENT ) IDENT ( IDENT , &v IDENT -> IDENT , IDENT , IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) DO { INT IDENT = ( IDENT ) ; IDENT ( STRING , IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT , &v IDENT . IDENT ) ; IDENT . IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT ( STRING : STRING ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT -> IDENT + ( ( IDENT < INT_CONST ) ? IDENT ?: IDENT - INT_CONST ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & ( IDENT ) ) == ( IDENT ) )
1  #DEFINE OBJ_MAC } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST | IDENT | IDENT | INT_CONST | IDENT | IDENT | INT_CONST | INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) < IDENT [ IDENT ] ? ( IDENT ) + IDENT [ IDENT ] ?: ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST + IDENT ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) >> IDENT )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT IDENT = IDENT ; IDENT v-- ; IF ( IDENT ( IDENT , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) { IF ( IDENT ) { IF ( IDENT -> IDENT & IDENT ) { IDENT -> IDENT v++ ; } ELSE { IF ( IDENT ( IDENT , IDENT , IDENT ) < INT_CONST ) IDENT ( IDENT ) ; } } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( INT_CONST | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT & ~ INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT -> IDENT + IDENT ) & ( IDENT - INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == INT_CONST ? ( IDENT -> IDENT . IDENT . IDENT ) ?: INT_CONST )
4  #DEFINE OBJ_MAC ( ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( ( IDENT ) & INT_CONST ) , IDENT -> IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ( IDENT ) & ~ ( IDENT ) ) | ( ( IDENT ) << ( IDENT ) ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT != &v IDENT ) { IDENT ( IDENT IDENT STRING , IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT ) != IDENT ) IDENT IDENT
37  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST * INT_CONST )
1  #DEFINE FUNC_MAC ( ) IF ( ! IDENT ( &v IDENT -> IDENT ) ) IDENT ( )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT & IDENT ) IDENT ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT |= IDENT )
2  #DEFINE OBJ_MAC IDENT ( IDENT , STRING , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT ) > ( IDENT ) ) ( IDENT ) = ( IDENT ) ; ELSE
1  #DEFINE FUNC_MAC ( ) DO { FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IDENT ( INT_CONST ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( *v ( UNSIGNED SHORT *p ) ( IDENT [ ( ( UNSIGNED ) IDENT ) ] + ( IDENT * ) IDENT ) )
2  #DEFINE OBJ_MAC ( ( SIZEOF ( IDENT ) ) / ( SIZEOF ( STRUCT IDENT ) ) )
132  #DEFINE OBJ_MAC ( INT_CONST << IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? IDENT ( IDENT ) ?: IDENT )
1  #DEFINE OBJ_MAC IDENT ( IDENT ) + IDENT
4  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST ) & ( INT_CONST << INT_CONST )
58  #DEFINE OBJ_MAC ( IDENT | IDENT | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) - INT_CONST ] * IDENT [ ( IDENT ) & INT_CONST ] / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ) ; ( *v ( VOLATILE IDENT * ) ( IDENT + INT_CONST + ( IDENT ( ( IDENT ) & INT_CONST ) ) ) = ( IDENT & INT_CONST ) ) ; IDENT ( ) ;
5  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) + IDENT ( INT_CONST ) + IDENT ( INT_CONST ) + IDENT ( INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) - ( IDENT ) -> IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT , IDENT -> IDENT , IDENT -> IDENT [ ( IDENT ) + ( IDENT - INT_CONST ) ] ) , IDENT -> IDENT [ ( IDENT ) & IDENT -> IDENT ] = IDENT = IDENT -> IDENT [ IDENT -> IDENT ] , IDENT -> IDENT [ IDENT -> IDENT ] = ( IDENT ) ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT * ( SIZEOF ( STRING ) - INT_CONST ) ) + SIZEOF ( STRING ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT = IDENT ( IDENT ) ) >= IDENT ) RETURN -v INT_CONST ; ELSE IDENT ( IDENT , IDENT ) , IDENT += IDENT + INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST ? INT_CONST ?: INT_CONST - ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT = IDENT ( IDENT ) ; ( IDENT ) = ( ( IDENT ) >= IDENT + IDENT ( IDENT ) ) ? INT_CONST ?: ( ( IDENT ) < IDENT ) ? -v INT_CONST ?: INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] . IDENT & ( IDENT | IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT [ IDENT ] ) & ~ ( IDENT - INT_CONST ) )
1  #DEFINE OBJ_MAC IDENT = IDENT ; IDENT -= IDENT ; IDENT = ( INT ) ( IDENT - IDENT ) ; IDENT = *v IDENT ; *v IDENT = CHAR_CONST ; IF ( IDENT >= IDENT ) IDENT ( STRING ) ; IDENT ( IDENT , IDENT , IDENT + INT_CONST ) ; IDENT = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ... ) DO { } WHILE ( INT_CONST ) ;
5  #DEFINE OBJ_MAC IDENT ( CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT , IDENT -> IDENT -> IDENT ) == INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT & INT_CONST ) << INT_CONST ) | ( IDENT & INT_CONST ) | ( ( IDENT & INT_CONST ) >> INT_CONST ) )
1  #DEFINE OBJ_MAC IF ( IDENT > IDENT -> IDENT ) { *v IDENT = IDENT ; IDENT -> IDENT = INT_CONST ; IDENT -> IDENT [ INT_CONST ] = INT_CONST ; RETURN INT_CONST ; } IF ( ( IDENT + IDENT ) > IDENT -> IDENT ) { IDENT = IDENT -> IDENT - IDENT ; *v IDENT = IDENT ; } IDENT ( IDENT , &v IDENT -> IDENT [ IDENT ] , IDENT ) ; IDENT -> IDENT = INT_CONST ; IDENT -> IDENT [ INT_CONST ] = INT_CONST ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ( INT_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT = ( ( IDENT < INT_CONST ) ? IDENT ( IDENT / IDENT ) ?: IDENT ( IDENT / IDENT ) ) ; IF ( IDENT != INT_CONST ) IDENT -= IDENT ( IDENT * IDENT ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) DO { *v IDENT = IDENT ; IDENT IDENT = IDENT = IDENT + IDENT - IDENT ; IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) / ( IDENT ) ) + ( ( ( IDENT ) % ( IDENT ) ) ? INT_CONST ?: INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) WHILE ( ( *v ( IDENT ) ) && IDENT ( *v ( IDENT ) ) ) IDENT v++
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST , CHAR )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT . IDENT = IDENT -> IDENT
1  #DEFINE OBJ_MAC ( ( IDENT - INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT IF ( IDENT ) { IF ( IDENT -> IDENT . IDENT == IDENT ) RETURN IDENT ; IF ( IDENT -> IDENT . IDENT ) IDENT ( IDENT , &v IDENT -> IDENT , IDENT ) ; } ELSE { IDENT IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ; } IF ( IDENT ) { IDENT -> IDENT . IDENT = IDENT ( IDENT , IDENT ) ; FOR ( IDENT = &v IDENT -> IDENT ; *v IDENT ; IDENT = &v ( *v IDENT ) -> IDENT ) ; *v IDENT = IDENT ; } ELSE { IDENT -> IDENT . IDENT = IDENT ; } IDENT
1  #DEFINE FUNC_MAC ( ) ( ( IDENT * ) IDENT ( SIZEOF ( IDENT ) , IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT && IDENT ( ( IDENT ) ) == IDENT && IDENT ( ( IDENT ) , INT_CONST ) == IDENT ) ( IDENT ) = ( IDENT ( ( IDENT ) , INT_CONST ) == IDENT ? IDENT ?: IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( IDENT * ) ( IDENT ) - INT_CONST ) + SIZEOF ( IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT - IDENT - INT_CONST )
7  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
27  #DEFINE OBJ_MAC IDENT ( INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT ) && ( ( IDENT * ) IDENT ) -> IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == IDENT ) || ( ( IDENT ) -> IDENT != IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < INT_CONST || IDENT > IDENT ? ( IDENT ( STRING ) , INT_CONST ) ?: INT_CONST )
4  #DEFINE OBJ_MAC INT IDENT IDENT ( ( VOID ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) & ~ ( INT_CONST | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( UNSIGNED VOLATILE CHAR *p ) ( ( IDENT ) + IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT >= IDENT ) IDENT ( IDENT IDENT STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT . IDENT & IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( UNSIGNED LONG ) ( IDENT -> IDENT ) << INT_CONST | IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , ( INT ) ( ( IDENT ) - ( IDENT ) - INT_CONST ) , IDENT )
1  #DEFINE OBJ_MAC IDENT ( IDENT [ IDENT ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { CONST INT IDENT = IDENT ; IDENT ( IDENT , STRING , IDENT ) ; IDENT = IDENT ; IDENT ( ( IDENT ) ) ; IDENT ( INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT ( IDENT ) )
18  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ,
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = ( IDENT . IDENT & INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT = ( ( ( IDENT ) << IDENT -> IDENT ) ^ ( IDENT ) ) & IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT -> IDENT = INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT , IDENT , IDENT , ( STRUCT IDENT * ) INT_CONST , SIZEOF ( IDENT ) - INT_CONST , INT_CONST }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) >> INT_CONST ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED SHORT IDENT ; IDENT |= IDENT ( IDENT , &v IDENT -> IDENT ) ; IDENT ( IDENT , IDENT ) ; }
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT )
9  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT != ( IDENT ) ) ; IDENT ( IDENT != ( IDENT ) ) ; IDENT ( IDENT != ( IDENT ) ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT |= IDENT ( IDENT -> IDENT [ IDENT ] , &v IDENT -> IDENT [ IDENT ] ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = ( IDENT ) ? ( ( IDENT ( IDENT ) ) ( ( UNSIGNED LONG ) ( IDENT ) + IDENT ) ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( ) IF ( IDENT == &v IDENT && IDENT ) { WHILE ( ( IDENT = IDENT -> IDENT ) != IDENT ) { IF ( IDENT -> IDENT & IDENT ) { IDENT ( &v IDENT -> IDENT . IDENT ) ; GOTO IDENT ; } IF ( IDENT -> IDENT & IDENT ) GOTO IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { INT IDENT ; IDENT IDENT = IDENT ( ) ; IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT , ( UNSIGNED LONG ) IDENT ) ; IDENT ( IDENT ) ; IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) << INT_CONST | ( IDENT ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ) ? ( IDENT ( ) , INT_CONST ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED CHAR ) ( IDENT ) ) ^ INT_CONST ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT ) , IDENT -> IDENT [ ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( SHORT ) IDENT ( ( UNSIGNED SHORT ) ( IDENT ) ) )
133  #DEFINE FUNC_MAC ( IDENT ... )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT , ( UNSIGNED LONG ) IDENT , INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT ( IDENT ) , IDENT , IDENT } ,
1  #DEFINE OBJ_MAC ( { IF ( ! #ERROR && ! IDENT ) { IDENT = IDENT ( IDENT -> IDENT , IDENT , IDENT ) ; IDENT ( INT_CONST ) ; } } )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT . IDENT [ IDENT ] . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT < INT_CONST ) ? ( INT_CONST + ( IDENT ) * INT_CONST ) ?: ( INT_CONST + ( ( ( IDENT ) - INT_CONST ) * INT_CONST ) ) )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( ( IDENT ) * INT_CONST ) / INT_CONST ) , INT_CONST , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) v--
6  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) ( IDENT ) ) -> IDENT )
1  #DEFINE OBJ_MAC ( IDENT ( ) ? IDENT ?: IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT -> IDENT [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT + INT_CONST ) % IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( ) IDENT ( IDENT + INT_CONST ) ;
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT STRING , IDENT , IDENT , IDENT )
3  #DEFINE FUNC_MAC ( ) ( IDENT IDENT ( ) >= INT_CONST ? IDENT IDENT ( IDENT IDENT ( ) ) ?: -v INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT + IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( INT_CONST * IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT + ( UNSIGNED INT ) ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT | IDENT | IDENT , IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT | IDENT | IDENT | IDENT , IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT | IDENT | IDENT , IDENT ) ; IDENT ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == CHAR_CONST ) || ( ( IDENT ) == CHAR_CONST ) || ( INT_CONST <= ( IDENT ) && ( IDENT ) <= INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = ( ( IDENT ) + INT_CONST ) % ( IDENT ) )
63  #DEFINE OBJ_MAC ( -v INT_CONST )
11  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) ) ? ( IDENT ) ?: ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT <= ( IDENT ) -> IDENT - IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { ( IDENT ) IDENT ## IDENT , ( IDENT ) IDENT ## IDENT ## IDENT , ( IDENT ) IDENT ## IDENT ## IDENT , ( IDENT ) IDENT ## IDENT , SIZEOF ( STRUCT IDENT ## IDENT ## IDENT ) , SIZEOF ( STRUCT IDENT ## IDENT ## IDENT ) , INT_CONST , IDENT , IDENT , }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT IDENT , IDENT ; IDENT = IDENT ( IDENT . IDENT ) ; IF ( IDENT == IDENT || IDENT == IDENT || IDENT == IDENT || IDENT == IDENT || IDENT == IDENT ) { IDENT = IDENT ( IDENT . IDENT ) ; IF ( IDENT == IDENT || IDENT == IDENT || IDENT == IDENT ) { IDENT ( IDENT , &v IDENT , SIZEOF ( STRUCT IDENT ) ) ; RETURN ( INT_CONST ) ; } } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT ## IDENT , IDENT ## IDENT , IDENT ## IDENT , IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ## IDENT ( IDENT * IDENT , IDENT * IDENT ) { STRUCT IDENT IDENT [ INT_CONST ] ; IDENT IDENT ; IDENT ( IDENT ) ; IDENT = IDENT ## IDENT ( ( IDENT * ) IDENT ( IDENT -> IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) ) ; IDENT ( IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ! ( IDENT ) && IDENT & INT_CONST ) { IDENT ( IDENT STRING , # IDENT , ( IDENT ) ) ; #ERROR = -v IDENT ; GOTO IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT <= IDENT ) IDENT -> IDENT . IDENT [ IDENT - INT_CONST ] v++ ;
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) , STRING , IDENT , ( UNSIGNED ) IDENT ) ; IF ( IDENT ) IDENT ( ( IDENT ) , STRING , IDENT , IDENT ( IDENT ) ) ; IDENT ( CHAR_CONST , ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( IDENT ) & INT_CONST ) ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT , IDENT ) , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT = ( IDENT ) ) < INT_CONST ? ( IDENT >> ( IDENT ) ) | ( ( ~ INT_CONST ) << ( INT_CONST - ( IDENT ) ) ) ?: ( IDENT >> ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( ) ;
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = IDENT ( ) ; IDENT ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ! IDENT ( IDENT , IDENT , SIZEOF ( IDENT ) - INT_CONST ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( VOLATILE IDENT * ) IDENT ) [ ( IDENT ) / INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ## IDENT ## IDENT
38  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) + IDENT ( INT_CONST ) )
3  #DEFINE OBJ_MAC ( ( INT_CONST << INT_CONST ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + ( ( INT ) ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) && IDENT ( IDENT ) && ! IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST , IDENT * SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ IDENT ] = IDENT , ( IDENT ) -> IDENT [ IDENT ] = INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC INT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT ## IDENT * IDENT ) { STRUCT IDENT * IDENT = IDENT ( IDENT -> IDENT -> IDENT ) ; IDENT IDENT = ( IDENT -> IDENT -> IDENT == IDENT ) ? INT_CONST ?: IDENT -> IDENT -> IDENT ; IDENT IDENT = IDENT ( IDENT , IDENT -> IDENT ) ; {
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT = IDENT ( ( IDENT ) -> IDENT , ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( ( ( IDENT ) * INT_CONST ) / INT_CONST ) + INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ) { IDENT ( IDENT ) ; ( IDENT ) = IDENT ; } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ ( ( IDENT >> INT_CONST ) & INT_CONST ) ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( LONG ) ( ( UNSIGNED LONG LONG ) IDENT >> INT_CONST ) / IDENT ) << INT_CONST ) + ( ( ( ( LONG ) ( ( UNSIGNED LONG LONG ) IDENT >> INT_CONST ) % IDENT ) << INT_CONST ) / IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + ( SIZEOF ( INT ) - INT_CONST ) ) & ~ ( SIZEOF ( INT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT -> IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) WHILE ( ( IDENT ( IDENT , IDENT ) & IDENT ) == INT_CONST ) { ; } ( VOID ) IDENT ( IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; IF ( IDENT ) { INT IDENT = IDENT ; IDENT v++ ; IDENT ( IDENT , STRING , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( UNSIGNED SHORT *p ) & ( IDENT ) ) [ IDENT ] )
1  #DEFINE OBJ_MAC INT_CONST & ( INT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) * IDENT / INT_CONST ) + INT_CONST )
22  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) IDENT ) & ( IDENT ) INT_CONST ) != INT_CONST )
2  #DEFINE OBJ_MAC ( ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) CASE IDENT : *v ( IDENT ) = IDENT . IDENT ; RETURN INT_CONST
3  #DEFINE OBJ_MAC ( ( IDENT + ( IDENT - INT_CONST ) ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT . IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( IDENT - INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST << ( IDENT ) ) - INT_CONST )
1  #DEFINE OBJ_MAC ( ( VOLATILE UNSIGNED LONG ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ) IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC ( IDENT + INT_CONST * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( UNSIGNED LONG ) IDENT , ( ( UNSIGNED LONG ) IDENT ) + IDENT , INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT = IDENT ( IDENT , IDENT , IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT &= ( INT_CONST << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT , IDENT , IDENT ) ; IDENT += IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) STATIC INT IDENT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { IF ( ( IDENT -> IDENT -> IDENT != INT_CONST ) || ( IDENT ( IDENT -> IDENT ) > IDENT ) ) { IDENT ## IDENT ## IDENT ( IDENT , IDENT ) RETURN IDENT ; } IDENT ## IDENT ( IDENT , IDENT ( IDENT -> IDENT ) , IDENT , IDENT ) ; RETURN IDENT ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? INT_CONST ?: INT_CONST / ( ( IDENT ) * ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT = ( ( IDENT ) & ~ ( IDENT ) ) | ( ( IDENT ) & ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT = ( IDENT ) . IDENT . IDENT , IDENT = ( IDENT ) . IDENT . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + ( IDENT - INT_CONST ) ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT v++ ; IF ( IDENT % INT_CONST == INT_CONST ) IDENT ; } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC ( ( IDENT * ) ( -v INT_CONST ) )
1  #DEFINE OBJ_MAC IDENT IDENT = INT_CONST ; IDENT IDENT = INT_CONST ; IDENT IDENT = INT_CONST ; INT #ERROR
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> IDENT ) << IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT -> IDENT , &v IDENT , INT_CONST , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED ) ( IDENT ) << IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT - SIZEOF ( STRUCT IDENT ) ) / ( SIZEOF ( STRUCT IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( *v IDENT ) = IDENT ( ( INT_CONST | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( IDENT ) ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( IDENT ) -> IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST ? ( ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) * INT_CONST ) + ( ( IDENT ) & INT_CONST ) * INT_CONST ?: ( ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) - INT_CONST ) * INT_CONST - ( ( IDENT ) & INT_CONST ) * INT_CONST )
1  #DEFINE OBJ_MAC INT IDENT = IDENT [ IDENT ( ) ]
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) >= INT_CONST ) && ( IDENT ( IDENT ) < IDENT ) && IDENT [ IDENT ( IDENT ) ] . IDENT != IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) | ( ( ( IDENT ) << INT_CONST ) & INT_CONST ) )
1  #DEFINE OBJ_MAC IDENT IDENT ; IDENT IDENT
1  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) / SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ) IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT -> IDENT = IDENT ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT IDENT ; IDENT . IDENT [ INT_CONST ] = ( UNSIGNED CHAR ) IDENT ; IDENT >>= INT_CONST ; IDENT . IDENT [ INT_CONST ] = ( UNSIGNED CHAR ) IDENT ; IDENT >>= INT_CONST ; IDENT . IDENT [ INT_CONST ] = ( UNSIGNED CHAR ) IDENT ; IDENT >>= INT_CONST ; IDENT . IDENT [ INT_CONST ] = ( UNSIGNED CHAR ) IDENT ; IDENT = ( IDENT . IDENT . IDENT & INT_CONST ) << INT_CONST ; }
9  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) - CHAR_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ IDENT ] = ( ( IDENT ) >> INT_CONST ) & INT_CONST , IDENT [ ( IDENT ) + INT_CONST ] = ( IDENT ) & INT_CONST )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( UNSIGNED INT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) | INT_CONST ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT & ~ INT_CONST ) + ( ( IDENT ) -> IDENT ? INT_CONST ?: INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( INT_CONST <= ( IDENT ) ) && ( ( IDENT ) <= INT_CONST ) ) || ( ( INT_CONST <= ( IDENT ) ) && ( ( IDENT ) <= INT_CONST ) ) ) && IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ( &v ( IDENT ) , ( IDENT * ) ( IDENT ) , SIZEOF ( IDENT ) ) ) RETURN -v IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( ! IDENT . IDENT ) IDENT ( ( UNSIGNED LONG ) IDENT . IDENT + IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( ( ( IDENT ) -> IDENT & INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( UNSIGNED LONG ) ( &v IDENT ## IDENT ## IDENT ) , ( UNSIGNED LONG ) ( &v IDENT ## IDENT ## IDENT ) , # IDENT ) ;
169  #DEFINE OBJ_MAC IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) << ( IDENT - INT_CONST ) ) ^ ( ( IDENT ) << ( IDENT - INT_CONST ) ) ) ^ ( ( ( IDENT ) << ( IDENT - INT_CONST ) ) ^ ( ( IDENT ) >> INT_CONST ) ^ ( ( IDENT ) << ( IDENT - INT_CONST ) ) ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | IDENT ( STRUCT IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT . IDENT -> IDENT , IDENT ( IDENT ) , IDENT , IDENT , INT_CONST , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT * ) ( ( IDENT * ) IDENT - ( INT ) & ( ( ( IDENT * ) INT_CONST ) -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT -> IDENT [ INT_CONST ] = INT_CONST ; IDENT -> IDENT . IDENT |= IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) RETURN
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) IDENT ( IDENT ) ) -> IDENT . IDENT )
3  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ -v IDENT ] = ( IDENT ) IDENT , IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ( IDENT [ INT_CONST ] ) , IDENT ( IDENT [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( ) UNSIGNED LONG IDENT ; IDENT ( &v IDENT -> IDENT , IDENT ) ;
2  #DEFINE OBJ_MAC ( ( INT_CONST >> INT_CONST ) | INT_CONST )
1  #DEFINE OBJ_MAC IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : INT_CONST , IDENT : IDENT ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( ( IDENT ) >= INT_CONST ? ( IDENT ) - INT_CONST ?: ( IDENT ) ) * INT_CONST ) + INT_CONST ) / INT_CONST )
6  #DEFINE OBJ_MAC SHORT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: IDENT
1  #DEFINE FUNC_MAC ( ) IDENT -> IDENT . IDENT = ( IDENT ) IDENT ( IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT >= INT_CONST ) ? ( INT_CONST << IDENT ) - INT_CONST ?: IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT > IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( -v IDENT ( ( IDENT ) -> IDENT ) * INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST + INT_CONST + INT_CONST + INT_CONST + INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT < INT_CONST && IDENT && ! ( IDENT = ( *v IDENT ) ( IDENT , IDENT ) ) ) GOTO IDENT ; }
1  #DEFINE OBJ_MAC ( IDENT - ( IDENT - IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( ( IDENT ) -> IDENT + ( IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT -> IDENT , IDENT ( IDENT -> IDENT , INT_CONST ) , ( IDENT ) , IDENT , ( IDENT ) , INT_CONST , IDENT , INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT || ( IDENT ( IDENT ) && IDENT ( IDENT ( IDENT ) ) && IDENT == IDENT ( IDENT ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) * IDENT = INT_CONST << IDENT -> IDENT ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & ( ( IDENT ) - INT_CONST ) )
1  #DEFINE OBJ_MAC IDENT - IDENT - INT_CONST
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( STRING , IDENT , IDENT , IDENT , IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT -> IDENT = INT_CONST ; IDENT ( IDENT ) ; }
2  #DEFINE OBJ_MAC ( IDENT < IDENT ? ( ~ ( ~ ( IDENT ) INT_CONST << IDENT ) ) ?: ~ ( IDENT ) INT_CONST )
16  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST >> ( IDENT << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT ? IDENT ( ( IDENT ) . IDENT ) ?: IDENT ( ( IDENT ) . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT . IDENT [ IDENT ] >> INT_CONST ) * IDENT ( IDENT . IDENT + IDENT ) / INT_CONST , IDENT . IDENT + IDENT ## IDENT ## IDENT ) ; IDENT ( ( IDENT . IDENT [ IDENT ] >> INT_CONST ) * IDENT ( IDENT . IDENT + IDENT ) / INT_CONST , IDENT . IDENT + IDENT ## IDENT ## IDENT ) ;
4  #DEFINE OBJ_MAC ( ( IDENT - INT_CONST ) / INT_CONST )
2  #DEFINE OBJ_MAC ( IDENT | IDENT ( INT_CONST ) | IDENT | IDENT | IDENT | IDENT ( INT_CONST ) | IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = ( IDENT + INT_CONST ) / INT_CONST * INT_CONST ; IDENT ## IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , INT_CONST ) )
2  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
8  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >> INT_CONST ) & INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) EXTERN STRUCT IDENT IDENT ; IDENT ( STRING # IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >= INT_CONST ) && ( IDENT < ( IDENT ) -> IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT << INT_CONST ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) -> IDENT + ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT ? ( IDENT ( IDENT ) ? INT_CONST ?: IDENT ( IDENT ) >= IDENT ? INT_CONST ?: INT_CONST ) ?: IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT ) | ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... ) IDENT ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) ( &v ( IDENT ) ) ) -> IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT != IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = INT_CONST ; IDENT = ( IDENT ) ; IF ( ! IDENT ) IDENT ( IDENT + IDENT ) ;
1  #DEFINE OBJ_MAC ( IDENT . IDENT |= IDENT )
4  #DEFINE OBJ_MAC ( ( INT_CONST << ( INT ) IDENT ) | ( INT_CONST << ( INT ) IDENT ) )
2  #DEFINE OBJ_MAC ( IDENT > INT_CONST )
2  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , INT_CONST , STRUCT IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT += IDENT ( IDENT + IDENT , IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT ) ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT ? STRING ?: ( IDENT ) == IDENT ? STRING ?: ( IDENT ) == IDENT ? STRING ?: ( IDENT ) == IDENT ? STRING ?: STRING )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ## IDENT , IDENT ## IDENT , IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( LONG LONG ) ( LONG ) ( IDENT )
2  #DEFINE OBJ_MAC ( ( IDENT > INT_CONST ) ? IDENT ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT [ ( IDENT ) ] -> IDENT == IDENT ) IDENT ( ( IDENT [ ( IDENT ) ] -> IDENT | IDENT ) , IDENT [ ( IDENT ) ] -> IDENT ) ; ELSE IF ( IDENT [ ( IDENT ) ] -> IDENT == IDENT ) IDENT ( ( IDENT ) , IDENT [ ( IDENT ) ] -> IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT && IDENT -> IDENT . IDENT == IDENT && IDENT -> IDENT . IDENT -> IDENT ) { IDENT -> IDENT . IDENT = ( IDENT ( IDENT -> IDENT . IDENT -> IDENT ) == IDENT -> IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED INT IDENT = IDENT ; INT IDENT = IDENT ; IDENT ( IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( STRING , IDENT ) ; IF ( ! IDENT ( *v IDENT ) ) IDENT ; IDENT = INT_CONST ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; } } } } } } } } } } IDENT ( STRING , IDENT ) ; IDENT ( STRING , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) + SIZEOF ( STRUCT IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) << INT_CONST | ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ~ ( IDENT << IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( -v INT_CONST , ( IDENT ) , -v INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) * IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) ? IDENT ?: IDENT -> IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT , IDENT , IDENT , ## IDENT )
33  #DEFINE FUNC_MAC ( IDENT ) DO { *v ( IDENT ) = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( ( UNSIGNED LONG ) ( IDENT ) << IDENT ) | ( ( UNSIGNED LONG ) ( IDENT ) << IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & ( IDENT | ( IDENT | IDENT | IDENT ) ) ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { INT IDENT = IDENT ( ) ; IF ( IDENT >= IDENT ) { IDENT += INT_CONST ; IF ( IDENT == INT_CONST ) IDENT = ( STRUCT IDENT * ) IDENT ( IDENT * SIZEOF ( STRUCT IDENT ) ) ; ELSE IDENT = ( STRUCT IDENT * ) IDENT ( IDENT , IDENT * SIZEOF ( STRUCT IDENT ) ) ; IDENT ( IDENT ) ; } IDENT -> IDENT = ( IDENT ) ; IDENT -> IDENT = ( IDENT ) ; IDENT v++ ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? CHAR_CONST ?: CHAR_CONST )
1  #DEFINE FUNC_MAC ( ) DO { IF ( IDENT -> IDENT ) IDENT ( IDENT -> IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT ? IDENT ( ( IDENT ) -> IDENT ) ?: ( IDENT ( IDENT ( ( IDENT ) -> IDENT ) ) + ( IDENT ) -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ) , ( IDENT ) IDENT , IDENT , &v IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( IDENT >= IDENT * IDENT ) IDENT ( ) ; ELSE IDENT [ IDENT / IDENT ] &= ~ ( INT_CONST << ( IDENT % IDENT ) ) ; }
1  #DEFINE OBJ_MAC ( IDENT == INT_CONST ? IDENT ?: &v IDENT [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) IDENT ( IDENT [ IDENT ] ) + ( ( ( IDENT ) IDENT ( IDENT [ IDENT + INT_CONST ] ) ) << INT_CONST ) + ( ( ( IDENT ) IDENT ( IDENT [ IDENT + INT_CONST ] ) ) << INT_CONST ) + ( ( ( IDENT ) IDENT ( IDENT [ IDENT + INT_CONST ] ) ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) . IDENT == ( IDENT ) && ( IDENT ) . IDENT == ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT ) ; }
20  #DEFINE OBJ_MAC IDENT ( &v IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , INT IDENT , INT IDENT , INT IDENT , IDENT IDENT ) { RETURN IDENT ## IDENT ## IDENT ## IDENT ( IDENT ( IDENT , IDENT , IDENT , IDENT ) , IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT += *v IDENT v++ ; IDENT += IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT != IDENT && ( IDENT ) -> IDENT != IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT IDENT = ( ( IDENT ) ( IDENT ) * ( IDENT ) ( IDENT ) + ( IDENT ) ( IDENT ) * ( IDENT ) ( INT_CONST - ( IDENT ) ( IDENT ) ) + ( IDENT ) INT_CONST ) ; ( IDENT ) = ( IDENT ) ( ( ( IDENT >> INT_CONST ) + IDENT ) >> INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( ) ( INT ) IDENT ( INT_CONST )
1  #DEFINE OBJ_MAC ( UNSIGNED INT ) INT_CONST ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) * IDENT ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( LONG ) ( &v ( ( ( IDENT * ) INT_CONST ) -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT -> IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) > INT_CONST )
1  #DEFINE OBJ_MAC INT_CONST * IDENT * SIZEOF ( STRUCT IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) - IDENT ) >> IDENT ) | IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT + IDENT ) ; IDENT ( IDENT + IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT , ( IDENT ) ) ; IDENT ( IDENT , ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p ) ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) &= INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) + ( IDENT ) ) )
35  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT & INT_CONST )
2  #DEFINE FUNC_MAC ( ) IDENT &= ~ IDENT
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT >> INT_CONST ) & INT_CONST ) | ( IDENT & INT_CONST ) )
17  #DEFINE OBJ_MAC CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( UNSIGNED LONG ) & ( ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT )
1  #DEFINE OBJ_MAC INT_CONST / ( IDENT * INT_CONST )
1  #DEFINE OBJ_MAC { IDENT ( IDENT ) ; IF ( ( UNSIGNED LONG ) IDENT % SIZEOF ( UNSIGNED LONG ) == INT_CONST ) { IF ( IDENT >= IDENT ) BREAK ; IDENT = *v ( UNSIGNED LONG *p ) IDENT ; } IDENT v++ ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) ( ( IDENT ) + IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) != ( IDENT ) IDENT && ( IDENT ) != ( IDENT ) IDENT && ( IDENT ) != ( IDENT ) IDENT )
9  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( STRING , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! ( IDENT & IDENT ) ) { IF ( IDENT -> IDENT < IDENT -> IDENT ) RETURN -v INT_CONST ; IF ( IDENT -> IDENT > IDENT -> IDENT ) RETURN INT_CONST ; }
3  #DEFINE OBJ_MAC ( IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT STRING , IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ## IDENT ( IDENT * IDENT , IDENT * IDENT , IDENT * IDENT , UNSIGNED LONG *p IDENT , VOID *p IDENT ) { STRUCT IDENT IDENT [ INT_CONST ] ; IDENT IDENT ; IDENT ( IDENT ) ; IDENT = IDENT ## IDENT ( ( IDENT * ) IDENT ( IDENT -> IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) ) ; IDENT ( IDENT ) ; RETURN IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT [ IDENT ] ; IDENT [ IDENT ] = IDENT [ IDENT ] ; IDENT [ IDENT ] = IDENT ; }
1  #DEFINE FUNC_MAC ( ) ( STRUCT IDENT * ) IDENT ( &v IDENT , SIZEOF ( STRUCT IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( ( UNSIGNED LONG ) ( &v ( ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT [ IDENT ] ) ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT -> IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( ( IDENT ) ) ) == ( IDENT ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT ? IDENT ( IDENT ( IDENT , INT_CONST ) ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ) = INT_CONST ; IF ( ( IDENT ) < INT_CONST ) ( IDENT ) |= IDENT ; ELSE IF ( ( IDENT ) >= IDENT ) ( IDENT ) |= IDENT ; IF ( ( IDENT ) < INT_CONST ) ( IDENT ) |= IDENT ; ELSE IF ( ( IDENT ) >= IDENT ) ( IDENT ) |= IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT - INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) & ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT |= ( INT_CONST << ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) != INT_CONST )
1  #DEFINE OBJ_MAC ( ( INT_CONST - ( ( SIZEOF ( *v IDENT ) + SIZEOF ( *v IDENT ) + SIZEOF ( *v IDENT ) + ( IDENT * IDENT ) ) % INT_CONST ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT & INT_CONST ) << INT_CONST ) | INT_CONST )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( CHAR_CONST <= ( IDENT ) && ( IDENT ) <= CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { REGISTER IDENT IDENT = IDENT , IDENT = IDENT ; REGISTER INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) * ( IDENT v++ ) &= *v ( IDENT v++ ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IDENT ( STRING , IDENT , IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT ( &v IDENT -> IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( SHORT ) IDENT ( IDENT , IDENT ) ) ,
16  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) * INT_CONST ) / INT_CONST )
3  #DEFINE OBJ_MAC IDENT = ( IDENT << INT_CONST ) + IDENT + *v IDENT v++ ;
2  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , INT_CONST , UNSIGNED )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) IDENT ( IDENT ( ( IDENT * ) ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( --v ( IDENT ) -> IDENT == INT_CONST ) IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( INT_CONST * ( ( ( *v ( IDENT ) ) << INT_CONST ) ^ ( ( *v ( ( IDENT ) + INT_CONST ) ) << INT_CONST ) ^ ( *v ( ( IDENT ) + INT_CONST ) ) ) ) >> INT_CONST ) & INT_CONST )
4  #DEFINE OBJ_MAC IDENT + IDENT + IDENT
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ) ? IDENT ?: IDENT )
34  #DEFINE OBJ_MAC ( IDENT -> IDENT )
6  #DEFINE FUNC_MAC ( IDENT ) { #ERROR = ( IDENT ) ; GOTO IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) + ( IDENT ) * SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ? IDENT ( IDENT , IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) . IDENT != ( IDENT ) . IDENT ) || ( ( IDENT ) . IDENT != ( IDENT ) . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , &v IDENT , SIZEOF ( IDENT ) ) ; IDENT ( IDENT | IDENT | IDENT , &v IDENT , SIZEOF ( IDENT ) ) ; IDENT ( IDENT | IDENT | IDENT , ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT & INT_CONST , IDENT + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , ( UNSIGNED LONG ) ( IDENT ) ) )
1  #DEFINE OBJ_MAC ( ( STRUCT IDENT * ) - INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & ( ( IDENT ) - INT_CONST ) ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { ( *v ( ( IDENT ) ( ( IDENT ) -> IDENT . IDENT -> IDENT . IDENT ) ) -> IDENT . IDENT ) ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ## IDENT ( IDENT * IDENT ) { STRUCT IDENT IDENT [ INT_CONST ] ; IDENT IDENT ; IDENT ( IDENT ) ; IDENT = IDENT ## IDENT ( ( IDENT * ) IDENT ( IDENT -> IDENT ) , IDENT ( IDENT ) ) ; IDENT ( IDENT ) ; RETURN IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ( ( INT_CONST << ( IDENT / INT_CONST ) ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT = IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT + ( ( IDENT ) << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * INT_CONST / IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT - ( IDENT ) ]
7  #DEFINE OBJ_MAC IF ( IDENT ) IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT -> IDENT ; IDENT -> IDENT -= INT_CONST ;
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( IDENT - IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT = IDENT ) { GOTO IDENT ; } }
4  #DEFINE OBJ_MAC IDENT ( &v ( IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { REGISTER INT IDENT = IDENT ( IDENT ) ; REGISTER CHAR *p IDENT = ( IDENT ) ; REGISTER INT IDENT ; IDENT ( IDENT , STRING ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { REGISTER INT IDENT = IDENT [ IDENT ] ; IF ( IDENT == CHAR_CONST || IDENT == CHAR_CONST ) IDENT ( CHAR_CONST , IDENT ) ; IF ( IDENT >= CHAR_CONST && IDENT < INT_CONST ) IDENT ( IDENT , IDENT ) ; ELSE { IDENT ( IDENT , STRING , IDENT ) ; } } IDENT ( IDENT , STRING ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( INT_CONST << ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) FOR ( IDENT = IDENT . IDENT ; IDENT != IDENT ; IDENT = IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) STRUCT IDENT * IDENT = ( STRUCT IDENT * ) IDENT -> IDENT ; IF ( ( ! IDENT ) || ( IDENT -> IDENT != IDENT ) ) { IDENT ( IDENT STRING IDENT STRING ) ; RETURN IDENT ; } ELSE { IDENT ( IDENT , ( IDENT STRING IDENT STRING , IDENT -> IDENT -> IDENT ) ) ; }
4  #DEFINE OBJ_MAC IDENT = INT_CONST + INT_CONST *
10  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT + INT_CONST ) * SIZEOF ( STRUCT IDENT ) + IDENT * SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT == IDENT ) || ( IDENT == IDENT ) || ( IDENT == IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! IDENT ( IDENT , &v ( IDENT ) , # IDENT ) ) RETURN IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) << INT_CONST ) + ( ( IDENT ) >> INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( INT_CONST ) ; IDENT ( INT_CONST , INT_CONST ) ; IDENT ( ( IDENT ) , INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT == IDENT ( &v ( ( STRUCT IDENT * ) ( ( IDENT ) . IDENT ) ) -> IDENT ) ) || IDENT ( IDENT ) ) && ( IDENT == IDENT ( &v ( ( STRUCT IDENT * ) ( ( IDENT ) . IDENT + IDENT ) ) -> IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT ) , ( IDENT * ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) | IDENT | IDENT | IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT == IDENT || IDENT == IDENT ) ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ? IDENT ( IDENT ) ?: ( IDENT ) )
8  #DEFINE OBJ_MAC ( IDENT [ IDENT ] )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << ( IDENT ) ) | ( ( IDENT ) >> ( IDENT - ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) == IDENT ? IDENT ?: IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) & ( IDENT ) )
3  #DEFINE OBJ_MAC ( ( IDENT / IDENT ) * INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT ) IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC ( INT_CONST + IDENT -> IDENT + INT_CONST )
10  #DEFINE OBJ_MAC ( IDENT v-- , IDENT v-- )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) ) { IDENT ( STRING , IDENT , IDENT , # IDENT ) ; }
4  #DEFINE OBJ_MAC ( ( LONG ) ( SIZEOF ( LONG ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) |= ( ( ( IDENT ) & INT_CONST ) ) )
8  #DEFINE OBJ_MAC VOID *p
1  #DEFINE OBJ_MAC ( IDENT & INT_CONST ) | IDENT | IDENT
1  #DEFINE FUNC_MAC ( ) IDENT [ IDENT ( ) ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC VOID IDENT ## IDENT ( STRUCT IDENT * IDENT , IDENT IDENT , IDENT ## IDENT IDENT ) { IDENT ( IDENT != IDENT ) ; IDENT ( STRING , IDENT , IDENT , IDENT , IDENT ) ; IDENT ## IDENT ( IDENT , IDENT + IDENT ) ; IF ( IDENT ( IDENT ) -> IDENT < INT_CONST ) IDENT = IDENT ( IDENT -> IDENT + IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT -> IDENT ( IDENT , IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( ) { IDENT IDENT ; IF ( IDENT == IDENT ) { IF ( IDENT ( ) && ! IDENT ( IDENT ( ) ) ) IDENT ( IDENT ) ; IDENT ( &v IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) == INT_CONST ) ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( ( IDENT ) + IDENT , ( IDENT ) ) ; ( IDENT ) = IDENT ( ( IDENT ) + IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT = ( IDENT ) ) ) RETURN IDENT ;
2  #DEFINE OBJ_MAC { IDENT -> IDENT = IDENT ; IDENT -> IDENT += IDENT - IDENT -> IDENT ; IDENT -> IDENT = IDENT ; }
1  #DEFINE OBJ_MAC ( ( LONG ) IDENT ( *v IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT -> IDENT & IDENT ) IDENT ( STRING , ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , IDENT , ( IDENT ) ( IDENT ) ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( VOID *p ) ( ( IDENT [ IDENT ] . IDENT [ IDENT ( IDENT ) ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + IDENT ( IDENT ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT ) ; IDENT ( INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( { CHAR IDENT ; SWITCH ( IDENT & ( INT_CONST << INT_CONST ) ) { CASE INT_CONST << INT_CONST : IDENT = CHAR_CONST ; BREAK ; CASE INT_CONST << INT_CONST : IDENT = CHAR_CONST ; BREAK ; CASE INT_CONST << INT_CONST : IDENT = CHAR_CONST ; BREAK ; DEFAULT : IDENT = CHAR_CONST ; BREAK ; } ; IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) ) != IDENT || IDENT ( IDENT ( ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT } ,
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) & ( IDENT ) -> IDENT ) [ INT_CONST ] &= ~ INT_CONST
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ( IDENT ) ) ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT STRING IDENT STRING , IDENT ) ; IDENT -> IDENT = IDENT ; RETURN IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT -> IDENT ; IDENT v++ ) { IF ( IDENT -> IDENT [ IDENT ] -> IDENT == IDENT ) { IDENT = IDENT -> IDENT [ IDENT ] ; BREAK ; } } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) < ( IDENT ) ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT == IDENT ) RETURN IDENT ; IDENT = ( UNSIGNED CHAR ) * IDENT v++ ; IF ( IDENT ) IDENT = ( UNSIGNED CHAR ) IDENT [ IDENT ] ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) IDENT ( IDENT ) ) -> IDENT != IDENT )
4  #DEFINE OBJ_MAC ( ( ( -v INT_CONST ) * -v INT_CONST ) / INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT ( IDENT , IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , INT_CONST , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) )
9  #DEFINE FUNC_MAC ( ) IDENT ( IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) VOID IDENT ## IDENT ( VOID ) { IDENT ( STRING # IDENT STRING STRING : : STRING ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( CHAR *p ) ( IDENT ) + ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) - ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT ( IDENT , IDENT )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , INT_CONST , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) IDENT [ IDENT ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT -> IDENT = IDENT -> IDENT
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { ( IDENT * ) INT_CONST , ( IDENT * ) INT_CONST , INT_CONST , SIZEOF ( IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) , }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT VOLATILE ( STRING # IDENT : : STRING ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST , ( INT ) ( ( IDENT ) + FLOAT_CONST ) )
2  #DEFINE OBJ_MAC IDENT ( IDENT , STRING , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT ( &v IDENT -> IDENT . IDENT . IDENT ) , IDENT ( &v IDENT -> IDENT . IDENT . IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { REGISTER DOUBLE IDENT IDENT ( STRING # IDENT ) ; IDENT IDENT ( STRING : STRING ( IDENT ) : STRING ( IDENT ) ) ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT , IDENT , IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( ( IDENT ) ( IDENT ) >> INT_CONST ) ^ ( ( IDENT ) ( IDENT ) >> INT_CONST ) ) & IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT ) , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING ) ; IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] << INT_CONST ) | ( IDENT [ IDENT + INT_CONST ] << INT_CONST ) | ( IDENT [ IDENT + INT_CONST ] << INT_CONST ) | ( IDENT [ IDENT + INT_CONST ] ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT IDENT ; STRING IDENT STRING IDENT , IDENT , ## IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < IDENT && ( IDENT . IDENT [ IDENT ] . IDENT & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT [ IDENT ] . IDENT [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , &v ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT == -v INT_CONST ) { IDENT = ( IDENT ) - INT_CONST ; IDENT ( IDENT , STRING , ( IDENT ) ) ; } IDENT = ( IDENT ? IDENT ?: IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ## IDENT ## IDENT , IDENT ## IDENT ## IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT ) , INT IDENT , INT IDENT , INT IDENT ) IDENT ( IDENT ## IDENT ## IDENT , IDENT ## IDENT ## IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) , CONST UNSIGNED SHORT *p IDENT , INT IDENT , INT IDENT , INT IDENT ) IDENT ( IDENT ## IDENT ## IDENT , IDENT ## IDENT ## IDENT ( IDENT , IDENT , IDENT ) , INT IDENT ) CONST STRUCT IDENT IDENT ## IDENT = { IDENT : IDENT ## IDENT ## IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT ## IDENT ## IDENT , IDENT : IDENT ## IDENT ## IDENT , IDENT : IDENT ## IDENT ## IDENT , IDENT : IDENT ## IDENT ## IDENT , IDENT : IDENT ( INT_CONST ) | IDENT ( INT_CONST ) | IDENT ( INT_CONST ) | IDENT ( INT_CONST ) } ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) & ( IDENT ) ) | ( ( ~ IDENT ) & ( IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) ( IDENT ) ) | ( ( ( IDENT ) ( IDENT ) ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ( IDENT ( IDENT ) ) + IDENT ( IDENT ( IDENT ) ) ) ^ IDENT ( IDENT ( IDENT ) ) ) + IDENT ( IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) & INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT [ IDENT -> IDENT [ IDENT -> IDENT ] ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) CASE IDENT : IDENT ## IDENT ( IDENT , IDENT ) ; BREAK ;
1  #DEFINE OBJ_MAC DO { IDENT = IDENT ( IDENT + INT_CONST ) ; } WHILE ( IDENT & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << IDENT ) | ( ( IDENT ) >> ( INT_CONST - IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( ( IDENT ) -> IDENT + ( ( IDENT ) & INT_CONST ) ) )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) + IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT ## IDENT ) , IDENT ## IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( STRING ) ; IDENT ( ( IDENT ) , ( IDENT ) ) ; }
5  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT ( IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT ) ; IDENT v-- ; IDENT = IDENT -> IDENT ; IF ( ! IDENT ) GOTO IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT |= IDENT ( IDENT -> IDENT [ IDENT ] , &v IDENT -> IDENT [ IDENT ] ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT [ IDENT ] , IDENT , IDENT ) ; IDENT v++ ; IDENT ( IDENT [ IDENT ] , IDENT , IDENT ) ; IDENT v++ ; IDENT ( IDENT [ IDENT ] , IDENT , IDENT ) ; IDENT v++ ; IDENT ( IDENT [ IDENT ] , IDENT , IDENT ) ; IDENT v++
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT -> IDENT -> IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT -> IDENT & INT_CONST ) << INT_CONST ) | ( IDENT & INT_CONST ) )
1  #DEFINE OBJ_MAC ! IDENT
219  #DEFINE OBJ_MAC CHAR_CONST
1  #DEFINE OBJ_MAC ( ( VOID ) IDENT , ( VOID ) IDENT )
1  #DEFINE OBJ_MAC ( IDENT -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT <= ( IDENT ) -> IDENT ) ? ( IDENT ) -> IDENT + ( IDENT ) -> IDENT - ( IDENT ) -> IDENT ?: ( IDENT ) -> IDENT - ( IDENT ) -> IDENT - IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT += IDENT ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) ( IDENT ) ) + ( ( ( IDENT ) ( IDENT ) ) - INT_CONST ) ) & ~ ( ( ( IDENT ) ( IDENT ) ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + ( ( IDENT ) >> IDENT ) )
1  #DEFINE OBJ_MAC ( ( ( IDENT * INT_CONST ) / INT_CONST ) << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = ( ( ( IDENT ) + ( IDENT ) ) & IDENT -> IDENT ) )
8  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT IDENT STRING IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { LONG IDENT , IDENT , IDENT ; IDENT IDENT ( STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) : STRING ( -v IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) : STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { UNSIGNED LONG IDENT = IDENT ( &v IDENT -> IDENT ## IDENT ) ; UNSIGNED LONG IDENT = ( ( INT_CONST << ( IDENT - IDENT + INT_CONST ) ) - INT_CONST ) << IDENT ; ( IDENT ( IDENT , IDENT ) >> IDENT ) & IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = INT_CONST , IDENT = ( IDENT ) ; IF ( IDENT + INT_CONST == IDENT ) ; ELSE IF ( IDENT ) IDENT ( IDENT , STRING ) , IDENT ( IDENT , IDENT , IDENT ) ; ELSE IDENT ( IDENT , STRING , IDENT ) ;
14  #DEFINE OBJ_MAC ( ( INT_CONST << IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT [ INT_CONST ] = INT_CONST ; IDENT . IDENT [ INT_CONST ] = INT_CONST ; IDENT ( IDENT | IDENT | IDENT , &v IDENT , SIZEOF ( IDENT ) ) ; IDENT ( IDENT | IDENT | IDENT , ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ IDENT ] [ IDENT ] )
26  #DEFINE OBJ_MAC VOID
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { IDENT IDENT ; IF ( IDENT ( IDENT , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v++ ; IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT >> INT_CONST ) & INT_CONST ) + ( IDENT & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT [ IDENT ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( { UNSIGNED CHAR IDENT ; ( VOID ) IDENT ( IDENT , &v IDENT . IDENT ) ; IDENT = IDENT . IDENT ; IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT = INT_CONST ; IDENT ( IDENT , ( IDENT ) -> IDENT >> INT_CONST ) ; IDENT ( IDENT , ( IDENT ) -> IDENT & INT_CONST ) ; IDENT ( IDENT , ( IDENT ) -> IDENT >> INT_CONST ) ; IDENT ( IDENT , ( IDENT ) -> IDENT & INT_CONST ) ; IDENT ( IDENT , IDENT ( IDENT ) ) ; IDENT ( IDENT , ( IDENT ) -> IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( UNSIGNED LONG ) IDENT ) + ( IDENT ) )
66  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( IDENT [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) << INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST + IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { ++v IDENT -> IDENT [ IDENT ## IDENT ] ; IDENT -> IDENT [ IDENT ## IDENT ] = IDENT -> IDENT v++ ; }
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT -> IDENT = INT_CONST ; }
10  #DEFINE OBJ_MAC ( IDENT -> IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , -v INT_CONST , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ( ( LONG ) IDENT | ( LONG ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT || ! ( ( IDENT ) -> IDENT & ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) STATIC INT IDENT ( IDENT * IDENT ) { RETURN IDENT ( IDENT , IDENT , IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( ) { IDENT ( IDENT -> IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT &= ~ ( INT_CONST << ( IDENT ) )
9  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT && ( IDENT ) ) IDENT IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC VOID IDENT ## IDENT ( INT IDENT , IDENT IDENT , UNSIGNED LONG IDENT , IDENT * IDENT ) { STRUCT IDENT IDENT [ INT_CONST ] ; IDENT ( IDENT ) ; IDENT ## IDENT ( ( IDENT * ) IDENT ( IDENT -> IDENT ) , IDENT , IDENT , IDENT , IDENT ( IDENT ) ) ; IDENT ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) + IDENT ( IDENT ) + ( IDENT ( IDENT ) ? INT_CONST ?: IDENT ( IDENT ) ) )
1  #DEFINE OBJ_MAC ( ( IDENT - IDENT ) / SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( IDENT ( IDENT ) -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT STRING IDENT STRING , IDENT ) ; GOTO IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( IDENT ) -> IDENT > ( IDENT ) -> IDENT ) ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) < INT_CONST ) ? INT_CONST ?: ( ( IDENT ) > INT_CONST ) ? INT_CONST ?: ( ( IDENT ) * INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ## IDENT ## IDENT , # IDENT STRING , &v IDENT ## IDENT , SIZEOF ( INT ) , INT_CONST , IDENT , &v IDENT }
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ( IDENT ) ) { IDENT = IDENT ( IDENT -> IDENT -> IDENT . IDENT [ IDENT ] ) ; *v IDENT = IDENT ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT | IDENT )
17  #DEFINE OBJ_MAC ( INT_CONST / IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT IDENT = IDENT ; IDENT v-- ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v-- ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v-- ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v-- ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) & IDENT [ IDENT ] -> IDENT )
7  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + INT_CONST ) >> INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT [ IDENT ] , ( IDENT ) , ( IDENT ) ) ; IDENT v++ ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( IDENT -> IDENT [ ( IDENT ) ] )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) IDENT , ( IDENT ) ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( STRUCT IDENT * *v ) IDENT -> IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] = IDENT )
3  #DEFINE OBJ_MAC ( ( VOID *p ) IDENT )
1  #DEFINE OBJ_MAC ( ( INT_CONST + INT_CONST * ( -v INT_CONST ) ) / INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) > INT_CONST ) && ( ( IDENT ) < INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? -v INT_CONST ?: ( IDENT ) == INT_CONST ? -v INT_CONST ?: ( INT_CONST / ( IDENT ) ) )
1  #DEFINE OBJ_MAC DO { IF ( IDENT -> IDENT ) IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT -> IDENT + ( IDENT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) < FLOAT_CONST ) ? ( -v IDENT ) ?: ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) ? INT_CONST ?: INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( IDENT + ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( CHAR *p ) ( IDENT ) , ( SIZEOF ( *v ( IDENT ) ) ) * IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( ~ ( ( IDENT ) ^ ( IDENT ) ) & ( ( IDENT ) ^ ( IDENT ) ) & ( IDENT ) ) < INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT >> ( IDENT + IDENT ) ) , ( ( IDENT >> IDENT ) & INT_CONST ) , IDENT & INT_CONST
8  #DEFINE FUNC_MAC ( IDENT ) { IF ( ! IDENT ) IDENT = IDENT ( IDENT , IDENT ) ; IDENT -> IDENT = IDENT ; }
1  #DEFINE OBJ_MAC IF ( IDENT >= INT_CONST ) { IDENT -> IDENT ( IDENT [ IDENT ] . IDENT , ( IDENT * ) IDENT , ( IDENT * ) IDENT - ( IDENT * ) IDENT , IDENT , IDENT ) ; IDENT = -v INT_CONST ; }
2  #DEFINE FUNC_MAC ( #LINE ) ( ( ( #LINE ) >> INT_CONST ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT = IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( SIZEOF ( STRUCT IDENT ) + ( IDENT ) * SIZEOF ( STRUCT IDENT * ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT -> IDENT [ IDENT -> IDENT v++ ] = ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v ( IDENT ) -> IDENT ) | ( ( IDENT ) -> IDENT & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( ( CHAR *p ) & ( IDENT . IDENT ) - ( CHAR *p ) & IDENT ) , ( ( IDENT . IDENT = ( IDENT ( IDENT ( IDENT . IDENT ) + INT_CONST ) ) ) , ( CHAR *p ) & ( IDENT . IDENT ) ) , SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT & IDENT ) | ( IDENT & ( IDENT | IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT = IDENT . IDENT ; IDENT = IDENT . IDENT ; IDENT . IDENT = INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { UNSIGNED LONG IDENT ; IDENT ( IDENT ) ; IDENT ( ) ; IDENT [ IDENT ] = ( IDENT ) ; IDENT [ IDENT ] = ( UNSIGNED LONG ) ( IDENT ) ; IF ( ++v IDENT >= IDENT ) { IDENT = IDENT % IDENT ; IDENT = INT_CONST ; } IDENT ( IDENT ) ; }
6  #DEFINE OBJ_MAC IDENT -> IDENT . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT ) ; IDENT ( IDENT , STRING )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: INT_CONST )
1  #DEFINE OBJ_MAC ( UNSIGNED LONG ) IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) WHILE ( ( UNSIGNED LONG ) ( IDENT - IDENT -> IDENT + ( IDENT ) ) > IDENT -> IDENT ) IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT IDENT ; IDENT ( &v IDENT , ( SHORT *p ) IDENT -> IDENT -> IDENT , INT_CONST ) ; IDENT += IDENT ( IDENT + IDENT , STRING , # IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) IDENT ) != IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IF ( IDENT ( ( IDENT ) ( ( IDENT ) -> IDENT ) , ( IDENT * ) & ( ( IDENT ) -> IDENT ) , IDENT ) != IDENT ) { RETURN IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT && IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT . IDENT -> IDENT != IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT >> INT_CONST ) & INT_CONST ) | ( ( IDENT >> INT_CONST ) & INT_CONST ) )
1  #DEFINE OBJ_MAC IDENT ( STRING ) ; RETURN INT_CONST ;
1  #DEFINE FUNC_MAC ( IDENT ) CASE IDENT ## IDENT ## IDENT : IDENT = IDENT ## IDENT ## IDENT ; BREAK
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT = ( IDENT ) , IDENT = ( IDENT ) , IDENT = ( IDENT ) , IDENT = INT_CONST )
10  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) * IDENT -> IDENT ) + ( ( IDENT ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( *v IDENT ) >> ( IDENT ) ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( #LINE , IDENT ) ( ( IDENT ## #LINE ## IDENT ## IDENT ## IDENT >= INT_CONST ) ? ( &v IDENT ) ?: ( ( IDENT ## #LINE ## IDENT ## IDENT ## IDENT >= INT_CONST ) ? ( &v IDENT ) ?: &v IDENT [ #LINE ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) { IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT IDENT = INT_CONST ; INT IDENT = IDENT ; IDENT IDENT , IDENT ; IDENT = IDENT ; IDENT = IDENT ; DO { IDENT += IDENT ; IDENT += ( ( IDENT << INT_CONST ) + IDENT ) ^ ( IDENT + IDENT ) ^ ( ( IDENT >> INT_CONST ) + IDENT ) ; IDENT += ( ( IDENT << INT_CONST ) + IDENT ) ^ ( IDENT + IDENT ) ^ ( ( IDENT >> INT_CONST ) + IDENT ) ; } WHILE ( --v IDENT ) ; IDENT += IDENT ; IDENT += IDENT ; } WHILE ( INT_CONST )
9  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == INT_CONST ? -v INT_CONST ?: ( IDENT ) == INT_CONST ? INT_CONST ?: INT_CONST / ( ( IDENT ) * ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT -> IDENT + IDENT , IDENT )
1  #DEFINE OBJ_MAC ( ! ( IDENT v-- ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( IDENT ) , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC FLOAT
1  #DEFINE FUNC_MAC ( IDENT ) EXTERN INT IDENT ( VOID *p , VOID *p , VOID *p , VOID *p )
2  #DEFINE OBJ_MAC CONST CHAR
2  #DEFINE OBJ_MAC ( ( IDENT + INT_CONST ) / INT_CONST - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) % ( IDENT ) * INT_CONST ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( IDENT += IDENT ( INT_CONST , IDENT ) + IDENT ( IDENT , IDENT , IDENT ) + IDENT + IDENT , IDENT = IDENT ( INT_CONST , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( SIZEOF ( STRUCT IDENT ) + INT_CONST - ( IDENT + INT_CONST ) ) + ( ( ( IDENT ) + INT_CONST + INT_CONST ) & ~ INT_CONST ) )
8  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT , IDENT }
2  #DEFINE OBJ_MAC { IDENT = IDENT -> IDENT ; IDENT = IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( *v ( IDENT ) -> IDENT ) ( ( IDENT ) -> IDENT , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) FOR ( ( IDENT ) = INT_CONST ; ( IDENT ) <= IDENT ; ( IDENT ) v++ ) IF ( ( INT_CONST << ( IDENT ) ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = IDENT + ( IDENT ) ; IDENT ( ( IDENT ) ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ^= ( *v IDENT v-- ) ^ IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ IDENT ] . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT [ INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT , IDENT ) , IDENT , INT_CONST )
2  #DEFINE OBJ_MAC ( *v IDENT ) & ( INT_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT ) , STRING , IDENT )
2  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) + ( INT_CONST - INT_CONST ) ) & ~ ( INT_CONST - INT_CONST ) ) - ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT ) & ~ ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) >= SIZEOF ( IDENT ) - INT_CONST ) && ! IDENT ( ( IDENT ) , ( IDENT ) , SIZEOF ( IDENT ) - INT_CONST ) )
3  #DEFINE OBJ_MAC { INT_CONST , INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT == IDENT && IDENT == IDENT ) || ( IDENT == IDENT && ( IDENT == IDENT || IDENT == IDENT || IDENT == IDENT || IDENT == IDENT ) ) )
2  #DEFINE OBJ_MAC { IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT & IDENT ) ? STRING ?: STRING )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( IDENT - ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! ( ( IDENT ) & ( INT_CONST << IDENT ( ) ) ) ) IDENT ( STRING , IDENT , IDENT , IDENT ( ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT -> IDENT . IDENT == IDENT ) && IDENT ( IDENT ) ) || ( ( IDENT -> IDENT . IDENT == IDENT ) && ! IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( ~ IDENT ) ; IDENT ( ( IDENT ) << IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( ~ IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( ! ( IDENT ) -> IDENT IDENT ) ( IDENT ) -> IDENT IDENT = ( IDENT ) ; ELSE ( IDENT ) -> IDENT IDENT -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ? IDENT ?: ( IDENT ) ; IDENT = INT_CONST ; IDENT ( IDENT , STRING , ( LONG ) IDENT ) ;
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( IDENT . IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT [ IDENT ]
1  #DEFINE FUNC_MAC ( ) IDENT &= ~ IDENT -> IDENT ; IDENT ( IDENT , IDENT , -v INT_CONST , -v INT_CONST ) ; IDENT ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT -> IDENT -= ( IDENT ) ; IF ( IDENT -> IDENT < INT_CONST ) IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( ! IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ) { IDENT -> IDENT [ IDENT ] = IDENT ; IDENT -> IDENT [ IDENT ] = IDENT ; IDENT = IDENT ; GOTO IDENT ; } }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT = IDENT ( IDENT ) ) ) { CHAR *p IDENT = ( IDENT ( IDENT , CHAR_CONST ) ? IDENT ( IDENT , IDENT ) ?: IDENT ( IDENT ) ) ; IF ( ! IDENT ( IDENT , CHAR_CONST ) ) { CHAR *p IDENT = ( CHAR *p ) IDENT ( IDENT ( IDENT ) + INT_CONST ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , STRING ) ; IDENT ( IDENT ) ; IDENT = IDENT ; } IF ( IDENT ) IDENT ( IDENT ) ; IDENT = IDENT ; }
3  #DEFINE OBJ_MAC ( IDENT ) IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ INT_CONST ] = IDENT [ INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT ) ( &v IDENT [ ( IDENT ) ] )
52  #DEFINE OBJ_MAC ( IDENT ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { ( INT ) IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = ( IDENT ) / INT_CONST ;
1  #DEFINE FUNC_MAC ( ) IF ( IDENT ( ) ) IDENT ( IDENT IDENT STRING )
23  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST )
2  #DEFINE OBJ_MAC IDENT ( ( IDENT IDENT , INT IDENT , IDENT * IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ## IDENT , # IDENT , IDENT , INT_CONST , INT_CONST , IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT << INT_CONST , IDENT : INT_CONST << INT_CONST , IDENT : IDENT , }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT + IDENT ( IDENT ) + INT_CONST < IDENT + IDENT ) IDENT += IDENT ( IDENT , IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
53  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , INT_CONST , INT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) * ( IDENT ) * INT_CONST / INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) IDENT += IDENT ( IDENT + IDENT , STRING , IDENT ( IDENT -> IDENT -> IDENT [ IDENT ] ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT & ( IDENT ) ) IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >> INT_CONST ) | ( IDENT << INT_CONST ) )
1  #DEFINE OBJ_MAC STRING IDENT STRING IDENT
1  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) - IDENT )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) ^ ( IDENT ) ^ ( IDENT ) )
8  #DEFINE OBJ_MAC ( IDENT >> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) ( IDENT ) -> IDENT ) -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT - IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT ( ) ; IDENT ( IDENT ) ; IDENT ( IDENT , IDENT ) ; IF ( IDENT ) { IDENT ( IDENT , IDENT ( IDENT , IDENT ) ) ; IDENT = IDENT ; } }
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) << INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT . IDENT == &v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == INT_CONST ) ? STRING ?: IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT . IDENT -> IDENT [ IDENT ]
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT ? IDENT -> IDENT ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT == IDENT || ( IDENT ) . IDENT == IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ~ ( UNSIGNED LONG ) ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( IDENT ( IDENT ) - IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( SIGNED CHAR ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT & INT_CONST ) >> INT_CONST ) ) | ( ( IDENT & INT_CONST ) ? -v INT_CONST ?: INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT ) -> IDENT == IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , IDENT )
7  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = ( VOID *p ) IDENT ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( INT_CONST , IDENT ) ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT - ( IDENT ) -> IDENT > IDENT ) && ! IDENT ( IDENT , IDENT ) && ( ( IDENT ) -> IDENT & ( INT_CONST << ( IDENT ) ) ) )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) - SIZEOF ( ( ( IDENT * ) INT_CONST ) -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >= IDENT ) && ( IDENT <= IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) & IDENT , ( IDENT ) IDENT , ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ## IDENT ## IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( { UNSIGNED INT IDENT = IDENT ( ( IDENT ) ) ; IDENT ( INT_CONST ) ; IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( IDENT ## IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ) IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT ( STRING ) ; IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; }
1  #DEFINE OBJ_MAC ( IDENT * IDENT / SIZEOF ( STRUCT IDENT * ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT , IDENT ( IDENT , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , IDENT ( ( IDENT ) ) , IDENT ( ( IDENT ) ) , ( IDENT ) -> IDENT . IDENT , IDENT ( ( IDENT ) ) , IDENT ( ( IDENT ) ) , IDENT ( ( IDENT ) ) , IDENT ( ( IDENT ) ) , IDENT ( ( IDENT ) ) , ( IDENT ) , ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , INT_CONST ) ;
1  #DEFINE OBJ_MAC ( { IF ( ! #ERROR && ! IDENT ) { IDENT = IDENT ( IDENT -> IDENT , IDENT , &v IDENT ) ; IDENT ( INT_CONST ) ; } } )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > FLOAT_CONST ? ( IDENT ) ?: ( ( IDENT ) * -v FLOAT_CONST ) )
11  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , IDENT . IDENT , STRING ) , ( IDENT ) + IDENT )
2  #DEFINE OBJ_MAC ( IDENT ( IDENT ) | IDENT )
1  #DEFINE OBJ_MAC ( IDENT ( ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ ( IDENT ) / IDENT ] & ( INT_CONST << ( ( IDENT ) % IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT += IDENT -> IDENT ? IDENT ( IDENT -> IDENT ) + INT_CONST ?: INT_CONST
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) + ( IDENT ) - INT_CONST ) / ( IDENT ) ) * ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( UNSIGNED CHAR ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { VOLATILE INT IDENT ; IDENT = IDENT ( IDENT -> IDENT . IDENT ) ; IDENT &= ( IDENT ) ; IDENT ( IDENT , IDENT -> IDENT . IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT & INT_CONST ) == IDENT )
1  #DEFINE FUNC_MAC ( ) ( ( IDENT ( &v IDENT ) != IDENT ( &v IDENT ) && IDENT ( &v IDENT ) [ -v INT_CONST ] == CHAR_CONST ) ? IDENT ( CHAR_CONST , CHAR_CONST ) ?: IDENT ( CHAR_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT ) ? INT_CONST ?: INT_CONST )
1  #DEFINE OBJ_MAC IF ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT = ( IDENT & ~ IDENT ( IDENT ## IDENT , IDENT ## IDENT ) ) | IDENT ( IDENT ## IDENT , IDENT ## IDENT , IDENT )
2  #DEFINE OBJ_MAC { IDENT -> IDENT = IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT == ( IDENT ) && IDENT == ( IDENT ) && IDENT == ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT ( &v IDENT ) ; IDENT . IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) [ IDENT - ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT != IDENT ) { INT IDENT ; CHAR IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { IDENT = ( IDENT ) [ IDENT ] ; ( IDENT ) [ IDENT ] = ( IDENT ) [ IDENT ] ; ( IDENT ) [ IDENT ] = IDENT ; } } }
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) )
9  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & IDENT ) == IDENT ) ? IDENT ?: IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( INT_CONST & ( ( ( IDENT ) ( IDENT ) ) >> INT_CONST ) ) )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) IDENT [ ( IDENT ) ] -> IDENT ) -> IDENT [ INT_CONST ] )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT [ IDENT ] , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = IDENT -> IDENT [ IDENT & ~ ( ( IDENT -> IDENT & IDENT ) == INT_CONST ) ] )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) + IDENT )
6  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) ( ~ INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT && IDENT <= ( IDENT ) && ( IDENT ) <= IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT > -v INT_CONST ) IDENT = ( *v IDENT -> IDENT ) ( IDENT , IDENT , IDENT ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( CHAR ) ( ( CHAR ) - CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) | ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( IDENT - ( ( ( UNSIGNED LONG ) IDENT ) & ( IDENT ) ) ) )
1  #DEFINE OBJ_MAC INT_CONST + ( INT_CONST * IDENT )
31  #DEFINE OBJ_MAC ( INT_CONST - INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + IDENT - INT_CONST ) / IDENT )
7  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT -> IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT -> IDENT != INT_CONST ) && ( IDENT [ -v INT_CONST ] . IDENT == IDENT ) && ( IDENT [ -v INT_CONST ] . IDENT == IDENT ) && ( IDENT [ -v INT_CONST ] . IDENT >= IDENT -> IDENT ) ) { IF ( IDENT [ -v INT_CONST ] . IDENT < IDENT -> IDENT ) { IDENT [ -v INT_CONST ] . IDENT = IDENT -> IDENT ; IDENT ( IDENT [ -v INT_CONST ] . IDENT < IDENT [ -v INT_CONST ] . IDENT ) ; } } ELSE { IDENT ( IDENT , IDENT , IDENT -> IDENT ) ; IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT -> IDENT ; IDENT -> IDENT = IDENT -> IDENT ; IDENT -> IDENT += INT_CONST ; IDENT += INT_CONST ; } IDENT ( IDENT -> IDENT <= IDENT -> IDENT ) ; IDENT v++ ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { UNSIGNED INT IDENT = IDENT ( IDENT ) ; IDENT &= ( IDENT ) ; IDENT |= ( IDENT ) ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT / SIZEOF ( SHORT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT -> IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT IDENT ; INT IDENT = IDENT ; IF ( ! IDENT && IDENT ( IDENT , IDENT ) == IDENT ) { IDENT IDENT = IDENT ( IDENT , IDENT ( IDENT , IDENT ) ) ; IDENT = IDENT ( IDENT ) ; } ELSE IDENT = IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( &v IDENT , ( IDENT ) ) , IDENT ( &v IDENT , ( IDENT ) ) )
2  #DEFINE OBJ_MAC ( ( ( CHAR *p ) ( IDENT ) ) [ INT_CONST ] )
1  #DEFINE OBJ_MAC ( { IDENT ; IDENT ; IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC INT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT ## IDENT * IDENT ) { STRUCT IDENT * IDENT ; IF ( ! ( IDENT = IDENT ( IDENT ) ) ) RETURN IDENT -> IDENT ( IDENT , IDENT , IDENT ) ; IF ( IDENT == IDENT ) { IF ( IDENT -> IDENT ) * IDENT = ~ ( IDENT -> IDENT - INT_CONST ) ; ELSE *v IDENT = ( IDENT -> IDENT & IDENT ) | IDENT ; IDENT -> IDENT = INT_CONST ; RETURN IDENT ; } *v IDENT = IDENT ## IDENT ( IDENT -> IDENT + IDENT ) ; IF ( IDENT == IDENT ) * IDENT |= IDENT ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT [ INT_CONST ] << INT_CONST ) + ( IDENT ) -> IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ( IDENT , INT_CONST ) ) == IDENT && IDENT ( IDENT ( IDENT , INT_CONST ) ) == IDENT && IDENT ( IDENT ( IDENT , INT_CONST ) ) >= IDENT && IDENT ( IDENT ( IDENT , INT_CONST ) ) <= IDENT )
10  #DEFINE OBJ_MAC STRING STRING STRING
1  #DEFINE FUNC_MAC ( ) ( ( ( *v IDENT & ( INT_CONST << IDENT ) ) ) >> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) <<= INT_CONST )
4  #DEFINE OBJ_MAC ( IDENT -> IDENT [ INT_CONST ] & INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = IDENT ( SIZEOF ( *v ( IDENT ) ) , IDENT ) )
5  #DEFINE OBJ_MAC ( IDENT [ INT_CONST ] . IDENT )
1  #DEFINE OBJ_MAC ( IDENT % INT_CONST )
1  #DEFINE FUNC_MAC ( ) DO { IF ( ! ( IDENT v++ % ( ( INT_CONST * INT_CONST * INT_CONST ) >> IDENT ) ) ) IDENT ( STRING ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) ) , INT_CONST , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT - ( IDENT ) -> IDENT ) * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( VOID *p ) IDENT , &v ( IDENT ) , SIZEOF ( IDENT ) ) ? -v IDENT ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { WHILE ( *v IDENT != CHAR_CONST ) IDENT v++ ; IDENT v++ ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT IDENT ; IDENT ( IDENT , &v IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT += ( IDENT ) )
2  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) | IDENT | IDENT )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + INT_CONST ) & -v INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { VOID ( *v IDENT ) ( VOID ) = ( VOID *p ) IDENT ; IDENT ( IDENT ) }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT & IDENT ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT * INT_CONST )
2  #DEFINE FUNC_MAC ( ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT -> IDENT . IDENT . IDENT [ IDENT ] , IDENT ) , IDENT )
4  #DEFINE OBJ_MAC ( ( IDENT + IDENT + IDENT + IDENT ) )
8  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( ( ( ( LONG ) IDENT ) >> INT_CONST ) & ( IDENT - INT_CONST ) ) ;
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT , IDENT )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( UNSIGNED LONG ) ( IDENT ) ) + ( ( UNSIGNED LONG ) ( IDENT - INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( LONG ) ( IDENT ) + INT_CONST ) & ~ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , STRING ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT && IDENT -> IDENT && IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( INT_CONST ) IDENT ( STRING , ( INT ) ( IDENT ) ) ; *v ( VOLATILE UNSIGNED INT *p ) ( IDENT + IDENT ) = IDENT ; IDENT += INT_CONST ; IDENT &= IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) & ( IDENT ) ) + ( ( ( IDENT ) ^ ( IDENT ) ) & ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & ( INT_CONST << IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( ( IDENT ) - INT_CONST ) >> IDENT ) + INT_CONST ) << IDENT )
1  #DEFINE OBJ_MAC ( IDENT + IDENT * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( IDENT ) -> IDENT = IDENT ; IF ( ( IDENT ) -> IDENT != IDENT ) { ( IDENT ) -> IDENT -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = ( IDENT ) ; } ELSE { ( IDENT ) -> IDENT = ( IDENT ) -> IDENT = ( IDENT ) ; } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT , IDENT ) ; IDENT = ( ( UNSIGNED INT ) IDENT ( *v IDENT v++ ) ) << INT_CONST ; IDENT ( IDENT , IDENT ) ; IDENT += IDENT ( *v IDENT v++ ) ; )
4  #DEFINE FUNC_MAC ( IDENT ) & ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) [ INT_CONST ] ) && IDENT ( ( IDENT ) [ INT_CONST ] ) && IDENT ( ( IDENT ) [ INT_CONST ] ) && IDENT ( ( IDENT ) [ INT_CONST ] ) && ( IDENT ) [ INT_CONST ] == CHAR_CONST && IDENT ( ( IDENT ) [ INT_CONST ] ) && IDENT ( ( IDENT ) [ INT_CONST ] ) && IDENT ( ( IDENT ) [ INT_CONST ] ) && IDENT ( ( IDENT ) [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ) . IDENT . IDENT = IDENT , ( IDENT ) . IDENT . IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT ) -> IDENT != IDENT ) { IDENT ( STRING , IDENT , IDENT ) ; IDENT ( INT_CONST ) ; }
43  #DEFINE FUNC_MAC ( IDENT ) INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT -> IDENT = ( ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) IDENT -> IDENT . IDENT v++ ;
10  #DEFINE FUNC_MAC ( #ERROR , IDENT , IDENT , IDENT ) #ERROR = IDENT ( IDENT , IDENT , IDENT ) ? -v IDENT ?: INT_CONST
1  #DEFINE FUNC_MAC ( ) ( IDENT , IDENT ( IDENT -> IDENT + INT_CONST ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT + ( INT ) ( &v ( ( IDENT * ) INT_CONST ) -> IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( ) ( ( IDENT ) IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ! ( IDENT % INT_CONST ) && ( IDENT % INT_CONST ) ) || ! ( IDENT % INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT << INT_CONST ) | ( IDENT - INT_CONST )
1  #DEFINE OBJ_MAC ( ( ( UNSIGNED ) CHAR_CONST << INT_CONST ) || ( ( UNSIGNED ) CHAR_CONST << INT_CONST ) || ( ( UNSIGNED ) CHAR_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) DO { INT IDENT ; IDENT = IDENT ( IDENT ) ; IF ( IDENT != INT_CONST ) RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT [ INT_CONST ] = IDENT [ INT_CONST ] ; IDENT [ INT_CONST ] = IDENT [ INT_CONST ] ; IDENT [ INT_CONST ] = IDENT [ INT_CONST ] ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) & ( IDENT ) ) | ( ( IDENT ) & ( IDENT ) ) | ( ( IDENT ) & ( IDENT ) ) )
4  #DEFINE FUNC_MAC ( ) ( IDENT < IDENT ? *v IDENT v++ ?: IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) != INT_CONST && ( ( ( IDENT ) & ( ( IDENT ) - INT_CONST ) ) == INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( VOID *p ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT ( IDENT -> IDENT , IDENT -> IDENT ## IDENT , IDENT ( IDENT , IDENT ) ) ) IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ) ;
1  #DEFINE OBJ_MAC UNION IDENT
12  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT ) == IDENT )
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ^ IDENT ^ IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT != -v INT_CONST ) IDENT ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT ( IDENT , IDENT , IDENT ) != IDENT ) GOTO #ERROR ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( IDENT [ ( IDENT ) ] . IDENT , ( IDENT ) , ( IDENT ) ) ; } WHILE ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT ( IDENT ) ; IDENT [ INT_CONST ] = IDENT ( IDENT ) ; IDENT [ INT_CONST ] = IDENT ( IDENT ) ; IDENT [ INT_CONST ] = IDENT ( IDENT ) ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) == IDENT ) ? INT_CONST ?: ( ( IDENT ) & INT_CONST ) >> INT_CONST )
1  #DEFINE OBJ_MAC IDENT ( SIZEOF ( STRUCT IDENT ) , SIZEOF ( VOID *p ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT & IDENT ) IDENT ( IDENT -> IDENT , IDENT , IDENT & IDENT )
42  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) > ( IDENT ) ? ( IDENT ) ?: ( IDENT ) )
2  #DEFINE OBJ_MAC ( INT_CONST << ( IDENT - IDENT ) )
1  #DEFINE OBJ_MAC IDENT ( IDENT , STRING , IDENT , IDENT , IDENT , IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> IDENT ) & INT_CONST )
1  #DEFINE FUNC_MAC ( #LINE , IDENT ) ( ( IDENT ## #LINE ## IDENT ## IDENT ## IDENT >= INT_CONST ) ? ( IDENT ) ?: ( ( IDENT ## #LINE ## IDENT ## IDENT ## IDENT >= INT_CONST ) ? ( IDENT ) ?: &v IDENT [ ## #LINE ## ] ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( ( IDENT * ) ( IDENT ) ) ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) & ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT - SIZEOF ( STRUCT IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( ( IDENT ) -> IDENT ) - ( IDENT ) -> IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v ( IDENT ) -> IDENT , ( IDENT ) )
7  #DEFINE FUNC_MAC ( IDENT ) (
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) VOID IDENT ( CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT ) { IDENT IDENT ; STRUCT IDENT * IDENT = IDENT -> IDENT ; IDENT -> IDENT = ( STRUCT IDENT * ) IDENT ; IDENT = IDENT ( INT_CONST , IDENT , ( CHAR *p ) IDENT , &v IDENT , IDENT , IDENT ) ; IF ( IDENT > INT_CONST ) IDENT ( ( STRUCT IDENT * ) IDENT ) ; ELSE { ( *v IDENT [ IDENT ] . IDENT ) ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; IF ( IDENT && IDENT && IDENT ) { IDENT * IDENT = ( IDENT * ) IDENT ; IDENT ( IDENT , IDENT -> IDENT ) ; } IDENT -> IDENT = IDENT ; RETURN ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) ( { UNSIGNED LONG *p IDENT ; STATIC UNSIGNED LONG IDENT [ INT_CONST ] = { INT_CONST , } ; IF ( IDENT ) IDENT = IDENT ( IDENT , IDENT ) ; ELSE { IDENT = &v IDENT [ INT_CONST ] ; IF ( IDENT == INT_CONST ) IDENT [ INT_CONST ] = IDENT ( INT_CONST , IDENT ) ; } IDENT ( IDENT , IDENT , IDENT , IDENT ) ; } )
1  #DEFINE OBJ_MAC * INT_CONST / INT_CONST
1  #DEFINE FUNC_MAC ( ) ( ( IDENT ) ( ( *v ( IDENT VOLATILE *p ) & IDENT . IDENT >> INT_CONST ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT ) IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { STRUCT IDENT * IDENT ; IDENT = IDENT ( ( IDENT ) + INT_CONST , ( IDENT ) ) ; IF ( IDENT ) { INT IDENT = IDENT ( IDENT -> IDENT ) ; IF ( IDENT ) IDENT ( IDENT , IDENT ) ; } IDENT ; } )
1  #DEFINE OBJ_MAC ( IDENT / ( INT_CONST / IDENT ) )
3  #DEFINE OBJ_MAC { *v IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; IDENT = *v IDENT ; ++v IDENT ; GOTO IDENT ; }
2  #DEFINE OBJ_MAC ( IDENT ( IDENT ) | IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) == ( INT_CONST >> INT_CONST ) || ( ( IDENT ) >> INT_CONST ) == ( INT_CONST >> INT_CONST ) || ( ( IDENT ) >> INT_CONST ) == ( INT_CONST >> INT_CONST ) )
3  #DEFINE OBJ_MAC ( ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) )
1  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) + ( IDENT + IDENT + INT_CONST ) * SIZEOF ( STRUCT IDENT ) + SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT == IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : INT_CONST , IDENT : IDENT , IDENT : IDENT , IDENT : &v IDENT , IDENT : &v IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT >= CHAR_CONST && IDENT <= CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , INT_CONST ) ;
13  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( ( ( ( IDENT ) IDENT & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) IDENT & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) IDENT & INT_CONST ) >> INT_CONST ) | ( ( ( IDENT ) IDENT & INT_CONST ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT , IDENT ) , IDENT ( IDENT , IDENT , IDENT ) , IDENT += ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT >>= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT == IDENT ) ? ( IDENT ) -> IDENT ?: IDENT ( ( ( IDENT ) -> IDENT ) + IDENT ) & IDENT )
9  #DEFINE FUNC_MAC ( IDENT ) ( )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT -> IDENT . IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT ( IDENT ) [ INT_CONST ] ) ; ELSE IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT -> IDENT . IDENT , IDENT , IDENT ( IDENT ) , &v IDENT , &v IDENT , &v IDENT , &v IDENT ) ; IDENT = IDENT ; }
3  #DEFINE FUNC_MAC ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT -> IDENT ) | ( IDENT ) | ( IDENT ) | ( ( IDENT ) << ( IDENT -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT ) . IDENT != IDENT ) { ( *v ( IDENT ( IDENT ) . IDENT ) ) ( IDENT , IDENT ) ; } ELSE
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) IDENT ( IDENT , STRING , IDENT ) ; ELSE IDENT v-- ;
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT == INT_CONST && IDENT -> IDENT == IDENT -> IDENT . IDENT ) { IDENT -> IDENT = IDENT ( IDENT -> IDENT . IDENT ) ; IDENT -> IDENT . IDENT = IDENT ; } ELSE { IDENT -> IDENT . IDENT = ( IDENT ( IDENT -> IDENT . IDENT ) == IDENT -> IDENT ) ; } IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( ) IDENT ( STRING , IDENT , ( INT ) IDENT , IDENT )
4  #DEFINE OBJ_MAC ( IDENT -> IDENT v-- , IDENT -> IDENT v++ , *v IDENT -> IDENT v++ )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN ! ( IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( ( ( IDENT ( IDENT ) ) & ( ~ ( IDENT ) ) ) , IDENT ) ) )
5  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = ( IDENT ) ; } IDENT -> IDENT = IDENT ; IDENT ( &v IDENT -> IDENT , &v IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT , IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) = ( ( IDENT ) & INT_CONST ) + ( ( IDENT ) >> INT_CONST ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ( IDENT , IDENT ) ) IDENT ( STRING # IDENT , IDENT ( IDENT , IDENT ) )
1  #DEFINE OBJ_MAC IDENT IDENT IDENT
455  #DEFINE FUNC_MAC ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT STRING IDENT STRING , IDENT )
1  #DEFINE FUNC_MAC ( ) DO { IF ( IDENT == IDENT ) { IDENT ( IDENT , IDENT ) ; IDENT = INT_CONST ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { WHILE ( IDENT < ( IDENT ) ) { IDENT |= ( ( IDENT ) IDENT ( ) ) << IDENT ; IDENT += INT_CONST ; } }
1  #DEFINE OBJ_MAC ~ ( IDENT | IDENT | IDENT | IDENT )
1  #DEFINE OBJ_MAC ( ( INT ( *v ) IDENT ( ( STRUCT IDENT * ) ) ) IDENT )
1  #DEFINE FUNC_MAC ( #LINE , IDENT , IDENT )
6  #DEFINE OBJ_MAC IDENT ( IDENT , STRING ) ; IDENT ( IDENT ) ;
1  #DEFINE OBJ_MAC IF ( ! IDENT -> IDENT [ IDENT ] ) { IDENT ( &v IDENT -> IDENT , IDENT ) ; IDENT -> IDENT [ IDENT ] v++ ; } ELSE { IDENT -> IDENT [ IDENT ] v++ ; }
23  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT ; GOTO IDENT ; }
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) -> IDENT << IDENT ) & IDENT ) | ( ( ( IDENT ) -> IDENT == INT_CONST ) ? ( IDENT ) -> IDENT ?: ( IDENT ) -> IDENT ) | ( ( ( IDENT ) -> IDENT == INT_CONST ) ? INT_CONST ?: IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) ? IDENT ( IDENT ) ?: IDENT ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED ) IDENT ) >> INT_CONST ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST ? ( INT_CONST + ( ( ( IDENT ) - INT_CONST ) | ( SIZEOF ( LONG ) - INT_CONST ) ) ) ?: SIZEOF ( LONG ) )
10  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) << INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) )
1  #DEFINE OBJ_MAC VOLATILE INT *p
7  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) -> IDENT , ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) -> IDENT ? STRING ?: IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT ) ) ? INT_CONST ?: INT_CONST << ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT ) | IDENT )
1  #DEFINE FUNC_MAC ( #ERROR , IDENT , IDENT ) DO { #ERROR = IDENT ( IDENT , ( VOID *p ) IDENT , SIZEOF ( IDENT ) ) ; IF ( #ERROR == INT_CONST ) IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ) ? ( IDENT ) ?: STRING
2  #DEFINE FUNC_MAC ( IDENT ) CASE IDENT : IDENT = IDENT ## IDENT ; BREAK
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) >> INT_CONST & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) { IF ( IDENT >= ( IDENT ) ) IDENT ( IDENT IDENT IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( ( IDENT ) != INT_CONST ) || ( IDENT ( IDENT ) ) || ( IDENT ( IDENT ) ) ) { IDENT ( IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT ) -> IDENT != IDENT ) {
3  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT * INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >> INT_CONST ) == ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT + INT_CONST * ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST + ( IDENT ) + INT_CONST + ( IDENT - INT_CONST ) ) & ~ ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT . IDENT & ( INT_CONST << IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ) , IDENT , IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT . IDENT [ IDENT ] >> INT_CONST , IDENT . IDENT + IDENT ## IDENT ## IDENT ) ; IDENT ( IDENT . IDENT [ IDENT ] >> INT_CONST , IDENT . IDENT + IDENT ## IDENT ## IDENT ) ; IF ( IDENT ( &v IDENT , INT_CONST , INT_CONST , IDENT ) == INT_CONST ) IDENT ( &v IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT + IDENT ( &v IDENT ) ) & ~ IDENT ( &v IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & INT_CONST | ( ( IDENT ) & INT_CONST ) )
8  #DEFINE OBJ_MAC ( IDENT = INT_CONST , IDENT )
6  #DEFINE OBJ_MAC ( *v ( STRUCT IDENT * ) ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + ( IDENT ) * INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) * ( ( UNSIGNED SHORT *p ) ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) }
4  #DEFINE FUNC_MAC ( ) { IDENT ( INT_CONST , IDENT -> IDENT + IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) == INT_CONST )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT ( IDENT ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , ( IDENT ) ) )
2  #DEFINE OBJ_MAC INT_CONST - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( IDENT ) & ( IDENT - INT_CONST ) ) * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) , STRING , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT [ IDENT ] ) { IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT <= INT_CONST )
3  #DEFINE FUNC_MAC ( ) STRUCT IDENT * IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( SIZEOF ( IDENT ) == INT_CONST ) ? ( IDENT ( IDENT , ( INT ) IDENT ) ) ?: ( IDENT ( IDENT , ( INT ) ( ( IDENT >> INT_CONST ) & INT_CONST ) , ( ( INT ) IDENT & INT_CONST ) ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , ( IDENT == -v INT_CONST ? INT_CONST ?: ( IDENT ? INT_CONST ?: INT_CONST ) ) , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( ) IDENT |= ~ IDENT -> IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) * ( ( IDENT * ) ( INT_CONST ) ) = ( IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( UNSIGNED LONG ) IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + IDENT / SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT ) , INT_CONST , INT_CONST )
2  #DEFINE FUNC_MAC ( #ERROR , IDENT , IDENT , IDENT ) DO { #ERROR = IDENT ( IDENT , ( VOID *p ) IDENT , IDENT ) ; IF ( #ERROR == INT_CONST ) IDENT ( IDENT , IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT & INT_CONST ) && IDENT ( ( IDENT ) -> IDENT [ INT_CONST ] ) && IDENT ( ( IDENT ) -> IDENT [ INT_CONST ] ) && IDENT ( ( IDENT ) -> IDENT [ INT_CONST ] ) && IDENT ( ( IDENT ) -> IDENT ) <= ( IDENT ) && IDENT ( ( IDENT ) -> IDENT ) + IDENT ( ( IDENT ) -> IDENT ) <= ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST ? ( IDENT ) ?: -v ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ... ) { IF ( IDENT ) IDENT ( IDENT ) ; }
1  #DEFINE OBJ_MAC ( ( INT ) ( SIZEOF ( IDENT ) / SIZEOF ( CHAR *p ) ) )
31  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( UNSIGNED INT *p ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) , ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) | ( ( IDENT ) & IDENT ( IDENT ) ) , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) ? ( ( IDENT ( IDENT ) && IDENT ( IDENT ) != IDENT ) ? &v ( IDENT [ IDENT ( IDENT ) ] ) ?: IDENT ) ?: IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT < IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , ( INT ) ( ( IDENT ) - ( IDENT ) - INT_CONST ) , IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( IDENT ) ( IDENT ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) ? ( IDENT * ) ( ( STRUCT IDENT * ) ( IDENT ) + INT_CONST ) ?: ( IDENT * ) ( ( IDENT ) + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( STRING , # IDENT ) ; IDENT ( IDENT ## IDENT , &v IDENT ( IDENT ) ) ; } WHILE ( INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) / INT_CONST ) << INT_CONST ) + ( IDENT ) % INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { ( IDENT ) -> IDENT = IDENT ; ( IDENT ) -> IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT == IDENT ) ? STRING ?: ( IDENT == IDENT ) ? STRING ?: ( IDENT == IDENT ) ? STRING ?: ( IDENT == IDENT ) ? STRING ?: ( IDENT == IDENT ) ? STRING ?: STRING )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) EXTERN IDENT IDENT IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT -> IDENT . IDENT == IDENT ) && ! IDENT ( IDENT ) ) || ( ( IDENT -> IDENT . IDENT == IDENT ) && IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT * ( INT_CONST * IDENT + IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( { IF ( ! ( IDENT & ( INT_CONST << IDENT ) ) ) GOTO IDENT ## IDENT ; IDENT ## IDENT : ; } )
7  #DEFINE FUNC_MAC ( IDENT ... ) IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( &v IDENT [ ( IDENT ) - INT_CONST ] )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT = ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( STRUCT IDENT , IDENT . IDENT ) )
16  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) -> IDENT += IDENT , ( ( IDENT * ) IDENT -> IDENT ) -> IDENT += ( IDENT ) -> IDENT , IDENT ( IDENT , ( CHAR *p ) IDENT , ( IDENT ) -> IDENT ) , IDENT ( IDENT , ( CHAR *p ) & ( ( IDENT ) -> IDENT ) , SIZEOF ( IDENT ) ) , ( IDENT ) -> IDENT -= IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT IDENT = IDENT ; IDENT v-- ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v-- ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ( ( ( UNSIGNED IDENT ) INT_CONST << ( IDENT / INT_CONST ) ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ... ) DO { IDENT ( IDENT STRING , IDENT -> IDENT ) ; IDENT ( # IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( ( LONG ) IDENT ( ( IDENT ) ) + ( IDENT ) -> IDENT ) | ( ( LONG ) IDENT ( ( IDENT ) ) ) ) & ( IDENT - INT_CONST ) ) == INT_CONST )
13  #DEFINE OBJ_MAC ( *v ( ( IDENT * ) IDENT -> IDENT ) -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = IDENT -> IDENT , IDENT = IDENT -> IDENT )
8  #DEFINE OBJ_MAC IDENT ( &v IDENT , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { INT IDENT ; STRUCT IDENT * IDENT = IDENT + IDENT ; FOR ( ; ; ) { UNSIGNED INT IDENT ; IDENT = IDENT -> IDENT ; IF ( IDENT == -v INT_CONST ) BREAK ; IDENT = IDENT ( IDENT -> IDENT , INT_CONST + IDENT + IDENT * INT_CONST ) ; IDENT IDENT ; IDENT ( IDENT -> IDENT , IDENT ) ; IF ( ! IDENT -> IDENT ) BREAK ; IDENT = IDENT + IDENT -> IDENT ; } IDENT ; }
1  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
1  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) + ( IDENT + IDENT * IDENT + INT_CONST ) * SIZEOF ( STRUCT IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( CHAR *p ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ( IDENT ) != INT_CONST ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( DOUBLE ) ( ( DOUBLE ) ( IDENT ) - ( DOUBLE ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST & ( IDENT >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + INT_CONST * ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) { }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( ( IDENT ) ( IDENT ) >> INT_CONST ) & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT >> INT_CONST ) & INT_CONST ) + ( ( IDENT << INT_CONST ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( STRING :c STRING ( *v ( UNSIGNED LONG *p ) ( IDENT ) ) :c STRING ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ INT_CONST ] . IDENT [ IDENT ] . IDENT [ INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) { ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { STRUCT IDENT * IDENT ; IF ( IDENT . IDENT ) IDENT = IDENT . IDENT , IDENT . IDENT = IDENT -> IDENT ; ELSE IDENT = ( STRUCT IDENT * ) IDENT ( SIZEOF ( STRUCT IDENT ) ) ; IDENT -> IDENT = INT_CONST ; IDENT -> IDENT . IDENT = ( INT *p ) & IDENT ; IDENT -> IDENT . IDENT = IDENT ; IDENT = IDENT ; IF ( IDENT -> IDENT . IDENT == IDENT ) IDENT -> IDENT = IDENT . IDENT , IDENT . IDENT = IDENT ; ELSE IDENT -> IDENT = IDENT . IDENT , IDENT . IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT < ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ( IDENT ) ; IDENT v++ ) IF ( IDENT [ IDENT ] == IDENT ) { IDENT ( IDENT , IDENT , IDENT + INT_CONST , IDENT ) ; BREAK ; } }
1  #DEFINE FUNC_MAC ( ) { ( *v IDENT ) -> IDENT = IDENT ; ( *v IDENT ) -> IDENT = IDENT -> IDENT ; IDENT ( *v IDENT ) ; RETURN IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( VOLATILE IDENT * ) ( ( IDENT ) -> IDENT ) ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ( ( IDENT ) , IDENT ) == IDENT ) && ( IDENT ( ( IDENT ) , IDENT ) == IDENT ) ) ? IDENT ?: IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ? INT_CONST ?: INT_CONST )
1  #DEFINE OBJ_MAC ( *v IDENT . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! ( IDENT ) ) IDENT ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT == IDENT ) IDENT = IDENT ( STRING ) ; IDENT ( IDENT , IDENT , ( STRING , IDENT ) ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT == IDENT )
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT += INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT > IDENT && IDENT != IDENT ) || ( IDENT == IDENT && IDENT > INT_CONST ) ) { IDENT += IDENT ; IF ( IDENT < IDENT -> IDENT . IDENT ) IDENT = IDENT -> IDENT . IDENT ; IF ( IDENT > IDENT -> IDENT . IDENT ) IDENT = IDENT -> IDENT . IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( VOID ) INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT ) / SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) ) <= IDENT ? IDENT ( ( IDENT ) ) == IDENT ?: ( IDENT ( ( IDENT ) ) == IDENT || IDENT ( ( IDENT ) ) == IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ## IDENT , IDENT ## IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] + ( IDENT ) )
1  #DEFINE OBJ_MAC { IDENT = IDENT ( IDENT ) ; IDENT |= IDENT | IDENT ; IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IF ( ( IDENT ) -> IDENT & IDENT ) BREAK ; IDENT ( ) ; IDENT ( ) ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT |= ( INT_CONST << ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + INT_CONST * ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , { IDENT ( IDENT -> IDENT ) ; } )
1  #DEFINE #ERROR OBJ_MAC
2  #DEFINE OBJ_MAC ( INT_CONST * IDENT * SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , }
1  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT IDENT = IDENT ; IDENT VOLATILE ( STRING : : STRING ( IDENT ) ) ; IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT + ( SHORT ) ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ) ? INT_CONST ?: ( ( IDENT ) -> IDENT - ( IDENT ) -> IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT ( IDENT -> IDENT ) , ( IDENT -> IDENT ) , IDENT , IDENT -> IDENT , IDENT -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT IDENT ; IDENT IDENT ; IDENT = ( IDENT ) IDENT ; IF ( IDENT ( IDENT , IDENT ) && IDENT ( IDENT ) ) { IDENT = IDENT ( IDENT ) ; } ELSE { IDENT = IDENT ( IDENT , IDENT , &v IDENT ) ; IF ( ! IDENT ) GOTO IDENT ; } IDENT ( IDENT ) ; IDENT
1  #DEFINE OBJ_MAC IDENT -> IDENT -> IDENT , IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( INT_CONST + ( IDENT & INT_CONST ) ) )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + INT_CONST ) * IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) & ( IDENT ) ) | ( ( ~ ( IDENT ) ) & ( IDENT ) ) )
4  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) -> IDENT , STRUCT IDENT , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v IDENT , ( IDENT ) , SIZEOF ( IDENT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) IDENT ( STRING ) ; ELSE IDENT ( STRING )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) + IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT = ( IDENT ) ^ IDENT , IDENT = IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( --v ( IDENT -> IDENT ) )
84  #DEFINE OBJ_MAC ( INT_CONST + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , ( IDENT ) ) ;
5  #DEFINE OBJ_MAC ( IDENT | ( INT_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT >= ( IDENT ) -> IDENT ) IDENT -= ( ( IDENT ) -> IDENT - ( IDENT ) -> IDENT ) ; } WHILE ( INT_CONST )
3633  #DEFINE OBJ_MAC IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) ( IDENT ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) & ( IDENT ) ) ? STRING ?: STRING )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( CHAR *p ) ( ( IDENT ) -> IDENT . IDENT ) + IDENT [ IDENT ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == CHAR_CONST || IDENT == CHAR_CONST || IDENT == INT_CONST || IDENT == INT_CONST || IDENT == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT IDENT = IDENT ( IDENT ) ; IDENT IDENT ; IDENT ( ) ; IDENT = IDENT ( IDENT , IDENT ) ; IDENT ( IDENT ) = INT_CONST ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT * ) ( IDENT ) ) [ INT_CONST ] & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( *v IDENT ) = ( INT_CONST | ( IDENT ( ( IDENT ) -> IDENT ) << INT_CONST ) | ( IDENT ( ( IDENT ) -> IDENT ) << INT_CONST ) | ( IDENT ) ) )
12  #DEFINE OBJ_MAC ( ( ( INT_CONST ) * INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == ( IDENT ) || ( IDENT = IDENT ( IDENT ) ) == ( IDENT = IDENT ( IDENT ) ) || IDENT ( IDENT ) == IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT + ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + IDENT ( IDENT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ) IDENT ( IDENT , IDENT )
9  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT & INT_CONST ) >> INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) & ( IDENT -> IDENT [ IDENT ] )
294  #DEFINE OBJ_MAC ( IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) + CHAR_CONST )
1  #DEFINE OBJ_MAC IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ! IDENT ( IDENT , IDENT , IDENT v++ , &v IDENT , &v IDENT ) )
1  #DEFINE OBJ_MAC STATIC CHAR
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST - ( IDENT ) * INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT = ( IDENT ^ IDENT ) & IDENT ; IDENT . IDENT . IDENT = IDENT ^ IDENT ^ IDENT -> IDENT . IDENT ; IDENT . IDENT . IDENT = IDENT ^ IDENT ^ IDENT -> IDENT . IDENT ; IDENT = ( IDENT * ) ( ( CHAR *p ) IDENT + IDENT ) ; IDENT ( IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , IDENT , INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT ( IDENT , IDENT , ( IDENT ( IDENT ## IDENT , IDENT ( IDENT ## IDENT ) ) ) ) ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED ) INT_CONST << ( ( INT ) ( IDENT ) ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( &v ( ( ( IDENT ) -> IDENT -> ## IDENT ) . IDENT ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( &v IDENT , STRING , INT_CONST , INT_CONST )
1  #DEFINE OBJ_MAC { IDENT ( IDENT , IDENT ) ; IDENT ( INT_CONST ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT . IDENT - ( IDENT -> IDENT . IDENT + IDENT -> IDENT . IDENT - ( IDENT ) ( ( ( FLOAT ) IDENT ( IDENT ) / FLOAT_CONST ) + FLOAT_CONST ) ) )
73  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT , IDENT , IDENT , ## IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT ) + IDENT ( ( CHAR *p ) ( IDENT ) ) + INT_CONST <= SIZEOF IDENT ) { IDENT ( IDENT , ( CHAR *p ) ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) && ( IDENT ( IDENT ) == IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT + IDENT ( IDENT ) ) & ~ IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ## IDENT ( IDENT * IDENT , IDENT * IDENT , IDENT * IDENT ) { STRUCT IDENT IDENT [ INT_CONST ] ; IDENT IDENT ; IDENT ( IDENT ) ; IDENT = IDENT ## IDENT ( ( IDENT * ) IDENT ( IDENT -> IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) ) ; IDENT ( IDENT ) ; RETURN IDENT ; }
12  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT & ~ ( IDENT | IDENT ) , IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT -> IDENT . IDENT <= IDENT ) && ( ( IDENT -> IDENT . IDENT == INT_CONST ) || ( IDENT <= IDENT -> IDENT . IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT . IDENT > INT_CONST && IDENT . IDENT > INT_CONST ) { IDENT ( STRING , IDENT , IDENT , IDENT ( ) ) ; IDENT IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT [ IDENT -> IDENT ] )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT = ( IDENT ) | IDENT )
1  #DEFINE OBJ_MAC EXTERN
2  #DEFINE OBJ_MAC { IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT }
1  #DEFINE OBJ_MAC IDENT -> IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) VOID IDENT ( CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT , CHAR *p IDENT ) { IDENT IDENT ; STRUCT IDENT * IDENT = IDENT -> IDENT ; IDENT -> IDENT = ( STRUCT IDENT * ) IDENT ; IDENT = IDENT ( INT_CONST , IDENT , ( CHAR *p ) IDENT , &v IDENT , IDENT , IDENT ) ; IF ( IDENT > INT_CONST ) IDENT ( ( STRUCT IDENT * ) IDENT ) ; ELSE { ( *v IDENT [ IDENT ] . IDENT ) ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; IF ( IDENT && IDENT && IDENT ) IDENT ( IDENT ) ; } IDENT -> IDENT = IDENT ; RETURN ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ INT_CONST << INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) -> IDENT . IDENT )
2  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) + IDENT * SIZEOF ( STRUCT IDENT ) )
1  #DEFINE OBJ_MAC IDENT [ IDENT / INT_CONST ]
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ! IDENT ) IDENT ( ( UNSIGNED LONG ) IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = IDENT ; GOTO IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( UNSIGNED CHAR *p ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( IDENT == IDENT ) { IF ( IDENT > INT_CONST ) IDENT v-- ; } ELSE { IF ( IDENT < IDENT -> IDENT ) IDENT v++ ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT { IDENT INT_CONST IDENT ; IDENT IDENT ; IDENT IDENT , IDENT ; IDENT IDENT , IDENT ; IDENT INT_CONST IDENT ; IDENT IDENT , IDENT IDENT IDENT ; IDENT INT_CONST IDENT ; IDENT IDENT , IDENT ; IDENT INT_CONST IDENT ; IDENT IDENT }
1  #DEFINE FUNC_MAC ( ) { IDENT ( INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT * ) IDENT , SIZEOF IDENT - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) { STRUCT IDENT IDENT ; IDENT . IDENT = IDENT ; IF ( IDENT ( INT_CONST , IDENT , &v IDENT ) < INT_CONST ) { IDENT ( STRING ) ; } }
25  #DEFINE OBJ_MAC ( ( UNSIGNED CHAR ) ( INT_CONST ) )
18  #DEFINE OBJ_MAC LONG
1  #DEFINE OBJ_MAC DO { IDENT -> IDENT -> IDENT = IDENT ; IF ( IDENT -> IDENT ) IDENT ( IDENT -> IDENT ) ; --v IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) ( {} )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT > IDENT ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IF ( IDENT >= ( IDENT ) ) { IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT [ ( IDENT ) * IDENT + ( IDENT ) ] = ( IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED CHAR ) ( IDENT ) > ( UNSIGNED CHAR ) INT_CONST ) ? ( ( UNSIGNED CHAR ) CHAR_CONST + ( ( UNSIGNED CHAR ) ( IDENT ) - ( UNSIGNED CHAR ) INT_CONST ) ) ?: ( ( UNSIGNED CHAR ) CHAR_CONST + ( UNSIGNED CHAR ) ( IDENT ) ) )
44  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT >= INT_CONST ) IDENT ( IDENT , STRING , IDENT ( IDENT ) ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) + IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT : IDENT , IDENT : IDENT , IDENT : IDENT , IDENT : IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ ( IDENT ) * IDENT + ( IDENT ) / IDENT ] |= ( ( IDENT ) INT_CONST << ( ( IDENT ) % IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) * ( ( IDENT * ) IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IF ( IDENT < INT_CONST ) { IDENT = IDENT + IDENT ; IDENT = ( IDENT ) ( IDENT * -v INT_CONST ) ; } ELSE { IDENT = IDENT ; IDENT = ( IDENT ) IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT * ) ( ( ( UNSIGNED LONG ) ( IDENT ) -> IDENT ) + IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) && ( IDENT ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , ( ( IDENT ) & INT_CONST ) ) ; IDENT ( ( IDENT ) -> IDENT , ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( IDENT * ) ( ( CHAR *p ) IDENT ( IDENT ) + ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { IF ( IDENT ( IDENT , IDENT ) ) RETURN IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , # IDENT , ( IDENT ) , ( IDENT ) IDENT ( INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT + IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ! ( ( IDENT - IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( ) IF ( IDENT ) { IDENT ( IDENT ) ; IDENT ( CHAR_CONST ) ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( ) && ! IDENT ( IDENT ) ) ? INT_CONST ?: ( ( IDENT ) . IDENT [ ( IDENT ) . IDENT v++ ] . IDENT = IDENT , INT_CONST ) )
5  #DEFINE FUNC_MAC ( IDENT ) { IDENT = ( IDENT ) ; GOTO IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ^= ( *v IDENT v++ ) ^ IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? -v INT_CONST ?: ( ( IDENT ) * INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p *p ) ( ( ( IDENT * ) ( IDENT ) ) + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT == INT_CONST ) ? INT_CONST ?: ( ( IDENT & INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ) ? ( IDENT ) ?: ( -v INT_CONST ) )
12  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { INT IDENT ; UNSIGNED LONG IDENT ; IDENT ( &v IDENT , IDENT ) ; IDENT = IDENT ; IDENT ( &v IDENT , IDENT ) ; RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT -> IDENT == IDENT ) * IDENT &= ~ ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT <= IDENT -> IDENT ) ? IDENT -> IDENT + ( IDENT - INT_CONST ) - IDENT -> IDENT ?: IDENT -> IDENT - IDENT -> IDENT - INT_CONST )
3  #DEFINE OBJ_MAC ( FLOAT_CONST / IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v IDENT ( IDENT , IDENT ) | *v IDENT ( IDENT , IDENT ) | *v IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT > IDENT && IDENT != IDENT ) || ( IDENT == IDENT && IDENT < INT_CONST ) ) { IDENT += IDENT ; IF ( IDENT < IDENT -> IDENT . IDENT ) IDENT = IDENT -> IDENT . IDENT ; IF ( IDENT > IDENT -> IDENT . IDENT ) IDENT = IDENT -> IDENT . IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) && IDENT ( ( IDENT ) -> IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + SIZEOF ( LONG ) - INT_CONST ) & ~ ( SIZEOF ( LONG ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( ( CHAR *p ) & ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( ) IF ( ! IDENT ( IDENT ) ) IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT . IDENT [ IDENT ] >> INT_CONST ) * IDENT ( IDENT . IDENT + IDENT ) / INT_CONST , IDENT . IDENT + IDENT ## IDENT ## IDENT ) ; IDENT ( ( IDENT . IDENT [ IDENT ] >> INT_CONST ) * IDENT ( IDENT . IDENT + IDENT ) / INT_CONST , IDENT . IDENT + IDENT ## IDENT ## IDENT ) ; IF ( IDENT ( &v IDENT , INT_CONST , INT_CONST , IDENT ) == INT_CONST ) IDENT ( &v IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( ( IDENT * ) ( IDENT ) ) [ INT_CONST ] ^ ( ( IDENT * ) ( IDENT ) ) [ INT_CONST ] ) )
22  #DEFINE OBJ_MAC ( IDENT - IDENT )
17  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( IDENT IDENT )
4  #DEFINE OBJ_MAC = INT_CONST
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT ) ; IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( INT_CONST , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT ) != ( IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT * ) ( ( CHAR *p ) ( IDENT ) - ( UNSIGNED LONG ) ( &v ( ( IDENT * ) INT_CONST ) -> IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + IDENT , ( IDENT ( IDENT + IDENT ) & ~ IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT / INT_CONST ) << INT_CONST ) | ( IDENT % INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT -> IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ ( ( IDENT ) & IDENT ) >> IDENT ] + ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT == IDENT -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! IDENT ) { IDENT ( IDENT , IDENT ) ; IDENT ( INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ) * ( IDENT ) / ( IDENT )
2  #DEFINE OBJ_MAC ( ( STRUCT IDENT * ) ( &v IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG INT ) ( ( ( ( UNSIGNED LONG INT ) ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( UNSIGNED LONG INT ) ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( UNSIGNED LONG INT ) ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( ( UNSIGNED LONG INT ) ( IDENT ) & INT_CONST ) >> INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT VOLATILE ( STRING IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) IDENT ) + SIZEOF ( IDENT ) - INT_CONST ) & ~ ( SIZEOF ( IDENT ) - INT_CONST ) )
3  #DEFINE FUNC_MAC ( ) ( IDENT ? IDENT -> IDENT ?: INT_CONST )
1  #DEFINE OBJ_MAC IDENT IDENT , IDENT IDENT
21  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) >> INT_CONST )
2  #DEFINE OBJ_MAC IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
13  #DEFINE OBJ_MAC ( ( IDENT ) INT_CONST - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( INT_CONST , INT_CONST ) ; IDENT = IDENT ( INT_CONST ) ; IDENT |= IDENT ( INT_CONST ) << INT_CONST ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) ) << INT_CONST ) + ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT ## IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) [ INT_CONST ] + INT_CONST * ( IDENT ) [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) RETURN ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { WHILE ( IDENT < IDENT ) IDENT = IDENT ( IDENT , IDENT ) ; IDENT -= IDENT ; }
4  #DEFINE FUNC_MAC ( IDENT ) { WHILE ( IDENT < ( IDENT ) ) { IDENT |= ( ( IDENT ) IDENT ) << IDENT ; IDENT += INT_CONST ; } }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT , IDENT ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) -> IDENT + ( IDENT ) ) )
23  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) < ( IDENT ) ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE OBJ_MAC { [ INT_CONST ... IDENT ] = -v INT_CONST }
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { *v ( IDENT ) -> IDENT v++ = ( IDENT ) ; IF ( ( IDENT ) -> IDENT > ( IDENT ) -> IDENT ) ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT = IDENT ( IDENT -> IDENT , IDENT ( IDENT -> IDENT , INT_CONST ) , IDENT , IDENT , IDENT , IDENT , IDENT , INT_CONST , INT_CONST ) ; IDENT ( STRING , IDENT , IDENT , IDENT , IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT -> IDENT . IDENT == IDENT ) IDENT -> IDENT . IDENT = IDENT -> IDENT . IDENT ;
8  #DEFINE OBJ_MAC ( IDENT & ~ IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT -> IDENT . IDENT ) )
2  #DEFINE FUNC_MAC ( ) ( IDENT = IDENT ( ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == CHAR_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , ( IDENT ) -> IDENT . IDENT , ( IDENT ) -> IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT IDENT ; IDENT = IDENT -> IDENT ; IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT == IDENT ) RETURN IDENT ; IDENT = ( UNSIGNED CHAR ) * IDENT v++ ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT > IDENT ) { IDENT ( IDENT ) ; RETURN ( IDENT ) ; } IDENT ( &v IDENT , IDENT ) ; IDENT += SIZEOF ( IDENT ) ; IF ( IDENT ) { IF ( IDENT > IDENT ) { IDENT ( IDENT ) ; RETURN ( IDENT ) ; } IDENT -> IDENT = ( CHAR *p ) IDENT ( IDENT ) ; IF ( ! IDENT -> IDENT ) { IDENT ( IDENT ) ; RETURN ( IDENT ) ; } IDENT ( IDENT -> IDENT , IDENT , IDENT ) ; IDENT += IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( CHAR *p ) ( IDENT ) != ( ( CHAR *p ) ( IDENT ) ) ) IDENT ( ( CHAR *p ) IDENT ) ;
3  #DEFINE FUNC_MAC ( IDENT ) * ( IDENT INT *p ) IDENT ( IDENT )
2  #DEFINE OBJ_MAC ( ~ ( INT_CONST << ( ( SIZEOF ( INT ) * INT_CONST ) - INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT [ INT_CONST ] >= IDENT && IDENT [ IDENT ] != -v INT_CONST ) { IDENT = IDENT [ IDENT ] ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT = IDENT -> IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) ( IDENT ) << IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ INT_CONST ] == INT_CONST || ( IDENT -> IDENT != IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT = IDENT ( IDENT , IDENT , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) ) , IDENT ( IDENT ) = INT_CONST , IDENT ( IDENT ) = INT_CONST )
8  #DEFINE OBJ_MAC ( ! IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ^ IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) ) RETURN IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) >= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT % INT_CONST ) * INT_CONST + ( IDENT >> INT_CONST ) * INT_CONST )
6  #DEFINE OBJ_MAC STRING ;
4  #DEFINE FUNC_MAC ( IDENT ... ) DO { ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) == IDENT ? *v IDENT ?: ( IDENT ) == IDENT - INT_CONST ? *v ( IDENT - INT_CONST ) ?: *v ( IDENT ) ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ? IDENT ?: IDENT ; IDENT ( IDENT , STRING , IDENT ) ; IDENT = IDENT ? IDENT ?: IDENT ; IDENT = INT_CONST ; IDENT ( IDENT , STRING , IDENT )
1  #DEFINE OBJ_MAC { [ INT_CONST ... IDENT ] = IDENT }
1  #DEFINE FUNC_MAC ( ) ( *v IDENT & INT_CONST )
16  #DEFINE OBJ_MAC ( INT_CONST << ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT >= CHAR_CONST ) && ( IDENT <= CHAR_CONST ) ) ? ( IDENT & INT_CONST ) ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ IDENT / IDENT ] |= ( INT_CONST << ( IDENT % IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT ) ; *v ( IDENT ) = IDENT ( IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) -> IDENT + ( IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST * SIZEOF ( UNSIGNED LONG ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING # IDENT STRING # IDENT STRING # IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) DO { CHAR *p IDENT ; IDENT ( ( IDENT ) , STRING , ( ( IDENT ) ? STRING ?: STRING ) , ( IDENT ) , ( ( IDENT ) ? ( IDENT ) ?: STRING ) , ( IDENT ) ) ; FOR ( IDENT = ( IDENT ) ; *v IDENT ; IDENT v++ ) IF ( *v IDENT == CHAR_CONST ) * IDENT = CHAR_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED ) ( IDENT ) >> INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT ( ( IDENT ) , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) << INT_CONST ) | IDENT ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT ( IDENT , IDENT + IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED SHORT ) ( IDENT ) ) > IDENT ) ? ( IDENT + IDENT ) ?: ( IDENT + IDENT ) )
14  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( ( IDENT ) -> IDENT << INT_CONST ) | ( IDENT ) -> IDENT , IDENT )
1  #DEFINE OBJ_MAC ( IDENT ( STRING , IDENT , IDENT ) )
86  #DEFINE OBJ_MAC ( IDENT / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT || ( IDENT ) ) IDENT ( IDENT IDENT STRING , ( IDENT ) , ( LONG ) ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) , STRING , IDENT ) ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT * ) ( IDENT ) ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT + IDENT ) , ( IDENT ) ( IDENT & INT_CONST ) ) , IDENT >>= INT_CONST , IDENT ( ( IDENT + IDENT ) , ( IDENT ) ( IDENT & INT_CONST ) ) , IDENT ( IDENT , IDENT , IDENT ) , IDENT ( ( IDENT + IDENT ) , ( IDENT ) ( IDENT & INT_CONST ) ) , IDENT >>= INT_CONST , IDENT ( IDENT + IDENT , ( IDENT & INT_CONST ) ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) * IDENT -> IDENT ) + ( ( IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING , ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) * ( ( IDENT ) & -v ( IDENT ) ) ) & ( IDENT ) )
12  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( ( ( IDENT ) * INT_CONST + INT_CONST ) / INT_CONST ) , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT != IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) - IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) ) { IDENT ( STRING IDENT STRING # IDENT STRING , IDENT ) ; IDENT ( # IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( ( UNSIGNED LONG ) ( IDENT ) ) - ( ( ( UNSIGNED LONG ) ( IDENT ) ) & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT < IDENT || IDENT >= ( IDENT + IDENT ) ) { IDENT ( STRING , IDENT , IDENT ) ; IDENT ( IDENT ( ) ) ; }
1  #DEFINE OBJ_MAC ( ( IDENT * INT_CONST + IDENT - INT_CONST ) / IDENT )
13  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) { IF ( IDENT == INT_CONST && IDENT ) { IDENT = INT_CONST ; IDENT ( INT_CONST ) ; } }
20  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT ( STRING : STRING ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( ) UNSIGNED CHAR *p IDENT = ( UNSIGNED CHAR *p ) ( IDENT -> IDENT + IDENT ) ; IF ( IDENT -> IDENT > INT_CONST ) IDENT += INT_CONST ; IF ( IDENT -> IDENT & INT_CONST ) { IF ( IDENT > INT_CONST ) IDENT += INT_CONST ; ELSE IF ( IDENT > INT_CONST && IDENT < INT_CONST ) IDENT += INT_CONST ; }
2  #DEFINE OBJ_MAC ( IDENT / SIZEOF ( UNSIGNED LONG ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) CASE IDENT ## IDENT : IDENT . IDENT = IDENT ; BREAK ;
4  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( CHAR *p ) + INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT ) ( ( IDENT * INT_CONST ) + INT_CONST )
2  #DEFINE OBJ_MAC ( ( UNSIGNED SHORT ) INT_CONST * IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) STATIC VOID IDENT ( STRUCT IDENT * IDENT , STRUCT IDENT * IDENT , IDENT ) { STRUCT IDENT * IDENT = ( STRUCT IDENT * ) ( IDENT -> IDENT ) ; IDENT ; IF ( IDENT -> IDENT ) IDENT ( ( STRUCT IDENT * ) IDENT -> IDENT ) ; IDENT ; }
4  #DEFINE OBJ_MAC ( IDENT * IDENT ( ( IDENT + INT_CONST ) / INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) << INT_CONST | ( IDENT ) << INT_CONST | ( IDENT ) << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT + ( ( IDENT ) >> INT_CONST ) )
1  #DEFINE OBJ_MAC FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IDENT IDENT ( STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) ? IDENT ( IDENT ) ?: IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT << INT_CONST | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED LONG *p ) IDENT ) [ ( IDENT ) <= INT_CONST ? ( IDENT ) ?: ( IDENT ) <= INT_CONST ? ( IDENT ) - INT_CONST ?: ( IDENT ) <= INT_CONST ? ( IDENT ) + INT_CONST ?: ( IDENT ) - INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED CHAR ) ( IDENT ) ) <= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) ( ( CHAR *p ) & ( ( STRUCT { CHAR IDENT ; IDENT IDENT ; } *v ) INT_CONST ) -> IDENT - ( CHAR *p ) INT_CONST ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( *v ( ( VOLATILE IDENT * ) ( IDENT + IDENT ) ) ) = IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT -> IDENT |= ( IDENT ) ; IDENT ( IDENT , IDENT , IDENT -> IDENT ) ; }
1  #DEFINE OBJ_MAC ( IDENT * IDENT * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) , IDENT ( ( IDENT ) , IDENT ) | ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & ~ ( ( IDENT ) - INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT && IDENT >= IDENT ) { IDENT ( STRING , IDENT ) ; IDENT IDENT ; IDENT ( CHAR_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ^= IDENT ( IDENT [ INT_CONST ] [ IDENT ] , IDENT . IDENT [ IDENT ] ) ; IDENT ^= IDENT ( IDENT [ INT_CONST ] [ IDENT ] , IDENT . IDENT [ IDENT ] ) ;
1  #DEFINE OBJ_MAC CHAR_CONST , CHAR_CONST , CHAR_CONST , CHAR_CONST , CHAR_CONST , CHAR_CONST , CHAR_CONST , CHAR_CONST , CHAR_CONST
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( ! ( IDENT ) ) IDENT ( # IDENT , IDENT , IDENT ) ; }
32  #DEFINE FUNC_MAC ( ) DO { } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( CHAR *p ) IDENT , IDENT , IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST / ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT , IDENT ) )
12  #DEFINE OBJ_MAC ( IDENT << IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT = IDENT ( IDENT ) ) >= SIZEOF ( IDENT ) ) RETURN -v INT_CONST ; IDENT ( IDENT , IDENT ) , IDENT += IDENT + INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) DO { STRUCT IDENT * IDENT = IDENT ; STRUCT IDENT * IDENT ; DO { IDENT = IDENT ; IF ( IDENT == IDENT ) IDENT = IDENT -> IDENT ; IF ( IDENT == IDENT ) IDENT = IDENT -> IDENT ; IF ( IDENT == IDENT ) IDENT = IDENT -> IDENT ; IF ( IDENT == IDENT ) IDENT = IDENT -> IDENT ; IF ( IDENT == IDENT ) IDENT = IDENT -> IDENT ; IDENT = IDENT -> IDENT - INT_CONST ; IDENT = IDENT -> IDENT ; IDENT ( &v IDENT , IDENT ) ; } WHILE ( IDENT != IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == IDENT || ( IDENT -> IDENT == IDENT && ( IDENT -> IDENT & IDENT ) && IDENT -> IDENT == IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) ; IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT = &v ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) { ; }
3  #DEFINE OBJ_MAC ( IDENT - SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT -> IDENT [ IDENT ] . IDENT = IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT != IDENT ) { IDENT ( IDENT ) ; WHILE ( IDENT ( IDENT ) ) { IF ( IDENT < INT_CONST ) IDENT = INT_CONST ; IDENT = IDENT * INT_CONST + IDENT - CHAR_CONST ; IF ( IDENT == IDENT ) BREAK ; IDENT ( IDENT ) ; } } }
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT , { IDENT : IDENT } , INT_CONST , IDENT , IDENT , INT_CONST } ,
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , &v IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) IDENT ( ( IDENT ) ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT ) ? IDENT ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT ) -> IDENT == IDENT ) IDENT ( ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT == -v INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT v++ ] = ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { ( IDENT ) -> IDENT = INT_CONST ; ( IDENT ) -> IDENT = INT_CONST ; ( IDENT ) -> IDENT = INT_CONST ; } WHILE ( INT_CONST )
28  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) & ( IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( IDENT ) -> IDENT -> IDENT > INT_CONST || IDENT ( ( IDENT ) -> IDENT ) < INT_CONST || IDENT ( ( IDENT ) -> IDENT ) > INT_CONST ) RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC INT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT ## IDENT IDENT ) { STRUCT IDENT * IDENT ; IF ( ! ( IDENT = IDENT ( IDENT ) ) ) RETURN IDENT -> IDENT ( IDENT , IDENT , IDENT ) ; IF ( IDENT == IDENT ) { IF ( IDENT == ( IDENT ## IDENT ) ~ INT_CONST ) IDENT -> IDENT = INT_CONST ; RETURN IDENT ; } ELSE IDENT ## IDENT ( IDENT , IDENT -> IDENT + IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ( &v IDENT , &v IDENT , ( IDENT ) ( &v IDENT ) , IDENT , IDENT , INT_CONST , STRING ) ) GOTO IDENT ; ELSE IF ( ! IDENT ) GOTO IDENT
1  #DEFINE OBJ_MAC ( INT_CONST << IDENT | INT_CONST << IDENT | INT_CONST << IDENT | INT_CONST << IDENT | INT_CONST << IDENT | INT_CONST << IDENT | INT_CONST << IDENT | INT_CONST << IDENT | INT_CONST << IDENT | INT_CONST << IDENT )
1  #DEFINE OBJ_MAC INT_CONST + IDENT ( SIZEOF ( IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( IDENT ( IDENT ( IDENT ( IDENT ( IDENT ( IDENT ) ) ) ) ) ) , IDENT ( IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ( IDENT ) == IDENT ) || ( IDENT ( IDENT ( IDENT ) ) == IDENT ) ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( ! ( IDENT ) -> IDENT ## IDENT ) ( IDENT ) -> IDENT ## IDENT = ( IDENT ) ; ELSE ( IDENT ) -> IDENT ## IDENT -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT ## IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) = IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT -> IDENT [ ( IDENT - INT_CONST ) + ( ( ( IDENT - INT_CONST ) / INT_CONST ) * IDENT ) ] ; IF ( IDENT > INT_CONST ) IDENT |= INT_CONST ; IDENT ( IDENT -> IDENT , IDENT + IDENT -> IDENT [ IDENT - INT_CONST ] , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) -> IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT -> IDENT + IDENT + ( UNSIGNED INT ) ( ( ( STRUCT IDENT * ) ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ) -> IDENT ) * IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT [ ( IDENT ) ] . IDENT , -v ( IDENT ) ( IDENT ) , -v INT_CONST ) ; } WHILE ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) INT_CONST ## IDENT ,
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) IDENT -> IDENT [ IDENT ( IDENT ) ] -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT , IDENT ) ; IDENT = IDENT ( *v IDENT v++ ) ; )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) == INT_CONST )
10  #DEFINE OBJ_MAC IDENT ( IDENT , INT_CONST , STRUCT IDENT )
1  #DEFINE OBJ_MAC IDENT : IDENT ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST && ( IDENT ) <= IDENT )
2  #DEFINE FUNC_MAC ( ) }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) -> IDENT . IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( { REGISTER UNSIGNED LONG IDENT IDENT ( STRING ) ; IDENT IDENT ( STRING : STRING ( IDENT ) : STRING ( IDENT ( IDENT , INT_CONST ) ) ) ; IDENT ; } )
1  #DEFINE OBJ_MAC ( IDENT / ( INT_CONST << IDENT ) )
1  #DEFINE OBJ_MAC { IDENT ( STRING , IDENT , IDENT ) ; GOTO #ERROR ; }
1  #DEFINE FUNC_MAC ( IDENT ) = IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT { IDENT INT_CONST IDENT ; IDENT IDENT ; IDENT IDENT , IDENT ; IDENT IDENT , IDENT ; IDENT INT_CONST IDENT ; IDENT IDENT , IDENT ; IDENT INT_CONST IDENT ; IDENT IDENT IDENT IDENT , IDENT ; IDENT INT_CONST IDENT ; IDENT IDENT }
1  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT -> IDENT . IDENT v++ = ( IDENT ) , IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( IDENT ( ( IDENT ) -> IDENT ) + ( SIZEOF ( IDENT ) - SIZEOF ( IDENT ) ) ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( ) { *v ( VOLATILE UNSIGNED CHAR *p ) ( IDENT -> IDENT ) = INT_CONST ; IDENT ( INT_CONST ) ; *v ( VOLATILE UNSIGNED CHAR *p ) ( IDENT -> IDENT ) = IDENT ; }
10  #DEFINE FUNC_MAC ( ) ( ! ! IDENT )
10  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) > INT_CONST ? ( IDENT ) - INT_CONST ?: ( IDENT ) ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ( ( IDENT ) + ( ( IDENT ) << IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >= INT_CONST && ( IDENT ) < IDENT && ( IDENT ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT += IDENT ( IDENT + IDENT , STRING , # IDENT , IDENT ( IDENT -> IDENT -> IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ) ; IDENT VOLATILE ( STRING # IDENT STRING : : STRING ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( ( LONG ) IDENT ) + INT_CONST + IDENT * IDENT ( ) ) )
2  #DEFINE OBJ_MAC ( IDENT [ IDENT ] . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == INT_CONST )
1  #DEFINE OBJ_MAC INT_CONST IDENT
109  #DEFINE OBJ_MAC ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == IDENT ? STRING ?: IDENT == IDENT ? STRING ?: IDENT == IDENT ? STRING ?: STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( STRING IDENT STRING : : STRING IDENT ( SIZEOF ( IDENT ) , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED ) ( ( IDENT ) + INT_CONST ) <= INT_CONST )
4  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST * SIZEOF ( CHAR ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ) -> IDENT = IDENT ( IDENT ) ; ( IDENT ) -> IDENT = IDENT ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == CHAR_CONST ) || ( ( IDENT ) == CHAR_CONST ) )
3  #DEFINE OBJ_MAC INT_CONST + INT_CONST
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == ( IDENT ) - INT_CONST ) ? ( IDENT ) - INT_CONST ?: ( IDENT ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT &= ~ IDENT ; IDENT |= ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ) = ( IDENT ) ( ( ( IDENT ) ( IDENT ) * ( IDENT ) ( IDENT ) + ( IDENT ) ( IDENT ) * ( IDENT ) ( INT_CONST - ( IDENT ) ( IDENT ) ) + ( IDENT ) INT_CONST ) / INT_CONST )
1  #DEFINE OBJ_MAC FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IDENT v++ ; IDENT >>= INT_CONST ; IF ( IDENT & INT_CONST ) { IDENT v++ ; IDENT |= INT_CONST ; } ELSE { IDENT = INT_CONST ; IDENT &= INT_CONST ; } IF ( IDENT == INT_CONST ) { IDENT >>= INT_CONST ; IDENT |= INT_CONST ; IDENT -> IDENT . IDENT . IDENT [ IDENT v++ ] = IDENT ; IDENT = INT_CONST ; } IF ( IDENT == INT_CONST ) { IDENT >>= INT_CONST ; IDENT &= INT_CONST ; IDENT v++ ; IDENT = INT_CONST ; } IF ( IDENT == INT_CONST ) { IDENT >>= INT_CONST ; IDENT |= INT_CONST ; IDENT -> IDENT . IDENT . IDENT [ IDENT v++ ] = IDENT ; IDENT = INT_CONST ; } IDENT >>= INT_CONST ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( IDENT ) & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { ( IDENT ) -> IDENT = ( IDENT ) ; IDENT ( ) ; ( IDENT ) -> IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) , IDENT ( ( IDENT ) , IDENT ) & ~ ( IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) INT_CONST
19  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT )
24  #DEFINE OBJ_MAC IDENT ( STRING , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT || IDENT ( IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT ) ; IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( UNSIGNED INT ) ( IDENT + IDENT ( IDENT , IDENT [ INT_CONST ] ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT + IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) - CHAR_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT ) , IDENT ( IDENT ) )
1  #DEFINE LONG OBJ_MAC
1  #DEFINE OBJ_MAC DO {
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ( ( IDENT ) , INT_CONST ) ) ) ? -v INT_CONST ?: IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { LONG IDENT , IDENT , IDENT ; WHILE ( IDENT > INT_CONST ) { IDENT = IDENT ( UNSIGNED LONG , IDENT , IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { FOR ( IDENT = INT_CONST ; IDENT < IDENT && ! IDENT ; IDENT v++ ) IDENT ( IDENT / INT_CONST ) ; IF ( ! IDENT ) RETURN -v IDENT ; IDENT ; } IDENT -= IDENT ; IF ( IDENT == IDENT ) IDENT ( IDENT / INT_CONST ) ; } }
4  #DEFINE FUNC_MAC ( IDENT ) DO { WHILE ( IDENT != IDENT ) { STRUCT IDENT * IDENT = IDENT ; IDENT = IDENT -> IDENT ; IDENT ( IDENT ) ; } } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IF ( ( IDENT = IDENT ( IDENT , IDENT ) ) ) RETURN IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ## IDENT , # IDENT , INT_CONST , IDENT , IDENT }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT [ IDENT ] . IDENT [ INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC CONST INT IDENT [ IDENT + INT_CONST ] = IDENT ; IDENT ( IDENT , STRING IDENT ( IDENT ) STRING ) ; IDENT ( IDENT , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( CHAR *p ) IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT = IDENT ; IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , &v IDENT , &v IDENT ) && IDENT ( IDENT , &v IDENT , &v IDENT ) ; IDENT ( IDENT ) ; IF ( ! IDENT ) GOTO IDENT ; IDENT IF ( ! IDENT ) { IDENT ( IDENT ( IDENT -> IDENT ) ) ; } ELSE { IDENT = IDENT IDENT IDENT IDENT ; IDENT ( IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) &= ~ ( INT_CONST << INT_CONST ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) - IDENT
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( &v IDENT ) ; IF ( IDENT ) IDENT ( IDENT , IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) ( *v IDENT ) ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; RETURN ( IDENT ) ; }
4  #DEFINE OBJ_MAC ( INT_CONST * IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC FOR ( IDENT = IDENT ; IDENT < IDENT ; IDENT += INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { STRUCT IDENT IDENT ; IDENT ( IDENT , ( IDENT STRING IDENT STRING , IDENT -> IDENT ) ) ; IF ( ( IDENT = IDENT ( IDENT , IDENT -> IDENT , SIZEOF ( IDENT ) ) ) < INT_CONST ) GOTO IDENT ; IDENT ( ( VOID *p ) & IDENT , ( VOID *p ) IDENT -> IDENT , SIZEOF ( IDENT ) ) ; IF ( IDENT . IDENT != IDENT ) { IDENT ( IDENT STRING , IDENT -> IDENT ) ; IDENT = -v IDENT ; GOTO IDENT ; } IF ( ( IDENT = IDENT ( IDENT , &v IDENT ) ) < INT_CONST ) GOTO IDENT ; IF ( ( IDENT = IDENT ( IDENT , IDENT -> IDENT , SIZEOF ( IDENT ) ) ) < INT_CONST ) GOTO IDENT ; IDENT ( ( VOID *p ) IDENT -> IDENT , ( VOID *p ) & IDENT , SIZEOF ( IDENT ) ) ; GOTO IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT | ( ( IDENT -> IDENT -> IDENT ) << INT_CONST ) | ( ( IDENT -> IDENT ) << INT_CONST ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + IDENT + IDENT ( IDENT ) )
7  #DEFINE FUNC_MAC ( IDENT ) IDENT ## IDENT
1  #DEFINE OBJ_MAC ( ( SIZEOF ( STRUCT IDENT ) * IDENT ) + ( SIZEOF ( STRUCT IDENT ) * IDENT ) + IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( IDENT ) | ( IDENT ) )
5  #DEFINE OBJ_MAC IDENT -> IDENT . IDENT . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED CHAR *p ) ( IDENT ) ) [ INT_CONST ] << INT_CONST ) + ( ( ( UNSIGNED CHAR *p ) ( IDENT ) ) [ INT_CONST ] << INT_CONST ) + ( ( ( UNSIGNED CHAR *p ) ( IDENT ) ) [ INT_CONST ] << INT_CONST ) + ( ( UNSIGNED CHAR *p ) ( IDENT ) ) [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( ) ( *v IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT != INT_CONST ) { IDENT ( IDENT ) ; IDENT = INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT ) SIZEOF ( ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ IDENT / IDENT ] &= ~ ( INT_CONST << ( IDENT % IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) * INT_CONST + INT_CONST ) / INT_CONST )
17  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , INT_CONST , IDENT )
1  #DEFINE OBJ_MAC ( IDENT ( SIZEOF ( IDENT ) ) )
2  #DEFINE OBJ_MAC IDENT ( INT_CONST ) + IDENT ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT -> IDENT
1  #DEFINE OBJ_MAC ( IDENT - IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) , ( IDENT ) -> IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , ( IDENT ) , SIZEOF ( STRUCT IDENT ) )
3  #DEFINE OBJ_MAC STRING IDENT STRING
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ( ( IDENT ) + IDENT , ( IDENT ) ) , IDENT ( ( IDENT ) + IDENT , IDENT ( ( IDENT ) ( ( IDENT ) & INT_CONST ) ) ) ) , ( IDENT ( ( IDENT ) + IDENT , ( IDENT ) + INT_CONST ) , IDENT ( ( IDENT ) + IDENT , IDENT ( ( IDENT ) ( ( IDENT >> INT_CONST ) & INT_CONST ) ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) * IDENT v++ = IDENT >> INT_CONST , *v IDENT v++ = IDENT
30  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IDENT += IDENT ( IDENT , IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IDENT += IDENT ( IDENT , IDENT , ## IDENT ) ; IDENT += IDENT ( IDENT , STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( ( IDENT ) + IDENT ) & ~ ( IDENT ) , ( IDENT ) + IDENT )
2  #DEFINE FUNC_MAC ( ) ( IDENT ( &v IDENT , CHAR_CONST ) )
2  #DEFINE OBJ_MAC FLOAT_CONST * IDENT
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC IDENT ( SIZEOF ( IDENT ) , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , IDENT , ( UNSIGNED ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) != ( IDENT ) IDENT && ( IDENT ) != IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED SHORT IDENT ; IDENT |= IDENT ( IDENT , &v IDENT -> IDENT ) ; IDENT -> IDENT ## IDENT = IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT ( ( IDENT ) IDENT ) , IDENT ( ( IDENT ) IDENT ) , IDENT , IDENT , IDENT -> IDENT . IDENT , IDENT - INT_CONST , IDENT - INT_CONST , IDENT -> IDENT . IDENT + INT_CONST , IDENT -> IDENT . IDENT + INT_CONST , IDENT -> IDENT . IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT ( IDENT * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT . IDENT [ IDENT . IDENT ] = IDENT , IDENT . IDENT = ( IDENT . IDENT + INT_CONST ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , INT_CONST , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( UNSIGNED LONG ) ( IDENT ) < INT_CONST ) IDENT ( IDENT # IDENT STRING , ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST * ( IDENT ) IDENT -> IDENT . IDENT / INT_CONST )
1  #DEFINE OBJ_MAC ( VOID )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + ( UNSIGNED INT ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT = IDENT . IDENT [ IDENT . IDENT ] , IDENT . IDENT = ( IDENT . IDENT + INT_CONST ) & IDENT )
7  #DEFINE OBJ_MAC IDENT STRING IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( CHAR *p ) ( IDENT ) ) - ( CHAR *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = ( IDENT ) ; INT IDENT ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ; IF ( IDENT ) FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { INT IDENT = IDENT ( IDENT ) ; INT IDENT = IDENT ( IDENT ) ; IDENT ( IDENT , STRING , IDENT , IDENT ) ; } ELSE IDENT ( IDENT , INT_CONST * IDENT ) ; }
1  #DEFINE OBJ_MAC { IDENT = IDENT ( IDENT [ IDENT ] . IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT , ( IDENT ) ( ( IDENT ) & INT_CONST ) ) ; IDENT ( IDENT , ( IDENT ) ( ( IDENT ) ( IDENT ) >> INT_CONST ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( IDENT ) + INT_CONST ) << INT_CONST | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { *v ( INT *p ) ( IDENT ) = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT ) & ~ ( ( ( ( INT_CONST << ( IDENT ) ) - INT_CONST ) ) << ( IDENT ) ) ) | ( ( ( IDENT ) & ( ( INT_CONST << ( IDENT ) ) - INT_CONST ) ) << ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) ( IDENT ( ) ? INT_CONST ?: IDENT ( IDENT IDENT , ## IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT ? ( IDENT ) -> IDENT ?: ( IDENT ) -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT + ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) [ IDENT ## IDENT ] = # IDENT
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( &v IDENT -> IDENT -> IDENT , IDENT ) ; IDENT -> IDENT = INT_CONST ; IDENT ( &v IDENT -> IDENT -> IDENT , IDENT ) ; } WHILE ( INT_CONST )
126  #DEFINE OBJ_MAC ( IDENT ) INT_CONST
5  #DEFINE FUNC_MAC ( IDENT ) IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT . IDENT > INT_CONST ) { IDENT ( STRING , IDENT , IDENT , IDENT ( ) ) ; IDENT IDENT ; } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ... ) { IF ( IDENT < ( IDENT + IDENT ) ) IDENT += IDENT ( IDENT , ## IDENT ) ; }
1  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT ) ;
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT , IDENT , ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( ( ( CHAR *p ) IDENT ) + SIZEOF ( STRUCT IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) ? INT_CONST ?: INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT [ ( IDENT ) / IDENT ] |= INT_CONST << ( ( IDENT ) % IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( ( UNSIGNED INT ) ( IDENT ) ) ] & ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) = ( IDENT ) ( IDENT ) )
5  #DEFINE OBJ_MAC ( -v IDENT - INT_CONST )
2  #DEFINE OBJ_MAC { IDENT = IDENT -> IDENT ; IDENT = IDENT -> IDENT ; IDENT = IDENT -> IDENT ; IDENT = IDENT -> IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) & ( IDENT [ ( VOID ) ( IDENT ) , ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( CHAR *p ) IDENT )
5  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) ( IDENT )
10  #DEFINE FUNC_MAC ( IDENT ) { }
1  #DEFINE FUNC_MAC ( IDENT ) ( { IF ( IDENT ) IDENT IDENT ( STRING : STRING ( IDENT ) : : STRING ) ; } )
8  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = ( *v IDENT ) ( ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) << IDENT ) << IDENT | IDENT ( IDENT ) ) << IDENT | IDENT ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT >= INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) FLOAT_CONST * IDENT * ( DOUBLE ) IDENT * ( IDENT / FLOAT_CONST ) / ( DOUBLE ) IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) == IDENT ( IDENT ) ) ? ( IDENT ( ( IDENT ) , ( IDENT ) ) , ( ( IDENT ) [ INT_CONST ] = ( IDENT ) ) , INT_CONST ) ?: ( ( ( IDENT ) [ IDENT ] = ( IDENT ) ) , ( IDENT ) + INT_CONST ) )
2  #DEFINE FUNC_MAC ( ... )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { CHAR *p IDENT ; IDENT ( IDENT , STRING , IDENT ( ) , IDENT ) ; IDENT = IDENT IDENT ; IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) FOR ( ( IDENT ) = ( IDENT ) ; ( IDENT ) != IDENT ; ( IDENT ) = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) UNSIGNED INT IDENT ( VOID ) { UNSIGNED INT IDENT = INT_CONST ; IDENT * IDENT ; IDENT ( IDENT ) IDENT += IDENT -> IDENT ; RETURN IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) RETURN -v IDENT
1  #DEFINE OBJ_MAC ( IDENT * INT_CONST / INT_CONST + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( ( IDENT ( ( IDENT ) , IDENT ) & INT_CONST ) + INT_CONST + ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT != IDENT ) { *v IDENT v++ = CHAR_CONST ; FOR ( IDENT = IDENT ( IDENT ) + INT_CONST ; *v IDENT != CHAR_CONST ; ++v IDENT ) * IDENT v++ = *v IDENT ; }
1  #DEFINE OBJ_MAC ( IDENT > IDENT ? IDENT - IDENT ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( VOLATILE UNSIGNED INT *p ) ( IDENT ) )
1  #DEFINE OBJ_MAC ( -v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( STRUCT IDENT ) + SIZEOF ( STRUCT IDENT ) + ( IDENT ) + INT_CONST + SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT && IDENT ( IDENT ) == IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( ( IDENT ) , IDENT IDENT STRING IDENT , ## IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT -> IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT |= IDENT ( IDENT -> IDENT , &v IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( *v IDENT v++ = IDENT << INT_CONST | IDENT & INT_CONST )
98  #DEFINE OBJ_MAC FLOAT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) & IDENT ? STRING ?: STRING , ( IDENT ) & IDENT ? STRING ?: STRING
1  #DEFINE FUNC_MAC ( #LINE ) & IDENT [ #LINE ] , &v IDENT [ #LINE ] , IDENT , IDENT , IDENT , IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? INT_CONST ?: ( INT_CONST / ( ( IDENT ) * ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( ( IDENT ) ) != IDENT ) { ( *v ( IDENT ( ( IDENT ) ) ) ) ( ( IDENT ) ( IDENT ) , IDENT ) ; } ELSE
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ! IDENT || IDENT >= IDENT ) ; IDENT ( ) ; ( ! IDENT ? IDENT ( INT_CONST ) ?: IDENT ( ( IDENT ) - IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT ) ; IDENT += IDENT
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT , &v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( IDENT ) ; RETURN ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( ( IDENT ) >= IDENT && ( IDENT ) <= IDENT ) || ( ( IDENT ) < IDENT && IDENT ( IDENT ) && IDENT ( IDENT ) != IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + INT_CONST ) & ~ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT [ INT_CONST ] )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT ( STRING )
3  #DEFINE OBJ_MAC { IDENT ( STRING ) ; IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT / IDENT == ( IDENT ) -> IDENT / IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) | ( ( IDENT ) << INT_CONST ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ ( IDENT ) >> ( IDENT ) -> IDENT . IDENT ] )
1  #DEFINE OBJ_MAC ( IDENT . IDENT + IDENT - INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + INT_CONST ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT << IDENT ) | ( IDENT & ( IDENT - INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT <= ( IDENT / INT_CONST ) ? IDENT / INT_CONST ?: IDENT <= ( IDENT / INT_CONST ) ? IDENT / INT_CONST ?: IDENT <= ( IDENT / INT_CONST ) ? IDENT / INT_CONST ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( *v ( ( IDENT * ) & ( IDENT . IDENT [ IDENT ] ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { INT IDENT , IDENT , IDENT ; IDENT IDENT ( STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) : STRING ( -v IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) : STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT -> IDENT . IDENT ) ;
1  #DEFINE OBJ_MAC ( ( IDENT -> IDENT . IDENT == IDENT ) ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) & IDENT -> IDENT ) & ~ ( IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) ? ( ( ( IDENT ) && IDENT ( IDENT ) != IDENT ) ? &v ( IDENT [ IDENT ( IDENT ) ] ) ?: IDENT ) ?: IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC { ( CONST STRUCT IDENT * ) & IDENT , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , STRING }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IDENT IDENT ; IDENT ( IDENT . IDENT . IDENT , IDENT . IDENT . IDENT , IDENT , IDENT ) ; IDENT . IDENT ; } )
20  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) + IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ; IDENT ( IDENT ) ; IDENT ; IDENT ( IDENT ) ; IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + ( IDENT - INT_CONST ) ) / ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) * ( VOLATILE UNSIGNED CHAR *p ) ( IDENT + IDENT ) = IDENT
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( INT *p ) IDENT ) [ IDENT ] = IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) FOR ( ; ( ( IDENT ) = *v ( IDENT ) ) != IDENT ; ( IDENT ) = &v ( IDENT ) -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT -> IDENT , IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( STRING , IDENT ) ; IF ( ! IDENT ( *v IDENT ) ) IDENT ; IDENT = INT_CONST ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; } } } IF ( IDENT > INT_CONST ) IDENT ; IDENT ( STRING , IDENT ) ; IDENT ( STRING , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT IDENT )
8  #DEFINE OBJ_MAC IDENT . IDENT . IDENT [ INT_CONST ]
1  #DEFINE FUNC_MAC ( ) ( IDENT - IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == ( IDENT ) IDENT ) ? IDENT ?: IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { *v IDENT = IDENT ; IDENT = IDENT = IDENT + IDENT - IDENT ; IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) = ( IDENT ) , ( IDENT ) = ( IDENT ) , ( IDENT ) = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) <= ( IDENT ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT * ) ( ( CHAR *p ) ( IDENT ) + IDENT [ IDENT ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( { UNSIGNED LONG IDENT ; IDENT IDENT ( STRING STRING STRING : STRING ( IDENT ) : STRING ( IDENT ) ) ; ( IDENT ) ; } )
1  #DEFINE OBJ_MAC ( ( IDENT - SIZEOF ( VOID *p ) ) / SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) WHILE ( INT_CONST ) { }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC INT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT ## IDENT * IDENT ) { STRUCT IDENT * IDENT = IDENT ( IDENT -> IDENT ) ; IDENT IDENT = ( IDENT -> IDENT -> IDENT == IDENT ) ? INT_CONST ?: IDENT -> IDENT -> IDENT ; IDENT IDENT = IDENT ( IDENT , IDENT -> IDENT , ( IDENT & ~ INT_CONST ) ) ; UNSIGNED LONG IDENT ; IDENT ( &v IDENT -> IDENT , IDENT ) ; IDENT ( IDENT , IDENT -> IDENT . IDENT + IDENT ) ; *v IDENT = IDENT ## IDENT ## IDENT ( IDENT ## IDENT ( IDENT -> IDENT . IDENT + IDENT + ( IDENT & IDENT ) ) ) ; IDENT ( &v IDENT -> IDENT , IDENT ) ; RETURN INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == -v INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) >= INT_CONST ? INT_CONST ?: INT_CONST / ( ( INT_CONST - ( IDENT ) ) * ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT ] [ IDENT ] = IDENT
1  #DEFINE FUNC_MAC ( #LINE , IDENT ) ( ( IDENT ## #LINE ## IDENT ## IDENT ## IDENT >= INT_CONST ) ? ( INT_CONST << IDENT ## #LINE ## IDENT ## IDENT ## IDENT ) ?: ( ( IDENT ## #LINE ## IDENT ## IDENT ## IDENT >= INT_CONST ) ? ( INT_CONST << IDENT ## #LINE ## IDENT ## IDENT ## IDENT ) ?: IDENT ## IDENT ## IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( INT_CONST <= ( IDENT ) ) && ( ( IDENT ) <= INT_CONST ) ) && IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { ( IDENT ) -> IDENT = ( IDENT ) ; IDENT ( ( IDENT ) , ( IDENT ) ) ; IDENT ( ( IDENT ) , ( IDENT ) ) ; IDENT ( ( IDENT ) , ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT . IDENT ; IDENT ( IDENT , IDENT . IDENT ) ; IF ( IDENT . IDENT != &v IDENT . IDENT ) IDENT ( IDENT . IDENT ) ; IDENT = IDENT . IDENT ; }
1  #DEFINE OBJ_MAC IF ( IDENT == -v INT_CONST ) IDENT
1  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT , IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED CHAR *p ) & IDENT ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = ( IDENT -> IDENT & IDENT ) || ! ( IDENT & INT_CONST ) ? ( INT ) IDENT -> IDENT [ IDENT ] ?: ( INT ) ( IDENT -> IDENT [ IDENT & ~ INT_CONST ] >> INT_CONST ) )
3  #DEFINE OBJ_MAC DOUBLE
7  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + IDENT - INT_CONST ) & ~ ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT VOLATILE ( STRING IDENT : : STRING ( IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) >= INT_CONST ? INT_CONST - ( IDENT ) * INT_CONST ?: INT_CONST - ( IDENT ) * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN ( IDENT -> IDENT = IDENT [ INT_CONST - IDENT ] , IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT -> IDENT [ INT_CONST ] << INT_CONST ) | IDENT -> IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( CHAR *p ) & ( IDENT ) , SIZEOF ( IDENT ) )
25  #DEFINE OBJ_MAC ( INT_CONST * IDENT / INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT ( IDENT , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT + ( IDENT ( ( UNSIGNED SHORT ) ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT IDENT = IDENT ( IDENT + IDENT ) ; IDENT IDENT = IDENT ( IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ELSE IF ( ! IDENT ( IDENT , IDENT ) ) IDENT = IDENT
1  #DEFINE OBJ_MAC FOR ( IDENT = IDENT ; IDENT && ! ( IDENT ( IDENT ) & IDENT ) ; IDENT v-- ) ; IF ( ! ( IDENT ( IDENT ) & IDENT ) ) { IDENT ( STRING , IDENT ) ; RETURN ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST * ( ( IDENT ) - INT_CONST ) + IDENT ( ( ( IDENT ) - INT_CONST ) / FLOAT_CONST ) - IDENT ( ( ( IDENT ) - INT_CONST ) / FLOAT_CONST ) + IDENT ( ( ( IDENT ) - INT_CONST ) / FLOAT_CONST ) )
67  #DEFINE FUNC_MAC ( )
1  #DEFINE OBJ_MAC { INT IDENT ; CHAR IDENT [ INT_CONST ] ; IDENT ( IDENT , STRING , IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IDENT ( &v IDENT [ IDENT ( IDENT ) ] , STRING , IDENT [ IDENT ] ) ; } IDENT ( STRING , IDENT ) ; }
1  #DEFINE OBJ_MAC ( ( IDENT / INT_CONST ) & ~ ( SIZEOF ( INT ) - INT_CONST ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT = IDENT
10  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ,
13  #DEFINE OBJ_MAC ( *v ( VOLATILE IDENT * ) ( INT_CONST + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { ( IDENT ) = ( STRUCT IDENT * ) IDENT ( SIZEOF ( STRUCT IDENT ) ) ; ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT + INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) IDENT ( ( IDENT ) [ INT_CONST ] ) << INT_CONST ) | IDENT ( ( IDENT ) [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ( ( IDENT ) , IDENT ) ) RETURN -v INT_CONST ; IF ( IDENT ( ) ) IDENT ( ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT -> IDENT + IDENT ## IDENT * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { UNSIGNED SHORT IDENT , IDENT ; IDENT = ( IDENT ) ; IF ( IDENT <= INT_CONST ) IDENT = INT_CONST ; ELSE IF ( IDENT <= INT_CONST ) IDENT = INT_CONST ; ELSE IF ( IDENT <= INT_CONST ) IDENT = INT_CONST ; ELSE IF ( IDENT <= INT_CONST ) IDENT = INT_CONST ; ELSE IDENT = INT_CONST ; ( IDENT ) = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT . IDENT ) IDENT ( IDENT . IDENT ) ; IF ( IDENT . IDENT ) IDENT ( IDENT . IDENT ) ; IF ( IDENT ) IDENT ( IDENT , IDENT . IDENT ) ; RETURN ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST , SIZEOF ( IDENT ) )
1  #DEFINE OBJ_MAC DO { IF ( IDENT > IDENT ) IDENT ( ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , UNSIGNED CHAR )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , SIZEOF ( IDENT ) ) ;
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) * IDENT = IDENT ( ( IDENT ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + IDENT , ( IDENT ( IDENT + IDENT ) | IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT | ( ( IDENT ) -> IDENT << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( INT_CONST | ( ( IDENT << INT_CONST ) | ( IDENT & INT_CONST ) << INT_CONST ) | ( IDENT & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT IDENT = INT_CONST ; INT IDENT = IDENT ; IDENT ( IDENT ( IDENT , IDENT , IDENT ) ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) - INT_CONST )
7  #DEFINE OBJ_MAC ( *v IDENT -> IDENT -> IDENT ) ( IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT = IDENT ; IDENT ( IDENT ) = IDENT ; IDENT = IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( IDENT ) > IDENT )
1  #DEFINE OBJ_MAC { IDENT ( IDENT , IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST , IDENT ) ; IDENT ( INT_CONST ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , STRUCT IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( ) ; IDENT = IDENT ; IDENT = INT_CONST ; IDENT = IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( ( IDENT ) , IDENT ) ; }
11  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT . IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) ( IDENT ) ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT STRING IDENT , ## IDENT )
2  #DEFINE OBJ_MAC ( IDENT - INT_CONST * SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( ! ( IDENT ) ) { ( VOID ) IDENT ( STRING , # IDENT , IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( CHAR_CONST <= ( IDENT ) && ( IDENT ) <= CHAR_CONST ? ( IDENT ) - CHAR_CONST + INT_CONST ?: CHAR_CONST <= ( IDENT ) && ( IDENT ) <= CHAR_CONST ? ( IDENT ) - CHAR_CONST + INT_CONST ?: ( IDENT ) - CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT & INT_CONST ) IDENT ( IDENT , IDENT , IDENT & INT_CONST , ( IDENT >> INT_CONST ) & INT_CONST , IDENT & INT_CONST , ( IDENT >> INT_CONST ) & INT_CONST )
2  #DEFINE OBJ_MAC ( UNSIGNED INT ) INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT >= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < INT_CONST )
10  #DEFINE OBJ_MAC IDENT ( &v IDENT , &v IDENT )
1  #DEFINE OBJ_MAC ( UNSIGNED LONG ) INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT IDENT ; IDENT = IDENT ( ) ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( UNSIGNED INT , IDENT ( IDENT ) , IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , &v IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < IDENT ( IDENT ) ? ( IDENT ) + INT_CONST ?: ( IDENT ) )
7  #DEFINE OBJ_MAC ( ( ( SIZEOF ( STRUCT IDENT ) + INT_CONST ) & ( ~ INT_CONST ) ) )
3  #DEFINE OBJ_MAC INT_CONST + IDENT + IDENT + IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + IDENT , IDENT ) , IDENT ( IDENT + IDENT , INT_CONST ) )
1  #DEFINE OBJ_MAC ( INT_CONST * SIZEOF ( DOUBLE ) / SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT -> IDENT && IDENT -> IDENT ) ? IDENT -> IDENT ?: IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC INT_CONST | ( ( IDENT - IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) [ ( UNSIGNED ) ( IDENT ) / IDENT ] |= INT_CONST << ( ( UNSIGNED ) ( IDENT ) % IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , ... ) DO { ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STRUCT IDENT IDENT ## IDENT = { . IDENT = IDENT ( IDENT ) , . IDENT = IDENT , . IDENT = IDENT , } ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IDENT ( IDENT , IDENT , ## IDENT ) ; IDENT ( IDENT ) ; RETURN #ERROR ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) ( ( ( IDENT ) ( IDENT ) | ( ( IDENT ) ( IDENT ) << INT_CONST ) ) | ( ( ( IDENT ) ( IDENT ) ( IDENT ) ) << INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IDENT ( STRING , IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT = IDENT ; IDENT = IDENT ; IF ( IDENT ) { IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT , CHAR_CONST ) ; IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , STRING ) ; IF ( IDENT ) IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IF ( IDENT || IDENT != INT_CONST ) IDENT ( IDENT , STRING ) ; IF ( IDENT ) { IDENT ( IDENT , STRING , IDENT ) ; IF ( IDENT != INT_CONST ) IDENT ( CHAR_CONST , IDENT ) ; } IF ( IDENT != INT_CONST ) IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT . IDENT == IDENT ) || IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { STRUCT IDENT IDENT ; IDENT ( IDENT , ( IDENT STRING IDENT STRING , IDENT -> IDENT ) ) ; IF ( ( IDENT = IDENT ( ( VOID *p ) & IDENT , ( VOID *p ) IDENT -> IDENT , SIZEOF ( IDENT ) ) ) < INT_CONST ) GOTO IDENT ; IF ( IDENT . IDENT != IDENT ) { IDENT ( IDENT STRING , IDENT -> IDENT , IDENT . IDENT , IDENT ) ; IDENT = -v IDENT ; GOTO IDENT ; } IF ( ( IDENT = IDENT ( IDENT , &v IDENT ) ) < INT_CONST ) GOTO IDENT ; IDENT = IDENT ( ( VOID *p ) IDENT -> IDENT , ( VOID *p ) & IDENT , SIZEOF ( IDENT ) ) ; GOTO IDENT ; }
73  #DEFINE OBJ_MAC ( IDENT - IDENT * IDENT / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! IDENT ( IDENT ( IDENT ( IDENT ) ) , STRING , INT_CONST ) )
20  #DEFINE OBJ_MAC ( IDENT >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ IDENT ] == CHAR_CONST ) || ( IDENT [ IDENT ] == CHAR_CONST ) )
4  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT )
8  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) -> IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT == ( IDENT ) -> IDENT && ( IDENT ) -> IDENT . IDENT == ( IDENT ) -> IDENT . IDENT && ( IDENT ) -> IDENT == ( IDENT ) -> IDENT && ! ( ( IDENT ) -> IDENT & IDENT ) && ! ( ( IDENT ) -> IDENT & IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT + INT_CONST ) & ~ INT_CONST )
1  #DEFINE OBJ_MAC WHILE ( IDENT ( IDENT ) & IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( VOID ) INT_CONST
1  #DEFINE OBJ_MAC IDENT && ( ( ( IDENT -> IDENT & IDENT ) && IDENT -> IDENT != INT_CONST ) || ( ( IDENT -> IDENT & IDENT ) && ( IDENT -> IDENT != INT_CONST || IDENT -> IDENT != INT_CONST || IDENT -> IDENT != INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED INT ) & ( ( ( STRUCT IDENT * ) IDENT ) -> IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT != ( UNSIGNED LONG ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) + SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( IDENT , IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; RETURN ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( ) IDENT ( INT_CONST , INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT ( STRING STRING STRING STRING : : STRING ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT != IDENT ) { IDENT ( IDENT , STRING , IDENT , IDENT ) ; IDENT ( INT_CONST ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & IDENT ) && ( ( IDENT ) & IDENT ) ) ? INT_CONST ?: ( ( IDENT ) & IDENT ) ? INT_CONST ?: ( ( IDENT ) & IDENT ) ? INT_CONST ?: INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT | IDENT ) ;
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT &= ~ IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT + ( IDENT / INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) ) [ IDENT ( IDENT , IDENT ) ] . IDENT
1  #DEFINE OBJ_MAC ( ( IDENT - INT_CONST ) * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , ( IDENT ) ) != IDENT )
2  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT * ) + SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT > INT_CONST ) IDENT ( IDENT , STRING , IDENT ) ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT = ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT * IDENT ) + IDENT + IDENT + IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & IDENT ) ? IDENT [ IDENT . IDENT ] ?: IDENT [ IDENT . IDENT ]
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ ( IDENT ) >= INT_CONST && ( IDENT ) <= INT_CONST ? ( IDENT ) + INT_CONST ?: ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ) IDENT ( STRING , IDENT , IDENT ) ; IF ( IDENT -> IDENT . IDENT < IDENT * INT_CONST ) IDENT ( IDENT , IDENT * INT_CONST ) ; IDENT -> IDENT . IDENT -= IDENT * INT_CONST ; IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT IDENT ; IDENT . IDENT = ( IDENT ) ; IDENT . IDENT = IDENT ; IDENT ( ( IDENT ) , ( IDENT ) , IDENT | IDENT , &v IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ) -> IDENT -> IDENT ( IDENT , IDENT , ( IDENT ) ( IDENT ) , &v ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... ) IF ( ( ( IDENT -> IDENT >> ( INT_CONST * IDENT ) ) & INT_CONST ) >= IDENT ) IDENT ( IDENT IDENT , ## IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ IDENT ] << INT_CONST ) + ( IDENT [ ( IDENT ) + INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) { INT IDENT , IDENT , IDENT ; STRUCT IDENT * IDENT ; IDENT = IDENT ( IDENT , IDENT ) ; IF ( ! IDENT ) GOTO IDENT ; IDENT = IDENT ; IDENT = IDENT ; IDENT = INT_CONST ; IDENT = IDENT ( IDENT -> IDENT , IDENT ) ; IF ( IDENT ) { IDENT ( IDENT + IDENT , IDENT -> IDENT + IDENT , IDENT - IDENT ) ; IDENT ( IDENT ) ; IDENT = ( UNSIGNED CHAR *p ) IDENT ; IDENT = IDENT ; IDENT = INT_CONST ; IDENT = INT_CONST ; IDENT = INT_CONST ; GOTO IDENT ; } IDENT ( STRING ) ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( UNSIGNED LONG ) IDENT > ( UNSIGNED LONG ) IDENT ) ? IDENT ( IDENT , IDENT , IDENT , IDENT ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT [ IDENT -> IDENT ] . IDENT = INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT . IDENT . IDENT ) & IDENT )
7  #DEFINE OBJ_MAC ( ( IDENT ) ( INT_CONST << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? IDENT + ( IDENT ) ?: INT_CONST )
4  #DEFINE OBJ_MAC STRING IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT + ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT [ IDENT * IDENT / INT_CONST ] & ( INT_CONST << ( ( INT_CONST - ( ( IDENT * IDENT ) & INT_CONST ) - IDENT ) + IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT -> IDENT & IDENT ## IDENT ) { IDENT += IDENT ( IDENT + IDENT , STRING , IDENT ? STRING ?: STRING , # IDENT ) ; IDENT v++ ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) ^ ( IDENT ) ) & ( IDENT - INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { UNION IDENT IDENT ; IDENT . IDENT = ( IDENT ) ; IDENT . IDENT [ IDENT ] += ( IDENT ) ; ( IDENT ) = IDENT . IDENT ; } )
7  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { UNSIGNED LONG IDENT ; IDENT ( IDENT ) ; IDENT ( ) ; IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT ) != IDENT ) { IDENT ( ( IDENT ) ( IDENT ) , ( IDENT ) ) ; ( IDENT ) = IDENT ; } ELSE
1  #DEFINE OBJ_MAC ( ( ( ( IDENT * ) & ( IDENT ) ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) / ( IDENT ) )
11  #DEFINE OBJ_MAC ( IDENT + IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT ; IF ( IDENT != IDENT ) { IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) ) { IDENT ( ( IDENT ) ) ; IDENT = IDENT ; }
10  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT ( IDENT ) ]
1  #DEFINE OBJ_MAC IDENT ( ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) - IDENT - INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) { WHILE ( IDENT < ( IDENT ) ) { IDENT ; IDENT |= ( ( IDENT ) IDENT ) << IDENT ; IDENT += INT_CONST ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT != IDENT || IDENT ( ( IDENT ) -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT = &v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( UNSIGNED INT ) ( ( UNSIGNED LONG ) IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ) { IDENT ( IDENT ) ; IDENT = INT_CONST ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) IDENT ( ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT IDENT , IDENT = ( IDENT ) IDENT ; IDENT = INT_CONST ; IF ( ( IDENT = ( IDENT >> INT_CONST ) ) != INT_CONST ) { IDENT += INT_CONST ; IDENT = IDENT ; } IF ( ( IDENT = ( IDENT >> INT_CONST ) ) != INT_CONST ) { IDENT += INT_CONST ; IDENT = IDENT ; } IF ( ( IDENT = ( IDENT >> INT_CONST ) ) != INT_CONST ) { IDENT += INT_CONST ; IDENT = IDENT ; } IF ( ( IDENT = ( IDENT >> INT_CONST ) ) != INT_CONST ) { IDENT += INT_CONST ; IDENT = IDENT ; } IF ( ( IDENT >> INT_CONST ) != INT_CONST ) IDENT v++ ; }
1  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT ) & INT_CONST )
3  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] & IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED ) IDENT ( IDENT + ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( ) DO { IF ( IDENT ( IDENT , INT_CONST ) < INT_CONST ) { IF ( IDENT != IDENT ) RETURN -v INT_CONST ; } ELSE { *v IDENT = INT_CONST ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT > INT_CONST ) ? IDENT - INT_CONST ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT -> IDENT , &v IDENT , INT_CONST , &v IDENT , &v IDENT ) ;
12  #DEFINE FUNC_MAC ( IDENT ... ) DO { } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( ~ IDENT ) ; IDENT ( INT_CONST ) ; IDENT = ( IDENT ( IDENT -> IDENT . IDENT ) & IDENT ) ? INT_CONST ?: INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) * IDENT v++ = ( IDENT -> IDENT & IDENT ) ? IDENT ( IDENT -> IDENT ) ?: ~ ( IDENT ) INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT -> IDENT >> ( IDENT ) ) & INT_CONST )
1  #DEFINE UNSIGNED OBJ_MAC
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( # IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT = IDENT ( IDENT , IDENT ) )
2  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) IDENT << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT + IDENT ) & ( IDENT - INT_CONST ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT -= IDENT ; IDENT |= ( ( IDENT ) << IDENT ) ; DO { IDENT ( IDENT >> INT_CONST ) ; IDENT <<= INT_CONST ; IDENT += INT_CONST ; } WHILE ( IDENT <= INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) WHILE ( IDENT ( IDENT + IDENT ) & INT_CONST ) ; IDENT ( ( IDENT ) , ( IDENT ) + ( IDENT ) )
22  #DEFINE FUNC_MAC ( ) IDENT ( )
24  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( IDENT STRING IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( INT_CONST , IDENT , IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT < IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) STATIC VOID IDENT ## IDENT ## IDENT ( IDENT IDENT , IDENT * IDENT , IDENT * IDENT , IDENT * IDENT ) { IDENT * IDENT = IDENT ( IDENT ) ; IDENT ( IDENT ) ; IF ( ! IDENT ) RETURN ; IDENT ## IDENT ## IDENT ( IDENT , ( IDENT ) IDENT , ( IDENT ) INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( ) ( IDENT += INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( UNSIGNED LONG ) ( IDENT ) )
9  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || ( IDENT ) == CHAR_CONST )
8  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT <= ( IDENT ) -> IDENT ) ? ( IDENT ) -> IDENT + ( IDENT - INT_CONST ) - ( IDENT ) -> IDENT ?: ( IDENT ) -> IDENT - ( IDENT ) -> IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( LONG ) IDENT - ( LONG ) & ( ( ( IDENT * ) INT_CONST ) -> IDENT ) ) )
1  #DEFINE OBJ_MAC ( INT_CONST + ( IDENT >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IF ( IDENT >= ( IDENT ) ) { IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; } }
1  #DEFINE FUNC_MAC ( ) STRUCT IDENT * IDENT = ( STRUCT IDENT * ) IDENT -> IDENT ; IDENT ( ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT && IDENT -> IDENT >= IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT == ( IDENT ) -> IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) IDENT = ( IDENT ) ; IDENT -> IDENT -= IDENT ; IDENT -> IDENT += IDENT ; IDENT -> IDENT -= IDENT ; IDENT -> IDENT += IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( UNSIGNED INT ) ( INT_CONST ) )
1  #DEFINE OBJ_MAC ( IDENT [ IDENT ] || IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { LONG IDENT ; IDENT IDENT ( STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) , STRING ( IDENT ) : STRING ( IDENT ( IDENT ) ) , STRING ( INT_CONST ) ) ; IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( *v ( IDENT ) ) { IDENT ( IDENT IDENT ) ; ( *v ( IDENT ) ) v-- ; IF ( ! ( *v ( IDENT ) ) ) { IDENT ( IDENT STRING ) ; } } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( IDENT ) - IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + ( IDENT - INT_CONST ) ) & ~ ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( CHAR *p ) ( IDENT ) , INT_CONST , ( IDENT ( IDENT ) ) * SIZEOF ( INT ) )
1  #DEFINE OBJ_MAC WHILE ( INT_CONST ) ;
20  #DEFINE OBJ_MAC & IDENT
6  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( ( IDENT ) -> IDENT ) ) ( ( IDENT ) -> IDENT , ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT != IDENT -> IDENT . IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT = IDENT ( IDENT , IDENT , &v ( IDENT ) ) ) ) RETURN -v IDENT ; IDENT += IDENT ; IDENT -= IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) CASE IDENT ( STRUCT IDENT , IDENT . IDENT ) : IDENT [ IDENT ( STRUCT IDENT , IDENT ) / INT_CONST ] = IDENT ; BREAK
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT ) != ( IDENT ) IDENT ) IDENT ( IDENT ) ; ELSE ( IDENT ) = IDENT
4  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT <= ++v IDENT && IDENT <= IDENT ) * IDENT v++ = IDENT ; }
5  #DEFINE OBJ_MAC IDENT [ IDENT ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) WHILE ( IDENT > INT_CONST ) { IDENT v-- ; *v ( CHAR *p ) IDENT = *v ( CHAR *p ) IDENT ; IDENT v++ ; IDENT v++ ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! ( IDENT ) )
4  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT + IDENT ) )
2  #DEFINE OBJ_MAC ( INT ) CHAR_CONST
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( IDENT ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT . IDENT * ( ( DOUBLE ) ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( ) ( IDENT & IDENT ? IDENT ( IDENT , LONG ) ?: IDENT & IDENT ? ( LONG ) ( SHORT ) IDENT ( IDENT , INT ) ?: ( LONG ) IDENT ( IDENT , INT ) )
4  #DEFINE FUNC_MAC ( ) RETURN IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , INT_CONST , IDENT , INT_CONST )
1  #DEFINE OBJ_MAC IDENT [ IDENT / INT_CONST + INT_CONST ]
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT , IDENT , IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) & ( ~ ( INT_CONST << INT_CONST ) )
1  #DEFINE OBJ_MAC ( IDENT | IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) = &v IDENT -> IDENT [ IDENT -> IDENT v++ * IDENT -> IDENT -> IDENT ] )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT * IDENT ) / FLOAT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT = IDENT ( IDENT [ INT_CONST ] ) , ( IDENT ) -> IDENT = IDENT ( IDENT [ INT_CONST ] ) )
120  #DEFINE OBJ_MAC IDENT STRING
12  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { INT IDENT ; FOR ( IDENT = ( IDENT ) - INT_CONST ; IDENT >= INT_CONST ; IDENT v-- ) ( IDENT ) [ IDENT ] = ( IDENT ) [ IDENT ] ; }
1  #DEFINE FUNC_MAC ( ) { IDENT |= INT_CONST ; IDENT ( INT_CONST , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( ( IDENT * ) IDENT ) + INT_CONST ) )
10  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST )
1  #DEFINE OBJ_MAC IF ( IDENT == INT_CONST ) { INT IDENT , IDENT ; INT ( *v IDENT ) ( ) ; INT ( *v IDENT ) ( ) ; IDENT = ( INT ( *v ) ( ) ) IDENT ( IDENT , IDENT ) ; IDENT = ( INT ( *v ) ( ) ) IDENT ( IDENT , IDENT ) ; IDENT = IDENT ( IDENT , IDENT , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST ) ; IDENT = IDENT ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IF ( IDENT == INT_CONST ) IDENT = INT_CONST ; ELSE IDENT = INT_CONST ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) STRUCT IDENT IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT = ( UNSIGNED LONG ) ( &v IDENT ) ; FOR ( ; IDENT < ( UNSIGNED LONG ) ( &v IDENT ) ; IDENT += IDENT ) { IDENT ( IDENT , &v IDENT [ IDENT ( IDENT ) ] . IDENT ) ; IDENT ( IDENT + IDENT ( IDENT ) , INT_CONST ) ; IDENT ( IDENT ) ; IDENT v++ ; } } WHILE ( INT_CONST )
7  #DEFINE OBJ_MAC ( VOID *p ) INT_CONST
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) ; IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) << INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) << INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT ( ) == INT_CONST ? ( IDENT ( &v IDENT , IDENT ( &v IDENT ) ) , ( IDENT = INT_CONST ) ) ?: IDENT v++ )
7  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >= CHAR_CONST && ( IDENT ) <= CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ) ; ( ( *v ( VOLATILE IDENT * ) ( ( IDENT * ) ( ( IDENT + ( IDENT ? INT_CONST ?: INT_CONST ) ) + ( IDENT ) ) ) ) = ( IDENT ) ( IDENT ) ) ; IDENT ( ) ;
1  #DEFINE OBJ_MAC DO { } WHILE ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( ( ( VOLATILE UNSIGNED CHAR *p ) IDENT ) + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) - ( ( IDENT ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT || IDENT ( IDENT ) == IDENT || IDENT ( IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) IDENT ( IDENT ( IDENT ) ) ) -> IDENT . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , &v IDENT -> IDENT -> IDENT . IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT != IDENT ) ( *v IDENT -> IDENT ) ( IDENT ) ;
2  #DEFINE OBJ_MAC ( ( UNSIGNED LONG *p ) ( ( ( CHAR *p ) IDENT ) + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + INT_CONST + INT_CONST ) & ~ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) IDENT ( IDENT ( IDENT , INT_CONST ) ) )
1  #DEFINE OBJ_MAC IDENT -> IDENT &= ~ IDENT ; IDENT -> IDENT |= IDENT ; IDENT ( IDENT -> IDENT , ( STRUCT IDENT * ) IDENT -> IDENT , IDENT -> IDENT ) ; CONTINUE
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT ? STRING ?: STRING )
2  #DEFINE FUNC_MAC ( IDENT ) { *v IDENT v++ = ( IDENT ) ( IDENT ) ; IDENT v-- ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( VOLATILE IDENT * ) IDENT ) [ ( ( IDENT ) ^ INT_CONST ) ] )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , &v IDENT -> IDENT -> IDENT )
3  #DEFINE OBJ_MAC ( ( VOLATILE IDENT * ) INT_CONST )
10  #DEFINE OBJ_MAC VOID *p IDENT ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) < INT_CONST ) ? -v ( IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) + INT_CONST ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) INT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { INT IDENT = IDENT ( IDENT -> IDENT ) ; INT IDENT = IDENT ( IDENT -> IDENT ) ; IF ( IDENT -> IDENT -> IDENT > INT_CONST || IDENT != INT_CONST ) { IDENT ## IDENT ## IDENT ; RETURN IDENT ; } IDENT ## IDENT ( IDENT , IDENT -> IDENT + ( IDENT << INT_CONST ) + ( IDENT ^ IDENT ) , IDENT , IDENT ) ; IDENT ( # IDENT STRING , IDENT -> IDENT -> IDENT , IDENT -> IDENT >> INT_CONST , IDENT -> IDENT & INT_CONST , IDENT , IDENT ## IDENT ## IDENT ( IDENT ) ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , IDENT [ IDENT ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( #ERROR , IDENT , IDENT ) DO { #ERROR = IDENT ( IDENT , ( VOID *p ) IDENT , SIZEOF ( IDENT ) ) ; IF ( #ERROR == INT_CONST ) IDENT = IDENT ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) ) << INT_CONST ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) == CHAR_CONST ) || ( ( ( IDENT ) == CHAR_CONST ) && ( ( ( IDENT ) == CHAR_CONST ) || ( ( ( IDENT ) == CHAR_CONST ) && ( ( IDENT ) == CHAR_CONST ) ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) & ( IDENT [ ( IDENT ) ] . IDENT [ ( IDENT ) ] )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT & IDENT ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC CONST INT IDENT IDENT [ IDENT + INT_CONST ] = IDENT ; IDENT ( IDENT , STRING IDENT ( IDENT ) STRING ) ; IDENT ( IDENT , IDENT ) ;
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT )
2  #DEFINE OBJ_MAC IDENT ( ( IDENT ) + IDENT )
2  #DEFINE OBJ_MAC ( IDENT * INT_CONST * INT_CONST )
2  #DEFINE OBJ_MAC IF ( IDENT < INT_CONST ) IDENT ( ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( UNSIGNED LONG ) IDENT )
5  #DEFINE OBJ_MAC ( INT_CONST << ( INT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( UNSIGNED CHAR ) ( IDENT )
9  #DEFINE OBJ_MAC INT_CONST + IDENT + INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) DO { IDENT * IDENT ; INT IDENT = IDENT ( IDENT -> IDENT ) ; INT IDENT = IDENT ( IDENT -> IDENT ) ; VOLATILE IDENT * IDENT ; IDENT IDENT , IDENT ; UNSIGNED INT IDENT = ( UNSIGNED ) IDENT -> IDENT -> IDENT ; IDENT = ( IDENT * ) IDENT ( IDENT [ IDENT ] , IDENT [ IDENT ] ) ; IF ( IDENT -> IDENT == IDENT && IDENT -> IDENT == IDENT && ( ( IDENT >= INT_CONST && IDENT < INT_CONST ) || ( IDENT >= INT_CONST ) ) ) { *v IDENT = INT_CONST ; RETURN IDENT ; } IDENT = ( ( ( IDENT ) & ( IDENT ) ) << INT_CONST ) ; IDENT = &v IDENT -> IDENT [ IDENT ] . IDENT [ IDENT ] . IDENT [ IDENT >> INT_CONST ] ; IF ( IDENT ( IDENT , IDENT ) ) RETURN IDENT ; *v IDENT = ( IDENT >> IDENT ) & ( IDENT ) ; RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT / SIZEOF ( IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT -> IDENT . IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , INT_CONST )
10  #DEFINE OBJ_MAC UNSIGNED CHAR
7  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT v++ )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT , IDENT ) ; IF ( IDENT -> IDENT -> IDENT == INT_CONST ) RETURN ( IDENT ) ? IDENT ?: IDENT ; }
1  #DEFINE OBJ_MAC ( INT_CONST / ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) UNSIGNED LONG IDENT ; STRUCT IDENT IDENT ; UNION IDENT IDENT ; IDENT IDENT ; UNSIGNED LONG IDENT = ( UNSIGNED LONG ) IDENT - IDENT ; LONG IDENT = ( IDENT / IDENT ) ; STRUCT IDENT * IDENT = *v ( IDENT + IDENT ) ; IF ( IDENT != IDENT ) { IDENT . IDENT = IDENT ( IDENT ) ; IDENT . IDENT . IDENT = *v ( IDENT + IDENT ) ; IDENT = IDENT % IDENT ; ++v IDENT ## IDENT ## IDENT ; IDENT ( &v IDENT -> IDENT , IDENT ) ; } ELSE IDENT ( STRING , IDENT ) ;
2  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST | INT_CONST | ( IDENT - IDENT ) )
6  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , STRING , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) -> IDENT . IDENT <= IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) SIZEOF ( STRUCT IDENT ## IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( IDENT ) -> IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT IDENT = IDENT ( IDENT ) ; IF ( IDENT > IDENT ) { IF ( IDENT == INT_CONST ) * ( --v IDENT ) = CHAR_CONST ; ELSE *v IDENT = CHAR_CONST ; RETURN INT_CONST ; } IDENT ( IDENT , IDENT , IDENT ) ; IDENT += IDENT ; IDENT -= IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = ( ( IDENT ) & INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST )
1  #DEFINE OBJ_MAC { IDENT ( IDENT , IDENT ) ; RETURN ; }
1  #DEFINE OBJ_MAC ( ( SIZEOF IDENT ) / ( SIZEOF IDENT [ INT_CONST ] ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) >= ( IDENT ) && ( IDENT ) <= ( IDENT ) + ( IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT ( IDENT , IDENT + ( ( IDENT ) << INT_CONST ) )
1  #DEFINE OBJ_MAC IDENT = IDENT ; { CHAR *p IDENT ; SWITCH ( IDENT ) { CASE INT_CONST : IDENT = STRING ; BREAK ; CASE INT_CONST : IDENT = STRING ; BREAK ; CASE INT_CONST : IDENT = STRING ; BREAK ; CASE INT_CONST : IDENT = STRING ; BREAK ; CASE INT_CONST : IDENT = STRING ; BREAK ; CASE INT_CONST : IDENT = STRING ; BREAK ; CASE INT_CONST : IDENT = STRING ; BREAK ; CASE INT_CONST : IDENT = STRING ; BREAK ; DEFAULT : IDENT = STRING ; BREAK ; } IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( ) IDENT ( &v IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || IDENT ( IDENT ) || IDENT ( IDENT ) || IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ? FLOAT_CONST ?: FLOAT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) ( ( IDENT ) << INT_CONST | ( IDENT ) << INT_CONST | ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED CHAR ) ( ( IDENT ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( ( CHAR *p ) ( IDENT ) ) + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ INT_CONST ] == CHAR_CONST && IDENT [ INT_CONST ] == CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) / IDENT ] &= ~ ( ( IDENT ) INT_CONST << ( ( IDENT ) % IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT ( IDENT -> IDENT . IDENT + IDENT ) ; IDENT = IDENT ( IDENT -> IDENT . IDENT + IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + IDENT ) & ( IDENT - INT_CONST ) )
2  #DEFINE OBJ_MAC ( ( IDENT ) ( INT_CONST * INT_CONST + INT_CONST ) * INT_CONST * INT_CONST * INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) % INT_CONST == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , -v INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( &v ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT + ( IDENT - INT_CONST ) ] . IDENT = IDENT ; IDENT [ IDENT + ( IDENT - INT_CONST ) ] . IDENT = IDENT ( ( UNSIGNED LONG ) IDENT , ( UNSIGNED LONG ) & IDENT [ IDENT + ( IDENT - INT_CONST ) ] . IDENT ) ; IDENT [ IDENT + ( IDENT - INT_CONST ) ] . IDENT = IDENT ; IDENT [ IDENT + ( IDENT - INT_CONST ) ] . IDENT = IDENT ;
10  #DEFINE OBJ_MAC ( IDENT = INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( { UNSIGNED SHORT IDENT ; IDENT . IDENT = INT_CONST | ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT = IDENT . IDENT ; IDENT ( ) ; IDENT & INT_CONST ; } )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST ? -v INT_CONST * ( IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ IDENT + IDENT ]
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) != IDENT || IDENT ( IDENT ( IDENT ) ) )
1  #DEFINE OBJ_MAC ( IDENT -> IDENT != IDENT -> IDENT )
2  #DEFINE OBJ_MAC IDENT | IDENT | IDENT | IDENT
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT -> IDENT == IDENT ) IDENT ( ( UNSIGNED CHAR *p ) ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( &v ( IDENT ) -> IDENT -> IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED SHORT ) ( *v ( VOLATILE UNSIGNED LONG *p ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT << INT_CONST ) + IDENT )
3  #DEFINE OBJ_MAC ( IDENT + IDENT / INT_CONST )
1  #DEFINE OBJ_MAC ( &v IDENT [ IDENT ( IDENT ) ] )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) * IDENT ) / INT_CONST ) + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ( IDENT , IDENT ( IDENT ) ) ) { IDENT -> IDENT = IDENT ; IDENT = IDENT ( IDENT ) ; IDENT += INT_CONST ; ++v IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { UNSIGNED LONG IDENT = ( IDENT & INT_CONST ) | ( ( IDENT -> IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT -> IDENT -> IDENT & INT_CONST ) << INT_CONST ) ; INT IDENT ; IDENT = IDENT ( STRING , INT_CONST , INT_CONST , IDENT , IDENT , IDENT , ( IDENT ) IDENT ) ; RETURN IDENT ? IDENT ?: IDENT ; }
2  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( IDENT ( ( IDENT ) -> IDENT ) + ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , ( IDENT ) ) ;
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( INT *p ) - INT_CONST )
15  #DEFINE OBJ_MAC SIZEOF ( IDENT )
1  #DEFINE OBJ_MAC ( ( ( IDENT ) ? INT_CONST * INT_CONST * INT_CONST ?: INT_CONST * INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( VOID ) INT_CONST ?: IDENT ( IDENT , IDENT , # IDENT ) )
3  #DEFINE OBJ_MAC { IDENT = IDENT ( IDENT ) ; IDENT &= ~ IDENT -> IDENT ; IDENT ( IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) { IDENT ( IDENT STRING IDENT , IDENT , ## IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( INT_CONST | ( ( ( ( IDENT ) - ( IDENT ) ) >> INT_CONST ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) = ( ( IDENT ) & ~ ( IDENT ) ) | ( ( IDENT ) & ( IDENT ) ) )
3  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT - IDENT . IDENT ) >> IDENT . IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) STRING
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( LONG ) )
1  #DEFINE OBJ_MAC ( ( IDENT -> IDENT <= IDENT -> IDENT ) ? IDENT -> IDENT + IDENT -> IDENT - IDENT -> IDENT - INT_CONST ?: IDENT -> IDENT - IDENT -> IDENT - INT_CONST )
8  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) . IDENT = IDENT ( IDENT )
1  #DEFINE OBJ_MAC IDENT <<= INT_CONST ; IDENT += *v IDENT v++ ; IF ( IDENT = IDENT & INT_CONST ) IDENT ^= ( IDENT >> INT_CONST ) ^ IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT -> IDENT -> IDENT [ IDENT ] | INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & INT_CONST ? STRING ?: STRING )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOLATILE UNSIGNED LONG *p ) ( INT_CONST + IDENT * INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT * IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) )
1  #DEFINE OBJ_MAC UNSIGNED LONG IDENT ; IDENT IDENT ; IDENT ( &v IDENT , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ? ?
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT = IDENT + ( IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT += INT_CONST ) IDENT ( ( IDENT ) + IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) ; IF ( ( IDENT -> IDENT >> INT_CONST ) != INT_CONST && ( IDENT -> IDENT >> INT_CONST ) != INT_CONST ) IDENT -> IDENT = INT_CONST ;
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , ( IDENT ) -> IDENT . IDENT , ( IDENT ) -> IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT , STRING ) , IDENT ( IDENT , IDENT , IDENT , IDENT ) , IDENT ( IDENT , STRING , ( LONG ) IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) + ( ( IDENT ) * ( IDENT ) ) )
3  #DEFINE OBJ_MAC IDENT ( &v IDENT -> IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT - IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT = ( IDENT ) , INT_CONST )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , &v IDENT -> IDENT , IDENT )
2  #DEFINE OBJ_MAC ( FLOAT_CONST * INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( ( IDENT -> IDENT & ~ IDENT & INT_CONST ) | ( ( IDENT -> IDENT << IDENT ) & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) RETURN ( DOUBLE ) IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) - IDENT ) >> IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( IDENT , IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( ( CHAR *p ) IDENT ) ; IF ( IDENT ) IDENT ( ( CHAR *p ) IDENT ) ; IF ( IDENT ) IDENT ( ( CHAR *p ) IDENT ) ; IF ( IDENT ) IDENT ( ( CHAR *p ) IDENT ) ; RETURN ( IDENT ) ; }
1  #DEFINE OBJ_MAC ( IDENT v++ )
1  #DEFINE OBJ_MAC IF ( IDENT ) { INT IDENT ; IDENT = ( IDENT ( IDENT ) + INT_CONST - IDENT + IDENT -> IDENT + INT_CONST ) / INT_CONST - ( IDENT ( IDENT ) + INT_CONST - IDENT ) ; IDENT ( IDENT , IDENT , IDENT , INT_CONST , IDENT , IDENT , -v INT_CONST , -v INT_CONST ) ; } ELSE { IF ( IDENT == IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , IDENT , IDENT + IDENT , IDENT -> IDENT , -v INT_CONST ) ; ELSE IDENT ( IDENT , IDENT , IDENT - ( IDENT -> IDENT != -v INT_CONST ) , INT_CONST , IDENT , IDENT + IDENT , -v INT_CONST , -v INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT & INT_CONST ) RETURN IDENT ; IDENT ( IDENT ( IDENT -> IDENT ) , INT_CONST ) ; IDENT ( IDENT -> IDENT -> IDENT , INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) { IDENT [ INT_CONST ] . IDENT . IDENT = IDENT ( IDENT ) + IDENT ( IDENT ) ; IDENT [ INT_CONST ] . IDENT . IDENT = IDENT ( IDENT ) + IDENT ( IDENT ) ; IDENT [ INT_CONST ] . IDENT . IDENT = IDENT ; IDENT [ INT_CONST ] . IDENT . IDENT = *v IDENT - IDENT ( IDENT ( IDENT ) + IDENT ( IDENT ) ) - IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( IDENT ) [ INT_CONST ] = ( IDENT ) & INT_CONST ; ( IDENT ) [ INT_CONST ] = ( IDENT ) >> INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT += IDENT - ( IDENT / IDENT ) ; IDENT = INT_CONST
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT * ) IDENT ( ( IDENT ) * SIZEOF ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( ( IDENT ) -> IDENT ) IDENT = IDENT ( ( IDENT ) -> IDENT . IDENT , &v IDENT ) ; ELSE IDENT = IDENT ; IF ( IDENT ) IDENT = IDENT ; ELSE { IDENT = IDENT ; IDENT = IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & INT_CONST )
1  #DEFINE OBJ_MAC ( ~ ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) WHILE ( IDENT & INT_CONST ) { IF ( IDENT <= INT_CONST ) RETURN ; IDENT v-- ; IDENT v-- ; IDENT v-- ; *v ( CHAR *p ) IDENT = *v ( CHAR *p ) IDENT ; }
1  #DEFINE OBJ_MAC ( *v ( CHAR *p ) ( IDENT + IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + ( ( IDENT ) - INT_CONST ) ) & ~ ( ( IDENT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ( IDENT ( IDENT , IDENT ) ) != IDENT ( IDENT ( IDENT , IDENT ) ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: INT_CONST + ( ( ( IDENT ) + INT_CONST ) * INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( ) DO { IDENT IDENT ( STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) LONG IDENT , IDENT
4  #DEFINE OBJ_MAC ( ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) )
1  #DEFINE OBJ_MAC ( INT_CONST | INT_CONST | INT_CONST | INT_CONST | INT_CONST | INT_CONST | INT_CONST | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) ( { IDENT ( IDENT STRING IDENT , IDENT , ## IDENT ) ; IDENT ( STRING ) ; } )
11  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , INT )
1  #DEFINE OBJ_MAC IDENT IDENT ; IDENT ( IDENT , STRING ) ; IDENT
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT == IDENT )
16  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT , IDENT , IDENT }
2  #DEFINE FUNC_MAC ( IDENT ) { IF ( ( IDENT ) >> INT_CONST ) IDENT ( STRING , ( IDENT ) ) ; ELSE IDENT ( STRING , ( IDENT ) << INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) - IDENT
2  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT + IDENT + INT_CONST * ( IDENT - INT_CONST ) ) ; IDENT = ( IDENT & INT_CONST ) & ~ ( IDENT ) ; IDENT ( IDENT , IDENT + IDENT + INT_CONST * ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT != IDENT && IDENT -> IDENT . IDENT != IDENT && IDENT ( IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || IDENT ( IDENT ) || IDENT ( IDENT - INT_CONST ) != IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC REGISTER INT IDENT = IDENT ( )
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT , STRING , IDENT , INT_CONST , INT_CONST , IDENT }
4  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) & ( ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT ) )
1  #DEFINE OBJ_MAC { IF ( ! IDENT ) IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ( INT_CONST | ( IDENT << INT_CONST ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) < SIZEOF ( IDENT ) / SIZEOF ( ( IDENT ) [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT ) { IDENT ( ( IDENT ) , STRING , IDENT , IDENT ) ; IDENT ( ( IDENT ) , STRING , IDENT , IDENT ) ; } ELSE { IDENT ( ( IDENT ) , STRING , IDENT , IDENT ) ; IDENT ( ( IDENT ) , STRING , IDENT , IDENT ) ; } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! IDENT ( IDENT , ( IDENT ) , ( IDENT ) ) ) GOTO IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT [ IDENT ( ) ] . IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRUCT IDENT , IDENT )
8  #DEFINE OBJ_MAC IDENT IDENT IDENT IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) <= INT_CONST ) ? ( IDENT ) ?: ( ( IDENT ) == IDENT ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT != IDENT ) { IDENT ( IDENT , IDENT [ IDENT ] ) ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) STRUCT IDENT IDENT = { IDENT , IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = ( UNSIGNED ) IDENT [ IDENT ] [ IDENT ] ; IF ( IDENT ) { IF ( IDENT < INT_CONST ) RETURN IDENT ; IF ( IDENT < INT_CONST ) IDENT = IDENT & INT_CONST ; ELSE IF ( ( ( IDENT * ) IDENT ) -> IDENT & IDENT ) RETURN IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == IDENT ) ? IDENT ?: ( ( IDENT ) == IDENT ) ? IDENT ?: ( ( IDENT ) == IDENT ) ? IDENT ?: ( ( IDENT ) == IDENT ) ? IDENT ?: ( ( IDENT ) == IDENT ) ? IDENT ?: -v INT_CONST )
1  #DEFINE OBJ_MAC IDENT = IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( IDENT * ) ( IDENT ) ) v++ = IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT || ( IDENT ( IDENT ) && IDENT ( IDENT ( IDENT ) ) && ( ( IDENT == IDENT ( IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) && ! ( IDENT ) -> IDENT . IDENT && ! IDENT ( IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT , IDENT ( IDENT , IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT ( IDENT ) )
2  #DEFINE OBJ_MAC ( IDENT ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( ) ; IDENT ( ) ; IDENT ( INT_CONST ) ; } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC IDENT [ IDENT -> IDENT ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( IDENT ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( INT_CONST * IDENT < SIZEOF ( *v IDENT ) ) IDENT ( ( CHAR *p ) IDENT , SIZEOF ( *v IDENT ) ) ; IDENT ( ( CHAR *p ) IDENT , ( CHAR *p ) IDENT , INT_CONST * IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , ( ( IDENT ) >> INT_CONST ) & INT_CONST , ( ( IDENT ) >> INT_CONST ) & INT_CONST , ( ( IDENT ) >> INT_CONST ) & INT_CONST , ( IDENT ) & INT_CONST ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT >> INT_CONST ) & INT_CONST ) | ( IDENT & INT_CONST ) ) ^ INT_CONST )
1  #DEFINE FUNC_MAC ( ) DO { UNSIGNED CHAR *p IDENT = IDENT -> IDENT ; IF ( IDENT -> IDENT == IDENT ) RETURN IDENT ; IDENT -> IDENT <<= INT_CONST ; IF ( IDENT -> IDENT > IDENT ) IDENT -> IDENT = IDENT ; IDENT -> IDENT = ( UNSIGNED CHAR *p ) IDENT ( IDENT -> IDENT , IDENT -> IDENT ) ; IF ( IDENT -> IDENT == IDENT ) RETURN IDENT ; IF ( IDENT != IDENT -> IDENT ) { IDENT = ( IDENT - IDENT ) + IDENT -> IDENT ; IDENT = ( IDENT - IDENT ) + IDENT -> IDENT ; IF ( IDENT ) IDENT = ( IDENT - IDENT ) + IDENT -> IDENT ; IF ( IDENT ) IDENT = ( IDENT - IDENT ) + IDENT -> IDENT ; IF ( IDENT ) IDENT = ( IDENT - IDENT ) + IDENT -> IDENT ; } } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) STATIC INT IDENT ## IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { RETURN IDENT ## IDENT ## IDENT ( IDENT , IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { INT IDENT = IDENT ; IDENT [ IDENT ] . IDENT = ( IDENT ) ; IDENT [ IDENT ] . IDENT = ( IDENT ) ; IDENT [ IDENT ] . IDENT = ( IDENT ) ; IDENT = ( IDENT + INT_CONST ) & ( INT_CONST - INT_CONST ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT * INT_CONST + IDENT * INT_CONST + IDENT )
2  #DEFINE FUNC_MAC ( IDENT ... ) ( { IDENT ( IDENT STRING IDENT ) ; IDENT ( STRING ) ; } )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT != IDENT && ( IDENT ) -> IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p ) IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ( IDENT ) - IDENT ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , SIZEOF ( VOID *p ) ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( INT_CONST | ( ( ( UNSIGNED INT ) IDENT ) << INT_CONST ) | ( ( ( UNSIGNED INT ) IDENT ) << INT_CONST ) | ( IDENT & ~ INT_CONST ) )
15  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) == IDENT || IDENT ( IDENT ) == IDENT ) && IDENT ( IDENT ) != IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) <= ( IDENT ) ) && ( ( IDENT ) <= ( IDENT ) ) )
1  #DEFINE OBJ_MAC IDENT [ IDENT ( ) ]
1  #DEFINE OBJ_MAC STRUCT IDENT *
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( ( IDENT << INT_CONST ) | ( IDENT ) , IDENT ) ; IDENT ( IDENT ) ; }
2  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( UNSIGNED ) )
1  #DEFINE OBJ_MAC { IDENT , { IDENT : INT_CONST } , INT_CONST , IDENT | IDENT | IDENT , IDENT , INT_CONST } ,
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT == IDENT || ( IDENT != INT_CONST && ( IDENT ( IDENT ) == IDENT ? IDENT ( IDENT ) == IDENT && IDENT ( IDENT ) == IDENT ( IDENT ) ?: IDENT ( IDENT , IDENT ) && ! IDENT ( IDENT ) ) ) )
5  #DEFINE OBJ_MAC ( *v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT ) ( ( UNSIGNED ) ( IDENT ) % IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( IDENT = IDENT ( IDENT ) ) != IDENT ) GOTO IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST * IDENT + INT_CONST * IDENT + INT_CONST * IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT ( IDENT ) , &v IDENT , &v IDENT ) ; IDENT ( STRING STRING STRING STRING STRING , IDENT , IDENT ) ; IDENT ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC CHAR IDENT ## IDENT [ ] IDENT = IDENT ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT < INT_CONST ) IDENT |= INT_CONST ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) . IDENT = ( IDENT ) . IDENT = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT * IDENT ; IDENT IDENT ; CHAR IDENT [ IDENT ] ; IDENT ( IDENT , INT_CONST , IDENT ) ; IDENT ( IDENT , IDENT - INT_CONST , STRING , IDENT -> IDENT ) ; IDENT = ( IDENT * ) IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( ! IDENT ) IDENT ( IDENT , STRING ) ; } WHILE ( INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT -> IDENT -> IDENT ) ( IDENT -> IDENT , IDENT , IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , STRUCT IDENT , IDENT )
1  #DEFINE OBJ_MAC IDENT ( INT_CONST , IDENT + INT_CONST ) ; IDENT ( IDENT ) ; }
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT > IDENT ) ? IDENT ?: IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT /= IDENT
9  #DEFINE FUNC_MAC ( IDENT ) # IDENT
25  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ( IDENT + IDENT ) + IDENT ) & INT_CONST , IDENT + IDENT )
1  #DEFINE OBJ_MAC ( ( INT_CONST + IDENT / INT_CONST ) / IDENT )
1  #DEFINE #LINE ( OBJ_MAC . IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT IDENT = IDENT ; IDENT -= INT_CONST ; IDENT >>= INT_CONST ; IDENT &= INT_CONST ; IDENT |= IDENT ; IDENT &= INT_CONST ; IDENT |= INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT -> IDENT , IDENT -> IDENT , IDENT -> IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) * ( IDENT ) = IDENT
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT -> IDENT )
5  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = ( IDENT ) ; IDENT ( &v IDENT -> IDENT , &v IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { CHAR *p IDENT = ( IDENT ) -> IDENT ; *v ( IDENT ) = *v ( IDENT ) ; ( IDENT ) -> IDENT = IDENT ; }
1  #DEFINE OBJ_MAC ( IDENT = ( ( INT_CONST << IDENT ) + INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( LONG ) SIZEOF ( ( ( IDENT * ) INT_CONST ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT ( IDENT , IDENT , IDENT , IDENT ) }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT | IDENT << INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT ## IDENT : IDENT &= ~ ( INT_CONST << IDENT ) ; IDENT = ( IDENT & ( ( ( INT_CONST << IDENT ) << IDENT ) - INT_CONST ) ) | ( ( IDENT & ~ ( ( ( INT_CONST << IDENT ) << IDENT ) - INT_CONST ) ) << INT_CONST ) ; IDENT v++ ; IDENT = ~ IDENT ; GOTO IDENT ## IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) { STRUCT IDENT * IDENT ; STRUCT IDENT * IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( INT_CONST * ( ( IDENT ) / ( IDENT ) ) ) > ( ( ( IDENT ) * INT_CONST ) / ( IDENT ) ) ) ? INT_CONST ?: ( ( ( ( IDENT ) * INT_CONST ) / ( IDENT ) ) - ( INT_CONST * ( ( IDENT ) / ( IDENT ) ) ) ) )
1  #DEFINE OBJ_MAC { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT ( IDENT + IDENT ) ; IF ( IDENT <= IDENT ) WHILE ( IDENT v++ <= IDENT ) { IDENT IDENT = IDENT ; IDENT ( IDENT + IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT [ ( IDENT ) / IDENT ] &= ~ ( INT_CONST << ( ( IDENT ) % IDENT ) ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) ( ( IDENT ) IDENT + ( IDENT ) IDENT ) ) ;
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT * ) IDENT ( SIZEOF ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT ; CONST STRUCT IDENT * IDENT ; FOR ( IDENT = INT_CONST , IDENT = ( IDENT ) -> IDENT ; IDENT < ( IDENT ) -> IDENT ; IDENT v++ , IDENT v++ )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT , IDENT , IDENT , } ,
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) + ( IDENT - INT_CONST ) ) & ~ ( IDENT - INT_CONST ) ) - ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) & ( IDENT - INT_CONST ) ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT != IDENT ) ? IDENT ?: IDENT ( IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT ) ) IDENT += IDENT ( IDENT + IDENT , STRING , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( ( CHAR *p ) IDENT ) + IDENT [ IDENT ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ( CONST IDENT * IDENT , IDENT IDENT , IDENT IDENT [ ] , IDENT * IDENT , IDENT IDENT ) { IDENT IDENT , IDENT ; IDENT IDENT ; IF ( ! IDENT . IDENT . IDENT ) { IDENT * IDENT = &v IDENT [ *v IDENT >> INT_CONST ] ; IDENT * IDENT = IDENT + IDENT ; IDENT = IDENT ( IDENT , IDENT , IDENT ) >> INT_CONST & ~ INT_CONST ; IDENT = IDENT * INT_CONST ; WHILE ( IDENT > INT_CONST ) { IF ( IDENT ( IDENT , ( ( IDENT * ) IDENT ) v++ ) ) RETURN -v IDENT ; IDENT = IDENT ( IDENT ) ; *v IDENT v++ = IDENT >> INT_CONST ; *v IDENT v++ = ( IDENT >> INT_CONST ) & INT_CONST ; IDENT v-- ; } } ELSE { IDENT * IDENT = &v IDENT [ *v IDENT >> INT_CONST ] ; IDENT * IDENT = IDENT + IDENT ; IDENT * IDENT = IDENT + IDENT ; IDENT * IDENT = IDENT + IDENT ; IDENT = IDENT ( IDENT , IDENT , IDENT ) >> INT_CONST & ~ INT_CONST ; IDENT = IDENT * INT_CONST ; WHILE ( IDENT > INT_CONST ) { IF ( IDENT ( IDENT , ( ( IDENT * ) IDENT ) v++ ) ) RETURN -v IDENT ; IDENT = IDENT ( IDENT ) ; *v IDENT v++ = IDENT >> INT_CONST ; *v IDENT v++ = ( IDENT >> INT_CONST ) & INT_CONST ; IF ( IDENT ( IDENT , ( ( IDENT * ) IDENT ) v++ ) ) RETURN -v IDENT ; IDENT = IDENT ( IDENT ) ; *v IDENT v++ = IDENT >> INT_CONST ; *v IDENT v++ = ( IDENT >> INT_CONST ) & INT_CONST ; IDENT v-- ; } } *v IDENT += IDENT ; RETURN IDENT ; }
1  #DEFINE OBJ_MAC { IDENT : IDENT , IDENT : -v INT_CONST , IDENT : INT_CONST , IDENT : IDENT , IDENT : -v INT_CONST , IDENT : IDENT , IDENT : { IDENT : IDENT } , IDENT : INT_CONST , IDENT : INT_CONST , IDENT : INT_CONST , IDENT : INT_CONST , IDENT : INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( ( IDENT + IDENT ) > IDENT ) { IDENT *= INT_CONST ; IDENT = IDENT ( IDENT , IDENT ) ; } IDENT ( IDENT , IDENT ) ; IDENT += IDENT ; }
1  #DEFINE OBJ_MAC ( IDENT || IDENT )
2  #DEFINE OBJ_MAC RETURN
1  #DEFINE OBJ_MAC ( IDENT * ) INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT ## IDENT , IDENT } ,
1  #DEFINE OBJ_MAC { IDENT = ( IDENT | IDENT ) ; IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { VOLATILE UNSIGNED CHAR IDENT ; IDENT = IDENT ( IDENT ) ; IDENT ( IDENT , ( IDENT ) ) ; IDENT ( IDENT , ( IDENT ) ) ; IDENT ( INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT && ( IDENT == INT_CONST ) ) RETURN IDENT ## IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( ( IDENT ) >> INT_CONST ) & IDENT ) | IDENT )
49  #DEFINE OBJ_MAC INT
2  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT -> IDENT ) ( ( CHAR *p ) ( IDENT ) ) [ INT_CONST ] = INT_CONST ; ELSE ( ( CHAR *p ) ( IDENT ) ) [ INT_CONST ] = INT_CONST ; IDENT = IDENT + SIZEOF ( CHAR ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( ( IDENT ) + IDENT ) & INT_CONST ) | ( ( IDENT ( ( IDENT ) + IDENT ) & INT_CONST ) << INT_CONST ) | ( ( IDENT ) ? IDENT ( ( IDENT ) + IDENT ) << INT_CONST ?: INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , REGISTER ) IDENT ( STRING # REGISTER : : STRING ( IDENT -> IDENT [ REGISTER ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { CHAR *p IDENT = ( CHAR *p ) IDENT ; IDENT [ INT_CONST ] = IDENT [ IDENT v++ ] ; IDENT [ INT_CONST ] = IDENT [ IDENT v++ ] ; IDENT [ INT_CONST ] = IDENT [ IDENT v++ ] ; IDENT [ INT_CONST ] = IDENT [ IDENT v++ ] ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT | ( INT_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT ) , IDENT ( IDENT ( IDENT ) ) , ( CHAR *p ) ( IDENT ) , ( IDENT ) , ( IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = -v INT_CONST ; IDENT = IDENT ( IDENT , IDENT , &v IDENT ) ; IDENT ( STRING , IDENT , IDENT , IDENT , ( LONG ) IDENT ) ;
2  #DEFINE OBJ_MAC ( INT_CONST * IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , INT_CONST , SIZEOF ( IDENT ) ) ; { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IDENT [ IDENT ] = ( IDENT ) IDENT -> IDENT [ IDENT ] ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IDENT [ INT_CONST + IDENT ] = ( IDENT ) IDENT -> IDENT [ IDENT ] ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { INT IDENT = ( IDENT ) ; IDENT ( IDENT >> INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( ( ( IDENT ) << INT_CONST ) & INT_CONST ) | IDENT , IDENT ) , IDENT ( ( ( IDENT ) & INT_CONST ) | IDENT | IDENT , IDENT ) , IDENT ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) | IDENT , IDENT ) , IDENT ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) | IDENT | IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | ( ( IDENT -> IDENT == IDENT ) ? ( IDENT | IDENT ) ?: ( IDENT | IDENT ) ) )
2  #DEFINE OBJ_MAC { IF ( IDENT == INT_CONST ) { IDENT IF ( IDENT == INT_CONST ) { IDENT IDENT IF ( IDENT == INT_CONST ) IDENT } } IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT ) ) { IDENT ( ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT ( IDENT ) , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) < ( IDENT ) ? ( IDENT ) < ( IDENT ) || ( IDENT ) >= ( IDENT ) ?: ( IDENT ) < ( IDENT ) && ( IDENT ) >= ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) { ( ( IDENT * ) ( IDENT ) ) [ INT_CONST ] = INT_CONST ; ( ( IDENT * ) ( IDENT ) ) [ INT_CONST ] = IDENT -> IDENT - INT_CONST * SIZEOF ( IDENT ) ; ( ( IDENT * ) ( IDENT ) ) [ INT_CONST ] = IDENT -> IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT . IDENT v++
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( ( IDENT ) IDENT ) + IDENT - INT_CONST ) ^ ( ( IDENT ) IDENT ) ) & ~ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! IDENT ( IDENT , ( IDENT ) , IDENT . IDENT , ( IDENT * ) & IDENT ) ? ( IDENT ( IDENT ) , IDENT ) ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) / IDENT ] & ( ( IDENT ) INT_CONST << ( ( IDENT ) % IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) , ( IDENT ) , SIZEOF ( *v ( IDENT ) ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT . IDENT = ( IDENT ) -> IDENT , IDENT . IDENT = ( IDENT ) -> IDENT , IDENT . IDENT = INT_CONST , IDENT . IDENT = ( IDENT ) -> IDENT , IDENT . IDENT = ( IDENT ) -> IDENT , IDENT . IDENT = IDENT , IDENT . IDENT = ( IDENT ) -> IDENT , IDENT . IDENT = ( IDENT ) -> IDENT , IDENT . IDENT = INT_CONST , IDENT . IDENT = IDENT , IDENT . IDENT [ IDENT ] = INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT IDENT ; IDENT . IDENT = ( IDENT ) ; IDENT . IDENT = IDENT ; IDENT . IDENT = ( IDENT ) ; IDENT . IDENT = ( IDENT ) ; IDENT ( ( IDENT ) , ( IDENT ) , IDENT | IDENT | IDENT | IDENT , &v IDENT ) ; }
1  #DEFINE FUNC_MAC ( ) IDENT . IDENT = IDENT | IDENT
1  #DEFINE OBJ_MAC ( INT_CONST - IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( *v ( IDENT * ) ( IDENT -> IDENT + INT_CONST ) ) )
2  #DEFINE FUNC_MAC ( ) ( IDENT . IDENT != INT_CONST || IDENT . IDENT != INT_CONST || IDENT . IDENT != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) ; IDENT |= ( INT_CONST << IDENT ( ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IDENT ( STRING IDENT STRING , ## IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT [ ( IDENT ) ] . IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT * ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT [ ( INT ) IDENT ] = IDENT ( IDENT ? IDENT ?: IDENT )
1  #DEFINE OBJ_MAC ( ( ( IDENT - INT_CONST ) / INT_CONST ) + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT , &v IDENT -> IDENT , IDENT )
14  #DEFINE OBJ_MAC IDENT IDENT
3  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) DO { IDENT IDENT = ( IDENT ) ; IDENT IDENT = ( IDENT ) ; INT IDENT = ( ! IDENT ) ; INT IDENT = ( ! IDENT ) ; IF ( IDENT || IDENT ) { IDENT = IDENT ( ( IDENT ) -> IDENT . IDENT , &v IDENT ) ; IF ( IDENT ) IDENT ( ( IDENT ) , IDENT ) ; IF ( IDENT ) IDENT ( ( IDENT ) , IDENT ) ; } } WHILE ( INT_CONST )
10  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED ) ( IDENT ) <= INT_CONST ? IDENT [ IDENT ] ?: INT_CONST )
1  #DEFINE OBJ_MAC LONG UNSIGNED INT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { ( IDENT ) [ INT_CONST ] = ( IDENT ) ; ( IDENT ) [ INT_CONST ] = ( IDENT ) ; ( IDENT ) [ INT_CONST ] = ( IDENT ) ; ( IDENT ) [ INT_CONST ] = ( IDENT ) ; ( IDENT ) [ INT_CONST ] = ( IDENT ) ; ( IDENT ) [ INT_CONST ] = ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { UNSIGNED INT IDENT = INT_CONST , IDENT , IDENT = IDENT ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT |= IDENT << INT_CONST ; IF ( IDENT ) GOTO IDENT ; } WHILE ( INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { INT IDENT ; IDENT IDENT = IDENT ( IDENT , IDENT ) ; *v IDENT v++ = *v IDENT v++ ; *v IDENT = CHAR_CONST ; IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IF ( IDENT == -v INT_CONST ) RETURN -v INT_CONST ; ELSE { IDENT += IDENT ; CONTINUE ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT , IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST + IDENT * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT ) ; IDENT ( STRING ) ; IDENT ( STRING , IDENT ) ; IDENT ( STRING ) ; IDENT ( STRING , IDENT ( IDENT , IDENT , INT_CONST , INT_CONST ) ) ; IDENT ( STRING ) ; IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IF ( IDENT == IDENT ) BREAK
6  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( LONG ) ( IDENT ) - ( LONG ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( *v ( ( IDENT ) -> IDENT ) ) ( ( IDENT ) -> IDENT , ( IDENT ) ( IDENT ) , ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT * INT_CONST ) + INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) * IDENT -> IDENT ) + ( ( ( IDENT ) * IDENT -> IDENT ) >> INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) { ( VOID ) IDENT IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST | ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! ( IDENT ) ) IDENT ( STRING , # IDENT , IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( SIZEOF ( STRING ) - INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT ) )
1  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
4  #DEFINE FUNC_MAC ( IDENT , ... )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT ? INT_CONST ?: ( ( IDENT ) == IDENT ? INT_CONST ?: ( ( IDENT ) == IDENT ? INT_CONST ?: INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( ( IDENT ) -> IDENT , STRING ) ; ( IDENT ) -> IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( ( IDENT & ( IDENT ) ) == ( IDENT ) ) IDENT ( IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE OBJ_MAC ( ( ( IDENT ) INT_CONST ) << ( IDENT / INT_CONST ) )
1  #DEFINE OBJ_MAC { STRING }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( ( IDENT ) < ( IDENT ) ) ( IDENT ) = ( IDENT ) ; ELSE IF ( ( IDENT ) > ( IDENT ) ) ( IDENT ) = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT -= IDENT ; IDENT |= ( ( IDENT ) << IDENT ) ; DO { IF ( IDENT && IDENT ( IDENT ) > INT_CONST ) * ( IDENT ( IDENT , INT_CONST ) ) = ( UNSIGNED CHAR ) ( IDENT >> INT_CONST ) ; IDENT <<= INT_CONST ; IDENT += INT_CONST ; } WHILE ( IDENT <= INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( UNSIGNED CHAR *p ) & IDENT ) [ IDENT ]
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) IDENT ( IDENT ) ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT . IDENT <= -v ( INT ) ( ( IDENT ) -> IDENT . IDENT + ( IDENT ) -> IDENT . IDENT * INT_CONST ) ) && ( ( IDENT ) -> IDENT . IDENT <= -v ( INT ) ( ( IDENT ) -> IDENT . IDENT + ( IDENT ) -> IDENT . IDENT * INT_CONST ) ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v IDENT -> IDENT -> IDENT ) ( IDENT -> IDENT , IDENT , IDENT )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( CHAR *p ) ( IDENT ) - IDENT ( IDENT , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT & INT_CONST , IDENT ) ; IDENT ( ( IDENT >> INT_CONST ) & INT_CONST , IDENT ) ; IDENT ( ( IDENT >> INT_CONST ) & INT_CONST , IDENT ) ;
15  #DEFINE OBJ_MAC ( ( IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT & IDENT ) { IDENT ## IDENT ( IDENT , IDENT ( IDENT ) , &v IDENT . IDENT ) ; } IF ( IDENT & IDENT ) { IDENT ( IDENT . IDENT , ( IDENT ) IDENT ) ; IDENT ## IDENT ( IDENT , IDENT ( IDENT ) , IDENT . IDENT ) ; } IF ( IDENT & IDENT ) { IDENT ( IDENT . IDENT , ( IDENT ) IDENT ) ; } } WHILE ( INT_CONST )
7  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ,
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED SHORT IDENT ; IDENT |= IDENT ( IDENT , &v IDENT -> IDENT ) ; IDENT ## IDENT ( IDENT | INT_CONST ) ; }
6  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( VOLATILE IDENT * ) ( IDENT + IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) & INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { INT IDENT = ( IDENT ) ; IDENT ( IDENT >> INT_CONST ) ; IDENT ( IDENT >> INT_CONST ) ; IDENT ( IDENT >> INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
7  #DEFINE OBJ_MAC DO { IDENT ( STRING , IDENT , IDENT ) ; GOTO IDENT ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT - IDENT ) & ( IDENT ) )
11  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT <= IDENT ? IDENT ?: IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT + IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( INT_CONST | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( ( IDENT ) & ~ INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT -> IDENT . IDENT v++ ; IDENT ( IDENT ) ; IDENT -> IDENT = IDENT -> IDENT ; IDENT -> IDENT = IDENT -> IDENT ; IDENT -> IDENT = INT_CONST ; IDENT -> IDENT = IDENT ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; }
5  #DEFINE OBJ_MAC SIZEOF ( DOUBLE )
1  #DEFINE FUNC_MAC ( ) DO { CHAR *p IDENT = IDENT ; CHAR *p IDENT = IDENT ; WHILE ( IDENT < IDENT + SIZEOF ( IDENT ) && ( *v IDENT == CHAR_CONST || *v IDENT == CHAR_CONST || *v IDENT == CHAR_CONST ) ) * IDENT v++ = *v IDENT v++ ; IDENT v-- ; WHILE ( IDENT > IDENT && IDENT ( *v IDENT ) ) IDENT v-- ; IDENT v++ ; *v IDENT v++ = INT_CONST ; IF ( *v IDENT ) IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC { STRING , STRING , STRING , STRING } , { STRING , STRING , STRING , STRING } , { STRING , STRING , STRING , STRING } , { STRING , STRING , STRING , STRING } , { STRING , STRING , STRING , STRING }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT [ ( IDENT ) ] . IDENT -> IDENT , ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT ) v--
2  #DEFINE OBJ_MAC ( INT_CONST == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ) IDENT ( IDENT , IDENT , IDENT )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT ) )
21  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + ( ( IDENT ) >> INT_CONST ) ) / ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ) ( )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( ( IDENT ) - ( IDENT ) == INT_CONST ) IDENT ( IDENT , IDENT ) ; ELSE IF ( ( IDENT ) - ( IDENT ) > INT_CONST ) IDENT ( IDENT , IDENT , SIZEOF ( IDENT ) , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) , INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( ( IDENT ) , INT_CONST ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) -> IDENT == IDENT ) ? IDENT ( IDENT ( IDENT ) ) ?: IDENT ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT |= ( ( IDENT ) IDENT & IDENT ) << IDENT ( IDENT ) ; IDENT |= ( ( IDENT ) ( ( IDENT ^ INT_CONST ) & IDENT ) ) << IDENT ( IDENT ) ; IF ( IDENT v-- == INT_CONST ) { IDENT IDENT = *v IDENT ; IDENT |= IDENT ; IDENT &= ~ IDENT ; *v IDENT v++ = IDENT ; IDENT = INT_CONST ; IDENT = INT_CONST ; IDENT = INT_CONST ; } }
12  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , INT_CONST , INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { UNSIGNED LONG IDENT ; IDENT ( IDENT ) ; IDENT ( ) ; IDENT . IDENT [ IDENT . IDENT ] . IDENT = ( IDENT ) ; IDENT . IDENT [ IDENT . IDENT ] . IDENT = IDENT ; IDENT . IDENT [ IDENT . IDENT ] . IDENT = ( IDENT ) ; IDENT . IDENT [ IDENT . IDENT ] . IDENT = ( LONG ) ( IDENT ) ; IDENT . IDENT = ( IDENT . IDENT + INT_CONST ) & ( IDENT - INT_CONST ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( VOID ) ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << ( IDENT ) ) | ( ( IDENT ) >> ( INT_CONST - ( IDENT ) ) ) )
8  #DEFINE OBJ_MAC SIZEOF ( IDENT ) / SIZEOF ( STRUCT IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IF ( IDENT == IDENT ) { IDENT = IDENT ; } ELSE IF ( IDENT ( IDENT ) ) { IDENT = IDENT ( IDENT ) ; } ELSE { IDENT ( IDENT ) ; IDENT ( IDENT , IDENT = IDENT ( IDENT , IDENT , &v IDENT ) ) ; IF ( ! IDENT ) GOTO IDENT ; } IDENT
1  #DEFINE OBJ_MAC { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT ( IDENT , STRING , ( LONG ) IDENT , ( LONG ) IDENT + IDENT ) ; WHILE ( --v IDENT >= INT_CONST ) { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT ( IDENT , STRING , ( LONG ) IDENT , ( LONG ) ( IDENT + IDENT ) ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) { STRING # IDENT , &v IDENT [ INT_CONST ] . IDENT ## IDENT , SIZEOF ( STRUCT IDENT ) / SIZEOF ( UNSIGNED LONG ) }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) << ( IDENT - INT_CONST ) )
2  #DEFINE OBJ_MAC ( SIZEOF ( VOID *p ) == INT_CONST ? IDENT ?: IDENT )
1  #DEFINE OBJ_MAC ( IDENT ( *v IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { UNSIGNED LONG IDENT , IDENT ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( ) ; IF ( IDENT & ( INT_CONST << INT_CONST ) ) IDENT ( STRING , ( IDENT ) & ( INT_CONST << INT_CONST ) ? STRING ?: STRING ) ; IF ( IDENT ( &v ( IDENT ) -> IDENT ) && ( IDENT ) -> IDENT == IDENT ( ) ) { IDENT ( STRING , IDENT , IDENT ( ) , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT ) ; IDENT ( STRING , ( ( IDENT ) & ( INT_CONST << INT_CONST ) ? STRING ?: STRING ) ) ; } IF ( IDENT ( &v ( IDENT ) -> IDENT ) && ( IDENT ) -> IDENT == IDENT ( ) ) { IDENT ( STRING , IDENT , IDENT ( ) , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT ) ; IDENT ( STRING , ( ( IDENT ) & ( INT_CONST << INT_CONST ) ? STRING ?: STRING ) ) ; } IDENT ( &v ( IDENT ) -> IDENT ) ; ( IDENT ) -> IDENT = IDENT ; ( IDENT ) -> IDENT = IDENT ( ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IDENT ( IDENT , STRING , IDENT ( IDENT ) , IDENT ( &v IDENT -> IDENT ) , IDENT ( &v IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( STRING [ ( IDENT ) & IDENT ] )
2  #DEFINE OBJ_MAC IDENT INT_CONST
4  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT -> IDENT . IDENT -> IDENT ) ( IDENT , IDENT -> IDENT . IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT + ( IDENT ) ( ( UNSIGNED LONG ) ( IDENT ) - ( UNSIGNED LONG ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( *v ( IDENT ) == CHAR_CONST || *v ( IDENT ) == CHAR_CONST || *v ( IDENT ) == CHAR_CONST || *v ( IDENT ) == CHAR_CONST || *v ( IDENT ) == CHAR_CONST || *v ( IDENT ) == CHAR_CONST || *v ( IDENT ) == CHAR_CONST || ( UNSIGNED CHAR ) * IDENT < INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST ? IDENT ( ( ( IDENT ) - INT_CONST ) / INT_CONST , INT_CONST , INT_CONST ) ?: IDENT ( ( ( IDENT ) + INT_CONST ) / INT_CONST , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( INT_CONST & ( IDENT ( ( IDENT ) ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , #ERROR ) { IDENT IDENT = INT_CONST ;
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( ( ( IDENT ) == INT_CONST ) ? INT_CONST ?: ( IDENT ) ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) > ( IDENT ) ? ( ( IDENT ) - ( IDENT ) ) ?: ( ( IDENT ) - ( IDENT ) ) )
6  #DEFINE OBJ_MAC ( ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( *v ( ( ( VOLATILE UNSIGNED CHAR *p ) IDENT ) + IDENT ) = IDENT )
1  #DEFINE OBJ_MAC ( ( ( UNSIGNED LONG ) IDENT ) / ( SIZEOF ( STRUCT IDENT ) & ~ ( SIZEOF ( STRUCT IDENT ) - INT_CONST ) ) )
1  #DEFINE OBJ_MAC LONG IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) ? IDENT ?: IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT == IDENT && IDENT ( IDENT -> IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) -> IDENT + IDENT + ( IDENT ) )
2  #DEFINE OBJ_MAC IDENT ( STRUCT IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST - ( ( ( ( IDENT ) - INT_CONST ) * INT_CONST ) / INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) && IDENT ( IDENT ) < IDENT ) || IDENT ( IDENT ( IDENT ) ) )
1  #DEFINE OBJ_MAC - IDENT
1  #DEFINE FUNC_MAC ( ) IF ( ( IDENT = IDENT ( &v IDENT ) ) != INT_CONST ) RETURN IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) ) >> ( IDENT ) ) & ( ( INT_CONST << ( IDENT ) ) - INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) - IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) & ( ( IDENT ) -> IDENT [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { *v ( IDENT ) -> IDENT v++ = ( IDENT ) ( IDENT ) ; IF ( --v ( IDENT ) -> IDENT == INT_CONST ) IF ( ! IDENT ( IDENT ) ) { IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT >> INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( SIZEOF ( STRUCT IDENT ) - ( IDENT + INT_CONST ) ) + ( ( ( IDENT ) + INT_CONST + INT_CONST ) & ~ INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ( IDENT , IDENT ) ) { UNSIGNED IDENT ; UNSIGNED IDENT ; IDENT = IDENT ( IDENT , IDENT ) ; IDENT = IDENT - IDENT ( INT_CONST ) ; SWITCH ( IDENT ) { CASE IDENT : IDENT ( STRING , IDENT ( IDENT ( IDENT , IDENT ) ) , IDENT ( IDENT ( IDENT , IDENT ) ) , IDENT ( IDENT , IDENT ) ) ; BREAK ; CASE IDENT : IDENT ( STRING , IDENT ( IDENT , IDENT ) ) ; BREAK ; CASE IDENT : CASE IDENT : CASE IDENT : IDENT ( STRING , IDENT ( IDENT , IDENT ) ) ; BREAK ; DEFAULT : IF ( IDENT < INT_CONST ) { IDENT ( STRING , IDENT ( IDENT ( IDENT , IDENT ) ) , IDENT ( IDENT ( IDENT , IDENT ) ) , IDENT , IDENT ( IDENT , IDENT ) ) ; } BREAK ; } } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) ? IDENT ( IDENT , IDENT ) ?: IDENT ( IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) -> IDENT & IDENT ) || ( IDENT ) -> IDENT ) ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT ) , IDENT )
1  #DEFINE OBJ_MAC IDENT = IDENT -> IDENT ; IDENT = IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , STRING , IDENT , IDENT )
4  #DEFINE OBJ_MAC IDENT . IDENT [ INT_CONST ]
1  #DEFINE OBJ_MAC IDENT ( ( IDENT ( STRING ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT . IDENT . IDENT ## IDENT = IDENT . IDENT . IDENT . IDENT ## IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) != IDENT ) && ( ( IDENT ) != ( IDENT ) IDENT ) )
1  #DEFINE OBJ_MAC IDENT ( IDENT , INT_CONST ) ; IDENT ( IDENT , STRING , IDENT , IDENT , STRING ) ; IDENT ( IDENT , STRING , IDENT , IDENT , STRING ) ; IDENT ( IDENT , STRING , IDENT , IDENT , STRING ) ; IDENT ( IDENT , STRING , IDENT , IDENT , STRING ) ; IDENT ( IDENT , STRING , IDENT , IDENT , STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) -> IDENT != -v INT_CONST ) ; IF ( ( IDENT ) -> IDENT == -v INT_CONST ) BREAK ; IDENT ( IDENT , IDENT ) ; ( IDENT ) -> IDENT = -v INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( UNSIGNED CHAR *p ) IDENT . IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( CHAR *p ) ( IDENT ) - IDENT -> IDENT ) + INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED LONG ) IDENT ) - IDENT + IDENT ( ( UNSIGNED LONG ) IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( ! ( IDENT ) ) IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( ) IF ( ! IDENT ( ) ) IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) + ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC { IF ( IDENT -> IDENT == INT_CONST ) RETURN IDENT ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) >= IDENT && ( IDENT ) <= IDENT && IDENT -> IDENT -> IDENT != INT_CONST )
10  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ ( IDENT ) - IDENT ] [ ( INT ) ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) DO { IF ( IDENT >= ( IDENT ) ) IDENT ( IDENT IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT * IDENT = IDENT ( IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , INT_CONST ) ; IF ( ! IDENT ) { IDENT = IDENT ; GOTO IDENT ; } *v IDENT v++ = IDENT ( IDENT ) ; IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT - ( ( IDENT ) -> IDENT - ( IDENT ) -> IDENT ) <= ( IDENT ) ) ? IDENT ( ( IDENT ) , ( IDENT ) ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { VOLATILE INT IDENT , IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ## IDENT , IDENT ## IDENT }
3  #DEFINE OBJ_MAC IDENT ( IDENT , INT_CONST , INT )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( IDENT * ) ( ( ( CHAR *p ) ( ( IDENT ) -> IDENT . IDENT ) ) + IDENT [ IDENT ] ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) << INT_CONST | ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ## IDENT ## IDENT ## IDENT
4  #DEFINE OBJ_MAC ( *v ( VOLATILE UNSIGNED CHAR *p ) INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( INT ) IDENT ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT -> IDENT ) -> IDENT >> INT_CONST ) & INT_CONST ) , ( ( ( IDENT -> IDENT ) -> IDENT >> INT_CONST ) & INT_CONST ) , ( ( IDENT -> IDENT ) -> IDENT & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( ( IDENT ) + IDENT ) | IDENT , ( IDENT ) + IDENT )
26  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) IDENT ( ( IDENT ) + IDENT )
2  #DEFINE OBJ_MAC ( ( CHAR *p ) ( IDENT + INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT -> IDENT == IDENT || IDENT -> IDENT == IDENT ) { IF ( ( ( IDENT ) < IDENT ) ? ( IDENT ) + IDENT > IDENT ?: ( IDENT ) < IDENT ) ( IDENT ) = IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT . IDENT == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED ) ( IDENT ) & IDENT )
134  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) = ( IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) ( IDENT ? INT_CONST ?: IDENT ( IDENT , ## IDENT ) )
1  #DEFINE FUNC_MAC ( ) { UNSIGNED IDENT = INT_CONST ; WHILE ( ( IDENT ( IDENT ( IDENT ) ) & IDENT ) && IDENT ) IDENT v-- ; IF ( ! IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) * ( ( IDENT * ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( ) IDENT . IDENT [ --v IDENT . IDENT ] . IDENT
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ( IDENT , IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , IDENT ( IDENT ) & ~ ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { REGISTER INT IDENT ; REGISTER INT IDENT = IDENT ; WHILE ( INT_CONST ) { IDENT = IDENT ( IDENT ) & ( IDENT ) ; IF ( ( IDENT & ( IDENT ) ) == ( IDENT ) && ( ( IDENT & ( IDENT ) ) == INT_CONST ) ) BREAK ; IF ( --v IDENT == INT_CONST ) GOTO IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT * ) IDENT ( SIZEOF ( IDENT ) * ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT ) + INT_CONST ; IF ( IDENT < IDENT ) GOTO IDENT ; IDENT ( IDENT , IDENT ) ; IDENT += IDENT ; IDENT -= IDENT
4  #DEFINE OBJ_MAC IDENT ( INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT STRING , IDENT , IDENT , ## IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) + IDENT - INT_CONST ) & ~ ( IDENT - INT_CONST ) ) + ( ( ( IDENT ) << IDENT ) & ( IDENT - INT_CONST ) ) )
1  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ~ ( ( IDENT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) IDENT ) >> INT_CONST ) & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , ... ) DO { IF ( IDENT ) { STRUCT IDENT * IDENT = IDENT ( &v IDENT ) ; UNSIGNED LONG IDENT = IDENT -> IDENT ; IDENT -> IDENT = ( UNSIGNED LONG ) ( IDENT ) ; IDENT ( IDENT ) ; IDENT -> IDENT = IDENT ; } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( ( IDENT ) >> IDENT ) & IDENT ) << ( IDENT / INT_CONST ) ) | ( ( IDENT ) & IDENT ) )
35  #DEFINE OBJ_MAC IDENT [ IDENT ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT = IDENT ( ( IDENT ) -> IDENT . IDENT , IDENT ) ; IF ( IDENT ) IDENT = IDENT ; ELSE { IDENT = IDENT ; IDENT = IDENT ; } } WHILE ( INT_CONST )
26  #DEFINE OBJ_MAC IDENT ( )
2  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT == INT_CONST ) { IDENT IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT ) | ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) * ( IDENT ) + ( IDENT ) ) * INT_CONST )
3  #DEFINE OBJ_MAC INT_CONST * INT_CONST * IDENT
6  #DEFINE OBJ_MAC ( ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT = IDENT ( IDENT + INT_CONST , IDENT ) ; IF ( IDENT ) { IDENT = ( IDENT * ) IDENT ( IDENT , IDENT + INT_CONST ) ; IDENT -> IDENT . IDENT = IDENT + INT_CONST ; IDENT -> IDENT . IDENT = INT_CONST ; IDENT -> IDENT . IDENT . IDENT = IDENT ; IDENT -> IDENT . IDENT . IDENT = IDENT ; IDENT -> IDENT . IDENT = IDENT ( IDENT ) ; } ELSE IDENT = IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT VOLATILE ( STRING : : STRING ( IDENT ) , STRING ( IDENT ) ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) >> INT_CONST ) , IDENT ( IDENT ) )
366  #DEFINE OBJ_MAC IDENT ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT ) IDENT << IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) * INT_CONST / IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT &= ~ INT_CONST ; IF ( IDENT == INT_CONST ) IDENT |= INT_CONST ; }
1  #DEFINE FUNC_MAC ( ) WHILE ( IDENT == IDENT ) { IF ( IDENT == IDENT ) GOTO IDENT ; IDENT = IDENT ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT < IDENT ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT , IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT == IDENT ? IDENT ( ( UNSIGNED LONG ) & ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ) << INT_CONST ?: IDENT ( ( UNSIGNED LONG ) & ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ ( IDENT ) ] . IDENT ? ( ( ( IDENT ) [ INT_CONST ] & INT_CONST ) == INT_CONST ) ?: ( ( ( ( IDENT ) [ INT_CONST ] & INT_CONST ) == INT_CONST ) ? ( ( ( IDENT ) [ INT_CONST ] & INT_CONST ) == INT_CONST ) ?: ( ( ( IDENT ) [ INT_CONST ] & INT_CONST ) == INT_CONST ) ) )
68  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , IDENT + INT_CONST , STRUCT IDENT )
63  #DEFINE OBJ_MAC IDENT . IDENT . IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT . IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT : &v IDENT [ IDENT ] . IDENT , IDENT : &v IDENT [ IDENT ] . IDENT , IDENT : ( IDENT ) , IDENT : INT_CONST , IDENT : { IDENT : ( IDENT ) , IDENT : ( IDENT ) , IDENT : INT_CONST } , IDENT : ( IDENT ) ,
20  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) ] & IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < IDENT ? IDENT [ IDENT ] ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT -> IDENT = ( IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT += IDENT [ IDENT ] ; IDENT += IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) , ( UNSIGNED CHAR ) ( IDENT ( IDENT , ( IDENT ) ) | ( IDENT ) ) )
7  #DEFINE FUNC_MAC ( ) IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ( IDENT , ( INT *p ) ( IDENT ) ) ; IF ( IDENT ) BREAK ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ IDENT ] )
82  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( ( IDENT ) -> IDENT ) & INT_CONST ) | ( ( IDENT ( ( IDENT ) -> IDENT ) & INT_CONST ) << INT_CONST ) )
1  #DEFINE OBJ_MAC ( -v ( IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { IDENT IDENT ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v++ ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v++ ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v++ ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v++ ; IDENT ; } )
1  #DEFINE OBJ_MAC ( ( IDENT ) ~ ( INT_CONST | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ## IDENT IDENT ## IDENT ( INT IDENT ) { INT IDENT = IDENT ( IDENT ) ; IDENT ## IDENT IDENT = ( IDENT ## IDENT ) - INT_CONST ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT [ IDENT ] ) ; IF ( IDENT [ IDENT ] == IDENT ) { IDENT ( IDENT STRING # IDENT STRING , IDENT , IDENT ) ; } ELSE { IDENT = IDENT -> IDENT ## IDENT ( IDENT [ IDENT ] , IDENT ( IDENT ) ) ; } RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT ( &v IDENT -> IDENT , &v IDENT -> IDENT , SIZEOF ( IDENT -> IDENT ) ) ) IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p ) ( ( ( UNSIGNED LONG ) ( IDENT ) + IDENT ) & ~ ( IDENT - INT_CONST ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( VOLATILE IDENT * ) IDENT ) [ ( IDENT ) ^ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ( ) , ( ( IDENT * ) IDENT -> IDENT ) -> IDENT += ( IDENT ) - SIZEOF ( IDENT ) , IDENT ( IDENT , ( CHAR *p ) ( IDENT ) + SIZEOF ( IDENT ) , ( IDENT ) - SIZEOF ( IDENT ) ) , ( IDENT ) -> IDENT = ( IDENT ) ( ( CHAR *p ) ( IDENT ) + IDENT ) , IDENT ( IDENT , ( CHAR *p ) & IDENT , SIZEOF ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT IDENT = ( IDENT ) ; ( IDENT ) [ INT_CONST ] = IDENT ( IDENT ) ; ( IDENT ) [ INT_CONST ] = IDENT ( IDENT >> INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) UNSIGNED CHAR IDENT ; CHAR IDENT ## IDENT [ INT_CONST ] ;
4  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST * IDENT . IDENT )
2  #DEFINE OBJ_MAC ( ( INT_CONST * INT_CONST ) / IDENT )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) , IDENT + ( IDENT ) ) ; IDENT ( IDENT + ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT & INT_CONST ) << INT_CONST ) | ( IDENT << INT_CONST ) | INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT [ IDENT ] . IDENT )
1  #DEFINE OBJ_MAC { IDENT IDENT ; IDENT ( &v IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT ) - IDENT ]
2  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( IDENT , IDENT )
27  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! IDENT ( IDENT ) ) { IDENT ( IDENT STRING , ( UNSIGNED LONG ) IDENT ) ; IDENT ( ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IF ( IDENT ( ( IDENT ) -> IDENT ) & IDENT ) BREAK ; IDENT ( ) ; IDENT ( ) ; } }
7  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( IDENT ) / SIZEOF ( ( IDENT ) [ INT_CONST ] ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) DO { IF ( INT_CONST ) IDENT ( STRING ) ; IDENT -> IDENT . IDENT = IDENT ; IDENT ( IDENT + IDENT , IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( ( IDENT ) -> IDENT == IDENT ) IDENT ( &v ( ( IDENT ) -> IDENT ) , IDENT ) ; }
1  #DEFINE OBJ_MAC { ( UNSIGNED LONG ) & IDENT , INT_CONST }
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING ) ; FOR ( IDENT = IDENT ( IDENT ) ; IDENT < INT_CONST ; IDENT v++ ) IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , STRING ) ; IDENT ( IDENT ) ;
1  #DEFINE OBJ_MAC ( IDENT -> IDENT > IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( IDENT ) IDENT ( IDENT , IDENT , IDENT ) ; }
10  #DEFINE OBJ_MAC STRING STRING
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT >> IDENT
9  #DEFINE OBJ_MAC ( IDENT ( IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ? ( IDENT ) ?: IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) * INT_CONST ) / INT_CONST )
1  #DEFINE OBJ_MAC ( INT *p )
1  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) & *v ( IDENT ) ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ( IDENT ) == INT_CONST ) IDENT ( IDENT , IDENT ) ; ELSE IF ( ( IDENT ) > INT_CONST ) IDENT ( IDENT , IDENT , SIZEOF ( IDENT ) , IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & IDENT ) ? STRING ?: STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) && IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , ( CHAR *p ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ) IDENT ( IDENT , INT_CONST , IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ IDENT ( IDENT ) ] . IDENT & IDENT ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( ( IDENT ) ( IDENT + IDENT ) ) , IDENT )
1  #DEFINE OBJ_MAC ( IDENT * ) IDENT ( STRING )
1  #DEFINE OBJ_MAC ( STRUCT IDENT * ) - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( IDENT -> IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ( ( IDENT ) IDENT ( IDENT ) , IDENT ) ) != IDENT ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) * INT_CONST ) + ( ( IDENT ) * INT_CONST ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT != IDENT ) ( *v IDENT -> IDENT ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ? CHAR_CONST ?: CHAR_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ) { IDENT ( IDENT , IDENT STRING ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT = IDENT ( IDENT , IDENT ( IDENT ) , IDENT ) ; IF ( IDENT < INT_CONST ) GOTO IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) += ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , STRING , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT + INT_CONST ) % ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT = ( IDENT ) IDENT ( IDENT , IDENT )
2  #DEFINE OBJ_MAC ( ( ( -v INT_CONST * ( INT_CONST + IDENT ) ) + ( INT_CONST * INT_CONST ) ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ? ( IDENT -> IDENT = ( INT ) ( IDENT ) ) ?: ( IDENT -> IDENT = ( INT ) ( IDENT ) ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT . IDENT . IDENT
2  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) ) { IDENT ( IDENT , STRING , IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >= CHAR_CONST && ( IDENT ) <= CHAR_CONST ? ( IDENT ) - CHAR_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v IDENT -> IDENT ) > INT_CONST || IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC IDENT - IDENT
7  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ( IDENT ) << INT_CONST ) | ( ( ( ( IDENT ) ( IDENT ) ) ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { LONG IDENT = ( IDENT ) / SIZEOF ( IDENT ) ; REGISTER IDENT * IDENT = ( IDENT * ) ( IDENT ) ; REGISTER IDENT * IDENT = ( IDENT * ) ( IDENT ) ; DO { REGISTER IDENT IDENT = *v IDENT ; *v IDENT v++ = *v IDENT ; *v IDENT v++ = IDENT ; } WHILE ( --v IDENT > INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT == IDENT ) IDENT = IDENT ( STRING ) ; IDENT ( IDENT , IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , IDENT ) & IDENT )
9  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT > INT_CONST && ( IDENT ) ) IDENT IDENT ; }
1  #DEFINE FUNC_MAC ( ) ( IDENT [ IDENT ( ) ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) <= SIZEOF ( IDENT ) ? ( IDENT ) ( IDENT ) ?: IDENT ( ( UNSIGNED ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) EXTERN INT IDENT ## IDENT ( INT ) IDENT ( STRING # IDENT ) ; IDENT ( IDENT ## IDENT , STRING # IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ( IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) DO { IF ( IDENT >= IDENT ) IDENT ( STRING IDENT , IDENT , IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC STRING IDENT ( IDENT ) STRING
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) -> IDENT ) - ( IDENT ) -> IDENT . IDENT + ( IDENT ) -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT -> IDENT & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ## IDENT ## IDENT , STRING ) ; IDENT ( IDENT ## IDENT ## IDENT , STRING # IDENT STRING )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT >> INT_CONST ) & INT_CONST ] [ ( IDENT ) & INT_CONST ] )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT )
2  #DEFINE FUNC_MAC ( ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) & ( IDENT -> IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST , &v IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT = ( IDENT -> IDENT ? IDENT ( IDENT -> IDENT ) + INT_CONST ?: INT_CONST ) ; IDENT ( ( VOID *p ) IDENT , &v IDENT ) ; IDENT = IDENT + SIZEOF ( IDENT ) ; IF ( IDENT ) IDENT ( ( VOID *p ) IDENT , IDENT -> IDENT , IDENT ) ; IDENT += IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = ( IDENT * ) IDENT ; *v IDENT = IDENT ; IDENT v++ ; *v IDENT = IDENT
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( IDENT ) & ( IDENT ) ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT ? ( IDENT ) -> IDENT ?: IDENT ( ( IDENT ) , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) = ( ( IDENT ) + INT_CONST ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT [ INT_CONST ] = ( IDENT [ INT_CONST ] & ~ INT_CONST ) | ( IDENT ) << INT_CONST ; IDENT [ INT_CONST ] = ( IDENT [ INT_CONST ] & ~ INT_CONST ) | ( IDENT ) << INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT ) ~ ( ( INT_CONST << INT_CONST ) - INT_CONST ) )
2  #DEFINE OBJ_MAC IDENT *
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( VOID *p ) ( ( CHAR *p ) ( IDENT ) + ( IDENT ) ) )
1  #DEFINE OBJ_MAC IDENT ,
1  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST | INT_CONST << INT_CONST )
1  #DEFINE OBJ_MAC ( ( INT ) ( IDENT - SIZEOF ( STRUCT IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT -> IDENT + ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) + IDENT , ( IDENT ) ) , IDENT ( ( IDENT ) + IDENT , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT -> IDENT &= ~ ( IDENT ) ; IDENT ( IDENT , IDENT , IDENT -> IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT = ( ( IDENT ) -> IDENT & INT_CONST ) | ( ( IDENT ) & INT_CONST ) << INT_CONST )
4  #DEFINE OBJ_MAC IDENT ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED LONG ) ( IDENT ) & IDENT ) == IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT ) SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT . IDENT . IDENT ) IDENT ( STRING , IDENT . IDENT . IDENT , # IDENT , IDENT . IDENT . IDENT )
13  #DEFINE OBJ_MAC UNSIGNED SHORT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , UNSIGNED CHAR )
1  #DEFINE OBJ_MAC ( IDENT + IDENT * ( IDENT / INT_CONST ) * ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) { IDENT &= INT_CONST ; IDENT ( INT_CONST , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ) ? INT_CONST ?: INT_CONST )
1  #DEFINE OBJ_MAC { IDENT = IDENT ; IDENT ( ( ( IDENT - INT_CONST ) >> INT_CONST ) , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) * IDENT >= IDENT ) ? ~ ( UNSIGNED IDENT ) INT_CONST ?: ( ( UNSIGNED IDENT ) INT_CONST << ( IDENT ) * IDENT ) - INT_CONST ,
2  #DEFINE OBJ_MAC IDENT ( IDENT |= INT_CONST , IDENT )
1  #DEFINE OBJ_MAC { IDENT ( IDENT , IDENT ) ; RETURN INT_CONST ; }
3  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT = IDENT ( IDENT , IDENT ) ) < ( IDENT ) ) RETURN -v IDENT ; IDENT += IDENT ; IDENT -= IDENT ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { . IDENT = STRING # IDENT , . IDENT = ( IDENT ) IDENT ## IDENT , . IDENT = ( IDENT ) IDENT ## IDENT , . IDENT = IDENT ( IDENT ## IDENT ## IDENT , IDENT ## IDENT ## IDENT ) << INT_CONST }
2  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST * SIZEOF ( CHAR *p ) / SIZEOF ( INT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ; } WHILE ( --v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) * ( ( IDENT * ) ( IDENT ) + INT_CONST ) , *v ( ( IDENT * ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ( IDENT ) >= IDENT ) | ( ( IDENT ) ( IDENT ) < IDENT ) | ( ( ( ( IDENT ) ( IDENT ) ^ INT_CONST ) < INT_CONST ) & ( ( ( IDENT ) ( IDENT ) & INT_CONST ) != INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ IDENT ] = ( IDENT & IDENT ) | IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , ( ( ( IDENT * ) ( IDENT ) ) - ( ( IDENT * ) ( IDENT ) -> IDENT ) ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( IDENT ) = IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + IDENT , IDENT , IDENT ( IDENT ) ) == INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT + IDENT ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( VOID ) INT_CONST ; , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) [ INT_CONST ] = ( ( ( UNSIGNED LONG ) ( IDENT ) ) >> INT_CONST ) ; ( IDENT ) [ INT_CONST ] = ( ( UNSIGNED LONG ) ( IDENT ) ) >> INT_CONST ; ( IDENT ) [ INT_CONST ] = ( ( UNSIGNED LONG ) ( IDENT ) ) ;
1  #DEFINE OBJ_MAC ( IDENT * ( IDENT + INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT + ( ( IDENT ) << INT_CONST ) + INT_CONST , ( IDENT ) ) )
1  #DEFINE OBJ_MAC ( ( ( IDENT ) INT_CONST << IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT -> IDENT . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { UNSIGNED INT IDENT = INT_CONST , IDENT = IDENT , IDENT = IDENT ; IDENT ( STRING IDENT STRING STRING STRING IDENT STRING STRING STRING IDENT STRING STRING STRING IDENT STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) ) ; IF ( IDENT ) GOTO IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT , IDENT , IDENT ( IDENT ) ) ; IDENT += IDENT ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT ? IDENT ( IDENT ) ?: IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) + INT_CONST
13  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT )
3  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) + SIZEOF ( STRUCT IDENT ) )
4  #DEFINE OBJ_MAC ( IDENT . IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , IDENT ) ; SWITCH ( IDENT ) { CASE IDENT : DEFAULT : IDENT ( STRING ) ; BREAK ; CASE IDENT : IDENT ( STRING ) ; BREAK ; CASE IDENT : IDENT ( STRING ) ; BREAK ; CASE IDENT : IDENT ( STRING ) ; BREAK ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( ( UNSIGNED ) IDENT ) - IDENT )
13  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ,
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT [ IDENT ] . IDENT = ( IDENT ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT [ IDENT . IDENT v++ ] . IDENT = ( IDENT )
1  #DEFINE OBJ_MAC ( ! IDENT || ! IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( ( IDENT ) ) -> IDENT == IDENT ) ? IDENT ( IDENT ( ( IDENT ) ) ) ?: IDENT ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { EXTERN STRUCT IDENT IDENT ## IDENT ; IDENT ( &v IDENT ## IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( &v ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) = ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC IDENT = IDENT
2  #DEFINE FUNC_MAC ( IDENT ) STRUCT IDENT * IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ( IDENT ) - IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) ) + INT_CONST ) & ~ ( INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( ) DO { WHILE ( INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IDENT ( INT_CONST , IDENT + INT_CONST ) ;
24  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ) { IDENT ( IDENT , ( IDENT ) , ( IDENT ) ) ; #ERROR = ( IDENT ) ; GOTO IDENT ; }
3  #DEFINE OBJ_MAC ( VOID *p )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { REGISTER INT IDENT ; REGISTER INT IDENT = IDENT ; WHILE ( INT_CONST ) { IDENT = IDENT ( IDENT ) & ( IDENT ) ; IF ( ( IDENT & ( IDENT ) ) == ( IDENT ) && ( ( IDENT & ( IDENT ) ) == INT_CONST ) ) BREAK ; IDENT ( INT_CONST ) ; IF ( --v IDENT == INT_CONST ) GOTO IDENT ; } }
2  #DEFINE OBJ_MAC ( IDENT ) ( IDENT + INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) * IDENT
4  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , INT_CONST , UNSIGNED INT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , STRING STRING STRING , IDENT , IDENT ( IDENT ) , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT , IDENT -> IDENT . IDENT , IDENT [ IDENT ] )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT & INT_CONST ) << INT_CONST ) | ( IDENT & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ( ( LONG ) ( IDENT ) | ( ( LONG ) ( IDENT ) << IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT + IDENT ) ; }
1  #DEFINE OBJ_MAC IDENT ( ( IDENT * , IDENT * , IDENT * , STRUCT IDENT * ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ( IDENT ) ) ? IDENT ?: IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( IDENT ) == IDENT && ( IDENT ? IDENT ( IDENT ) ?: IDENT ( IDENT ) ) ) || ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ( IDENT ) ) == IDENT && ( IDENT ? IDENT ( IDENT ( IDENT ) ) ?: IDENT ( IDENT ( IDENT ) ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( INT ) ( IDENT ( IDENT ) ) ) & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( STRUCT IDENT ) * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT -> IDENT , &v IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) ) ^ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IF ( ( IDENT . IDENT & ( IDENT ) ) == ( IDENT ) ) { IDENT ( IDENT IDENT IDENT , ## IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) == IDENT ) || ( ( ( IDENT ) & INT_CONST ) == IDENT ) || ( ( ( IDENT ) & INT_CONST ) == IDENT ) || ( ( ( IDENT ) & INT_CONST ) == IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT == &v IDENT )
2  #DEFINE OBJ_MAC IDENT . IDENT |= IDENT
7  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT > IDENT ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( STRING , IDENT ) ; RETURN IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT + IDENT + INT_CONST * ( IDENT - INT_CONST ) ) ; IDENT = ( IDENT & INT_CONST ) | ( IDENT ) ; IDENT ( IDENT , IDENT + IDENT + INT_CONST * ( IDENT - INT_CONST ) )
10  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + INT_CONST ) & ( IDENT - INT_CONST ) )
2  #DEFINE OBJ_MAC ( IDENT < IDENT ? ~ ( ~ ( IDENT ) INT_CONST << IDENT ) ?: ~ ( IDENT ) INT_CONST )
2  #DEFINE OBJ_MAC ( ( UNSIGNED INT *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT ) = IDENT ; IDENT ( IDENT ) = IDENT ; IDENT ( IDENT ) = IDENT ; IDENT ( IDENT ) = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT ) , ( IDENT ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... ) IDENT * IDENT ; IDENT ( &v IDENT -> IDENT ) ; IDENT = IDENT -> IDENT ; IDENT ( STRING # IDENT STRING , IDENT -> IDENT , IDENT ) ; IF ( ! IDENT ) { IF ( IDENT -> IDENT == IDENT ) { IDENT ( STRING # IDENT STRING # IDENT STRING # IDENT STRING ) ; IDENT ( ) ; } IDENT ( &v IDENT -> IDENT ) ; IF ( IDENT -> IDENT ) IDENT -> IDENT ( IDENT ) ; RETURN ; }
1  #DEFINE OBJ_MAC ( ( STRUCT IDENT * ) ( -v INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( ( VOLATILE UNSIGNED LONG *p ) ( IDENT ) ) = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) . IDENT = ( IDENT ) . IDENT , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT ) ; IDENT ( IDENT , STRING )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT != IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , INT_CONST , INT_CONST , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) ? ( IDENT * ) ( ( STRUCT IDENT * ) IDENT + INT_CONST ) ?: ( IDENT * ) ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , IDENT , SIZEOF ( IDENT ) ) , IDENT = IDENT ( IDENT , IDENT ) , IDENT += SIZEOF ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + IDENT + IDENT ( IDENT ) * INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT && IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST + ( IDENT ) + INT_CONST + INT_CONST ) & ~ INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( VOLATILE UNSIGNED INT *p ) ( IDENT | IDENT ) ) )
13  #DEFINE FUNC_MAC ( ) ( IDENT * ) IDENT ( ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( ( IDENT * ) ( IDENT ) + INT_CONST ) )
3  #DEFINE OBJ_MAC ( ( VOLATILE UNSIGNED CHAR *p ) INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) || ! IDENT ( IDENT , STRING ) )
7  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT ( IDENT -> IDENT . IDENT [ ( IDENT ) ] , ( IDENT ) , ( IDENT ) ) ; } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC ( ! IDENT && ! IDENT ( ) )
2  #DEFINE OBJ_MAC * IDENT v++ = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT . IDENT = ( STRUCT IDENT * ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = IDENT ( IDENT , IDENT , IDENT ) + IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ; ( *v ( VOLATILE IDENT * ) ( IDENT + ( ( IDENT ) IDENT ( IDENT ) & INT_CONST ) ) = ( IDENT & INT_CONST ) ) ; IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT = ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST )
3  #DEFINE FUNC_MAC ( ) IDENT = IDENT ( IDENT , &v IDENT , IDENT )
1  #DEFINE OBJ_MAC ( INT_CONST + ( ( IDENT >> INT_CONST ) > IDENT ? ( IDENT >> INT_CONST ) ?: IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT ? INT_CONST ?: INT_CONST )
2  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( SHORT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >= IDENT ) && ( IDENT < ( IDENT + IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT >= INT_CONST ) { IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >= INT_CONST && ( IDENT ) <= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IDENT IDENT ; IDENT . IDENT = ( LONG ) ( IDENT ) ; IDENT . IDENT . IDENT = ( IDENT ) ? ( IDENT ) ?: INT_CONST ; IDENT . IDENT . IDENT = INT_CONST ; IDENT . IDENT ; } )
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT == INT_CONST )
1  #DEFINE OBJ_MAC { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT ( IDENT + IDENT ) ; IF ( IDENT >= INT_CONST ) WHILE ( --v IDENT >= INT_CONST ) { IDENT IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT ( IDENT + IDENT ) ; } }
1  #DEFINE OBJ_MAC IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? STRING ?: STRING )
1  #DEFINE OBJ_MAC IDENT = IDENT << INT_CONST + INT_CONST ;
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT && IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT * IDENT + INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || IDENT ( IDENT ) || IDENT ( IDENT ) )
3  #DEFINE OBJ_MAC VOLATILE
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) & ( ( IDENT ) IDENT ) -> IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) CHAR *p IDENT ## IDENT ( VOID ) { RETURN IDENT ( IDENT ) ; }
1  #DEFINE OBJ_MAC ( ( IDENT * INT_CONST * INT_CONST ) - INT_CONST )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / ( SIZEOF ( INT ) + SIZEOF ( INT *p ) ) )
3  #DEFINE FUNC_MAC ( IDENT ) IF ( ! IDENT ( IDENT , ( IDENT ) ) ) GOTO IDENT ;
8  #DEFINE FUNC_MAC ( IDENT ) ( ( ( INT *p ) ( IDENT ) ) [ -v INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) -> IDENT . IDENT v++ )
2  #DEFINE OBJ_MAC ( VOID *p ) ( INT_CONST )
2  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ;
5  #DEFINE OBJ_MAC ( ( CHAR_CONST << INT_CONST ) + ( CHAR_CONST << INT_CONST ) + ( CHAR_CONST << INT_CONST ) + ( CHAR_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT [ IDENT ] . IDENT ) || IDENT ( IDENT [ IDENT ] . IDENT ) || IDENT ( IDENT [ IDENT ] . IDENT ) || IDENT ( IDENT [ IDENT ] . IDENT ) )
2  #DEFINE OBJ_MAC IDENT ( SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( UNSIGNED LONG ) ( IDENT ) + ( IDENT ( IDENT - INT_CONST ) + INT_CONST ) ) >> ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) * IDENT = ( ( IDENT & ~ INT_CONST ) | INT_CONST )
38  #DEFINE FUNC_MAC ( ) IDENT ( &v IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) * ( IDENT ) / INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( IDENT ) >> INT_CONST ) )
1  #DEFINE OBJ_MAC ( ( INT_CONST / INT_CONST ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ~ ( ( IDENT ) ^ ( IDENT ) ) & ( ( IDENT ) ^ ( IDENT ) ) ) < INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >> ( INT_CONST * IDENT ) )
2  #DEFINE OBJ_MAC ( ( IDENT / INT_CONST ) << INT_CONST )
44  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT ; GOTO IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ IDENT ( IDENT ) ] -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) . IDENT + IDENT ( IDENT ) . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( LONG ) & ( ( ( STRUCT IDENT * ) IDENT ) -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT -> IDENT ) ? IDENT ( ( IDENT ) , ( IDENT ) ) ?: IDENT ( ( IDENT ) , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT -> IDENT ## IDENT < IDENT ) ? IDENT -> IDENT ## IDENT ?: IDENT - INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) EXTERN IDENT IDENT ( )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ( IDENT ) == IDENT ) && ( IDENT ( IDENT ( IDENT ) ) ) ) || ( ( IDENT ( IDENT ) == IDENT ) && ( IDENT ( IDENT ( IDENT ) ) ) ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED CHAR ) IDENT == IDENT ) || ( ( UNSIGNED CHAR ) IDENT == IDENT ) )
1  #DEFINE OBJ_MAC - INT_CONST ;
2  #DEFINE OBJ_MAC IDENT IDENT ;
1  #DEFINE OBJ_MAC IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( ( IDENT ) & INT_CONST ) , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST < ( IDENT ) && ( IDENT ) <= IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT -> IDENT + IDENT * INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT . IDENT == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = ( ( CHAR *p ) IDENT - ( CHAR *p ) INT_CONST ) % SIZEOF ( LONG ) || IDENT % SIZEOF ( LONG ) ? INT_CONST ?: IDENT == SIZEOF ( LONG ) ? INT_CONST ?: INT_CONST ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT != IDENT && IDENT != IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT < INT_CONST || IDENT >= IDENT ) IDENT ( IDENT STRING , IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT [ IDENT ( IDENT ) ] , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & INT_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( STRING # IDENT STRING : STRING ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { UNION IDENT IDENT ; IDENT . IDENT [ IDENT ] = ( IDENT ) ; IDENT . IDENT [ IDENT ] = ( IDENT ) ; ( IDENT ) = IDENT . IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT ) { ++v IDENT ; IF ( IDENT ) { *v IDENT v++ = ( UNSIGNED CHAR ) ( IDENT ) ; IF ( IDENT >= IDENT ) { IDENT = IDENT ; } } }
1  #DEFINE OBJ_MAC ( ( IDENT >> INT_CONST ) + INT_CONST )
9  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT > INT_CONST ) IDENT IDENT ; }
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT , IDENT ) == INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( ( INT ) IDENT ( IDENT , IDENT ) == ( ( INT ) IDENT ) ) GOTO IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + IDENT ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT , IDENT , IDENT ) , IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) & IDENT ) ? IDENT ( IDENT ) ?: IDENT )
1  #DEFINE OBJ_MAC = ( SIZEOF ( IDENT ) / SIZEOF ( IDENT [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = IDENT ; UNSIGNED INT IDENT = IDENT ; SWITCH ( IDENT ) { CASE IDENT : { INT IDENT = IDENT ; IDENT ( IDENT , IDENT , IDENT ) ; BREAK ; } CASE IDENT : CASE IDENT : CASE IDENT : CASE IDENT : CASE IDENT : { IDENT ( IDENT [ IDENT ] , IDENT ) ; BREAK ; } CASE IDENT : CASE IDENT : CASE IDENT : CASE IDENT : CASE IDENT : { IDENT ( IDENT [ IDENT ] , IDENT ) ; BREAK ; } DEFAULT : #ERROR ( STRING ) ; } }
10  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( IDENT IDENT STRING IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) |= ( INT_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) < IDENT ) && IDENT ( &v ( IDENT ) -> IDENT , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( ( IDENT ) ( IDENT ) ) | ( ( ( IDENT ) ( IDENT ) ) << INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( ) DO { IF ( IDENT ( IDENT , INT_CONST , -v INT_CONST ) < INT_CONST ) IDENT ( STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST , IDENT -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) ; IDENT &= ~ ( INT_CONST << IDENT ( ) ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT . IDENT . IDENT ) >> INT_CONST ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT ) ; IF ( IDENT > IDENT ) RETURN IDENT ; IF ( ( IDENT ) && IDENT ( IDENT , IDENT ) ) RETURN IDENT ; IDENT += IDENT + INT_CONST
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IF ( IDENT ( ( IDENT ) , ( IDENT ) , INT_CONST , IDENT ( IDENT ) , ( IDENT ) ) ) { RETURN IDENT ; } }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT + ( ( IDENT ) - INT_CONST ) ) & ~ ( ( IDENT ) - INT_CONST ) )
1  #DEFINE OBJ_MAC ( ! DEFINED ( IDENT ) && ! DEFINED ( IDENT ) && ! DEFINED ( IDENT ) && ! DEFINED ( IDENT ) && ! DEFINED ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT ) ? INT_CONST ?: ( IDENT ) - IDENT )
2  #DEFINE OBJ_MAC SIZEOF ( STRUCT IDENT * )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT , IDENT ## IDENT , SIZEOF ( IDENT ## IDENT ) - INT_CONST ) ; IDENT += SIZEOF ( IDENT ## IDENT ) - INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ; }
2  #DEFINE OBJ_MAC ( IDENT ( STRING , IDENT ) < INT_CONST ? INT_CONST ?: IDENT ( STRING , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , INT_CONST , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT ( INT_CONST , ( IDENT ) ) ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT , ( ( IDENT + ( IDENT ) ) | ( ( IDENT ## IDENT != INT_CONST ) * INT_CONST ) ) }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & ~ IDENT . IDENT ) ^ ( ( ( ( IDENT ) & ~ IDENT . IDENT ) & IDENT . IDENT ) << IDENT . IDENT ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT + ( INT ) ( &v ( ( IDENT * ) INT_CONST ) -> IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT == INT_CONST ) { LONG IDENT = *v ( LONG *p ) ( IDENT ) ; *v ( LONG *p ) ( IDENT ) = *v ( LONG *p ) ( IDENT ) ; *v ( LONG *p ) ( IDENT ) = IDENT ; } ELSE IDENT ( IDENT , IDENT , IDENT , IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) IDENT ( IDENT + ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT ) -> IDENT && ( ( INT_CONST << ( IDENT ) -> IDENT ) & ( IDENT | IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) RETURN IDENT ( ( FLOAT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) ( IDENT ) & INT_CONST ) == INT_CONST ? INT_CONST ?: -v IDENT )
1  #DEFINE OBJ_MAC ( INT_CONST * IDENT [ INT_CONST ] + INT_CONST * IDENT [ INT_CONST ] + INT_CONST * IDENT [ INT_CONST ] + INT_CONST * IDENT [ INT_CONST ] )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT + IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( INT_CONST | ( IDENT -> IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT << INT_CONST ) | ( IDENT & ~ INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT += IDENT ( IDENT , IDENT STRING , ## IDENT )
1  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( UNSIGNED CHAR ) IDENT ,
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) < ( IDENT ) ) ? ( IDENT ) ?: ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) ( ( IDENT ) -> IDENT ) ) -> IDENT )
83  #DEFINE OBJ_MAC ( IDENT * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT ( ) - ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , SIZEOF ( *v IDENT ) , ( IDENT ) IDENT , IDENT )
4  #DEFINE OBJ_MAC ( ( LONG ) ( IDENT >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , RETURN IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = IDENT ( IDENT , IDENT , IDENT ) ) != IDENT
4  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + ( ( IDENT ) * INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT + IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , IDENT , IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT / ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( ) ( ( IDENT < IDENT + IDENT ) ? IDENT v++ ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { ( IDENT ) -> IDENT = INT_CONST ; }
3  #DEFINE FUNC_MAC ( ) IDENT = IDENT ( IDENT , IDENT )
127  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT - INT_CONST ) >> INT_CONST ) >> INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) [ INT_CONST ] ) )
2  #DEFINE OBJ_MAC ( VOLATILE UNSIGNED INT *p ) ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT : IF ( IDENT != IDENT ) { IDENT ( IDENT ) ; } }
2  #DEFINE FUNC_MAC ( ) WHILE ( INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) )
10  #DEFINE OBJ_MAC ( IDENT v-- , IDENT v-- , IDENT v-- )
31  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT , ## IDENT )
3  #DEFINE FUNC_MAC ( ) IDENT ( STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT -> IDENT . IDENT , IDENT -> IDENT -> IDENT , IDENT ) ; IDENT -> IDENT = IDENT
35  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) / INT_CONST , INT_CONST * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT != IDENT -> IDENT )
2  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT < IDENT ) GOTO IDENT ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT += IDENT , IDENT -= IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST - INT_CONST * INT_CONST + INT_CONST )
5  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , UNSIGNED INT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ( &v IDENT , &v IDENT , &v IDENT , IDENT , IDENT , IDENT , STRING ) ) GOTO IDENT ; ELSE IF ( ! IDENT ) GOTO IDENT
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( STRING , IDENT -> IDENT ) ; IDENT ( STRING , IDENT ) ; }
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) & ( IDENT ) )
2  #DEFINE OBJ_MAC ( ( IDENT -> IDENT + IDENT -> IDENT - INT_CONST ) >> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , ( IDENT ) & INT_CONST , ( ( IDENT ) & INT_CONST ? INT_CONST ?: INT_CONST ) )
3  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( &v ( ( IDENT * ) INT_CONST ) -> IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { UNSIGNED LONG IDENT , IDENT ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( ) ; IF ( IDENT & ( INT_CONST << INT_CONST ) ) IDENT ( STRING , ( IDENT ) & ( INT_CONST << INT_CONST ) ? STRING ?: STRING ) ; IF ( IDENT ( &v ( IDENT ) -> IDENT ) && ( IDENT ) -> IDENT == IDENT ( ) ) { IDENT ( STRING , IDENT , IDENT ( ) , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT ) ; IDENT ( STRING , ( ( IDENT ) & ( INT_CONST << INT_CONST ) ? STRING ?: STRING ) ) ; } IF ( IDENT ( &v ( IDENT ) -> IDENT ) && ( IDENT ) -> IDENT == IDENT ( ) ) { IDENT ( STRING , IDENT , IDENT ( ) , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT ) ; IDENT ( STRING , ( ( IDENT ) & ( INT_CONST << INT_CONST ) ? STRING ?: STRING ) ) ; } IDENT ( &v ( IDENT ) -> IDENT ) ; ( IDENT ) -> IDENT = IDENT ; ( IDENT ) -> IDENT = IDENT ( ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
10  #DEFINE OBJ_MAC ( ( IDENT * ) IDENT )
3  #DEFINE OBJ_MAC ( IDENT [ IDENT ] [ INT_CONST ] != CHAR_CONST || IDENT [ IDENT ] [ INT_CONST ] == CHAR_CONST || ( IDENT < IDENT && IDENT [ IDENT ] == CHAR_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >> ( IDENT ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ( IDENT ) != SIZEOF ( STRUCT IDENT ) ) { IDENT ( IDENT , STRING # IDENT STRING ) ; RETURN -v IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT , # IDENT , &v ( IDENT [ IDENT ] . IDENT ) , SIZEOF ( INT ) , INT_CONST , IDENT , &v IDENT }
4  #DEFINE OBJ_MAC * IDENT v++ = INT_CONST ;
1  #DEFINE OBJ_MAC ( { CHAR *p IDENT ; UNSIGNED LONG INT IDENT ; IDENT = IDENT ( IDENT , &v IDENT , INT_CONST ) ; IF ( IDENT == IDENT ) IDENT = -v IDENT ; ELSE { IDENT -= IDENT - IDENT ; IDENT = IDENT ; } IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT && ( ( IDENT ) -> IDENT && ( IDENT - ( IDENT ) -> IDENT >= IDENT * ( ( IDENT ) -> IDENT ) + INT_CONST ) ) )
1  #DEFINE OBJ_MAC ( IDENT / ( IDENT * IDENT * IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) == IDENT ) ? ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) == INT_CONST ?: ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) == INT_CONST )
12  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , INT_CONST , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( UNSIGNED LONG ) ( IDENT ) ^ INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ) ; IDENT ( IDENT == IDENT ( ) ) ; IF ( ! IDENT ( IDENT ) ) IDENT ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT ( IDENT , IDENT ) , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , -v ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( IDENT ) -> IDENT == IDENT ? IDENT ?: IDENT , INT_CONST )
30  #DEFINE OBJ_MAC ( INT_CONST | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) ^ ( ( IDENT ) | ( ~ ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( ) ; IDENT ( STRING , ( INT ) IDENT , ( INT ) IDENT ) ; IDENT ( STRING , ( INT ) IDENT -> IDENT , ( INT ) IDENT -> IDENT , ( INT ) IDENT -> IDENT ) ; IDENT ( IDENT -> IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT ( IDENT - IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT . IDENT + ( IDENT ) ( ( ( FLOAT ) IDENT ( IDENT ) / FLOAT_CONST ) + FLOAT_CONST ) )
1  #DEFINE OBJ_MAC DO { IDENT ( STRING , IDENT , IDENT ) ; RETURN -v IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( IDENT | IDENT | IDENT | IDENT | IDENT ) )
133  #DEFINE FUNC_MAC ( IDENT , IDENT )
5  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT += ( *v IDENT ) - CHAR_CONST ; IDENT v++ ; IF ( IDENT ( *v IDENT ) ) { IDENT *= INT_CONST ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT -> IDENT + ( IDENT ) * INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST / IDENT & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( ( IDENT ) -> IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) -> IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) FOR ( ; IDENT < IDENT ; ++v IDENT ) { IF ( INT_CONST == ( ( *v IDENT ) & IDENT ) ) { *v IDENT |= IDENT ; IDENT = ( INT ) ( ( IDENT ) IDENT - ( IDENT ) IDENT ) ; IDENT = IDENT + ( IDENT >> INT_CONST ) ; GOTO IDENT ; } }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , ( STRING , IDENT ) )
2  #DEFINE OBJ_MAC ( ( ( -v INT_CONST * ( INT_CONST - IDENT ) ) + ( INT_CONST * INT_CONST ) ) / INT_CONST )
97  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT )
2  #DEFINE OBJ_MAC IDENT -> IDENT [ IDENT ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( ( IDENT * ) IDENT ) -> IDENT [ IDENT ( IDENT ) ] -> IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v ( ( IDENT ) -> IDENT ) , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT IDENT = IDENT ; IDENT ( IDENT ## IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = ( IDENT & INT_CONST ) | ( IDENT >> INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT )
1  #DEFINE OBJ_MAC ( ( SIZEOF ( IDENT ) / SIZEOF ( IDENT [ INT_CONST ] ) ) * INT_CONST )
106  #DEFINE FUNC_MAC ( IDENT ) IDENT
2  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( CHAR *p ) )
2  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST / INT_CONST )
3  #DEFINE OBJ_MAC ( IDENT - SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { IDENT IDENT ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v++ ; IF ( IDENT ( IDENT ( IDENT , INT_CONST ) , IDENT + IDENT ) < INT_CONST ) GOTO IDENT ; IDENT v++ ; IDENT ; } )
2  #DEFINE FUNC_MAC ( ) ( IDENT [ --v IDENT ] )
1  #DEFINE OBJ_MAC ( IDENT [ IDENT ] & INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( *v IDENT = ( IDENT ) , ( IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ( IDENT , IDENT ) ;
3  #DEFINE FUNC_MAC ( ) IDENT ( SIZEOF ( STRUCT IDENT ) , IDENT )
1  #DEFINE OBJ_MAC VOLATILE UNSIGNED INT *p
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT ( ( IDENT -> IDENT . IDENT [ ( IDENT ) ] ) , ( IDENT ) , ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT & IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( VOID IDENT * ) ( IDENT ) , INT_CONST , ( IDENT ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC VOID IDENT ## IDENT ( STRUCT IDENT * IDENT , IDENT IDENT , IDENT ## IDENT IDENT ) { VOID *p IDENT = ( VOID *p ) IDENT ( IDENT ( IDENT ) , IDENT ) ; IDENT ( IDENT != IDENT ) ; IDENT ( STRING , IDENT , IDENT , IDENT , IDENT ) ; IDENT ## IDENT ( IDENT , IDENT ) ; IDENT = IDENT ( IDENT -> IDENT + IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , SIZEOF ( IDENT ) - INT_CONST )
1  #DEFINE OBJ_MAC IF ( IDENT ) { INT IDENT ; IDENT = ( IDENT ( IDENT ) + INT_CONST - IDENT + IDENT -> IDENT + INT_CONST ) / INT_CONST - ( IDENT ( IDENT ) + INT_CONST - IDENT ) ; IDENT ( IDENT , IDENT , INT_CONST , IDENT , IDENT , IDENT , -v INT_CONST , -v INT_CONST ) ; } ELSE { IF ( IDENT == IDENT ) IDENT ( IDENT , IDENT , INT_CONST , IDENT , IDENT , IDENT + IDENT , -v INT_CONST , IDENT -> IDENT ) ; ELSE IDENT ( IDENT , IDENT , INT_CONST , IDENT - ( IDENT -> IDENT != -v INT_CONST ) , IDENT , IDENT + IDENT , -v INT_CONST , -v INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT . IDENT , IDENT )
1  #DEFINE OBJ_MAC ( IDENT -> IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( IDENT ) & ~ INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( ( IDENT ) & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ) -> IDENT . IDENT )
13  #DEFINE FUNC_MAC ( ) INT_CONST
1  #DEFINE FUNC_MAC ( ) ( { STRUCT IDENT IDENT ; IDENT ( STRING : STRING ( IDENT ) ) ; IDENT . IDENT ; } )
3  #DEFINE STATIC
4  #DEFINE OBJ_MAC IDENT , IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ( ( IDENT ) -> IDENT ) , ( IDENT ) -> IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT , IDENT , IDENT ( IDENT ) ) == INT_CONST ) { IDENT = IDENT ; IDENT += IDENT ( IDENT ) ; BREAK ; }
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IDENT ( STRING :c STRING ( IDENT ) :c STRING ( IDENT ) , STRING ( IDENT ) )
2  #DEFINE OBJ_MAC ( ( VOLATILE IDENT * ) ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) & IDENT ) == INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) >> INT_CONST ) , IDENT ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST - IDENT [ ( IDENT ) / INT_CONST ] )
1  #DEFINE OBJ_MAC ( IDENT >= IDENT ( INT_CONST , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT = IDENT ( IDENT , ( IDENT ) ? IDENT ?: IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT ) IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) . IDENT = ( IDENT ) . IDENT , ( IDENT ) . IDENT = ( IDENT ) . IDENT , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT ) -> #ERROR && IDENT ( ( IDENT ) -> IDENT -> IDENT ) )
1  #DEFINE OBJ_MAC ,
2  #DEFINE FUNC_MAC ( ) IDENT ( IDENT -> IDENT | IDENT )
1  #DEFINE OBJ_MAC ( INT_CONST / ( INT_CONST * INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( {} )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( ( UNSIGNED LONG ) ( &v ( ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT [ IDENT ] [ INT_CONST ] ) ) ) ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT , IDENT -> IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IDENT ( IDENT STRING , IDENT , IDENT , IDENT ) ; IDENT ( IDENT IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT ) & INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & IDENT )
1  #DEFINE OBJ_MAC INT IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT <= IDENT && IDENT <= IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) != IDENT && IDENT v-- )
2  #DEFINE OBJ_MAC ( SIZEOF IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ## IDENT ( IDENT IDENT , IDENT * IDENT ) { STRUCT IDENT IDENT [ INT_CONST ] ; IDENT IDENT ; IDENT ( IDENT ) ; IDENT = IDENT ## IDENT ( ( IDENT * ) IDENT ( IDENT -> IDENT ) , IDENT , IDENT ( IDENT ) ) ; IDENT ( IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) == IDENT ) && ( ( IDENT ) != IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
303  #DEFINE OBJ_MAC ( INT_CONST * IDENT )
4  #DEFINE OBJ_MAC ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) ( UNSIGNED LONG ) IDENT ) / INT_CONST ) & ( IDENT - INT_CONST ) )
2  #DEFINE OBJ_MAC ( IDENT ) - INT_CONST
1  #DEFINE OBJ_MAC ( ( ( ( IDENT + INT_CONST + INT_CONST ) / INT_CONST ) + SIZEOF ( LONG ) - INT_CONST ) / SIZEOF ( LONG ) )
1  #DEFINE FUNC_MAC ( IDENT ) {}
6  #DEFINE OBJ_MAC ( IDENT -> IDENT & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING STRING , IDENT -> IDENT , IDENT -> IDENT , IDENT -> IDENT , IDENT -> IDENT , IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT -> IDENT [ INT_CONST ] = IDENT ; IDENT -> IDENT [ INT_CONST ] = IDENT ; IDENT -> IDENT [ INT_CONST ] = IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT -> IDENT + ( ( IDENT < INT_CONST ) ? IDENT ?: IDENT - INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT ) ;
4  #DEFINE OBJ_MAC ( IDENT / SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >= IDENT ? IDENT ?: IDENT [ ( IDENT ) >> INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( # IDENT , INT_CONST , IDENT ) ; IF ( ! IDENT ) GOTO IDENT ; IDENT -> IDENT = IDENT ## IDENT ## IDENT ; IDENT -> IDENT = &v IDENT ; IDENT -> IDENT = IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { *v IDENT += IDENT ( IDENT + *v IDENT , IDENT , ## IDENT ) ; IF ( *v IDENT + *v IDENT > IDENT + IDENT ) RETURN INT_CONST ; IF ( *v IDENT + *v IDENT < IDENT ) { *v IDENT += *v IDENT ; *v IDENT = INT_CONST ; } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC VOLATILE UNSIGNED INT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IF ( ( IDENT ) >= INT_CONST ) { ( IDENT ) = ( IDENT ) * INT_CONST - ( ( ( IDENT ) * INT_CONST - ( IDENT ) ) - INT_CONST ) ; ( IDENT ) = ( IDENT ) + INT_CONST ; } ELSE { ( IDENT ) = ( IDENT ) * INT_CONST - ( ( IDENT ) * INT_CONST - ( IDENT ) ) ; ( IDENT ) = ( IDENT ) + ( ( IDENT ) >= INT_CONST ? INT_CONST ?: INT_CONST ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( #ERROR ) ( ( #ERROR &v ( IDENT | IDENT )
1  #DEFINE OBJ_MAC ( ( ( IDENT + INT_CONST ) * INT_CONST + INT_CONST ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) * ( IDENT IDENT * ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == CHAR_CONST ) || ( ( IDENT ) == CHAR_CONST ) || ( ( IDENT ) == CHAR_CONST ) || ( ( IDENT ) == CHAR_CONST ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , STRING , IDENT , IDENT -> #LINE )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & ~ ( ( ( IDENT ) -> IDENT & INT_CONST ) >> INT_CONST ) )
1  #DEFINE OBJ_MAC { STRING , STRING , STRING }
4  #DEFINE FUNC_MAC ( ) { }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT -> IDENT & IDENT ) IDENT += IDENT ( IDENT , STRING , IDENT , # IDENT ) ; IDENT = CHAR_CONST ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) & IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT ( IDENT , IDENT , IDENT -> IDENT + ( ( IDENT ) << IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , IDENT , ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) . IDENT = INT_CONST ; ( IDENT ) . IDENT = INT_CONST ; IDENT = IDENT ( IDENT , IDENT , INT_CONST , ( IDENT ) , &v ( IDENT ) , &v IDENT ) ; IF ( IDENT ) { IDENT ( IDENT , IDENT , STRING , ( IDENT ) ) ; IDENT ( INT_CONST ) ; } IF ( IDENT ) { IDENT ( IDENT , STRING , ( IDENT ) ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) * IDENT = ( IDENT = ( IDENT & ~ IDENT ( IDENT , IDENT ) ) | IDENT ( IDENT , IDENT , ( IDENT ) ) ) ; IDENT ( IDENT , IDENT , INT_CONST , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( IDENT < IDENT ) || ( IDENT > IDENT + IDENT ) ) { IDENT ( IDENT STRING , IDENT , IDENT , IDENT ) ; IDENT ( ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT -> IDENT & IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( CHAR *p ) & IDENT , SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) |= ( ( UNSIGNED ) ( IDENT ) & ( IDENT ) ) << ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , STRING STRING , IDENT , IDENT ( IDENT ) , IDENT -> IDENT . IDENT , IDENT ( *v ( IDENT ) ) , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT [ INT_CONST ] , IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { STRUCT IDENT * IDENT = ( STRUCT IDENT * ) IDENT ( SIZEOF ( *v IDENT ) ) ;
1  #DEFINE FUNC_MAC ( ) ( IDENT ( STRING ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) -> IDENT ) && IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT & IDENT ) { IF ( IDENT > INT_CONST ) IDENT ( ( IDENT + INT_CONST ) | ( ( IDENT + INT_CONST ) << INT_CONST ) , IDENT ) ; ELSE IDENT ( ( IDENT + INT_CONST ) | ( ( IDENT + INT_CONST ) << INT_CONST ) , IDENT ) ; } ELSE IF ( IDENT & IDENT ) { IF ( IDENT < INT_CONST ) IDENT ( ( CHAR ) ( IDENT + INT_CONST ) , IDENT + INT_CONST + IDENT ) ; IDENT ( ( CHAR ) ( IDENT + INT_CONST ) , IDENT ) ; } IF ( ( IDENT & IDENT ) || ( ! IDENT ) ) IDENT ( IDENT ( IDENT ) | INT_CONST , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) FOR ( ( IDENT ) = ( IDENT ) -> IDENT , ( IDENT ) = INT_CONST ; ( IDENT ) < ( IDENT ) -> IDENT ; ( IDENT ) v++ , ( IDENT ) v++ )
2  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) - INT_CONST )
1  #DEFINE OBJ_MAC }
38  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( { INT IDENT = IDENT >> IDENT ; INT IDENT = IDENT - ( IDENT << IDENT ) ; *v ( IDENT * ) ( IDENT [ IDENT ] -> IDENT + IDENT ) ; } )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT &= ~ ( INT_CONST << INT_CONST ) )
1  #DEFINE OBJ_MAC ( IDENT ? IDENT ?: IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT |= IDENT ( IDENT , &v IDENT -> IDENT [ IDENT ] ) ; IDENT -> IDENT [ IDENT ] = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT ) -> IDENT & IDENT ) IDENT ( STRING , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( ( ( ( ( IDENT * INT_CONST ) / INT_CONST ) << INT_CONST ) << INT_CONST ) | ( ( ( IDENT * INT_CONST ) / INT_CONST ) << INT_CONST ) )
1  #DEFINE OBJ_MAC ( IDENT * SIZEOF ( LONG ) )
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED SHORT IDENT ; IDENT |= IDENT ( IDENT , &v IDENT -> IDENT ) ; IDENT -> IDENT ## IDENT = IDENT | INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED ) IDENT ( IDENT ) < IDENT ? IDENT [ IDENT ( IDENT ) ] ?: INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( IDENT > INT_CONST ) IDENT ( IDENT , STRING , ( IDENT ) ) ; IDENT ( IDENT , IDENT [ IDENT ] . IDENT , IDENT [ IDENT ] . IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT += ( IDENT ) ) > IDENT || ! IDENT ( IDENT , ( IDENT ) , ( IDENT ) ) ) GOTO IDENT ;
1  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST ) & ( INT_CONST << INT_CONST ) & ( INT_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT & IDENT ) IDENT |= IDENT ;
3  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ) ;
3  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR_CONST <= ( IDENT ) && ( IDENT ) <= CHAR_CONST ) || ( CHAR_CONST <= ( IDENT ) && ( IDENT ) <= CHAR_CONST ) || ( CHAR_CONST <= ( IDENT ) && ( IDENT ) <= CHAR_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC INT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT ## IDENT IDENT ) { STRUCT IDENT * IDENT = IDENT ( IDENT -> IDENT -> IDENT ) ; IDENT IDENT = ( IDENT -> IDENT -> IDENT == IDENT ) ? INT_CONST ?: IDENT -> IDENT -> IDENT ; IDENT IDENT = IDENT ( IDENT , IDENT -> IDENT ) ; IDENT ( ( IDENT & INT_CONST ) == INT_CONST ) ; IDENT ( IDENT < INT_CONST ) ; IF ( ! IDENT ( IDENT ) && ! IDENT ( IDENT ) ) { IDENT ( IDENT , IDENT , IDENT , ( IDENT ) IDENT , SIZEOF ( IDENT ## IDENT ) ) ; IDENT ( STRING , IDENT , IDENT -> IDENT , IDENT , IDENT ) ; RETURN INT_CONST ; } IF ( IDENT ( IDENT ) && ( ! IDENT ( IDENT -> IDENT -> IDENT , IDENT -> IDENT , IDENT ) ) ) { IDENT ( STRING , IDENT , IDENT -> IDENT , IDENT , IDENT ) ; RETURN INT_CONST ; } IDENT ( STRING , IDENT , IDENT -> IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT | IDENT ) ; IDENT ## IDENT ( IDENT , IDENT -> IDENT . IDENT + IDENT + ( IDENT & IDENT ) ) ; IDENT = IDENT ( IDENT -> IDENT . IDENT + IDENT ) ; RETURN INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( STRING ) , IDENT ( -v INT_CONST ) )
23  #DEFINE CONST
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING ) ; IDENT IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ! IDENT ( IDENT , ( IDENT ) , IDENT . IDENT , ( IDENT * ) & IDENT ) ? ( IDENT ( IDENT ) , IDENT ) ?: ( IDENT ( IDENT , ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) DO { IF ( IDENT >= IDENT ) IDENT ( IDENT IDENT STRING IDENT STRING , ## IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED IDENT * ) & IDENT ) [ INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { INT IDENT , IDENT ; IDENT IDENT ( STRING STRING STRING STRING : STRING ( *v ( ( LONG *p ) ( IDENT ) ) ) , STRING ( *v ( INT_CONST + ( LONG *p ) ( IDENT ) ) ) , STRING ( IDENT ) , STRING ( IDENT ) :c STRING ( ( SHORT ) ( INT_CONST + ( IDENT << INT_CONST ) + ( IDENT << INT_CONST ) ) ) , STRING ( ( CHAR *p ) ( IDENT ) ) , STRING ( IDENT << INT_CONST ) ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = ( ( IDENT ) & INT_CONST ) | ( ( IDENT ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT == IDENT || ( IDENT ) -> IDENT == IDENT ) && ( IDENT ) -> IDENT [ IDENT ] == IDENT )
36  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , STRUCT IDENT )
1  #DEFINE OBJ_MAC { IF ( IDENT -> IDENT ) { IDENT ( ) ; RETURN ; } }
1  #DEFINE OBJ_MAC ( ( INT_CONST << ( IDENT - INT_CONST ) ) | ( INT_CONST << ( IDENT - INT_CONST ) ) | ( INT_CONST << ( IDENT - INT_CONST ) ) | ( INT_CONST << ( IDENT - INT_CONST ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT <= ( IDENT ) -> IDENT ? ( IDENT ) -> IDENT - ( IDENT ) -> IDENT ?: IDENT + ( IDENT ) -> IDENT - ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC INT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { RETURN IDENT ; }
4  #DEFINE OBJ_MAC IDENT ( IDENT ) ; IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT -> IDENT -> IDENT , ( IDENT ) ) ; IDENT ( &v IDENT -> IDENT -> IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT <= ( IDENT ) -> IDENT ? IDENT - INT_CONST + ( IDENT ) -> IDENT - ( IDENT ) -> IDENT ?: ( IDENT ) -> IDENT - ( IDENT ) -> IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT | IDENT , ( ( IDENT ) << INT_CONST ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! IDENT )
3  #DEFINE OBJ_MAC ( *v ( VOLATILE UNSIGNED INT *p ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( ( IDENT ) * IDENT )
1  #DEFINE OBJ_MAC IF ( --v IDENT == INT_CONST ) BREAK
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT ( IDENT , IDENT [ IDENT ] ) == INT_CONST ) { IF ( ! IDENT ( IDENT , IDENT , IDENT ) ) RETURN IDENT ; IDENT ; RETURN IDENT ; } }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( &v IDENT [ IDENT -> IDENT ] . IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT -> IDENT . IDENT . IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( STRUCT IDENT * ) ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( ) ( *v --v IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ? IDENT ?: ( IDENT ) ; GOTO IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( IDENT * ) ( IDENT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( STRING : STRING ( ( IDENT ) ( IDENT ) ) , STRING ( ( IDENT ) ( IDENT ) ) : STRING ( ( IDENT ) ( IDENT ) ) , STRING ( ( IDENT ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) || IDENT ( IDENT ) ? ( IDENT ) ?: IDENT ( IDENT , IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( ( ( ( IDENT ) < INT_CONST ? ( IDENT ) - INT_CONST ?: ( IDENT ) + INT_CONST ) / INT_CONST ) + INT_CONST ) , INT_CONST , INT_CONST ) )
18  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) IDENT ( IDENT ) ) -> IDENT . IDENT ? IDENT ?: IDENT )
6  #DEFINE OBJ_MAC ( *v ( UNSIGNED SHORT *p ) ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) == IDENT ( IDENT ) )
24  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) WHILE ( ( IDENT = IDENT ( IDENT = ( IDENT ) , IDENT ) ) != INT_CONST ) GOTO IDENT
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << IDENT . IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT - IDENT ) / IDENT * IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ! IDENT ( &v ( IDENT ) -> IDENT , IDENT ) && ! ( ( IDENT ) -> IDENT & IDENT ) && ! ( ( IDENT ) -> IDENT & IDENT ) && ( IDENT ( IDENT ) || ! IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) <= INT_CONST ) ? ( ~ ( ( IDENT ) + INT_CONST ) ) ?: ( ( IDENT ) | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) == ( IDENT ) ) ? IDENT ?: ( ( IDENT ) != IDENT && ( IDENT ) != IDENT ) ? IDENT ( IDENT , IDENT ) ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( INT ) ( ( IDENT ) - IDENT ( ( IDENT ) -> IDENT . IDENT ) ) , ( INT ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT + IDENT * ( IDENT ( IDENT [ INT_CONST ] -> IDENT ) + INT_CONST ) )
11  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >= INT_CONST ) && ( ( IDENT ) <= INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT , IDENT ( IDENT -> IDENT , INT_CONST ) , IDENT , IDENT | IDENT | IDENT , IDENT , IDENT -> IDENT , &v IDENT , IDENT , IDENT / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { CHAR *p IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( INT ) IDENT & INT_CONST ) >> INT_CONST ) * INT_CONST + ( ( INT ) IDENT & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ IDENT ] && ! IDENT [ IDENT ] ) || ( IDENT == IDENT && IDENT ) || ( IDENT == IDENT && IDENT [ IDENT ] ) )
1  #DEFINE OBJ_MAC ( IDENT ( IDENT [ ( IDENT - INT_CONST ) * INT_CONST + ( IDENT - INT_CONST ) ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) != INT_CONST && IDENT ( IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT & ( IDENT ) ) { IDENT ; }
1  #DEFINE OBJ_MAC IDENT STRING STRING STRING STRING
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) )
19  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & ( IDENT | IDENT | IDENT | IDENT | IDENT ) )
1  #DEFINE OBJ_MAC { IDENT ( STRING STRING , IDENT , IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE OBJ_MAC IDENT -> IDENT [ INT_CONST ] . #LINE
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( SIZEOF ( IDENT ) != SIZEOF ( IDENT ) ) IDENT ( IDENT , SIZEOF ( IDENT ) , SIZEOF ( IDENT ) ) ;
5  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , INT_CONST , INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) INT_CONST << ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( IDENT ( IDENT ) ) )
10  #DEFINE FUNC_MAC ( #ERROR , IDENT , IDENT ) #ERROR = IDENT ( IDENT , IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT , IDENT }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) <= INT_CONST ) || ( ( IDENT ) >= IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT -> IDENT ) { INT IDENT = CHAR_CONST , IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT && ( IDENT = IDENT ( IDENT ) ) != IDENT && IDENT != CHAR_CONST ; ++v IDENT ) IDENT [ IDENT ] = ( CHAR ) IDENT ; IF ( IDENT == CHAR_CONST ) IDENT [ IDENT v++ ] = ( CHAR ) IDENT ; IF ( IDENT == IDENT && IDENT ( IDENT ) ) IDENT ( STRING ) ; IDENT = IDENT ; } ELSE IF ( ( ( IDENT = IDENT ( IDENT , INT_CONST , IDENT , IDENT ) ) == INT_CONST ) && IDENT ( IDENT ) ) IDENT ( STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT ( STRING , IDENT -> IDENT , IDENT -> IDENT ) ) ; IF ( IDENT -> IDENT ) IDENT -> IDENT |= ( INT_CONST << IDENT -> IDENT ) ; IDENT -> IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) + IDENT ) & ( IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < INT_CONST || IDENT > IDENT ? ( IDENT ( IDENT , STRING ) , IDENT ( -v INT_CONST ) ) ?: INT_CONST )
1  #DEFINE OBJ_MAC IDENT v++
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( ( ( STRUCT IDENT * ) ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) IDENT ) & INT_CONST ) && ( ( ( IDENT ) IDENT ) & INT_CONST ) != IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) / IDENT ] |= ( ( IDENT ) INT_CONST << ( ( IDENT ) % IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ( IDENT ) ] . IDENT )
4  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) <= INT_CONST )
20  #DEFINE OBJ_MAC IDENT -> IDENT [ INT_CONST ]
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT ? INT_CONST ?: IDENT v-- )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT == IDENT ) ? IDENT ( IDENT ) -> IDENT ?: IDENT ( IDENT ) -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT -> IDENT != IDENT ) ) , IDENT ( ( IDENT -> IDENT != IDENT ) ) , IDENT ( ( IDENT -> IDENT & IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { STRUCT IDENT * IDENT , *v IDENT ; IDENT = ( STRUCT IDENT * ) IDENT -> IDENT . IDENT . IDENT ; IDENT = ( STRUCT IDENT * ) IDENT -> IDENT . IDENT . IDENT ; IDENT = IDENT ( &v IDENT -> ## IDENT ) ; IDENT = IDENT ( &v IDENT -> ## IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( STRING , IDENT ) ; IDENT ( IDENT , IDENT , ( IDENT ) ( IDENT ) ) ; IDENT ( IDENT , STRING , IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + CHAR_CONST )
6  #DEFINE OBJ_MAC STRUCT IDENT * IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) STATIC IDENT ## IDENT IDENT ## IDENT ## IDENT ## IDENT ( IDENT ## IDENT IDENT , IDENT ## IDENT IDENT , IDENT ## IDENT IDENT ) { STRUCT IDENT IDENT ; IDENT = IDENT ( IDENT , IDENT ) ; IDENT = IDENT ; IDENT = IDENT ( IDENT , IDENT ) ; IDENT . IDENT |= IDENT . IDENT ; IDENT . IDENT |= IDENT . IDENT ; IDENT = IDENT ( IDENT ) ; IDENT . IDENT |= IDENT . IDENT ; IDENT . IDENT |= IDENT . IDENT ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT = IDENT -> IDENT -> IDENT -> IDENT , ( ! IDENT ( IDENT ) ) ? IDENT ( IDENT , STRING , IDENT ( IDENT ) , IDENT ( IDENT ) ) ?: ( VOID ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) DO { IDENT = IDENT | ( IDENT << INT_CONST ) ; IDENT = ( IDENT >> INT_CONST ) | ( IDENT << INT_CONST ) ; IDENT = ( IDENT >> INT_CONST ) | ( IDENT << INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT - INT_CONST + IDENT -> IDENT . IDENT - IDENT -> IDENT . IDENT ) % IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] . IDENT [ IDENT ( IDENT ) ] )
46  #DEFINE OBJ_MAC IDENT ( FLOAT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { UNION IDENT IDENT ; IDENT . IDENT = ( IDENT ) ; IDENT . IDENT [ IDENT ] = ( IDENT ) ; ( IDENT ) = IDENT . IDENT ; } )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , ( IDENT >> INT_CONST ) & INT_CONST , ( IDENT >> INT_CONST ) & INT_CONST , ( IDENT >> INT_CONST ) & INT_CONST , IDENT & INT_CONST ) ;
1  #DEFINE OBJ_MAC ( ( SIZEOF ( LONG ) * INT_CONST ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT * IDENT -> IDENT . IDENT ) / INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT -> IDENT )
1  #DEFINE OBJ_MAC IDENT -> IDENT . IDENT -> IDENT -> IDENT
1  #DEFINE OBJ_MAC ( ~ ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT != IDENT && ( IDENT -> IDENT == IDENT || IDENT -> IDENT == IDENT ) && IDENT -> IDENT != IDENT ) ; IF ( ! IDENT || ( IDENT -> IDENT != IDENT && IDENT -> IDENT != IDENT ) || ! IDENT -> IDENT ) RETURN INT_CONST ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT < INT_CONST ) || ( ( IDENT != IDENT ) && ( IDENT != IDENT ) && IDENT != IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT ) ( IDENT / IDENT )
3  #DEFINE OBJ_MAC ( ( IDENT ) ( ( CHAR *p ) & ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT - ( CHAR *p ) INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT * ) IDENT ( ( IDENT ) , ( IDENT ) * SIZEOF ( IDENT ) , ( IDENT ) * SIZEOF ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ## IDENT - IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) != IDENT ) && ( ( IDENT ) != IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT < IDENT || IDENT >= ( IDENT + IDENT ) ) { IDENT ( IDENT STRING , IDENT , IDENT ) ; IDENT ( IDENT ( ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) IDENT ( IDENT ) ; IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT -> IDENT [ IDENT ] ; IDENT |= IDENT ( IDENT , &v IDENT -> IDENT [ IDENT ] ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT == IDENT ? INT_CONST ?: ( IDENT ) -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT > IDENT ) || ( ( IDENT == IDENT ) && ( ( IDENT > IDENT ) || ( ( IDENT == IDENT ) && ( IDENT >= IDENT ) ) ) ) ) && ( ( IDENT < IDENT ) || ( ( IDENT == IDENT ) && ( ( IDENT < IDENT ) || ( ( IDENT == IDENT ) && ( IDENT <= IDENT ) ) ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) { IDENT ( IDENT STRING IDENT , IDENT , ## IDENT ) ; IDENT ( STRING ) ; IDENT ( ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT += ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >= CHAR_CONST ) && ( ( IDENT ) <= CHAR_CONST ) ) ? ( ( IDENT ) + CHAR_CONST - CHAR_CONST ) ?: ( IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT ) , IDENT ( IDENT ) , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT += IDENT ( IDENT + IDENT , STRING , # IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) IDENT += IDENT ( IDENT + IDENT , STRING , IDENT ( IDENT -> IDENT -> IDENT [ IDENT ] ) ) ; IDENT += IDENT ( IDENT + IDENT , STRING ) ; }
1  #DEFINE OBJ_MAC IF ( IDENT . IDENT && IDENT . IDENT ) IDENT |= IDENT
1  #DEFINE FUNC_MAC ( #LINE ) & IDENT [ #LINE ] , &v IDENT [ #LINE ] , &v IDENT [ #LINE ] , &v IDENT [ #LINE ] , &v IDENT [ #LINE ] , &v IDENT [ #LINE ] , &v IDENT [ #LINE ] , &v IDENT [ #LINE ] , IDENT , IDENT , IDENT , IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) - ( INT_CONST << ( INT_CONST - ( IDENT ) ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) { ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT = INT_CONST ; }
1  #DEFINE OBJ_MAC ( ( UNSIGNED INT ) ( SIZEOF ( IDENT ) * INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST || ( IDENT ) > INT_CONST || ( ( IDENT ) > INT_CONST && ( IDENT ) < INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) DO { STRUCT IDENT * IDENT = IDENT ( IDENT , SIZEOF ( IDENT ) - INT_CONST ) ; IF ( IDENT ) IDENT -> IDENT = STRING ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( ) { IDENT ( INT_CONST , IDENT ) ; IDENT ( ( INT_CONST & IDENT ( IDENT ) ) , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IF ( ( IDENT ) & INT_CONST ) { ( IDENT ) = ( IDENT ) / INT_CONST + ( ( IDENT ) - ( IDENT ) / INT_CONST ) ; ( IDENT ) = ( IDENT ) - ( ( IDENT ) >= INT_CONST ? INT_CONST ?: INT_CONST ) ; } ELSE { ( IDENT ) = ( IDENT ) / INT_CONST + ( ( ( IDENT ) - ( IDENT ) / INT_CONST ) - INT_CONST ) ; ( IDENT ) = ( IDENT ) - INT_CONST ; } } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { UNSIGNED LONG IDENT ; UNSIGNED INT IDENT ; INT IDENT ; IF ( IDENT == IDENT ) { IDENT = -v INT_CONST ; } ELSE { IDENT = IDENT -> IDENT -> IDENT ; IDENT = ( IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT << INT_CONST ) | IDENT ; IF ( IDENT ) { IDENT = IDENT ( IDENT , INT_CONST , INT_CONST , IDENT , IDENT , IDENT >> INT_CONST , IDENT & INT_CONST , IDENT , ( IDENT ) IDENT ) ; } ELSE { IDENT = IDENT ( IDENT , INT_CONST , INT_CONST , IDENT , IDENT , IDENT , ( IDENT ) IDENT ) ; } } RETURN IDENT ; } INT IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { STRUCT IDENT * IDENT = IDENT ( IDENT ) ; INT IDENT = IDENT ## IDENT ( IDENT , IDENT , IDENT ) ; RETURN IDENT ? IDENT ?: IDENT ; }
1  #DEFINE OBJ_MAC IDENT ( STRING , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( VOLATILE IDENT * ) IDENT ) [ ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN INT_CONST - ( IDENT <= IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , STRUCT IDENT , IDENT . IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( IDENT ) -> IDENT && ( IDENT ) -> IDENT ) IDENT ( ( IDENT ) -> IDENT , ( IDENT ) -> IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT += IDENT ( IDENT + IDENT , STRING # IDENT STRING , IDENT ( &v IDENT -> IDENT ) )
7  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ IDENT ] . IDENT ? &v ( IDENT ) -> IDENT [ IDENT ] ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT IDENT ; IF ( ! ( IDENT ) ) { IDENT = IDENT ( ( IDENT ) -> IDENT . IDENT , IDENT ) ; IDENT ( ( IDENT ) , IDENT ) ; } } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( *v ( ( IDENT ) -> IDENT ) ) ( ( IDENT ) -> IDENT , ( IDENT ) , ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , INT_CONST , &v IDENT , INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) ) ? ( ( IDENT ) -> IDENT . IDENT ) ?: ( ( IDENT ( IDENT ) ) -> IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED SHORT ) ( ( ( ( UNSIGNED SHORT ) ( IDENT ) & ( UNSIGNED SHORT ) INT_CONST ) << INT_CONST ) | ( ( ( UNSIGNED SHORT ) ( IDENT ) & ( UNSIGNED SHORT ) INT_CONST ) >> INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) IDENT -> IDENT )
2  #DEFINE OBJ_MAC ( ( IDENT -> IDENT <= IDENT -> IDENT ) ? IDENT -> IDENT + IDENT - IDENT -> IDENT ?: IDENT -> IDENT - IDENT -> IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) DO { IF ( ( IDENT ) -> IDENT >= INT_CONST ) IDENT ( IDENT STRING IDENT STRING , ( IDENT ) -> IDENT . IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) BREAK
1  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( IDENT ) / SIZEOF ( *v IDENT ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT . IDENT == IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ( &v IDENT , &v IDENT , &v IDENT ) ) GOTO IDENT ; ELSE IF ( IDENT < IDENT || IDENT > IDENT ) GOTO IDENT
10  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( INT ) )
1  #DEFINE OBJ_MAC IDENT IDENT ; IDENT * IDENT
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ( IDENT + INT_CONST ) & INT_CONST , IDENT + INT_CONST ) , IDENT ( INT_CONST , IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT * IDENT + IDENT ) * IDENT + IDENT ) * IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , -v INT_CONST , ( IDENT ) | INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT < INT_CONST ? IDENT + INT_CONST ?: IDENT ) , INT_CONST , INT_CONST ) )
1  #DEFINE OBJ_MAC ( ( ( IDENT ) INT_CONST << INT_CONST ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) & INT_CONST ) << INT_CONST | ( ( IDENT ) & INT_CONST ) << INT_CONST | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT & ~ ( IDENT ) -> IDENT )
77  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) < ( IDENT ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( UNSIGNED LONG ) ( IDENT ) << INT_CONST | ( IDENT ) )
1  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST )
582  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , STRING , STRING )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( IDENT & INT_CONST ) ? IDENT ?: IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( CHAR *p ) ( IDENT ) ) >= ( IDENT ) -> IDENT ) && ( ( ( CHAR *p ) ( IDENT ) ) < ( IDENT ) -> IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT < INT_CONST || IDENT >= IDENT ) ? INT_CONST ?: ( ( IDENT < INT_CONST ) ? IDENT ( IDENT , IDENT , IDENT ) ?: ( ( IDENT < INT_CONST ) ? IDENT ( IDENT , IDENT , IDENT ) ?: ( ( IDENT < INT_CONST ) ? IDENT ( IDENT , IDENT , IDENT ) ?: IDENT ( IDENT , IDENT , IDENT ) ) ) ) )
5  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( ( CHAR *p ) IDENT ) ; IF ( IDENT ) IDENT ( ( CHAR *p ) IDENT ) ; RETURN ( IDENT ) ; }
1  #DEFINE OBJ_MAC , { { INT_CONST } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( LONG ) IDENT << INT_CONST ) | ( LONG ) IDENT | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) - IDENT ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( INT_CONST + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) + ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) ] - IDENT [ ( IDENT ) ] )
1  #DEFINE OBJ_MAC ( ( LONG ) INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT ) + ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT & IDENT ) && ( ( IDENT ) -> IDENT != ( IDENT ) -> IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( STRUCT IDENT ) + ( IDENT ) -> IDENT * SIZEOF ( IDENT ) + ( IDENT ) -> IDENT * ( IDENT ) -> IDENT * SIZEOF ( SHORT ) + IDENT ( ( IDENT ) -> IDENT , IDENT ) + IDENT ( ( IDENT ) -> IDENT * ( IDENT ) -> IDENT / IDENT ( IDENT ) , IDENT ) )
2  #DEFINE OBJ_MAC IDENT v--
2  #DEFINE OBJ_MAC ( INT ( *v ) ( INT ) ) INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) CASE IDENT ( IDENT , IDENT , IDENT , IDENT ) : { IDENT ( STRING # IDENT STRING ) ; IDENT -> IDENT = IDENT ## IDENT ; IF ( IDENT < INT_CONST ) IDENT ; IF ( IDENT == INT_CONST ) * ( IDENT ) = INT_CONST ; ELSE { IDENT = IDENT + INT_CONST ; IF ( *v IDENT v++ != CHAR_CONST ) IDENT ; *v ( IDENT ) = IDENT - INT_CONST ; IF ( *v ( IDENT ) >= IDENT ) IDENT ; IDENT ( IDENT , IDENT , *v ( IDENT ) ) ; ( IDENT ) [ *v ( IDENT ) ] = INT_CONST ; } }
1  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) ? IDENT ?: IDENT ( IDENT ) ? IDENT ?: IDENT ( IDENT ) ? IDENT ?: IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT v++ = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT ( IDENT ) , &v IDENT ( IDENT ) -> IDENT . IDENT ) ; IF ( IDENT ( &v IDENT ( IDENT ) -> IDENT . IDENT ) < INT_CONST ) IDENT ( &v IDENT ( IDENT ) -> IDENT . IDENT , IDENT ) ; }
1  #DEFINE OBJ_MAC ( ( ( IDENT + INT_CONST ) / SIZEOF ( IDENT * ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { ( IDENT ) -> IDENT = IDENT ; IDENT ( ( IDENT ) -> IDENT , STRING ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT [ ( IDENT >> INT_CONST ) ] |= ( ( IDENT ) << ( ( IDENT & INT_CONST ) << INT_CONST ) ) ; IDENT [ IDENT ] v++ ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT ) ; IDENT ( ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { ( IDENT ) = ( IDENT ) ( IDENT ) ; IDENT += IDENT ; }
1  #DEFINE OBJ_MAC ( IDENT -> IDENT [ INT_CONST ] == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( IDENT ) / ( SIZEOF ( *v ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ? ( ( IDENT ) -> IDENT -> IDENT ) ?: -v INT_CONST , ( IDENT ) ? ( ( IDENT ) -> IDENT & INT_CONST ) ?: -v INT_CONST , ( IDENT ) ? ( ( IDENT ) -> IDENT & INT_CONST ) ?: -v INT_CONST
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v ( ( ( STRUCT IDENT * ) IDENT [ IDENT ] -> IDENT ) -> IDENT ) , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT v-- , ( IDENT ) -> IDENT ( ( IDENT ) -> IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) STRUCT IDENT * IDENT = IDENT
29  #DEFINE OBJ_MAC IDENT ( INT_CONST , STRING , INT_CONST , INT_CONST , INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT ( IDENT ) v-- ) == INT_CONST ) IDENT ( IDENT ) v--
2  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) - ( INT_CONST << IDENT ) * SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT * ( ( IDENT / IDENT ) + INT_CONST ) / INT_CONST )
32  #DEFINE OBJ_MAC STATIC
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT || ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ( IDENT ) ) == IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT / INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( IDENT ) + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT + ( IDENT -> IDENT . IDENT * INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT -> IDENT [ ( IDENT ) - INT_CONST ] . IDENT . IDENT != IDENT ) && ( ( IDENT ) -> IDENT -> IDENT [ ( IDENT ) - INT_CONST ] . IDENT . IDENT != IDENT ) )
1  #DEFINE OBJ_MAC ( UNSIGNED INT ) ( UNSIGNED LONG )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( ! IDENT ( IDENT ) ) RETURN IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; IDENT = ( IDENT ) IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( ( ( ( IDENT ) + INT_CONST ) / INT_CONST ) << INT_CONST ) , INT_CONST , INT_CONST ) )
3  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) -> IDENT + IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( { STRUCT IDENT * IDENT , *v *v IDENT ; *v IDENT v++ = &v IDENT -> IDENT ; IDENT = &v IDENT -> IDENT ; FOR ( IDENT = *v IDENT ; IDENT -> IDENT != IDENT ; ) { IDENT = &v IDENT -> IDENT ; *v IDENT v++ = IDENT ; IDENT = *v IDENT ; } IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT + IDENT ( INT_CONST , IDENT ) )
1  #DEFINE FUNC_MAC ( ) IDENT . IDENT [ --v IDENT . IDENT ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT * ) IDENT ( ( UNSIGNED ) ( IDENT ) , SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , INT_CONST , IDENT )
30  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT | IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , INT_CONST ) - IDENT ( IDENT , INT_CONST ) + IDENT ( IDENT , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( ( IDENT * ) ( IDENT ) ) = IDENT ( *v ( ( IDENT * ) ( IDENT ) ) ) )
2  #DEFINE OBJ_MAC & IDENT [ IDENT ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( IDENT ) - ( IDENT ) ) < INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , IDENT , ( UNSIGNED ) ( IDENT ) )
9  #DEFINE OBJ_MAC INT_CONST : INT_CONST
31  #DEFINE OBJ_MAC ( IDENT | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST - ( ( IDENT ) * INT_CONST / INT_CONST ) )
3  #DEFINE OBJ_MAC ( SIZEOF ( UNION IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT IDENT ; STRUCT IDENT * IDENT , *v IDENT ; IDENT = ( STRUCT IDENT * ) IDENT -> IDENT . IDENT . IDENT ; IDENT = ( STRUCT IDENT * ) IDENT -> IDENT . IDENT . IDENT ; IDENT = IDENT ( &v IDENT -> ## IDENT ) ; IDENT ( IDENT , &v IDENT -> ## IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT -> IDENT & ~ IDENT -> IDENT & ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IF ( ! IDENT ( IDENT , &v IDENT ) ) ; ELSE IF ( ! IDENT ( IDENT , &v IDENT ) ) { IDENT = IDENT ; IDENT ( IDENT , IDENT , IDENT , INT_CONST ) ; } ELSE { IDENT ( IDENT , IDENT ) ; IF ( ! IDENT ( IDENT , &v IDENT ) ) { IDENT = IDENT ; IDENT ( IDENT , IDENT , IDENT , INT_CONST ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( STRUCT IDENT , IDENT ) )
2  #DEFINE OBJ_MAC { IDENT RETURN IDENT ( IDENT , IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT + IDENT ( ( IDENT ) -> IDENT . IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT | IDENT | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( IDENT << IDENT ) | IDENT | IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( CHAR *p ) IDENT , IDENT )
1  #DEFINE FUNC_MAC ( ) IDENT . IDENT = IDENT
1  #DEFINE FUNC_MAC ( ) STATIC CHAR IDENT [ ] = STRING ;
2  #DEFINE OBJ_MAC ( SIZEOF ( UNSIGNED LONG ) - INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT = IDENT . IDENT
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( STRING : : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) : STRING )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT < INT_CONST || IDENT >= IDENT ) ? INT_CONST ?: IDENT [ IDENT / INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) * INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ## IDENT ( UNSIGNED LONG *p IDENT , IDENT * IDENT , IDENT * IDENT ) { STRUCT IDENT IDENT [ INT_CONST ] ; IDENT IDENT ; IDENT ( IDENT ) ; IDENT = IDENT ## IDENT ( ( IDENT * ) IDENT ( IDENT -> IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) , IDENT ( IDENT ) ) ; IDENT ( IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { ( IDENT ) -> IDENT . IDENT = ( IDENT ) ; ( *v ( ( IDENT ) ( IDENT ) -> IDENT . IDENT ) -> IDENT . IDENT ) ( IDENT ) ; }
12  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT ## IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , IDENT IDENT ) { IDENT ## IDENT IDENT ; IDENT ( IDENT != IDENT ) ; IDENT ( STRING , IDENT , IDENT , IDENT ) ; IDENT = IDENT ## IDENT ( IDENT ( IDENT ( IDENT ) , IDENT ) ) ; IDENT ( STRING , IDENT ) ; RETURN ( IDENT ) ; }
3  #DEFINE OBJ_MAC VOID IDENT ( VOID ) { IDENT VOLATILE ( STRING ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ) ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { UNSIGNED INT IDENT = INT_CONST , IDENT = IDENT , IDENT = IDENT ; IDENT ( STRING IDENT STRING STRING STRING IDENT STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) ) ; IF ( IDENT ) GOTO IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) IDENT ( IDENT ) * INT_CONST + ( IDENT ) IDENT ( IDENT ) * INT_CONST + ( IDENT ) IDENT ( IDENT ) * INT_CONST ) & INT_CONST ) % IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT = IDENT -> IDENT . IDENT . IDENT
11  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( -v IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IF ( ( IDENT && IDENT < INT_CONST ) || ( IDENT -> IDENT [ IDENT >> INT_CONST ] & ( INT_CONST << ( IDENT & INT_CONST ) ) ) ) { *v IDENT v++ = IDENT ; *v IDENT v++ = IDENT ^ INT_CONST ; } ELSE *v IDENT v++ = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT > IDENT ) IDENT = IDENT
1  #DEFINE OBJ_MAC ( *v ( ( VOLATILE STRUCT IDENT * ) IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) * ( ( UNSIGNED VOLATILE CHAR *p ) ( ( IDENT ) + IDENT ) ) = ( IDENT )
3  #DEFINE OBJ_MAC ( ( ( STRUCT IDENT * ) ( IDENT -> IDENT ) ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT ? ( IDENT ) ?: IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) ( IDENT ) ) & INT_CONST ) == INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT . IDENT == INT_CONST ) IDENT ( STRING , IDENT - INT_CONST , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT == IDENT ) || ( IDENT ( IDENT ) == IDENT ( IDENT ) ) )
9  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( &v ( IDENT ) -> IDENT , IDENT + IDENT * IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) STRUCT IDENT * IDENT = ( STRUCT IDENT * ) ( IDENT ) -> IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { { IDENT , ( VOID *p ) IDENT } , INT_CONST }
1  #DEFINE OBJ_MAC ( ( UNSIGNED LONG LONG ) IDENT << IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? -v INT_CONST ?: ( IDENT ) == INT_CONST ? -v INT_CONST ?: ( IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT + IDENT , ( IDENT ) )
1  #DEFINE OBJ_MAC IDENT ( IDENT ( &v IDENT , IDENT ) == INT_CONST && IDENT ( &v IDENT ) == INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( ( IDENT ) >> INT_CONST ) & IDENT ) | IDENT ) & ~ IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ( ) ) IDENT ( IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC IDENT IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ) IDENT ( IDENT IDENT STRING IDENT STRING , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) { IF ( IDENT > INT_CONST ) { IDENT ( IDENT IDENT STRING IDENT , ## IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ) - IDENT ( IDENT ) + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( ( IDENT ) - IDENT ) % ( SIZEOF ( IDENT ) / SIZEOF ( IDENT [ INT_CONST ] ) ) ]
1  #DEFINE FUNC_MAC ( ) * IDENT = ( IDENT &= ~ IDENT ( IDENT , IDENT ) ) ; IDENT ( IDENT , IDENT , INT_CONST , INT_CONST ) ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ( IDENT ) -> IDENT ) ( *v ( IDENT ) -> IDENT ) ( ( IDENT ) -> IDENT , ( IDENT ) ) ; ELSE ( *v ( VOID ( *v ) ( ) ) ( IDENT ) -> IDENT ) ( ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ( IDENT , IDENT , IDENT , ( IDENT * ) & IDENT ) ) IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( VOID IDENT * ) ( IDENT ) , ( CONST VOID IDENT * ) ( IDENT ) , ( IDENT ) ( IDENT ) )
5  #DEFINE OBJ_MAC IDENT | IDENT | IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST * IDENT / ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , ( CHAR *p ) & IDENT , SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( ) ; IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) ) == IDENT )
1  #DEFINE OBJ_MAC SIZEOF ( VOID *p )
7  #DEFINE OBJ_MAC ( IDENT ( INT_CONST , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , # IDENT , ( IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST / INT_CONST / IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) != INT_CONST && ( IDENT ( ( IDENT ) , ( IDENT ) ) & IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT - IDENT * IDENT )
1  #DEFINE OBJ_MAC IDENT ( &v IDENT -> IDENT ) ; IF ( IDENT ( IDENT -> IDENT ) == INT_CONST && IDENT == INT_CONST ) GOTO IDENT ; IDENT ( &v IDENT -> IDENT , &v IDENT ) ; IDENT -> IDENT = IDENT ; IF ( ! IDENT ( &v IDENT -> IDENT ) && ( IDENT -> IDENT < INT_CONST ) ) IDENT -> IDENT = IDENT ( IDENT -> IDENT ) ;
1  #DEFINE OBJ_MAC DO { IDENT ( IDENT , STRING , IDENT -> IDENT , IDENT -> IDENT , IDENT -> IDENT , IDENT -> IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT += INT_CONST ) { IDENT ( IDENT , STRING , IDENT -> IDENT [ IDENT ] , IDENT -> IDENT [ IDENT ] , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT ( ) ; IDENT = IDENT ( ) ; IF ( ( IDENT & IDENT ) & IDENT ) { IDENT = IDENT ^ IDENT ; IDENT = IDENT ^ IDENT ; IF ( IDENT && IDENT ) { IDENT = IDENT ( IDENT ) IDENT IDENT ( IDENT ) ; } ELSE { IDENT = IDENT ? *v IDENT -> IDENT ?: IDENT ( IDENT ) ; IDENT = IDENT ? *v IDENT -> IDENT ?: IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT , IDENT ) ; } } ELSE { IDENT = IDENT , IDENT = IDENT ; IDENT ( IDENT , IDENT , &v IDENT ) ; IDENT ( IDENT , IDENT , &v IDENT ) ; IF ( IDENT ( IDENT ) && IDENT ( IDENT ) ) { IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT ) IDENT INT_CONST ; } ELSE { IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT , IDENT ) ; } } IDENT ( IDENT ( IDENT ) ) ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT * ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) && ( ( IDENT ) -> IDENT & IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ( IDENT ) + INT_CONST ) & ~ INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( VOID ) ( IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , # IDENT , ( IDENT ) , IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( LONG ) IDENT << INT_CONST ) | ( LONG ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) % IDENT )
1  #DEFINE OBJ_MAC IDENT [ IDENT . IDENT ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT STRING , ( IDENT ) -> IDENT . IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) = INT_CONST ; WHILE ( IDENT ( *v IDENT ) ) ( IDENT ) = ( IDENT ) * INT_CONST + ( *v IDENT v++ - CHAR_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ## IDENT * IDENT = ( IDENT ## IDENT * ) & ( ( IDENT ) -> IDENT [ IDENT -> IDENT & ~ ( ( IDENT >> INT_CONST ) - INT_CONST ) ] ) ; IDENT ## IDENT * IDENT = ( IDENT ## IDENT * ) & ( IDENT ) -> IDENT [ IDENT -> IDENT ] ; IDENT ## IDENT * IDENT = ( IDENT ## IDENT * ) & IDENT ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT = ( IDENT ## IDENT * ) & ( IDENT ) -> IDENT [ INT_CONST ] ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT [ IDENT ] , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT ) / INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED LONG ) IDENT ) >> INT_CONST ) & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( {} )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( IDENT & ~ IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT >= IDENT ) { IDENT = &v IDENT ; IDENT -= IDENT ; } ELSE { IDENT = &v IDENT ; IDENT -= IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT ) ) { UNSIGNED LONG IDENT ; IDENT ( IDENT ) ; IDENT ( ) ; IDENT = IDENT -> IDENT [ IDENT -> IDENT ] ; IDENT -> IDENT v-- ; IDENT -> IDENT = ( IDENT -> IDENT + INT_CONST ) % IDENT ; IDENT ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) { STRUCT IDENT IDENT ; IDENT ( &v IDENT ) ; IF ( IDENT || IDENT ) IDENT ( STRING IDENT STRING STRING , ( ( LONG INT ) IDENT . IDENT * INT_CONST + IDENT . IDENT ) ) ; }
5  #DEFINE OBJ_MAC IDENT ( STRING , IDENT -> IDENT ) ; IDENT
6  #DEFINE OBJ_MAC CHAR
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT ) & INT_CONST ) , ( ( IDENT -> IDENT ) & INT_CONST ) , ( ( IDENT -> IDENT ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) DO { IDENT ( IDENT , STRING IDENT STRING IDENT STRING IDENT , ( ( UNSIGNED LONG ) IDENT ( ) ) , IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) IDENT ( ( UNSIGNED LONG ) ( IDENT ) ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ! ( IDENT ) ) IDENT ( ( IDENT ) -> IDENT . IDENT ) ; } WHILE ( INT_CONST )
9  #DEFINE OBJ_MAC INT_CONST + IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT VOLATILE ( STRING # IDENT STRING : STRING ( *v ( INT *p ) & ( IDENT ) ) )
9  #DEFINE OBJ_MAC ( INT_CONST * ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST )
1  #DEFINE OBJ_MAC DO { IDENT ( STRING , IDENT , IDENT ) ; GOTO #ERROR ; } WHILE ( INT_CONST )
5  #DEFINE OBJ_MAC ( *v IDENT [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , INT_CONST , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED CHAR ) ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT . IDENT [ IDENT ] . IDENT &= ~ IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v ( IDENT -> IDENT [ IDENT ] ) )
10  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST ) ? ( IDENT ) IDENT ?: ( IDENT ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( INT ) & ( ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT ) ) + SIZEOF ( IDENT -> IDENT ) ) <= IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) && *v ( IDENT ) == IDENT ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) CASE IDENT ## IDENT : IDENT = IDENT = IDENT ## IDENT ; BREAK
33  #DEFINE OBJ_MAC INT_CONST * INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST )
5  #DEFINE OBJ_MAC IDENT STRING STRING STRING
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT *= IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT -> IDENT , &v IDENT , INT_CONST , IDENT , IDENT ) ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , ( IDENT * ) ( IDENT ) , ( IDENT ) ) ;
1  #DEFINE OBJ_MAC ; INT_CONST ;
1  #DEFINE OBJ_MAC INT_CONST + IDENT + ( INT_CONST * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT == INT_CONST || IDENT == INT_CONST ) { IDENT IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT &= ~ IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT == INT_CONST ? ( CHAR *p ) IDENT ( IDENT ) ?: ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST || ( IDENT ) > INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT << INT_CONST ) | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) -> IDENT - IDENT ( IDENT ) -> IDENT >= ( IDENT ) ? IDENT ( IDENT ) -> IDENT [ IDENT ] ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) - IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) & ( ( ( STRUCT IDENT * ) IDENT ) -> IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT >= INT_CONST )
6  #DEFINE OBJ_MAC UNSIGNED IDENT
1  #DEFINE OBJ_MAC ( *v ( UNSIGNED CHAR *p ) ( IDENT + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT - IDENT ) + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST * IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT + IDENT ( INT_CONST , IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ) = ( IDENT )
1  #DEFINE OBJ_MAC ( INT_CONST + SIZEOF ( IDENT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) DO { INT IDENT ; FOR ( IDENT = INT_CONST * IDENT ; IDENT > INT_CONST ; --v IDENT ) IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) { IF ( IDENT & IDENT ) IDENT ( IDENT STRING IDENT , IDENT , ## IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT , IDENT , ## IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) ? IDENT ( ( IDENT ) , ( IDENT ) - INT_CONST ) ?: IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( IDENT ) ?: IDENT ( ( IDENT ) , IDENT . IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT * ( IDENT ) -> IDENT + ( IDENT ) -> IDENT * ( IDENT ) -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) -> IDENT >> INT_CONST ) & INT_CONST ) | ( ( ( IDENT ) -> IDENT << INT_CONST ) & INT_CONST ) | ( ( IDENT ) -> IDENT & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( INT ) ( FLOAT_CONST * ( IDENT [ IDENT ] / IDENT [ IDENT ] ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( IDENT ) = *v ( IDENT ) & INT_CONST ; ( IDENT ) += IDENT ( *v ( ( IDENT ) + INT_CONST ) ) << INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT <= IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) = IDENT ( ( IDENT ) , ( IDENT ) ) ;
1  #DEFINE OBJ_MAC ( VOID *p ) ( LONG )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = IDENT ; IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( &v IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( INT_CONST ) ; *v IDENT v++ = ( UNSIGNED CHAR ) ( IDENT ) ; *v IDENT v++ = ( UNSIGNED CHAR ) ( IDENT ) ; *v IDENT v++ = ( UNSIGNED CHAR ) ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , STRING , STRING , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( CHAR *p ) IDENT ) + IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) >> INT_CONST )
3  #DEFINE OBJ_MAC ( IDENT - IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT >= INT_CONST ) IDENT IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) [ INT_CONST ] << INT_CONST ) | ( ( IDENT ) [ INT_CONST ] << INT_CONST ) | ( ( IDENT ) [ INT_CONST ] << INT_CONST ) | ( ( IDENT ) [ INT_CONST ] ) )
11  #DEFINE OBJ_MAC ( ( IDENT ) & IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) -> IDENT ) - ( IDENT ) -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { ( IDENT ) -> IDENT = IDENT ( ( IDENT ) -> IDENT ) ; }
2  #DEFINE OBJ_MAC < IDENT . IDENT >
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT != INT_CONST ) IDENT -> IDENT v-- ;
8  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( IDENT ) = ( IDENT ) -> IDENT ; IF ( ( IDENT ) != IDENT ) { ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT = IDENT ; } IF ( ( IDENT ) -> IDENT == IDENT ) ( IDENT ) -> IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC INT IDENT = INT_CONST , IDENT = INT_CONST , IDENT = INT_CONST ; VOID *p IDENT = INT_CONST
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT . IDENT == IDENT ) ? INT_CONST ?: IDENT -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT += IDENT ( IDENT , STRING , # IDENT , IDENT ( IDENT , IDENT ) )
1  #DEFINE OBJ_MAC INT IDENT = IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT VOID IDENT ## IDENT ( UNSIGNED LONG IDENT , UNSIGNED LONG IDENT , UNSIGNED LONG IDENT , UNSIGNED LONG IDENT , STRUCT IDENT IDENT ) { UNSIGNED LONG IDENT ; IDENT VOLATILE ( STRING : STRING ( IDENT ) ) ; IDENT ( ) ; IDENT -> IDENT . IDENT = IDENT ; IDENT -> IDENT . IDENT = IDENT ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , &v IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * IDENT - IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( &v IDENT [ IDENT ( IDENT ) - INT_CONST ] )
1  #DEFINE FUNC_MAC ( ) IDENT ( ( IDENT -> IDENT ) , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( ( IDENT ) , STRING , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] * IDENT [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT ( IDENT ( IDENT ) ) ) { IDENT ( IDENT ( IDENT ) , ( IDENT ) , IDENT ( IDENT ) ) ; } ELSE { IDENT ( IDENT ( IDENT ) , ( IDENT ) , IDENT ( IDENT ) ) ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { UNSIGNED CHAR IDENT ; UNSIGNED CHAR *p IDENT ; IDENT ( IDENT , ( IDENT ) + INT_CONST ) ; IDENT = ( IDENT ) -> IDENT ; IDENT = IDENT [ IDENT ] ; IDENT [ IDENT ] = INT_CONST ; ( IDENT ) -> IDENT . IDENT [ IDENT ] = ( IDENT ) IDENT ( IDENT ) ; IDENT [ IDENT ] = IDENT ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT + IDENT * INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT >= ( IDENT ) ) { IDENT ( IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ IDENT ( IDENT ) ] . IDENT & IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ ( IDENT ) ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN INT_CONST - ( IDENT <= IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) ) { IDENT ( STRING , # IDENT , IDENT , IDENT , IDENT ) ; IDENT ( ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & ~ INT_CONST ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT > IDENT || IDENT < INT_CONST ) RETURN ( -v IDENT ) ; IF ( IDENT [ IDENT ] == IDENT ) RETURN ( -v IDENT ) ; IF ( IDENT [ IDENT ] -> IDENT ) RETURN -v IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) , ( ( IDENT ) == INT_CONST ) ? STRING ?: STRING
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) ( IDENT ( IDENT STRING IDENT , ## IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( ( IDENT ) -> IDENT ) IDENT = IDENT ( ( IDENT ) -> IDENT . IDENT ) ; ELSE IDENT = IDENT ; IF ( IDENT ) IDENT = IDENT ; ELSE { IDENT = IDENT ; IDENT = IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( *v ( IDENT -> IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT ) ,
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT IDENT , IDENT ; INT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT , INT_CONST , INT_CONST ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( CHAR *p ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT & IDENT ) ? ( IDENT ) ?: ! ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( *v ( UNSIGNED SHORT *p ) & ( ( IDENT ) -> IDENT ) )
7  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ! ( IDENT ) || ( IDENT ) % ( IDENT ) ) ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = IDENT + IDENT )
4  #DEFINE OBJ_MAC IDENT - INT_CONST
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT & ( IDENT ) ) IDENT ( IDENT IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT + ( IDENT * IDENT / INT_CONST ) ) / ( IDENT * IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + IDENT ( ( IDENT ) - IDENT ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT -> IDENT ) ( IDENT , IDENT , IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED IDENT ) ( IDENT ) >> IDENT / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( &v ( IDENT ) -> IDENT , ( IDENT ) , ( IDENT ) )
30732  #DEFINE OBJ_MAC INT_CONST
4  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST <= ( IDENT ) ) && ( ( IDENT ) <= INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { WHILE ( ( IDENT ) -> IDENT ) IDENT ( ) ; ( IDENT ) -> IDENT = INT_CONST ; IDENT ( IDENT ) ; IDENT ( ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( ( LONG ) ( ~ ( IDENT ) & ( ( IDENT ) | ( ( IDENT ) + ( IDENT ) ) ) ) < INT_CONST ) GOTO IDENT ;
1  #DEFINE FUNC_MAC ( ) IDENT [ IDENT v++ ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) == INT_CONST && ( IDENT ) != INT_CONST ) || ( ( IDENT ) == INT_CONST ) || ( ( IDENT ) == INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) - INT_CONST ) = ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , &v IDENT ( IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p ) ( ( CHAR *p ) ( IDENT ) + IDENT ( SIZEOF ( STRUCT IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( ) * IDENT = ( IDENT |= IDENT ( IDENT , IDENT ) ) ; IDENT ( IDENT , IDENT , INT_CONST , INT_CONST ) ;
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ( IDENT + INT_CONST ) | INT_CONST , IDENT + INT_CONST ) , IDENT ( INT_CONST | IDENT , IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT & IDENT ) { IDENT ( IDENT -> IDENT , IDENT ) ; ++v IDENT -> IDENT . IDENT ## IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ) IDENT ( STRING IDENT , ## IDENT ) ; ELSE IF ( IDENT ) IDENT ( IDENT STRING IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v IDENT -> IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT ) INT_CONST << ( IDENT - IDENT ) )
70  #DEFINE FUNC_MAC ( IDENT ) DO { } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT - ( IDENT ) -> IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ) IDENT ( IDENT ) ; ELSE { IDENT ( INT_CONST , INT_CONST ) ; IDENT = IDENT ( INT_CONST ) ; IDENT |= IDENT ( INT_CONST ) << INT_CONST ; } } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT -> IDENT . IDENT , IDENT )
2  #DEFINE OBJ_MAC ( IDENT < IDENT -> IDENT ? IDENT -> IDENT - IDENT - INT_CONST ?: IDENT -> IDENT - IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + IDENT + ( IDENT ) - INT_CONST ) - ( ( ( IDENT ) + ( IDENT ) - INT_CONST ) % ( IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT , CONST ) ( ( IDENT ) * ( CONST ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) == IDENT ) ? ( ( IDENT ) & INT_CONST ) >> INT_CONST ?: ( ( IDENT ) & INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT & IDENT ) IDENT IDENT
1  #DEFINE FUNC_MAC ( ) { IDENT ( IDENT -> IDENT , IDENT ) ; IDENT -> IDENT = INT_CONST ; IDENT ( ( CHAR *p ) IDENT ) ; RETURN IDENT ; }
1  #DEFINE OBJ_MAC ( *v ( VOLATILE UNSIGNED CHAR *p ) ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT )
1  #DEFINE OBJ_MAC ( ( INT_CONST - IDENT - IDENT ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) ( ( IDENT ) IDENT + ( IDENT ) IDENT ) , IDENT ) ;
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT VOLATILE ( STRING # IDENT STRING : STRING ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT )
2  #DEFINE OBJ_MAC ( ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { UNSIGNED INT IDENT = INT_CONST , IDENT , IDENT = IDENT ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT |= IDENT << INT_CONST ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT |= IDENT << INT_CONST ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT |= IDENT << INT_CONST ; IF ( IDENT ) GOTO IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) == IDENT ) || ( ( IDENT ) >= INT_CONST ) ) ? IDENT ?: IDENT
1  #DEFINE OBJ_MAC ( INT_CONST * IDENT . IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , INT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) ( IDENT + IDENT ) , ( IDENT ) IDENT )
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( UNSIGNED SHORT *p ) IDENT ) [ INT_CONST ] = ( UNSIGNED SHORT ) IDENT , ( ( UNSIGNED SHORT *p ) IDENT ) [ INT_CONST ] = ( UNSIGNED SHORT ) IDENT , IDENT v++ )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( IDENT ) < IDENT ) ( IDENT ) = IDENT ; IF ( ( IDENT ) > IDENT ) ( IDENT ) = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << INT_CONST ) & INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT ) . IDENT - ( IDENT ) . IDENT )
4  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >= CHAR_CONST ) && ( ( IDENT ) <= CHAR_CONST ) ) ? ( ( IDENT ) + INT_CONST ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT = ( IDENT ) - IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT & IDENT )
7  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) -> IDENT . IDENT )
1  #DEFINE OBJ_MAC ( ( VOID ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( IDENT += IDENT ( IDENT , IDENT , IDENT ) + IDENT , IDENT = IDENT << IDENT | IDENT >> ( INT_CONST - IDENT ) , IDENT += IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( { UNSIGNED LONG IDENT ; IDENT ( STRING : STRING ( IDENT ) : STRING ( IDENT ) ) ; IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ( IDENT ( ( IDENT ) , ( IDENT ) - INT_CONST ) , ( IDENT ) ) = ( IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST << ( IDENT + INT_CONST + IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT ( IDENT , IDENT ) )
1  #DEFINE OBJ_MAC DO { IF ( IDENT -> IDENT [ IDENT ] > INT_CONST ) { IDENT ( IDENT , STRING , IDENT + INT_CONST , IDENT -> IDENT , IDENT -> IDENT [ IDENT ] , IDENT -> IDENT -> IDENT [ IDENT -> IDENT [ IDENT ] - INT_CONST ] -> IDENT ) ; } ELSE { IDENT ( IDENT , STRING , IDENT + INT_CONST , IDENT -> IDENT , IDENT -> IDENT [ IDENT ] ) ; } } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC ( ( SIZEOF ( IDENT ) - INT_CONST ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT != IDENT && ( IDENT -> IDENT == IDENT || IDENT -> IDENT == IDENT ) && IDENT -> IDENT != IDENT ) ; IF ( ! IDENT || ( IDENT -> IDENT != IDENT && IDENT -> IDENT != IDENT ) || ! IDENT -> IDENT ) RETURN ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & IDENT ) == IDENT ) )
2  #DEFINE OBJ_MAC ( INT_CONST + IDENT * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT , IDENT ) ) RETURN -v IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT [ IDENT . IDENT v++ ] . IDENT = ( UNSIGNED CHAR *p ) ( IDENT )
1  #DEFINE OBJ_MAC ( FLOAT_CONST * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) > INT_CONST ) ? INT_CONST ?: ( ( ( IDENT ) <= INT_CONST ) ? INT_CONST ?: ( IDENT ) & INT_CONST ) ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IF ( ! ( IDENT ) ) { IF ( ( IDENT ( ( IDENT ) -> IDENT . IDENT ) < IDENT ) || ( IDENT ( ( IDENT ) -> IDENT . IDENT ) > IDENT ( ( IDENT ) -> IDENT . IDENT ) ) || ( IDENT ( ( IDENT ) -> IDENT . IDENT ) > ( ( ( IDENT ) == INT_CONST ) ? IDENT ?: IDENT >> IDENT ) ) ) { IDENT ( INT_CONST , ( STRING ) ) ; IDENT ( IDENT ) ; IDENT ( ( IDENT ) -> IDENT , IDENT ) ; IDENT = IDENT ; IDENT = IDENT ; } } }
4  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( ( IDENT ) + IDENT , ( IDENT ) ) ; ( IDENT ) = ( IDENT ( ( IDENT ) + IDENT ) ) ; } WHILE ( INT_CONST )
4  #DEFINE OBJ_MAC ( ( SIZEOF ( LONG ) - SIZEOF ( INT ) ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT > INT_CONST ? IDENT ?: -v IDENT )
1  #DEFINE OBJ_MAC ( ( ( ( UNSIGNED LONG ) & IDENT ) + INT_CONST ) & ~ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( *v IDENT [ IDENT [ IDENT ] . IDENT ] . IDENT ) ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( &v IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT VOID IDENT ( IDENT ) ; VOID IDENT ## IDENT ## IDENT ( VOID ) { IDENT ( IDENT STRING IDENT ( IDENT ) # IDENT STRING STRING IDENT STRING IDENT ( % % IDENT ) STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING IDENT ( IDENT ) STRING : : STRING ( &v IDENT . IDENT [ INT_CONST ] [ IDENT + INT_CONST ] ) , STRING ( &v IDENT [ IDENT + INT_CONST ] ) , STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT & INT_CONST ? ( IDENT & INT_CONST ? &v IDENT . IDENT ?: &v IDENT . IDENT ) ?: ( IDENT & INT_CONST ? &v IDENT . IDENT ?: &v IDENT . IDENT ) ) , STRING ( IDENT ( INT_CONST ) ) ) ; FOR ( ; ; ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST ? INT_CONST ?: ( IDENT ) > INT_CONST ? INT_CONST ?: ( IDENT ) * INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT IDENT = IDENT [ IDENT - INT_CONST ] ; INT IDENT = IDENT ; INT IDENT ; IF ( IDENT ) { IDENT = IDENT ; ( VOID ) IDENT ; } ELSE IDENT = -v INT_CONST ; IDENT ( IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( IDENT ) - ( CHAR *p ) & IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( ( IDENT ) & ( INT_CONST << ( IDENT ) ) ) ( IDENT ) -> IDENT . IDENT . IDENT |= ( INT_CONST << ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT = ( IDENT & ~ IDENT ( IDENT ## IDENT , IDENT ## IDENT ) ) | IDENT ( IDENT ## IDENT , IDENT ## IDENT , IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) + IDENT , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ IDENT ] & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { UNSIGNED INT IDENT ; UNSIGNED SHORT IDENT ; IDENT |= IDENT ( IDENT , &v IDENT -> IDENT ) ; IDENT VOLATILE ( STRING # IDENT STRING : STRING ( IDENT ) ) ; IDENT |= IDENT ; IF ( IDENT != IDENT ) IDENT ( IDENT , IDENT ) ; }
8  #DEFINE OBJ_MAC ( INT_CONST + ( INT ) ( IDENT * IDENT / IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & ( ( ( IDENT * ) INT_CONST ) -> IDENT ) )
2  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST + INT_CONST + INT_CONST )
4  #DEFINE OBJ_MAC ( &v IDENT -> IDENT )
1  #DEFINE OBJ_MAC ( ( UNSIGNED INT ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >= CHAR_CONST ) && ( IDENT <= INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ( IDENT ( IDENT , IDENT ) , IDENT ( IDENT ) ) ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ( ( ( INT ) IDENT * ( INT ) IDENT + INT_CONST ) >> INT_CONST )
1  #DEFINE OBJ_MAC IDENT [ INT_CONST ] . IDENT . IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT . IDENT = IDENT ( IDENT . IDENT . IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING STRING , IDENT ) ; IDENT ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) ( ( IDENT ) IDENT + ( IDENT ) IDENT ) , ( IDENT ) ) ;
9  #DEFINE OBJ_MAC VOID *p IDENT
3  #DEFINE OBJ_MAC ( *v ( UNSIGNED CHAR *p ) ( IDENT + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) ( IDENT ) ) -> #ERROR )
1  #DEFINE OBJ_MAC ( ( IDENT * INT_CONST / INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT [ IDENT ] > IDENT ) { IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) = ( IDENT * ) IDENT ( IDENT , ( IDENT ) * SIZEOF ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ( ) - IDENT )
2  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) - SIZEOF ( IDENT ) )
1  #DEFINE OBJ_MAC { IDENT IDENT ; IDENT ( IDENT ) ; IDENT ( &v IDENT , IDENT ) ; IDENT ( ) ; }
1  #DEFINE OBJ_MAC ( ( IDENT ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT - IDENT ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) * ( IDENT ) , IDENT - IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT [ IDENT ] = IDENT ; IDENT = IDENT + IDENT - IDENT ; IDENT = *v IDENT ; *v IDENT = CHAR_CONST ; IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) * ( IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ! IDENT ) ? ( IDENT ) -> IDENT ?: ( IDENT ) -> IDENT ? ( IDENT ) -> IDENT [ ( IDENT ) ] ?: INT_CONST
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( VOID *p ) ( IDENT ) , ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { ; }
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) . IDENT , IDENT )
7  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT IDENT , IDENT IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT ) + INT_CONST ; IF ( IDENT < IDENT ) RETURN IDENT ; IDENT ( IDENT , IDENT ) ; IDENT += IDENT ; IDENT -= IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT -> IDENT + ( IDENT ) ) )
2  #DEFINE OBJ_MAC * IDENT
32  #DEFINE OBJ_MAC INT_CONST << INT_CONST
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT &= INT_CONST ; , ( IDENT ) )
38  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT )
18  #DEFINE OBJ_MAC ( STRING )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT ( IDENT -> IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) < INT_CONST ) ? ( -v ( IDENT ) ) ?: ( IDENT ) )
2  #DEFINE OBJ_MAC { IDENT IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + IDENT , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ( ( CHAR *p ) IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT & IDENT ) ? ( IDENT -> IDENT << INT_CONST ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ? IDENT ( IDENT , IDENT , IDENT , IDENT ) ?: -v INT_CONST )
1  #DEFINE FUNC_MAC ( ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IDENT = INT_CONST ; } }
6  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == INT_CONST ? ( IDENT ) ?: IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT , IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) . IDENT [ INT_CONST ] ) , IDENT ( ( IDENT ) . IDENT [ INT_CONST ] ) , IDENT ( ( IDENT ) . IDENT [ INT_CONST ] ) , IDENT ( ( IDENT ) . IDENT [ INT_CONST ] ) , IDENT ( ( IDENT ) . IDENT [ INT_CONST ] ) , IDENT ( ( IDENT ) . IDENT [ INT_CONST ] ) , IDENT ( ( IDENT ) . IDENT [ INT_CONST ] ) , IDENT ( ( IDENT ) . IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST ? INT_CONST ?: ( IDENT ) > INT_CONST ? INT_CONST ?: INT_CONST - ( IDENT ) * INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT = IDENT -> IDENT -> IDENT , ( ! IDENT ( IDENT ) ) ? IDENT ( IDENT , STRING , IDENT ( IDENT ) , IDENT ( IDENT ) ) ?: ( VOID ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ) ; ( *v ( VOLATILE IDENT * ) ( ( IDENT * ) ( IDENT + INT_CONST ) ) = ( IDENT ) IDENT ) ; IDENT ( ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { UNSIGNED SHORT IDENT = IDENT ( IDENT , IDENT ) ; IF ( IDENT ) IDENT |= ( IDENT ) ; ELSE IDENT &= ~ ( IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IDENT IDENT { IDENT IDENT ; INT IDENT = INT_CONST ; IDENT IDENT ; INT IDENT ; IDENT ( INT_CONST ) ; IF ( ( IDENT = IDENT ( &v IDENT ) ) == INT_CONST ) { IDENT = IDENT ## IDENT IDENT ; IDENT ( &v IDENT ) ; } ELSE { IF ( IDENT != IDENT ) { IDENT ( IDENT ) ; } IDENT ( IDENT ) ; } RETURN ( IDENT ( ) ? -v INT_CONST ?: IDENT ) ; } IDENT ## IDENT IDENT IDENT
3  #DEFINE OBJ_MAC ( ( INT_CONST << IDENT ) * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) CASE IDENT ( IDENT , IDENT , IDENT , IDENT ) : { IDENT ( STRING # IDENT STRING ) ; IDENT -> IDENT = IDENT ## IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { IDENT ( ( IDENT ) , ( IDENT ) + ( IDENT ) ) ; } )
1  #DEFINE OBJ_MAC ( IDENT + ( INT_CONST * IDENT ) )
3  #DEFINE OBJ_MAC LONG LONG
1  #DEFINE OBJ_MAC ( ! ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) * IDENT = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT != IDENT ) && ( IDENT != IDENT ) ) && ( IDENT ( IDENT ) == IDENT ( IDENT ) ) )
1  #DEFINE OBJ_MAC INT_CONST * INT_CONST * INT_CONST * IDENT
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT STRING ) ; RETURN -v IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT || ( IDENT <= IDENT ) ) IDENT IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IDENT ( ~ IDENT )
1  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT . IDENT . IDENT ) == INT_CONST && IDENT ( IDENT . IDENT . IDENT , STRING , INT_CONST ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT -> IDENT == IDENT ) ) , IDENT ( ( IDENT -> IDENT == IDENT ) ) , IDENT ( ! ( IDENT -> IDENT & IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( ( IDENT ) -> IDENT & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( IDENT ) * IDENT )
1  #DEFINE OBJ_MAC IDENT = ! IDENT ( IDENT [ IDENT ] . IDENT ) && ( ( ( IDENT ( IDENT ) -> IDENT != INT_CONST ) ? INT_CONST ?: ( IDENT ( IDENT [ IDENT ] . IDENT ) << INT_CONST ) ) | IDENT ( IDENT [ IDENT ] . IDENT ) ) == *v IDENT ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( CHAR *p ) IDENT , ( CHAR *p ) IDENT , INT_CONST * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) |= ( ( UNSIGNED ) ( IDENT ) & ( IDENT ) ) >> ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) < INT_CONST ) RETURN -v INT_CONST
18  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT ( ( IDENT ) , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT , IDENT ) ; ( IDENT ) += INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) IDENT [ INT_CONST ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ? ( CHAR ) IDENT [ ( UNSIGNED CHAR ) ( IDENT ) ] ?: ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( STRUCT IDENT * ) & ( IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( IDENT ) |= ( IDENT ) )
13  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + IDENT - INT_CONST ) >> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) == IDENT [ INT_CONST ] || ( IDENT ) ( IDENT ) == IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) == IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT [ IDENT ] = IDENT ; IDENT [ IDENT ] = IDENT ; IDENT [ IDENT ] = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) . IDENT == INT_CONST ) || ( IDENT [ IDENT ] != ( IDENT ) . IDENT [ ( IDENT ) ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( UNSIGNED INT *p ) & ( IDENT ) ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( IDENT ) / INT_CONST ) )
1  #DEFINE OBJ_MAC ( IDENT . IDENT == IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT >> INT_CONST ) & INT_CONST ) | ( ( IDENT << INT_CONST ) & INT_CONST ) )
1  #DEFINE OBJ_MAC ( ( UNION IDENT * ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) [ INT_CONST ] & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( { UNSIGNED LONG IDENT = INT_CONST ; UNSIGNED LONG *p IDENT = &v IDENT ; IF ( IDENT == INT_CONST ) { IDENT = INT_CONST ; IDENT = ( ( ( LONG ) ( IDENT ? ( UNSIGNED ) IDENT ( IDENT , IDENT ) ?: INT_CONST ) ) << INT_CONST ) | ( UNSIGNED ) IDENT ( IDENT + INT_CONST , IDENT ) ; } ELSE IF ( IDENT ) IDENT = IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; } )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( ( VOID ) INT_CONST ) ?: IDENT ( # IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( IDENT -> IDENT . IDENT [ ( IDENT ) ] , -v ( IDENT ) ( IDENT ) , -v INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING IDENT STRING :c :c STRING ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = IDENT . IDENT [ IDENT ] ; IDENT ^= IDENT ( IDENT [ INT_CONST ] [ IDENT ] , IDENT ) ; IDENT ^= IDENT ( IDENT [ INT_CONST ] [ IDENT ] , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( INT_CONST , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST / SIZEOF ( UNSIGNED LONG ) ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) | ( ( IDENT ) << INT_CONST ) ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) < ( IDENT ) ? IDENT ?: IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { CHAR IDENT [ INT_CONST ] ; INT IDENT = IDENT ; IF ( IDENT > INT_CONST ) IDENT = INT_CONST ; IDENT ( IDENT , ( CHAR *p ) IDENT -> IDENT -> IDENT , IDENT ) ; IDENT [ IDENT ] = INT_CONST ; IDENT += IDENT ( IDENT + IDENT , STRING , # IDENT , IDENT -> IDENT -> IDENT ) ; }
856  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) [ ( UNSIGNED ) ( IDENT ) / IDENT ] & ( INT_CONST << ( ( UNSIGNED ) ( IDENT ) % IDENT ) ) )
1  #DEFINE OBJ_MAC ( ( IDENT * ) ( IDENT -> IDENT . IDENT ) ) -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) ( IDENT ) )
1  #DEFINE OBJ_MAC DO { UNSIGNED CHAR IDENT = IDENT ( INT_CONST ) ; IDENT = IDENT ( INT_CONST ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT [ IDENT ] , IDENT , IDENT )
8  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT ]
8  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT -> IDENT , IDENT )
2  #DEFINE OBJ_MAC UNSIGNED INT IDENT , IDENT ; VOLATILE CHAR *p IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( INT_CONST & ( ( ( IDENT ) ( IDENT ) ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) < INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT VOID IDENT ( STRUCT IDENT * IDENT , LONG IDENT ) { IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) > ( IDENT ) ) ? ( IDENT ) ?: ( IDENT = IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { INT IDENT = ( IDENT ) ; IDENT ( ) ; RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT = IDENT + IDENT v++ ; IDENT -> IDENT = IDENT ; IDENT -> IDENT = INT_CONST ; IDENT -> IDENT = IDENT ; IDENT -> IDENT = INT_CONST ; IDENT -> IDENT = ( IDENT - IDENT ) >> INT_CONST ; IDENT -> IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) ) && ( ( IDENT ( IDENT ( ( IDENT ) ) , IDENT ) && IDENT ( ( IDENT ) -> IDENT , IDENT ) ) || ( IDENT ( IDENT ( ( IDENT ) ) , IDENT ) && IDENT ( ( IDENT ) -> IDENT , IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT -= ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) . IDENT && ! IDENT ( ( IDENT ) , ( IDENT ) . IDENT , ( IDENT ) ) && IDENT ( ( IDENT ) . IDENT ) == ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! IDENT ( IDENT , IDENT , INT_CONST ) ) IDENT ( IDENT )
3  #DEFINE OBJ_MAC ( IDENT | IDENT * ( IDENT + IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( ( IDENT * ) ( IDENT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) { IDENT ( IDENT ) ; IDENT v++ ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( ( ( IDENT ) ( IDENT ) << INT_CONST ) | ( ( ( ( IDENT ) ( IDENT ) ) ) >> INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) VOID IDENT ## IDENT ( VOID ) IDENT ( ( IDENT ( STRING ) ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT &= ~ ( INT_CONST << ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , STRING , IDENT , ( IDENT ( IDENT ) ? STRING ?: STRING ) ) ; RETURN IDENT ; }
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) == INT_CONST )
1  #DEFINE FUNC_MAC ( ) CHAR *p IDENT = IDENT ( IDENT , STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( IDENT , INT_CONST , ( ( IDENT + INT_CONST * SIZEOF ( INT ) - INT_CONST ) / ( INT_CONST * SIZEOF ( INT ) ) ) * SIZEOF ( INT ) ) ; IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( ( IDENT ) & IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + ( ( IDENT ) - INT_CONST ) ) / ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT ## IDENT : IF ( ! ( IDENT & ( INT_CONST << IDENT ) ) ) { IDENT = INT_CONST ; GOTO IDENT ## IDENT ; } IF ( ( IDENT & ( INT_CONST << IDENT ) ) != ( INT_CONST << IDENT ) ) GOTO IDENT ## IDENT ; IF ( IDENT ) IDENT ( IDENT ) ; IDENT -> IDENT . IDENT = INT_CONST ; IDENT -> IDENT . IDENT = IDENT -> IDENT . IDENT ; IDENT = INT_CONST ; IDENT = INT_CONST - IDENT ; GOTO IDENT ## IDENT ; IDENT ## IDENT : IDENT v-- ; IDENT = ( IDENT & ( ( ~ INT_CONST ) << IDENT ) ) | ( ( IDENT & ~ ( ( ~ INT_CONST ) << IDENT ) ) << INT_CONST ) ; GOTO IDENT ## IDENT ; } )
67  #DEFINE OBJ_MAC IDENT ( IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = ( IDENT + INT_CONST ) / INT_CONST * INT_CONST ; IDENT ## IDENT ## IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( IDENT * IDENT + INT_CONST ) / INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT ) ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ) -> IDENT . IDENT -= ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT != INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT ^= IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT ## IDENT ] = IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST - ( IDENT << INT_CONST ) )
1  #DEFINE OBJ_MAC IDENT ( ( IDENT ( INT_CONST ) , IDENT ) )
4  #DEFINE OBJ_MAC ( ( VOLATILE UNSIGNED LONG *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT * ) ( IDENT ) , ( IDENT ) ) ; ( VOID ) IDENT ( ( IDENT * ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT . IDENT = INT_CONST | ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT . IDENT = ( IDENT ) ; IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( IDENT ) = ( IDENT ) ; IDENT ( IDENT ) = ( IDENT ) ; IDENT ( IDENT ) = ( IDENT ) ; IDENT ( IDENT ) = IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ) ; IDENT -> IDENT |= ( IDENT ) ; IDENT ( ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , IDENT ) ; IF ( IDENT != IDENT ) { IDENT ( STRING , IDENT , IDENT ) ; IF ( IDENT ) IDENT ( IDENT , IDENT , STRING ) ; } ELSE IDENT ( STRING , IDENT ) ; IDENT ( STRING ) ;
8  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT [ ( ( INT ) IDENT ^ ( *v IDENT v++ ) ) & INT_CONST ] ^ ( IDENT >> INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == ( IDENT ) || ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ) == IDENT && IDENT ( IDENT ) == IDENT ( IDENT ) && IDENT ( IDENT ) == IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) ( ( IDENT ) [ INT_CONST ] ) ) & IDENT ) | ( IDENT & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT ) | INT_CONST ;
2  #DEFINE OBJ_MAC ( ( IDENT -> IDENT <= IDENT -> IDENT ) ? IDENT -> IDENT + IDENT -> IDENT - IDENT -> IDENT ?: IDENT -> IDENT - IDENT -> IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) & ~ INT_CONST ) | ( IDENT != INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT , IDENT , INT_CONST , INT_CONST } ,
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT += IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( { STRUCT IDENT * IDENT , *v *v IDENT ; IDENT = IDENT ; *v IDENT v++ = &v IDENT ; FOR ( IDENT = IDENT ; IDENT != IDENT ; ) { IF ( IDENT == IDENT -> IDENT ) BREAK ; IF ( IDENT < IDENT -> IDENT ) IDENT = &v IDENT -> IDENT ; ELSE IDENT = &v IDENT -> IDENT ; *v IDENT v++ = IDENT ; IDENT = *v IDENT ; } IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = IDENT ( ( IDENT ) ) )
2  #DEFINE OBJ_MAC ( ( ( IDENT * ) IDENT ) -> IDENT )
1  #DEFINE OBJ_MAC ( IDENT / ( INT_CONST * IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * SIZEOF ( UNSIGNED LONG ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID ) IDENT , ( VOID ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) INT_CONST - IDENT [ IDENT ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( CHAR *p ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) - IDENT ( IDENT ( IDENT , IDENT ) ) - IDENT ( SIZEOF ( STRUCT IDENT ) + SIZEOF ( IDENT ) ) - SIZEOF ( DOUBLE ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT && ( IDENT ) -> IDENT -> IDENT . IDENT & IDENT ) ? IDENT ( IDENT , &v IDENT ) ?: IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT = ( ( IDENT ) < INT_CONST ) ? IDENT ?: ( ( IDENT ) ? ( ( IDENT ) | ( IDENT ) ) ?: ( ( IDENT ) & ( ~ IDENT ) ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) { ( *v IDENT -> IDENT . IDENT -> IDENT ) ( IDENT , IDENT -> IDENT . IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) <= INT_CONST + IDENT ) ? INT_CONST ?: ( ( IDENT ) <= INT_CONST + IDENT ) ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( ( IDENT ) & ( ~ INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { INT IDENT ; UNSIGNED LONG IDENT ; IF ( IDENT ## IDENT ## IDENT ) RETURN IDENT ; IDENT ( &v IDENT , IDENT ) ; IDENT = IDENT -> IDENT -> IDENT -> IDENT ## IDENT ## IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( &v IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE OBJ_MAC DO { IDENT ( &v IDENT , IDENT + IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT = IDENT ( IDENT + IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( IDENT ) ) -> IDENT
26  #DEFINE OBJ_MAC IDENT ( IDENT ( &v IDENT ) == INT_CONST ) ;
3  #DEFINE OBJ_MAC * INT_CONST IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IF ( ! ( IDENT ) || ( IDENT ) -> IDENT != IDENT ) { IDENT ( IDENT , IDENT ) ; RETURN -v IDENT ; } } )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT - IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) FOR ( IDENT = INT_CONST ; *v IDENT ; IDENT v++ ) { IDENT *= INT_CONST ; IDENT += *v IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( INT_CONST << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT & INT_CONST ) )
5  #DEFINE OBJ_MAC IDENT * IDENT
2  #DEFINE FUNC_MAC ( ) IDENT = INT_CONST
2  #DEFINE OBJ_MAC { IDENT IDENT }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) && ( IDENT ) <= IDENT && IDENT ( IDENT ) -> IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) ^ ( ( IDENT ) >> INT_CONST ) ) & ( INT_CONST << INT_CONST ) ) == INT_CONST )
2  #DEFINE FUNC_MAC ( ) { STRUCT IDENT * IDENT ; FOR ( IDENT = IDENT ; IDENT ; IDENT = IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT . IDENT = IDENT -> IDENT . IDENT ; IDENT -> IDENT . IDENT = IDENT -> IDENT . IDENT
17  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC INT IDENT = IDENT ; IDENT ( IDENT , STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT < IDENT ) ? IDENT ?: IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) DO { IF ( ! ( IDENT ) ) IDENT ( IDENT IDENT STRING IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC { IF ( ! IDENT ) IDENT ( ) ; IDENT = IDENT ; IDENT = IDENT -> IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ( &v IDENT , &v IDENT , &v IDENT , IDENT , IDENT , IDENT , IDENT ) ) GOTO IDENT ; ELSE IF ( ! IDENT ) GOTO IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( IDENT + ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; } WHILE ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) . IDENT == IDENT ) && ( ( IDENT ) . IDENT > IDENT ) && ( ( ( IDENT ) . IDENT & IDENT ) == ( IDENT << IDENT ) || ( ( IDENT ) . IDENT & IDENT ) == ( IDENT << IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & ( IDENT | IDENT | IDENT ) ) == ( IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) DO { IF ( ( IDENT ) -> IDENT ) IDENT = IDENT ( ( IDENT ) -> IDENT . IDENT , &v IDENT ) ; ELSE { IDENT = IDENT ; IDENT = IDENT ; } IF ( IDENT ) IDENT = IDENT ; ELSE { IDENT = IDENT ; IDENT = IDENT ; } IF ( IDENT ) IDENT = IDENT ; ELSE { IDENT = IDENT ; IDENT = IDENT ; } } WHILE ( INT_CONST )
24  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT + INT_CONST ] & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT -> IDENT && IDENT -> IDENT [ IDENT -> IDENT - INT_CONST ] != CHAR_CONST ) IDENT ( IDENT , STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( SIZEOF ( IDENT ) / IDENT + INT_CONST ) * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( STRING )
18  #DEFINE OBJ_MAC INT_CONST * IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT [ IDENT ] = ( IDENT ) ; IDENT [ IDENT ] = ( IDENT ) ; IDENT += INT_CONST ; } WHILE ( INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ( IDENT ) ; IF ( IDENT > IDENT ## IDENT ) IDENT = IDENT ## IDENT ; IDENT ## IDENT = IDENT ( IDENT ) ; IF ( IDENT && IDENT ) { IF ( IDENT ( IDENT , IDENT , IDENT ) ) RETURN -v IDENT ; }
4  #DEFINE OBJ_MAC ( IDENT == INT_CONST ? INT_CONST ?: IDENT )
12  #DEFINE OBJ_MAC ( IDENT ? INT_CONST ?: INT_CONST )
2  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ( &v IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , ( IDENT * ) & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT [ INT_CONST ] = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + ( IDENT ) ) & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( IDENT ) % IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { INT IDENT = IDENT ; WHILE ( --v IDENT >= INT_CONST ) IDENT [ IDENT ] = IDENT [ IDENT ] | IDENT [ IDENT ] ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ## IDENT , IDENT ## IDENT ## IDENT ## IDENT
5  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT == &v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED LONG ) * ( IDENT ) ) << INT_CONST ) + ( ( ( UNSIGNED LONG ) ( IDENT ) [ INT_CONST ] ) << INT_CONST ) + ( ( UNSIGNED LONG ) ( IDENT ) [ INT_CONST ] ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) | ( INT_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) . IDENT == IDENT && ! IDENT ) || ( IDENT ( IDENT ) . IDENT == INT_CONST && IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IF ( ! IDENT || ! IDENT -> IDENT || ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT != IDENT ) { IDENT ( IDENT , IDENT ) ; RETURN ; } } )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT STRING , IDENT , ## IDENT )
4  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( IDENT IDENT IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) , IDENT -> IDENT + ( IDENT ) ) ; IDENT ( IDENT -> IDENT + ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( LONG ) ( IDENT ) - ( LONG ) ( IDENT ) < INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT [ INT_CONST ] . IDENT )
11  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { REGISTER IDENT IDENT = IDENT , IDENT = IDENT ; REGISTER INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) * ( IDENT v++ ) &= ~ *v ( IDENT v++ ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( VOID *p ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( CHAR *p ) INT_CONST ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IF ( ( IDENT & IDENT ) || IDENT == INT_CONST ) IDENT ( IDENT STRING IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT -> IDENT
8  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ( IDENT ) ) , IDENT ( IDENT ( IDENT -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT + IDENT ) , IDENT ( IDENT + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT IDENT ; FOR ( IDENT = ( IDENT ) - INT_CONST ; IDENT >= INT_CONST ; IDENT v-- ) ( IDENT ) [ IDENT ] = INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT ) ~ ( ~ INT_CONST << ( IDENT ) )
1  #DEFINE OBJ_MAC ( STRUCT IDENT * ) INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT v++ ) [ INT_CONST ] = IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST | ( ( IDENT & INT_CONST ) << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT <= ( IDENT ) && ( IDENT ) <= IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ## IDENT ( )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ -v INT_CONST ] = ( *v IDENT = ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) * ( CHAR *p ) ( IDENT ) = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) & INT_CONST )
1  #DEFINE OBJ_MAC INT_CONST < IDENT >
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT >> IDENT ) & IDENT ) << IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) | IDENT | IDENT | ( IDENT ) >> INT_CONST | ( ( ( IDENT ) >> INT_CONST ) - INT_CONST ) << INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST - IDENT ( IDENT [ INT_CONST ] -> IDENT ) )
1  #DEFINE FUNC_MAC ( ) * IDENT = ( IDENT &= ~ IDENT ( IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) STRUCT IDENT * IDENT = ( IDENT ) -> IDENT ; CONST IDENT * IDENT = IDENT -> IDENT ; IDENT IDENT = IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT * IDENT ; IDENT IDENT ; CHAR IDENT [ IDENT ] ; IDENT ( IDENT , INT_CONST , IDENT ) ; IDENT ( IDENT , IDENT - INT_CONST , STRING , IDENT -> IDENT ) ; IDENT = ( IDENT * ) IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( IDENT ) IDENT ( IDENT , STRING ) ; IDENT -> IDENT = IDENT ; } WHILE ( INT_CONST )
3  #DEFINE OBJ_MAC ( IDENT | ( INT_CONST << ( INT ) IDENT ) | ( INT_CONST << IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) FOR ( IDENT = IDENT ; IDENT ; IDENT = IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( ! ( IDENT -> IDENT = IDENT ( IDENT , IDENT , IDENT ( IDENT ) , INT_CONST ) ) ) { IDENT ( IDENT , IDENT ) ; RETURN IDENT ; } }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) ) << ( IDENT ) ) ^ ( UNSIGNED LONG ) ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( IDENT ) { CHAR *p IDENT = INT_CONST ; IDENT IDENT = INT_CONST ; IDENT = IDENT ( IDENT , IDENT , IDENT ( IDENT ) , &v IDENT , &v IDENT ) ; IF ( IDENT < INT_CONST ) GOTO IDENT ; IF ( IDENT ) { IDENT ( IDENT == ( IDENT ) IDENT ( IDENT ) ) ; IDENT = IDENT ; } } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ... ) IDENT += IDENT ( IDENT + IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... ) IDENT ( # IDENT STRING , IDENT ) ; IF ( IDENT -> IDENT != IDENT ) IDENT ( ) ; IF ( IDENT -> IDENT ) IDENT -> IDENT ( IDENT ) ;
1  #DEFINE FUNC_MAC ( ) ( ( IDENT > INT_CONST ? ( ( IDENT = IDENT * IDENT + IDENT ) , IDENT = INT_CONST ) ?: INT_CONST ) , ( IDENT += INT_CONST ) , ( ( IDENT >> ( IDENT - INT_CONST ) ) & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( INT ) ( ( IDENT ) ( IDENT ) * ( IDENT ) -> IDENT / ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT && *v IDENT -> IDENT == CHAR_CONST ) { IF ( IDENT -> IDENT [ INT_CONST ] != CHAR_CONST && IDENT -> IDENT [ INT_CONST ] != INT_CONST ) { IDENT ( IDENT , IDENT ( IDENT ) , IDENT ) ; } ELSE { CHAR *p IDENT = ( CHAR *p ) IDENT ( IDENT ( IDENT -> IDENT ) + IDENT ( IDENT ) + INT_CONST ) ; IDENT ( IDENT , IDENT ) ; IF ( IDENT [ IDENT ( IDENT ) - INT_CONST ] != CHAR_CONST ) IDENT ( IDENT , STRING ) ; IF ( IDENT -> IDENT [ INT_CONST ] && IDENT -> IDENT [ INT_CONST ] ) IDENT ( IDENT , IDENT -> IDENT + INT_CONST ) ; IDENT ( IDENT -> IDENT ) ; IDENT -> IDENT = IDENT ; } }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) * IDENT v++ = INT_CONST ; IF ( IDENT == -v INT_CONST ) { *v IDENT v++ = INT_CONST ; } ELSE { *v IDENT v++ = INT_CONST ; *v IDENT v++ = IDENT ^ INT_CONST ; } *v IDENT v++ = IDENT
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT , ( IDENT -> IDENT >= INT_CONST ? ( IDENT * ) & IDENT -> IDENT [ ( UNSIGNED ) IDENT -> IDENT ] ?: ( IDENT * ) IDENT ) , ( IDENT ) ( ( LONG ) IDENT -> IDENT - IDENT -> IDENT ) , ( IDENT ) ) ; IDENT -> IDENT = IDENT -> IDENT ; IDENT ( IDENT -> IDENT ) ; IDENT ( ( IDENT , STRING ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST && ( IDENT ) < IDENT && IDENT [ IDENT ] . IDENT != IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) == IDENT || IDENT ( IDENT ) == IDENT ) && IDENT ( IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { INT IDENT ; LONG IDENT ; FOR ( IDENT = INT_CONST , IDENT = IDENT >> INT_CONST ; IDENT < INT_CONST && IDENT ; IDENT = IDENT >> INT_CONST , IDENT v++ ) { } IDENT . IDENT [ IDENT ] v++ ; IDENT -> IDENT . IDENT [ IDENT ] v++ ; }
2  #DEFINE OBJ_MAC ( CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT >> INT_CONST ) & INT_CONST ) | ( ( ~ IDENT >> INT_CONST ) & INT_CONST ) | ( ( IDENT << INT_CONST ) & INT_CONST ) | ( ( ~ IDENT ) & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >> ( IDENT / INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) == IDENT ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { UNSIGNED INT IDENT ; IDENT ( IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) IDENT ( STRING , IDENT [ IDENT ] & INT_CONST ) ; IDENT ( STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC { STRING , STRING , STRING , STRING }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT IF ( IDENT -> IDENT == INT_CONST ) IDENT = IDENT ; IDENT
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC IDENT IDENT IDENT
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT ( IDENT ) ? IDENT ( IDENT ) ?: -v INT_CONST ; IF ( IDENT < INT_CONST ) { IDENT ( IDENT , IDENT = IDENT ( IDENT , IDENT ) ) ; IF ( ! IDENT ) { IDENT = IDENT ; GOTO IDENT ; } IDENT = ( IDENT ) IDENT ; IDENT = IDENT ; } }
3  #DEFINE FUNC_MAC ( ) ( ( VOID ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + ( SIZEOF ( DOUBLE ) - INT_CONST ) ) & ~ ( SIZEOF ( DOUBLE ) - INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) IDENT ( ( IDENT ) * SIZEOF ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT - IDENT ]
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( IDENT << INT_CONST ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT , IDENT + IDENT ) ; IDENT ( IDENT + IDENT ) ; IDENT ( IDENT , IDENT + IDENT ) ; IDENT ( IDENT + IDENT ) ; }
7  #DEFINE OBJ_MAC ( IDENT * INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { INT IDENT = IDENT ; WHILE ( --v IDENT >= INT_CONST ) IDENT [ IDENT ] = IDENT [ IDENT ] & IDENT [ IDENT ] ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT + IDENT ) , IDENT ( IDENT + IDENT ) , IDENT ( IDENT + IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) <= ( IDENT ) ) ? ( IDENT ) ?: ( IDENT ) )
1  #DEFINE OBJ_MAC IF ( IDENT -> IDENT && ( ! IDENT -> IDENT . IDENT || IDENT -> IDENT . IDENT -> IDENT == IDENT -> IDENT ) ) RETURN ;
5  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == INT_CONST ? STRING ?: STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT & INT_CONST ) << INT_CONST ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & IDENT ) != INT_CONST ) + ( ( ( IDENT ) & IDENT ) != INT_CONST ) * INT_CONST + ( ( ( IDENT ) & IDENT ) != INT_CONST ) * INT_CONST + ( ( ( IDENT ) & IDENT ) != INT_CONST ) * INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , ( IDENT ) , ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { REGISTER IDENT IDENT = IDENT ; REGISTER INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ , IDENT v++ ) * IDENT = ~ *v IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { *v IDENT = ( ( *v IDENT v++ - IDENT ) << INT_CONST ) | INT_CONST ; IF ( *v IDENT < INT_CONST ) { *v IDENT v++ -= INT_CONST ; IF ( *v IDENT > INT_CONST ) * IDENT v++ = ( *v IDENT v++ - INT_CONST ) | INT_CONST ; ELSE *v IDENT v++ = ( *v IDENT v++ - INT_CONST ) | INT_CONST ; } ELSE { IDENT v++ ; *v IDENT v++ = ( *v IDENT v++ - INT_CONST ) | INT_CONST ; } }
2  #DEFINE OBJ_MAC ( INT_CONST | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) |= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT [ ( IDENT ) -> IDENT ]
1  #DEFINE OBJ_MAC ( ( CHAR ) IDENT . IDENT )
3  #DEFINE OBJ_MAC ( INT_CONST * IDENT ) / ( IDENT * IDENT )
8  #DEFINE OBJ_MAC INT_CONST * INT_CONST * INT_CONST
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) -> IDENT * INT_CONST ) / INT_CONST ) <= ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( IDENT ( STRING ) ) ; IDENT ( IDENT ( IDENT ) ) ; IDENT ( IDENT ( STRING ) ) ; IDENT ( IDENT ) ; IDENT ( IDENT ( STRING ) ) ; IDENT IDENT ( STRING IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT IDENT = ( IDENT ) ; IDENT IDENT = ( IDENT ) < INT_CONST ? IDENT ?: INT_CONST ; IDENT = IDENT ( IDENT , ( IDENT ) , &v IDENT , INT_CONST , IDENT , IDENT , IDENT ) ; IF ( IDENT ) { IDENT ( IDENT , IDENT , STRING , ( IDENT ) , ( IDENT ) ) ; IDENT ( IDENT ) ; RETURN IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT ) ( ( IDENT ) ? ( ( IDENT ) / IDENT ) ?: ( IDENT ) )
1  #DEFINE OBJ_MAC EXTERN VOID IDENT ( VOID *p ) ; EXTERN VOID *p IDENT ( IDENT IDENT ) ; EXTERN VOID *p IDENT ( VOID *p , IDENT ) ;
1  #DEFINE OBJ_MAC ( IDENT + ( IDENT * INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) < INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) . IDENT , SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) IF ( IDENT [ IDENT ] . IDENT != IDENT [ IDENT ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) SIZEOF ( IDENT )
32  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST , INT_CONST }
1  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ) ; IDENT -> IDENT &= ~ ( IDENT ) ; IDENT ( ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { INT IDENT = IDENT >> IDENT ; INT IDENT = IDENT - ( IDENT << IDENT ) ; ( IDENT * ) ( IDENT [ IDENT ] -> IDENT + IDENT ) ; } )
2  #DEFINE FUNC_MAC ( IDENT ) ( &v ( IDENT ) -> IDENT )
1  #DEFINE OBJ_MAC IDENT ( INT_CONST , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) * IDENT v++ = IDENT ; *v IDENT v++ = INT_CONST ; *v IDENT v++ = IDENT ^ INT_CONST ; *v IDENT v++ = IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( LONG ) ( IDENT ) ) >= ( ( LONG ) ( IDENT ) -> IDENT ) ) ? IDENT ( ( IDENT ) , SIZEOF ( CHAR ) , INT_CONST , &v ( IDENT ) -> IDENT , &v ( IDENT ) -> IDENT ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ) ) <= IDENT ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IF ( ! ( IDENT & ( IDENT ) ) ) ; ELSE IDENT ( IDENT IDENT STRING IDENT , ## IDENT )
33  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT )
3  #DEFINE OBJ_MAC IDENT [ IDENT ] . IDENT -> IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( IDENT ) IDENT )
2161  #DEFINE OBJ_MAC STRING
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT >> IDENT ) + IDENT ) & IDENT )
85  #DEFINE OBJ_MAC IDENT + INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( ( IDENT ) ( IDENT ) & ~ INT_CONST ) )
11  #DEFINE OBJ_MAC SIZEOF ( STRUCT IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT ) -> IDENT == ( ( IDENT ) -> IDENT - INT_CONST ) ) { ( IDENT ) -> IDENT += INT_CONST ; ( IDENT ) -> IDENT = ( IDENT * ) IDENT ( ( CHAR *p ) ( IDENT ) -> IDENT , ( IDENT ) -> IDENT * SIZEOF ( IDENT ) ) ; } ( IDENT ) -> IDENT [ ++v ( ( IDENT ) -> IDENT ) ] = IDENT ; ( IDENT ) -> IDENT . IDENT = IDENT
2  #DEFINE OBJ_MAC ( ( UNSIGNED CHAR *p ) ( ( ( CHAR *p ) IDENT ) + INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT & INT_CONST ) | ( IDENT << INT_CONST ) ) )
1  #DEFINE OBJ_MAC ( IDENT < IDENT ( INT_CONST , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( ) >> INT_CONST ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) >= ( IDENT ) ) && ( ( IDENT ) <= ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) * ( IDENT ) = IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( VOID ) INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) - INT_CONST ) & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & INT_CONST ) ? ( IDENT - INT_CONST ) ?: ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( *v IDENT ) ( IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( ( INT_CONST << ( IDENT + IDENT ) ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >> ( ( IDENT - ( IDENT ) - INT_CONST ) * INT_CONST ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( ( IDENT ) ^ ( IDENT ) ) | ~ ( ( IDENT ) ^ ( IDENT ) ) ) < INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) FOR ( IDENT = INT_CONST ; IDENT < SIZEOF ( IDENT ## IDENT ## IDENT ## IDENT ) / INT_CONST ; IDENT v++ ) IDENT -> IDENT [ IDENT ## IDENT ## IDENT ## IDENT [ IDENT ] [ INT_CONST ] ] = IDENT ## IDENT ## IDENT ## IDENT [ IDENT ] [ INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT & ( INT_CONST << IDENT ) ) >> IDENT )
1  #DEFINE #ERROR INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >> ( ( IDENT ) + INT_CONST ) ) & INT_CONST )
2  #DEFINE OBJ_MAC ( IDENT ( IDENT , IDENT ) )
1  #DEFINE OBJ_MAC DO { IDENT ( IDENT , STRING , IDENT ) ; IF ( IDENT ) IDENT ( IDENT , STRING ) ; ELSE IDENT ( IDENT , STRING , IDENT -> IDENT ) } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT -> IDENT [ INT_CONST ] >> INT_CONST ) & INT_CONST ) < INT_CONST ) ? IDENT ( IDENT -> IDENT [ INT_CONST ] ) ?: IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT - ( IDENT ) -> IDENT )
2  #DEFINE OBJ_MAC IDENT -> IDENT ->
1  #DEFINE OBJ_MAC ( ( IDENT + INT_CONST + ( INT_CONST * IDENT ) ) * INT_CONST )
18  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( &v ( ( IDENT * ) ( ( IDENT ) -> IDENT ) ) -> IDENT )
6  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( { IF ( IDENT < INT_CONST || IDENT > IDENT ) GOTO IDENT ; INT_CONST ; } )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = ( *v IDENT -> IDENT ) ( IDENT , IDENT ? IDENT ?: STRING , IDENT ? IDENT ( IDENT ) ?: INT_CONST ) ; IF ( IDENT -> IDENT < INT_CONST ) GOTO IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( UNSIGNED LONG ) IDENT ) - ( UNSIGNED LONG ) IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , REGISTER ) IDENT ( IDENT -> IDENT [ REGISTER ] , REGISTER )
2  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT ; UNSIGNED CHAR IDENT [ INT_CONST ] ; IDENT ; IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = INT_CONST * ( IDENT ) + INT_CONST + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( SIZEOF ( IDENT ) == INT_CONST ) ? IDENT ( IDENT ) ?: INT_CONST )
1  #DEFINE OBJ_MAC ( ( CHAR_CONST << INT_CONST ) | ( CHAR_CONST << INT_CONST ) | ( CHAR_CONST << INT_CONST ) | CHAR_CONST )
27  #DEFINE OBJ_MAC ( ~ ( IDENT ( IDENT ) | IDENT ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( UNSIGNED LONG ) IDENT IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ INT_CONST ] = ( ( ( LONG ) ( IDENT ) - ( LONG ) IDENT - INT_CONST ) >> INT_CONST ) | INT_CONST ; IDENT IDENT ( STRING : : STRING ( &v IDENT [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ( &v IDENT , &v IDENT , IDENT ) ) GOTO IDENT ; ELSE IDENT ( IDENT , IDENT ) ; IF ( ! IDENT ) GOTO IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { { IDENT , IDENT , IDENT , IDENT } , { IDENT , IDENT , IDENT , IDENT } }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = ( UNION IDENT * ) IDENT ( IDENT , IDENT ) ; IF ( IDENT ( IDENT ) ) { RETURN IDENT ( IDENT ) ; } IDENT = ( UNION IDENT * ) ( IDENT ) ; IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] . IDENT == IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( INT ) ( ( IDENT & IDENT ) >> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED INT ) ( ( ( ( UNSIGNED INT ) ( IDENT ) & ( UNSIGNED INT ) INT_CONST ) << INT_CONST ) | ( ( ( UNSIGNED INT ) ( IDENT ) & ( UNSIGNED INT ) INT_CONST ) << INT_CONST ) | ( ( ( UNSIGNED INT ) ( IDENT ) & ( UNSIGNED INT ) INT_CONST ) >> INT_CONST ) | ( ( ( UNSIGNED INT ) ( IDENT ) & ( UNSIGNED INT ) INT_CONST ) >> INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT == INT_CONST ) ? ( IDENT ) ?: ( ( ( INT ) ( ( IDENT ) / ( IDENT ) ) ) * ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { ( IDENT ) -> IDENT -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT -> IDENT = ( IDENT ) -> IDENT ; }
6  #DEFINE OBJ_MAC INT_CONST / INT_CONST
4  #DEFINE OBJ_MAC ( ! IDENT && IDENT ( IDENT -> IDENT ) == IDENT && IDENT -> IDENT == IDENT && IDENT -> IDENT != -v INT_CONST )
1  #DEFINE OBJ_MAC { IDENT : IDENT , IDENT : -v INT_CONST , IDENT : IDENT , IDENT : -v INT_CONST , IDENT : IDENT , IDENT : { IDENT : IDENT } , IDENT : INT_CONST , IDENT : IDENT , IDENT : INT_CONST , IDENT : INT_CONST }
2  #DEFINE OBJ_MAC ( SIZEOF ( INT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( VOID *p ) ( ( UNSIGNED LONG ) ( IDENT ) | ( IDENT ) -> IDENT )
1  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST + IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) - INT_CONST * IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT , ( IDENT ) / IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) -> IDENT
111  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT % IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT = IDENT , IDENT -> IDENT = IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) >= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT == IDENT ) IDENT ( ( IDENT ) , ( UNSIGNED IDENT * ) ( IDENT ) ) ; ELSE { UNSIGNED IDENT IDENT [ INT_CONST ] ; IDENT ( ( IDENT ) , IDENT ) ; *v ( ( IDENT * ) IDENT ) = IDENT [ INT_CONST ] ; *v ( ( IDENT * ) IDENT + INT_CONST ) = IDENT [ INT_CONST ] ; *v ( ( IDENT * ) IDENT + INT_CONST ) = IDENT [ INT_CONST ] ; *v ( ( IDENT * ) IDENT + INT_CONST ) = IDENT [ INT_CONST ] ; } } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ~ ( INT_CONST | INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT ) , IDENT , IDENT ) ; IDENT = *v IDENT ; IF ( IDENT ( IDENT ) && IDENT != IDENT ) { IDENT }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) , ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) &= ~ ( INT_CONST << ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , &v IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ INT_CONST ] = IDENT [ IDENT ] ; IDENT [ INT_CONST ] = IDENT [ IDENT + INT_CONST ] ; IF ( IDENT ( IDENT , STRING , &v IDENT ) != INT_CONST ) RETURN -v INT_CONST ; ( ( STRUCT IDENT * ) IDENT ) -> IDENT = IDENT
1  #DEFINE OBJ_MAC IDENT ( IDENT , STRING , IDENT -> IDENT -> IDENT -> IDENT . IDENT , IDENT -> IDENT , IDENT )
4  #DEFINE OBJ_MAC ( ( IDENT + INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT > INT_CONST ? IDENT - INT_CONST ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = ( IDENT ) ; INT IDENT ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { INT IDENT = IDENT ( IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT . IDENT . IDENT = IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT += ( IDENT ) ( IDENT ) ; IF ( IDENT & INT_CONST ) { IDENT &= INT_CONST ; ++v IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) { *v ( VOLATILE UNSIGNED CHAR *p ) ( IDENT -> IDENT ) |= IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT / INT_CONST ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT ( IDENT , IDENT , IDENT + ( ( IDENT ) << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ( IDENT ) ) ( IDENT ) . IDENT = IDENT ; ELSE ( IDENT ) . IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( &v IDENT -> IDENT , IDENT , IDENT , IDENT ) ; IF ( IDENT ( IDENT ) && ! ( IDENT -> IDENT & ( IDENT | IDENT ) ) ) { IDENT = IDENT -> IDENT ( IDENT , IDENT , IDENT -> IDENT , &v IDENT ) ; IF ( IDENT ) { IDENT -> IDENT |= IDENT ; IDENT -> IDENT -> IDENT [ IDENT -> IDENT ] = IDENT ; } ELSE { IDENT = IDENT ; } } ELSE { IDENT ( IDENT ) ; IDENT = IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , SIZEOF ( *v ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT ( IDENT ) + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) STATIC VOID IDENT ## IDENT ( UNSIGNED INT IDENT ) IDENT ( IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( IDENT ) , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( ) { IF ( IDENT & IDENT ) IDENT ( INT_CONST , IDENT ) ; ELSE IF ( IDENT & IDENT ) { IDENT ( INT_CONST , IDENT ) ; IDENT ( INT_CONST , IDENT + INT_CONST ) ; } IF ( ( IDENT & IDENT ) || ( ! IDENT ) ) IDENT ( IDENT ( IDENT ) & INT_CONST , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( STRING , IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT * IDENT ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & IDENT ) && IDENT ( IDENT ) ? IDENT ( IDENT ) ?: ( IDENT ) )
7  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT >= INT_CONST ) IDENT ;
4  #DEFINE FUNC_MAC ( IDENT ) ( ! ( ( IDENT ) & IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( { INT IDENT ; IDENT ( STRING # IDENT STRING , IDENT ) ; IDENT = IDENT ( IDENT ) ; IF ( IDENT != INT_CONST ) IDENT ( STRING , IDENT ) ; IDENT ; } )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( UNSIGNED CHAR *p ) & ( IDENT ) ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ENUM { IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## INT_CONST , IDENT ## IDENT = INT_CONST ## IDENT ## IDENT , IDENT ## IDENT = INT_CONST ## IDENT ## IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT - IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( INT ) IDENT ( ( IDENT ) + ( INT_CONST << ( ( IDENT ) - INT_CONST ) ) , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v ( IDENT ) , ( VOID *p ) IDENT , SIZEOF ( IDENT ) ) ? -v IDENT ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + SIZEOF ( UNSIGNED LONG ) - INT_CONST ) & -v SIZEOF ( UNSIGNED LONG ) )
2  #DEFINE FUNC_MAC ( ) ( IDENT ( ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED INT IDENT ; IDENT |= IDENT ( IDENT , &v IDENT -> IDENT ## IDENT ) ; IDENT -> IDENT ## IDENT = IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) FOR ( ; ( ( IDENT ) = *v ( IDENT ) ) != IDENT && IDENT ( ( IDENT ) -> IDENT , ( IDENT ) ) ; ( IDENT ) = &v ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT = IDENT ( IDENT -> IDENT , IDENT ( IDENT -> IDENT , INT_CONST ) , IDENT , IDENT , IDENT , IDENT , IDENT , INT_CONST , INT_CONST ) ; IDENT ( STRING , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT [ INT_CONST ] ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | ( INT_CONST << INT_CONST ) )
3  #DEFINE OBJ_MAC { IDENT += ( IDENT = IDENT >> INT_CONST ) ; IDENT -= IDENT ; IDENT &= INT_CONST ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) ( IDENT ) ) > ( ( IDENT ) ( IDENT ) ) && ( ( IDENT ) ( IDENT ) ) < ( ( IDENT ) ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) . IDENT )
15  #DEFINE OBJ_MAC ( ( INT_CONST * IDENT ) / INT_CONST )
4  #DEFINE OBJ_MAC INT_CONST + ( IDENT >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ -v ( IDENT ) - INT_CONST ] . IDENT
1  #DEFINE OBJ_MAC ( ( IDENT * INT_CONST ) / SIZEOF ( STRUCT IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT -> IDENT . IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT ( IDENT ) [ INT_CONST ] ) ; ELSE IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT -> IDENT . IDENT , IDENT , IDENT ( IDENT ) , &v IDENT , &v IDENT , &v IDENT , &v IDENT ) ; IDENT = IDENT + IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST | IDENT ( IDENT ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) * INT_CONST + ( ( IDENT ) > INT_CONST ? INT_CONST ?: -v INT_CONST ) ) / INT_CONST + INT_CONST )
2  #DEFINE FUNC_MAC ( ) { IDENT ( IDENT -> IDENT , INT_CONST ) ; }
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT = IDENT ( ( IDENT ) ( IDENT + IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { *v IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ; IDENT = IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( ( UNSIGNED LONG ) IDENT ) | ( ( UNSIGNED LONG ) IDENT ) ) << ( IDENT - IDENT ) ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT ) &= ( ~ ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( ) DO { IF ( IDENT != IDENT ) IDENT ( IDENT ) ; } WHILE ( INT_CONST )
16  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( IDENT ) / SIZEOF ( IDENT [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) | ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) )
2  #DEFINE FUNC_MAC ( ) ( ( STRUCT IDENT * ) IDENT ( IDENT , IDENT ) )
10  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT , IDENT , IDENT )
12  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + ( IDENT ) - INT_CONST ) / ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , CONST ) IDENT ( IDENT , CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT VOID IDENT ## IDENT ( STRUCT IDENT * IDENT , LONG IDENT ) { IDENT IDENT ; IDENT . IDENT = IDENT ; IDENT . IDENT = INT_CONST ; IDENT . IDENT = IDENT ; IDENT . IDENT = ( VOID *p ) IDENT ; IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , &v IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO {} WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT ( SIZEOF ( IDENT * ) ) )
1  #DEFINE OBJ_MAC { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IDENT = INT_CONST ; } }
1  #DEFINE FUNC_MAC ( #LINE ) IF ( #LINE <= IDENT ) #LINE = IDENT + INT_CONST
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( IDENT ( ( IDENT ) , IDENT ) | ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... ) IDENT ( IDENT IDENT STRING IDENT , IDENT , ## IDENT )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT STRING , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , IDENT STRING , IDENT ( IDENT ) , IDENT , IDENT , IDENT , IDENT ) ; IDENT ( &v IDENT , IDENT ) ; IDENT ( IDENT , IDENT STRING , IDENT ( IDENT ) , IDENT , IDENT ) ; IDENT = STRING ; IDENT = INT_CONST ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT | ( ( IDENT ( IDENT ) ) + ( IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == ( IDENT ) )
2  #DEFINE OBJ_MAC ( ( VOID ) IDENT )
3  #DEFINE FUNC_MAC ( IDENT ... ) ( { IF ( IDENT >= INT_CONST ) IDENT ( IDENT ) ; } )
25  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & INT_CONST )
3  #DEFINE OBJ_MAC IDENT VOLATILE ( STRING ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) > IDENT ? IDENT ( IDENT ) ?: IDENT [ IDENT ( IDENT ) ] )
14  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( ( IDENT ) -> IDENT - ( CHAR *p ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT ( IDENT , IDENT ## IDENT , IDENT ( IDENT ## IDENT ) ) ) ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT == INT_CONST ) { IF ( ! ( *v IDENT -> IDENT ) ( IDENT ) ) { IDENT ; } IDENT ( IDENT ) ; } IDENT v--
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ) && IDENT ( ) && IDENT ( ) == ( IDENT ) && IDENT ( ) == ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT < IDENT ? *v ( UNSIGNED CHAR *p ) IDENT v++ ?: IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) = ( ( ( IDENT ) / INT_CONST ) << INT_CONST ) + ( IDENT ) % INT_CONST )
13  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT >= INT_CONST ) IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT << IDENT )
4  #DEFINE OBJ_MAC IF ( IDENT ( IDENT , IDENT ) != INT_CONST ) RETURN INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) -> IDENT ( ( IDENT ) , ( IDENT ) ) )
2  #DEFINE OBJ_MAC ( ( SIZEOF ( STRUCT IDENT ) + IDENT - INT_CONST ) & ~ ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( ( ( IDENT ( IDENT ( *v ( IDENT ) ) ) >= INT_CONST ) && ( IDENT -> IDENT . IDENT >= IDENT ) ) || ( IDENT && ( IDENT -> IDENT . IDENT == IDENT ) ) ) IDENT ( IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT -> IDENT ) ? IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) ?: IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ) ? ( ( VOID *p ) ( ( LONG ) ( IDENT ) + IDENT ) ) ?: ( ( VOID *p ) ( IDENT ) ) )
1  #DEFINE OBJ_MAC ( INT_CONST << ( IDENT - INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( INT_CONST , ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) != IDENT && IDENT ( IDENT ) && ! ( IDENT ) -> IDENT . IDENT )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( ( IDENT ) , STRING , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( VOLATILE IDENT * ) IDENT ( IDENT ) = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT ) == IDENT || ( ( IDENT ) & IDENT ) == IDENT )
2  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) INT_CONST / IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , ~ ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT IDENT ; IDENT IDENT ( STRING : STRING ( IDENT ) : STRING ( IDENT ) , STRING ( IDENT ) : STRING ) ; IDENT ; } )
5  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( VOID *p ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT , IDENT ( STRING # IDENT ) ) )
12  #DEFINE OBJ_MAC IDENT STRING STRING
6  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT && ( LONG ) ( IDENT - ( IDENT ) -> IDENT ) < INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , CHAR_CONST , IDENT , IDENT )
6  #DEFINE FUNC_MAC ( ) IDENT ( IDENT == IDENT ) ; IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT ( IDENT -> IDENT , INT_CONST , IDENT )
4  #DEFINE OBJ_MAC ( ( UNSIGNED INT ) ( IDENT | IDENT | IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT >= ( IDENT ) ) IDENT ( IDENT IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) [ IDENT - ( IDENT ) ] |= ( IDENT ) [ IDENT ] )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT = IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( ( ( IDENT ) IDENT << INT_CONST ) | ( IDENT ) IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ) = ( ( ( IDENT ) * INT_CONST ) & INT_CONST ) , ( IDENT ) = ( ( ( IDENT ) * INT_CONST ) >> INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT [ IDENT & ~ ( ( IDENT -> IDENT & IDENT ) == INT_CONST ) ] = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT -> IDENT , ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> IDENT ) ^ ( IDENT ) ) & IDENT )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) * IDENT -> IDENT ) + ( ( ( IDENT ) + IDENT -> IDENT ) / IDENT -> IDENT ) * ( IDENT -> IDENT >> INT_CONST )
1  #DEFINE OBJ_MAC ( )
1  #DEFINE OBJ_MAC ( IDENT = IDENT , IDENT += IDENT , IDENT = IDENT ( #LINE +v IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) -> IDENT | ( IDENT ) -> IDENT . IDENT ) == INT_CONST ) && ! IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT | ( IDENT & IDENT ) )
143  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT != IDENT ) GOTO IDENT
42  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { ( IDENT ) IDENT ## IDENT , ( IDENT ) IDENT ## IDENT , ( IDENT ) IDENT ## IDENT , IDENT , SIZEOF ( STRUCT IDENT ## IDENT ) , SIZEOF ( STRUCT IDENT ## IDENT ) , INT_CONST , INT_CONST , IDENT , }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT . IDENT = ( IDENT ) -> IDENT . IDENT ; ( IDENT ) -> IDENT . IDENT = ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) - IDENT ) >= ( ( IDENT ) -> IDENT + ( IDENT ) -> IDENT ) ) || ( ( ( IDENT ) - IDENT ) < ( IDENT ) -> IDENT ) || ( ( IDENT ) != IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) FOR ( ( IDENT ) = IDENT . IDENT ; ( IDENT ) != &v IDENT ; ( IDENT ) = ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( ) ; IDENT ( INT_CONST ) ; IDENT ( ) ; IDENT ( INT_CONST ) ; IDENT ( ) ; IDENT ( INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { INT IDENT ; CHAR *p IDENT , *v IDENT ; IDENT = IDENT ( IDENT ( IDENT ) ) ; IDENT ( IDENT , IDENT ) ; IDENT = IDENT ( IDENT ) + INT_CONST ; IDENT = IDENT ( IDENT + INT_CONST ) ; IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT ) = IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT + IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( IDENT ) , IDENT -> IDENT [ ( IDENT ) ] | ( IDENT -> IDENT [ ( IDENT ) + INT_CONST ] << INT_CONST ) )
14  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) + IDENT ( INT_CONST ) + IDENT ( INT_CONST ) )
1  #DEFINE OBJ_MAC ( INT_CONST - IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST ? INT_CONST ?: ( ( IDENT ) <= INT_CONST ? INT_CONST ?: ( ( IDENT ) >> INT_CONST ) ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( INT ) ( IDENT ) > ( INT ) ( IDENT ) ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( UNSIGNED SHORT *p ) ( ( UNSIGNED LONG ) ( IDENT ) + ( IDENT ) * IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( UNSIGNED INT ) ( ( UNSIGNED LONG ) IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ! ( ( IDENT ) -> IDENT & IDENT ) && ( IDENT ) -> IDENT -> IDENT [ ( IDENT ) - INT_CONST ] . IDENT . IDENT == IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) >> ( INT_CONST - ( IDENT ) ) ) & ( ( INT_CONST << ( IDENT ) ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ ( IDENT ) ] = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { *v ( IDENT ) -> IDENT v++ = ( IDENT ) ( IDENT ) ; IF ( --v ( IDENT ) -> IDENT == INT_CONST ) IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) & IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( { INT IDENT = IDENT ( IDENT ) , IDENT , IDENT ; IDENT = ( IDENT <= IDENT && IDENT ( IDENT , IDENT , IDENT ) == INT_CONST ) ; IF ( IDENT ) { IDENT += IDENT ; IDENT -= IDENT ; IF ( IDENT ) { IDENT = INT_CONST ; WHILE ( IDENT && ( *v IDENT == CHAR_CONST || *v IDENT == CHAR_CONST || ( ! IDENT && *v IDENT == CHAR_CONST ) ) ) { IF ( *v IDENT == CHAR_CONST ) IDENT = INT_CONST ; --v IDENT ; ++v IDENT ; } IF ( ! IDENT || ! IDENT ) IDENT = -v IDENT ; IDENT = INT_CONST ; } } IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { ( IDENT ) += IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) + ( IDENT ) ; ( IDENT ) = IDENT ( ( IDENT ) , ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( -v INT_CONST - IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT ( IDENT ) ) IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) * ( IDENT ) * INT_CONST )
7  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT )
62  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT )
992  #DEFINE OBJ_MAC ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IF ( ( IDENT ( IDENT ) != IDENT ) || ( SIZEOF ( IDENT ) != SIZEOF ( IDENT ) ) ) IDENT ( IDENT , IDENT , SIZEOF ( IDENT ) , IDENT ( IDENT ) , SIZEOF ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << INT_CONST ) | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { WHILE ( ( ! ( IDENT ( IDENT , IDENT ) & IDENT ) ) || ( ! ( IDENT ( IDENT , IDENT ) & IDENT ) ) ) ; IDENT ( IDENT , IDENT , ( IDENT ) ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( IDENT ) ?: IDENT ( ( IDENT ) , IDENT , IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT > IDENT ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT >> INT_CONST ) & INT_CONST ) | ( ( IDENT >> INT_CONST ) & INT_CONST ) | ( ( IDENT << INT_CONST ) & INT_CONST ) | ( IDENT & INT_CONST ) )
8  #DEFINE OBJ_MAC { IDENT , IDENT }
6  #DEFINE OBJ_MAC ( ( IDENT ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( ( IDENT ) ) ) )
1  #DEFINE OBJ_MAC IDENT = IDENT ( IDENT , INT_CONST ) ; IDENT = IDENT -> IDENT
15  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT ( IDENT , IDENT ) != INT_CONST ) GOTO IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT VOID IDENT ## IDENT ( STRUCT IDENT * IDENT , LONG IDENT ) { IDENT ( IDENT , IDENT , IDENT , INT_CONST , IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED LONG IDENT = ( IDENT ) ; IDENT ( ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( STRING , IDENT , IDENT ) ; IDENT -> IDENT [ IDENT ] = IDENT ; IDENT ( IDENT , IDENT , SIZEOF ( IDENT ) ) ; IDENT += IDENT ( IDENT ) ; IDENT += IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) < INT_CONST ? INT_CONST - ( IDENT ) * INT_CONST ?: INT_CONST - ( IDENT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IDENT ( ( IDENT ) ) IDENT ; IDENT = ( IDENT ) ; ( IDENT ) = ( IDENT ) ; IDENT ; } )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ IDENT ] . IDENT )
1  #DEFINE FUNC_MAC ( ) { *v ( VOLATILE UNSIGNED CHAR *p ) ( IDENT -> IDENT ) |= ( IDENT | IDENT | IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( UNSIGNED LONG ) INT_CONST * ( IDENT + INT_CONST ) / ( ( IDENT + INT_CONST ) * ( INT_CONST << IDENT ) ) ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT ; IDENT -> IDENT [ INT_CONST ] = ( IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( IDENT << INT_CONST ) ; IDENT -> IDENT [ INT_CONST ] = ( IDENT -> IDENT -> IDENT << INT_CONST ) | ( IDENT << INT_CONST ) ; IDENT -> IDENT [ INT_CONST ] = INT_CONST
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED SHORT INT ) ( ( ( ( UNSIGNED SHORT INT ) ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( UNSIGNED SHORT INT ) ( IDENT ) & INT_CONST ) >> INT_CONST ) ) )
5  #DEFINE OBJ_MAC IDENT ( STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT STRING IDENT STRING IDENT STRING IDENT STRING IDENT STRING IDENT STRING IDENT STRING IDENT STRING IDENT STRING IDENT , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT == INT_CONST , ( IDENT ) -> IDENT , IDENT ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) | ( ( ( IDENT ) >> INT_CONST ) << INT_CONST ) | IDENT | IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( { IDENT ( IDENT -> IDENT ) IDENT = IDENT ( &v IDENT -> IDENT ) ; IDENT ( IDENT ) ; } )
2  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT && ! IDENT ; IDENT v++ ) IDENT ( IDENT / INT_CONST ) ; IF ( ! IDENT ) { RETURN -v IDENT ; } }
1  #DEFINE OBJ_MAC ( IDENT - IDENT ) * INT_CONST
2  #DEFINE OBJ_MAC ( ( IDENT >> INT_CONST ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT . IDENT = IDENT ; IDENT . IDENT = IDENT ; IDENT . IDENT = IDENT <= INT_CONST ? &v IDENT . IDENT ?: IDENT ( IDENT ) ; IDENT ( IDENT . IDENT ) ; IDENT . IDENT = IDENT ; IDENT = &v IDENT ; IDENT . IDENT = IDENT ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] , ( IDENT ) . IDENT [ INT_CONST ] = ( IDENT ) . IDENT [ INT_CONST ] )
27  #DEFINE OBJ_MAC ( IDENT ( IDENT , STRUCT IDENT , IDENT ) )
1  #DEFINE OBJ_MAC ( ( IDENT | IDENT | IDENT | IDENT ) << INT_CONST )
21  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) { IDENT ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( IDENT ( ( IDENT ) , IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT - IDENT ) >> IDENT )
14  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) - INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( ( UNSIGNED CHAR ) ( IDENT ) [ IDENT ] & IDENT ) ? ( ( ( UNSIGNED SHORT ) ( ( IDENT ) [ IDENT + INT_CONST ] ) << INT_CONST ) | ( UNSIGNED SHORT ) ( ( IDENT ) [ IDENT + INT_CONST ] ) ) + INT_CONST ?: ( ( UNSIGNED SHORT ) ( ( IDENT ) [ IDENT ] ) ) + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) + ( UNSIGNED ) ( IDENT ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) ; IF ( IDENT -> IDENT . IDENT + ( IDENT ) > IDENT -> IDENT . IDENT ) IDENT ( &v IDENT -> IDENT , IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( ) { IDENT IDENT ; IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = IDENT v++ ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = ( IDENT ) ; IDENT ( IDENT ) = IDENT ( IDENT ) - INT_CONST ; IDENT ( IDENT , IDENT * INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , IDENT ( IDENT ) , IDENT [ IDENT ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) * ( IDENT ) = IDENT ( )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { UNSIGNED LONG IDENT = IDENT ; IDENT ( ( IDENT ) , IDENT ) ; IDENT ( ( IDENT ) >> INT_CONST , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT + INT_CONST )
1  #DEFINE OBJ_MAC IDENT [ INT_CONST ] . IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT ) )
93  #DEFINE OBJ_MAC { &v IDENT , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , STRING }
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , ( LONG ) IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT , IDENT } ,
1  #DEFINE OBJ_MAC STRUCT IDENT * IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT ; IDENT ( STRING , IDENT ) ; GOTO #ERROR ; }
1  #DEFINE OBJ_MAC ( ( INT_CONST * INT_CONST / INT_CONST ) / INT_CONST )
1  #DEFINE OBJ_MAC INT_CONST << INT_CONST - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p ) IDENT ( IDENT ( ( IDENT ) ) ) )
1  #DEFINE OBJ_MAC ( IDENT + INT_CONST + IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) RETURN ( IDENT ) IDENT
5  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) -> IDENT -> IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( VOID *p ) ( ( ( LONG ) ( IDENT ) + SIZEOF ( IDENT ) - INT_CONST ) & ~ ( SIZEOF ( IDENT ) - INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) DO { IDENT * IDENT ; INT IDENT = IDENT ( IDENT -> IDENT ) ; INT IDENT = IDENT ( IDENT -> IDENT ) ; VOLATILE IDENT * IDENT ; IDENT IDENT , IDENT ; UNSIGNED INT IDENT = ( UNSIGNED ) IDENT -> IDENT -> IDENT ; IDENT = ( IDENT * ) IDENT ( IDENT [ IDENT ] , IDENT [ IDENT ] ) ; IF ( IDENT -> IDENT == IDENT && IDENT -> IDENT == IDENT && ( ( IDENT >= INT_CONST && IDENT < INT_CONST ) || ( IDENT >= INT_CONST ) ) ) RETURN IDENT ; IDENT = ( ( ( IDENT ) & ( IDENT ) ) << INT_CONST ) ; IDENT = &v IDENT -> IDENT [ IDENT ] . IDENT [ IDENT ] . IDENT [ IDENT >> INT_CONST ] ; IF ( IDENT ( IDENT , IDENT ) ) RETURN IDENT ; IDENT &= ( ~ IDENT ) ; IDENT |= ( IDENT ) ; IDENT ( IDENT , IDENT ) ; RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) - IDENT ) + INT_CONST ) & INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT ) = IDENT ; } WHILE ( INT_CONST )
7  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) ) { IDENT ( STRING , # IDENT , IDENT , IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( ( IDENT . IDENT . IDENT ) & INT_CONST ) | IDENT ) << INT_CONST ) | ( IDENT . IDENT . IDENT >> INT_CONST ) )
1  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST * INT_CONST * IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT * ) ( ( CHAR *p ) ( IDENT ) - IDENT ( IDENT , IDENT ) ) )
1  #DEFINE OBJ_MAC ( IDENT ) ( IDENT * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ## IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT -> IDENT ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT [ IDENT ] . IDENT != IDENT && IDENT -> IDENT [ IDENT ] . IDENT != IDENT )
1  #DEFINE OBJ_MAC ( ( INT_CONST / ( IDENT * IDENT ) ) * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == IDENT || IDENT == IDENT || IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT IDENT = INT_CONST ; INT IDENT = ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT , IDENT ) ; ELSE IDENT ( IDENT , IDENT ## IDENT ) ; }
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + IDENT + INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT = ++v ( IDENT ) % ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == INT_CONST ? STRING ?: IDENT == INT_CONST ? STRING ?: IDENT == INT_CONST ? STRING ?: STRING )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) / ( IDENT ) ) * ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( LONG ) ( ( IDENT ) & IDENT ) << INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( STRING , IDENT ) , IDENT ( IDENT , ( IDENT ) ) , IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ( IDENT ) & INT_CONST ) % IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT IDENT ; IF ( ( IDENT ) ) { IDENT = IDENT ( IDENT , IDENT ( IDENT , IDENT ( IDENT ) , IDENT , ( IDENT ) ) , ( IDENT ) ) ; IDENT ( IDENT ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ( IDENT ) ^ ( ( IDENT ) / ( IDENT ) ) ) & ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( UNSIGNED IDENT ) INT_CONST << IDENT / INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT ( IDENT -> IDENT [ ( IDENT ) ] . IDENT , ( IDENT ) , ( IDENT ) ) ; } WHILE ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT VOLATILE ( STRING : : STRING ( INT_CONST ) ) ; IDENT ( INT_CONST ) ; IDENT VOLATILE ( STRING : : STRING ( IDENT ) ) ; ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = INT_CONST ; ( IDENT ) -> IDENT = IDENT ; ( IDENT ) -> IDENT = IDENT ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT , IDENT ) , IDENT ( IDENT , STRING ) , IDENT ( IDENT , IDENT , IDENT ) , IDENT ( IDENT , STRING ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT & INT_CONST ) | ( ( IDENT ) -> IDENT & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( IDENT ) - INT_CONST ) * INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST * INT_CONST * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT [ IDENT ] , IDENT )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IDENT ( IDENT ) IDENT = ( IDENT ) ; IDENT ( IDENT ) IDENT = ( IDENT ) ; IDENT * ( ( IDENT + IDENT - INT_CONST ) / IDENT ) ; } )
16  #DEFINE OBJ_MAC ( INT_CONST - IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) DO { ( IDENT ) += ( IDENT ) ; ( IDENT ) += ( IDENT ) ; ( IDENT ) -= ( IDENT ) ; ( IDENT ) += ( IDENT ) ; } WHILE ( INT_CONST )
9  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT + INT_CONST ) ;
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >> INT_CONST ) | ( ( IDENT & INT_CONST ) << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ IDENT ]
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & ( IDENT | IDENT ) ) ? ( ! ( ( IDENT ) & IDENT ) ) ?: INT_CONST )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) + IDENT + SIZEOF ( IDENT ) + IDENT + SIZEOF ( IDENT ) + SIZEOF ( IDENT ) + INT_CONST + SIZEOF ( IDENT ) + INT_CONST + SIZEOF ( IDENT ) + SIZEOF ( IDENT ) + INT_CONST + IDENT + SIZEOF ( IDENT ) + SIZEOF ( IDENT ) + SIZEOF ( IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * ( IDENT ) )
2  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) + INT_CONST )
8  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || IDENT == IDENT || IDENT == IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) * ( IDENT * ) ( IDENT ) = *v ( IDENT * ) ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT ? ( IDENT ) -> IDENT << INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED ) IDENT ) & INT_CONST )
2  #DEFINE FUNC_MAC ( ) IDENT ( &v IDENT ) ;
3  #DEFINE OBJ_MAC ( CHAR *p ) INT_CONST
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = INT_CONST , IDENT = ( IDENT ) ; IDENT ( IDENT , STRING , ( LONG ) ( IDENT ? IDENT ?: IDENT + IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) + INT_CONST ) * INT_CONST + INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT IDENT ; IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT -> IDENT != IDENT ( IDENT , IDENT , IDENT , IDENT ) ) { IDENT ( STRING , IDENT ( ) ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ( IDENT , IDENT , IDENT , IDENT ) ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED ) IDENT ( IDENT ) <= INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( ! IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) & IDENT )
14  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ( IDENT ) -> IDENT ) ( *v ( IDENT ) -> IDENT ) ( ( IDENT ) -> IDENT , ( IDENT ) ) ; ELSE ( *v ( VOID ( *v ) ( VOID *p ) ) ( IDENT ) -> IDENT ) ( ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT >> INT_CONST ) & ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN ( IDENT = INT_CONST , IDENT ( IDENT ) , IDENT )
26  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IDENT IDENT ; IDENT . IDENT = ( LONG ) ( IDENT ) ; IDENT . IDENT . IDENT = ( IDENT ) ? ( IDENT ) ?: INT_CONST ; IDENT . IDENT . IDENT = INT_CONST ; IDENT . IDENT . IDENT = INT_CONST ; IDENT . IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT_CONST << ( IDENT ) , -v ( IDENT ) , IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT -> IDENT = IDENT ( IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) ? INT_CONST ?: INT_CONST )
2  #DEFINE OBJ_MAC ( ( IDENT * ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT |= IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( *v IDENT ) ( IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ? IDENT ( IDENT , IDENT ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT . IDENT , IDENT STRING )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , INT_CONST , SIZEOF ( VOID *p ) * IDENT ) ; ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; IF ( ( ( LONG ) IDENT [ INT_CONST ] ) & INT_CONST ) { ( IDENT ) [ INT_CONST ] = IDENT ( INT_CONST ) ; } } } } } } } } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ ( IDENT ) * IDENT + ( IDENT ) / IDENT ] & ( ( IDENT ) INT_CONST << ( ( IDENT ) % IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) . IDENT == IDENT ) && ( ( IDENT ) . IDENT == IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { INT IDENT ; IDENT ( STRING : STRING ( IDENT ) : STRING ( IDENT ) , STRING ( ( LONG ) ( ( IDENT ) / INT_CONST ) ) , STRING ( ( LONG ) ( IDENT ) ) ) ; IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( ( IDENT ) ) == IDENT ) ? ( IDENT ) -> IDENT -> IDENT ?: IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { . IDENT = STRING # IDENT , . IDENT = ( IDENT ) IDENT ## IDENT , . IDENT = ( IDENT ) IDENT ## IDENT , . IDENT = IDENT ( IDENT ## IDENT ## IDENT , IDENT ## IDENT ## IDENT ) << INT_CONST , . IDENT = IDENT }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { INT_CONST ## IDENT , INT_CONST , IDENT ## IDENT ## IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) > IDENT ) ? ( ( IDENT ) >> INT_CONST ) ?: INT_CONST )
1  #DEFINE OBJ_MAC VOLATILE UNSIGNED SHORT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { UNSIGNED LONG IDENT = IDENT ; IDENT . IDENT ## IDENT = IDENT & INT_CONST ; IDENT >>= INT_CONST ; IDENT . IDENT ## IDENT = IDENT & INT_CONST ; IDENT >>= INT_CONST ; IDENT . IDENT ## IDENT = IDENT & INT_CONST ; IDENT >>= INT_CONST ; IDENT . IDENT ## IDENT = IDENT & INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ IDENT / IDENT ] & ( INT_CONST << ( IDENT % IDENT ) ) )
2  #DEFINE FUNC_MAC ( ) IDENT VOLATILE ( STRING : : )
2  #DEFINE OBJ_MAC UNSIGNED CHAR IDENT , UNSIGNED IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT / SIZEOF ( VOID *p ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) | IDENT ( IDENT ) , IDENT )
6  #DEFINE OBJ_MAC ( INT_CONST >> INT_CONST )
1  #DEFINE OBJ_MAC IF ( --v IDENT -> IDENT [ IDENT ] == INT_CONST ) IDENT ( &v IDENT -> IDENT , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT != IDENT ) { FOR ( IDENT = IDENT ( IDENT ) ; *v IDENT != CHAR_CONST ; ++v IDENT ) * IDENT v++ = *v IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST || ( IDENT ) == CHAR_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT ( INT_CONST ) & INT_CONST )
2  #DEFINE OBJ_MAC IDENT ( IDENT , INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { *v IDENT = ( *v IDENT v++ - IDENT ) << INT_CONST ; IF ( *v IDENT < INT_CONST ) { *v IDENT v++ -= INT_CONST ; IF ( *v IDENT > INT_CONST ) * IDENT v++ = *v IDENT v++ - INT_CONST ; ELSE *v IDENT v++ = *v IDENT v++ - INT_CONST ; } ELSE { IDENT v++ ; *v IDENT v++ = *v IDENT v++ - INT_CONST ; } }
27  #DEFINE OBJ_MAC ( INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT , IDENT ) , IDENT += ( IDENT ) )
1  #DEFINE DOUBLE OBJ_MAC
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( ( IDENT ) >> INT_CONST ) & INT_CONST ] * IDENT [ ( IDENT ) & INT_CONST ] / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( ( IDENT ) ( IDENT ) ) & INT_CONST ) { IDENT ( STRING , IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | IDENT ( INT_CONST , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT [ IDENT ] & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) > INT_CONST ) ? ( IDENT ) ?: ( -v ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT + INT_CONST < IDENT -> IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED CHAR *p ) & IDENT -> IDENT -> IDENT -> IDENT ) [ IDENT ]
2  #DEFINE FUNC_MAC ( ) WHILE ( IDENT ( IDENT ) & INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT , IDENT , IDENT , --v IDENT , ## IDENT )
1  #DEFINE OBJ_MAC IDENT ( IDENT | IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT * IDENT = IDENT ## IDENT ( IDENT + ( IDENT & INT_CONST ) ) ; IF ( IDENT ( IDENT + INT_CONST ) & INT_CONST ) { IDENT ( INT_CONST , IDENT + INT_CONST ) ; *v IDENT = INT_CONST ; } IDENT RETURN IDENT ;
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT + IDENT , IDENT )
5  #DEFINE FUNC_MAC ( IDENT ... ) INT_CONST
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( ( IDENT >= ( IDENT ) ) && ( ( IDENT ) & IDENT ) ) { IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) > ( FLOAT ) IDENT ) ? INT_CONST ?: INT_CONST
2  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE OBJ_MAC ( ( IDENT & INT_CONST ) ? IDENT / INT_CONST * INT_CONST ?: INT_CONST * IDENT / INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( ( IDENT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT ; INT IDENT = IDENT ; IDENT ( ~ ( IDENT | IDENT ) ) ; IDENT ( IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { IDENT ( ( IDENT & ( INT_CONST << ( IDENT - INT_CONST ) ) ) ? INT_CONST ?: INT_CONST ) ; IDENT <<= INT_CONST ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT -> IDENT -= IDENT ; IDENT -> IDENT += IDENT ; IDENT -> IDENT += IDENT ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC VOLATILE UNSIGNED CHAR
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT * IDENT ; IDENT * IDENT ; CHAR *p IDENT ; IDENT IDENT ; IDENT IDENT ; IDENT = ( IDENT -> IDENT -> IDENT ) . IDENT ; IDENT = ( IDENT * ) IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( IDENT && ! IDENT ( ) ) ; IDENT -> IDENT = IDENT ; IDENT = IDENT -> IDENT ; IDENT = ( IDENT * ) IDENT ( IDENT , ( CHAR *p ) & IDENT , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( IDENT && ! IDENT ( ) ) ; IDENT -> IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) IDENT ( IDENT , ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( ( IDENT ) < INT_CONST ? ( ( ( ( IDENT ) * INT_CONST ) - INT_CONST ) / INT_CONST ) ?: ( ( ( ( IDENT ) * INT_CONST ) - INT_CONST ) / INT_CONST ) ) , INT_CONST , INT_CONST ) )
1  #DEFINE OBJ_MAC ( INT_CONST + INT_CONST * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) { IDENT IDENT = IDENT ( IDENT , IDENT ) ; INT IDENT = IDENT ; IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) IDENT IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) ( IDENT ) , ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) * IDENT v++ = IDENT >> INT_CONST , *v IDENT v++ = IDENT >> INT_CONST , *v IDENT v++ = IDENT >> INT_CONST , *v IDENT v++ = IDENT
1  #DEFINE OBJ_MAC ( ( IDENT + IDENT - INT_CONST ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( ( IDENT ) & ~ INT_CONST ) , ( IDENT ) -> IDENT . IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT = ( IDENT ) , IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ IDENT ( IDENT ) ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) ^ INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ( IDENT | IDENT | IDENT | IDENT | IDENT ) )
2  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST / IDENT )
8  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT + IDENT ( STRUCT IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , &v IDENT -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT [ IDENT ] . IDENT [ IDENT ( IDENT ) ] = ( IDENT * ) IDENT ( IDENT ) ; IDENT [ IDENT ] . IDENT [ IDENT ( IDENT ) ] = ( IDENT * ) IDENT ( IDENT ) ; }
30  #DEFINE OBJ_MAC ( IDENT / IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( IDENT ) -> IDENT + INT_CONST + ( SIZEOF ( IDENT ) ) + INT_CONST * SIZEOF ( IDENT ) ) )
2  #DEFINE OBJ_MAC ( CHAR ) INT_CONST
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT ) SWITCH ( IDENT -> IDENT ) { CASE INT_CONST : *v ( CHAR *p ) ( ( IDENT ) -> IDENT ) = IDENT ; BREAK ; CASE INT_CONST : *v ( SHORT *p ) ( ( IDENT ) -> IDENT ) = IDENT ; BREAK ; CASE INT_CONST : *v ( INT *p ) ( ( IDENT ) -> IDENT ) = IDENT ; BREAK ; } } WHILE ( INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT |= ( ( IDENT & INT_CONST ) << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT ) >> INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( UNSIGNED LONG ) ( IDENT ( STRUCT IDENT , IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , IDENT , SIZEOF ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | IDENT )
8  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + SIZEOF ( IDENT ) - INT_CONST ) & ~ ( SIZEOF ( IDENT ) - INT_CONST ) )
17  #DEFINE OBJ_MAC { INT_CONST , INT_CONST , INT_CONST }
1  #DEFINE FUNC_MAC ( ) IDENT ( STRING , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST - ( IDENT ) * INT_CONST / INT_CONST ) ;
6  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ## IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , INT_CONST , IDENT , INT_CONST ) ;
2  #DEFINE OBJ_MAC ( ( IDENT ) ~ INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT . IDENT &= ~ IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT IDENT ; IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT ; }
4  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) < IDENT ) && IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( &v IDENT . IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT >= IDENT || IDENT -> IDENT < INT_CONST ) { IDENT ( IDENT STRING , IDENT -> IDENT , IDENT -> IDENT , IDENT -> IDENT ) ; IDENT -> IDENT v-- ; }
1  #DEFINE FUNC_MAC ( ) IDENT -> IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( ( ( IDENT ( IDENT ) ) | ( IDENT ) ) , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) STATIC INT IDENT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { STRUCT IDENT * IDENT = IDENT -> IDENT ; UNSIGNED INT IDENT ; IDENT = IDENT ( IDENT , IDENT -> IDENT -> IDENT , IDENT -> IDENT , IDENT ) ; IF ( ! IDENT ) { IDENT ## IDENT ## IDENT ( IDENT , IDENT ) RETURN IDENT ; } IDENT ## IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; RETURN IDENT ; }
10  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED CHAR *p ) & IDENT ) [ IDENT ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT -> IDENT , ( IDENT ) -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC INT IDENT ( IDENT * IDENT , STRUCT IDENT * IDENT , STRUCT IDENT * IDENT , INT IDENT ) { INT IDENT ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT -> IDENT = INT_CONST ; IDENT -> IDENT = IDENT ; IDENT -> IDENT = IDENT ; *v *v --v IDENT = IDENT ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < INT_CONST && ( IDENT || IDENT || ( IDENT == IDENT && IDENT [ IDENT ] ) || ( IDENT [ IDENT ] && ! IDENT [ IDENT ] ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( STRING : : STRING ( IDENT ) , STRING ( IDENT ) ) ;
1  #DEFINE OBJ_MAC { IDENT = INT_CONST ; IF ( ! IDENT ( IDENT [ IDENT ] . IDENT ) && ( IDENT [ IDENT ] . IDENT & IDENT ) ) ( *v IDENT ) v++ ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { CHAR *p IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( &v ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ) & IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( &v IDENT -> IDENT . IDENT )
2  #DEFINE OBJ_MAC * ( ( UNSIGNED CHAR *p ) INT_CONST ) = INT_CONST
2  #DEFINE OBJ_MAC ( IDENT v-- , *v IDENT v++ )
2  #DEFINE FUNC_MAC ( IDENT ) WHILE ( IDENT ( *v IDENT ) ) IDENT v++
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT + IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { REGISTER IDENT IDENT = IDENT , IDENT = IDENT ; REGISTER INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) * ( IDENT v++ ) |= *v ( IDENT v++ ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { UNSIGNED LONG IDENT = IDENT ( &v IDENT -> IDENT ## IDENT ) ; UNSIGNED LONG IDENT = ( ( INT_CONST << ( IDENT - IDENT + INT_CONST ) ) - INT_CONST ) << IDENT ; ( IDENT ( IDENT , IDENT ) << IDENT ) & IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT , IDENT + IDENT ) ; IDENT ( IDENT , IDENT + IDENT ) ; }
1  #DEFINE OBJ_MAC ( ! ( IDENT & INT_CONST ) )
1  #DEFINE SHORT OBJ_MAC
3  #DEFINE OBJ_MAC ( IDENT / SIZEOF ( UNSIGNED SHORT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) >> ( INT_CONST + ( IDENT ) ) , ( IDENT ) -> IDENT )
11  #DEFINE OBJ_MAC UNSIGNED LONG IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) % INT_CONST == INT_CONST && ( ( IDENT ) % INT_CONST || ( ( IDENT ) % INT_CONST == INT_CONST ) ) ? INT_CONST ?: INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , IDENT ) * ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT ; STRUCT IDENT * IDENT ; FOR ( IDENT = INT_CONST , IDENT = ( STRUCT IDENT * ) ( ( IDENT ) -> IDENT ) ; IDENT < ( IDENT ) -> IDENT ; IDENT v++ , IDENT v++ )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ~ ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT = ( IDENT ) , ( IDENT ) = ( IDENT ) , ( IDENT ) = IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT + IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( IDENT += IDENT ( IDENT , IDENT , IDENT ) + IDENT , IDENT = ( IDENT << IDENT | IDENT >> ( INT_CONST - IDENT ) ) + IDENT )
1  #DEFINE FUNC_MAC ( ) IDENT . IDENT
1  #DEFINE OBJ_MAC ( ( IDENT - IDENT ) >> IDENT )
4  #DEFINE OBJ_MAC BREAK ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { UNSIGNED LONG IDENT , IDENT ; UNSIGNED INT IDENT ; IDENT = IDENT >> INT_CONST ; IDENT = IDENT ( IDENT [ IDENT ] ) ; IDENT = IDENT ( IDENT [ IDENT + INT_CONST ] ) ; IDENT = IDENT & INT_CONST ; IDENT = ( IDENT >> IDENT ) | ( IDENT << ( INT_CONST - IDENT ) ) ; IDENT & IDENT ; } )
1  #DEFINE OBJ_MAC ( INT_CONST - INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { INT_CONST ; } )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ~ IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) - ( ( IDENT ) & ( ( IDENT ) - INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT , IDENT , SIZEOF ( IDENT ) / SIZEOF ( STRUCT IDENT ) }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT , IDENT , IDENT , ## IDENT )
1  #DEFINE OBJ_MAC ( INT_CONST - ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( UNSIGNED CHAR ) ( ( IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT ) ; IDENT IDENT ; }
1  #DEFINE OBJ_MAC STRUCT IDENT * IDENT ,
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) , IDENT , SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { ( IDENT ) -> IDENT = IDENT ( IDENT ) ; IDENT ( ) ; ( IDENT ) -> IDENT = IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IDENT ( INT_CONST ) | IDENT ( INT_CONST )
1  #DEFINE FUNC_MAC ( #LINE ) ( ( #LINE ) & INT_CONST )
1  #DEFINE OBJ_MAC IDENT [ IDENT - INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , INT IDENT , INT IDENT , IDENT IDENT ) { RETURN IDENT ## IDENT ## IDENT ## IDENT ( IDENT ( IDENT , IDENT , IDENT ) , IDENT , IDENT ) ; }
21  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT IDENT ; CHAR *p IDENT [ INT_CONST ] ; IDENT [ INT_CONST ] = IDENT ; IF ( IDENT ) { IDENT = IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT , INT_CONST , IDENT , IDENT , INT_CONST , INT_CONST , IDENT , IDENT ) ; IDENT ( IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT -> IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT << IDENT
1  #DEFINE OBJ_MAC ( { UNSIGNED IDENT ; IDENT IDENT ( STRING : STRING ( IDENT ) ) ; ( IDENT >> INT_CONST ) & INT_CONST ; } )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ( IDENT ) , IDENT -> IDENT [ ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( IDENT ) & INT_CONST ) ) << ( INT_CONST - INT_CONST ) ) + ( ( IDENT ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) [ ( IDENT ) >> INT_CONST ] |= ( INT_CONST << ( ( IDENT ) & INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IDENT IDENT = ( IDENT ) ( IDENT ) << INT_CONST | ( IDENT ) ( IDENT ) ; IDENT VOLATILE ( STRING : : STRING ( IDENT ) ) ; IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) ? IDENT ( IDENT ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ( IDENT ) >> IDENT ) & INT_CONST )
17  #DEFINE OBJ_MAC ( IDENT << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) * INT_CONST , ( IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( ( ( IDENT ) ( IDENT ) << INT_CONST ) | ( ( ( ( IDENT ) ( IDENT ) ) ) >> INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( ( IDENT ) > INT_CONST ) IDENT ( IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { #ERROR ( STRING , IDENT , IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT >> INT_CONST * ( SIZEOF ( UNSIGNED LONG ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( ( IDENT ) -> IDENT + INT_CONST ) > IDENT + ( UNSIGNED LONG ) ( IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( IDENT ) / SIZEOF ( *v ( IDENT ) ) )
2  #DEFINE OBJ_MAC ( IDENT / SIZEOF ( STRUCT IDENT ) )
2  #DEFINE FUNC_MAC ( ) } ;
3  #DEFINE OBJ_MAC { IDENT |= IDENT -> IDENT ; IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = IDENT ( &v ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT IDENT ; IDENT ( &v IDENT . IDENT . IDENT , &v IDENT -> IDENT . IDENT , INT_CONST ) ; IDENT ( &v IDENT . IDENT . IDENT , ( ( CHAR *p ) & IDENT -> IDENT . IDENT ) + INT_CONST , INT_CONST ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) IDENT . IDENT [ IDENT ] = IDENT -> IDENT [ IDENT ] ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) IDENT . IDENT [ IDENT ] = IDENT -> IDENT [ IDENT ] ; IDENT . IDENT = IDENT -> IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT ( IDENT ) || IDENT ( IDENT ) || IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST | ( INT_CONST << ( IDENT >> INT_CONST ) ) | ( ( IDENT & INT_CONST ) << INT_CONST ) | IDENT )
32  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) % INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG LONG ) ( IDENT ) << IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) ? ( IDENT + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) ) ?: ( IDENT + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ... ) DO { IDENT ( STRING , IDENT , IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC INT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT ## IDENT IDENT ) { STRUCT IDENT * IDENT = IDENT ( IDENT -> IDENT ) ; IDENT IDENT = ( IDENT -> IDENT -> IDENT == IDENT ) ? INT_CONST ?: IDENT -> IDENT -> IDENT ; IDENT IDENT = IDENT ( IDENT , IDENT -> IDENT , ( IDENT & ~ INT_CONST ) ) ; UNSIGNED LONG IDENT ; IDENT ( &v IDENT -> IDENT , IDENT ) ; IDENT ( IDENT & INT_CONST , IDENT -> IDENT . IDENT + IDENT ) ; ( VOLATILE INT ) IDENT ( IDENT -> IDENT . IDENT + IDENT ) ; IDENT ( IDENT , IDENT -> IDENT . IDENT + IDENT ) ; IDENT ## IDENT ( IDENT ## IDENT ( IDENT ) , IDENT -> IDENT . IDENT + IDENT + ( IDENT & IDENT ) ) ; IDENT ( &v IDENT -> IDENT , IDENT ) ; RETURN INT_CONST ; }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) FOR ( IDENT = INT_CONST ; IDENT < SIZEOF ( IDENT ## IDENT ## IDENT ) / INT_CONST ; IDENT v++ ) IDENT -> IDENT [ IDENT ## IDENT ## IDENT [ IDENT ] [ INT_CONST ] ] = IDENT ## IDENT ## IDENT [ IDENT ] [ INT_CONST ]
2  #DEFINE FUNC_MAC ( IDENT ) IDENT [ IDENT ] . IDENT = INT_CONST - IDENT [ IDENT ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( VOLATILE IDENT * ) IDENT ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT > ( IDENT ) ) IDENT ( IDENT )
1  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) -> IDENT -> IDENT >> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) IDENT ) ) & ( IDENT - INT_CONST ) )
21  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >> IDENT ) ^ ( ( IDENT & INT_CONST ) >> ( IDENT + INT_CONST ) ) )
2  #DEFINE OBJ_MAC IDENT ( IDENT , CHAR_CONST , IDENT , INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ! IDENT ( ) || IDENT ( ) != ( IDENT ) , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) { # IDENT , &v IDENT [ INT_CONST ] . IDENT , SIZEOF ( STRUCT IDENT ) / SIZEOF ( UNSIGNED LONG ) }
1  #DEFINE OBJ_MAC { INT IDENT ; IDENT = IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT | IDENT , IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT , IDENT ) ; IDENT ( INT_CONST ) ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; } IDENT ( INT_CONST ) ; }
7  #DEFINE OBJ_MAC IDENT IDENT ( STRING STRING STRING )
1  #DEFINE OBJ_MAC ( IDENT = -v INT_CONST , IDENT = IDENT , IDENT = IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) CASE IDENT : IDENT = # IDENT ; IDENT ( IDENT , IDENT ) ; BREAK ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) & ( IDENT ) ) | ( ( IDENT ) & ( ~ ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT VOLATILE ( STRING : : STRING ( IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT [ INT_CONST ] && ( IDENT ) -> IDENT . IDENT [ INT_CONST ] && IDENT ( &v ( IDENT ) -> IDENT , IDENT . IDENT , SIZEOF ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( VOID ) INT_CONST ;
1  #DEFINE OBJ_MAC FOR ( IDENT = IDENT - INT_CONST ; IDENT >= IDENT ; IDENT v-- )
1  #DEFINE FUNC_MAC ( ) DO { IF ( ( *v IDENT == IDENT ) && ( *v ( IDENT + INT_CONST ) == IDENT ) ) { IDENT += INT_CONST ; } ELSE { IDENT v++ ; } IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID ) IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = ( IDENT ) ; GOTO IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( ( IDENT + INT_CONST ) * IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT * ) IDENT ( IDENT ) ) -> IDENT == IDENT ? INT_CONST ?: -v INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT )
1  #DEFINE OBJ_MAC IDENT = IDENT -> IDENT [ INT_CONST ] & IDENT ; IDENT = IDENT -> IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( IDENT ) & INT_CONST ) )
8  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT + IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( INT_CONST / INT_CONST ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ? INT_CONST ?: IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT . IDENT == IDENT ) || ( IDENT -> IDENT . IDENT == IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( VOID ) ( IDENT ) ; IDENT += INT_CONST * IDENT ;
3  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT > IDENT ) RETURN ( IDENT ) ; IDENT ( &v IDENT -> IDENT , IDENT ) ; IDENT += SIZEOF ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT ; IDENT -> IDENT [ INT_CONST ] = ( IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( IDENT << INT_CONST ) ; IDENT -> IDENT [ INT_CONST ] = ( IDENT -> IDENT -> IDENT << INT_CONST ) | ( IDENT >> INT_CONST ) ; IDENT -> IDENT [ INT_CONST ] = IDENT & INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT << INT_CONST ) | ( INT_CONST << INT_CONST ) | IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ~ ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) % INT_CONST == INT_CONST && ( ( IDENT ) % INT_CONST != INT_CONST || ( IDENT ) % INT_CONST == INT_CONST ) )
1  #DEFINE OBJ_MAC ( IDENT + INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT . IDENT . IDENT ) >> INT_CONST ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) | ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT << INT_CONST ) | IDENT , IDENT ) , IDENT ( ( IDENT & INT_CONST ) | IDENT | IDENT , IDENT ) , IDENT ( ( ( IDENT | IDENT ) << INT_CONST ) | IDENT , IDENT ) , IDENT ( ( ( IDENT | IDENT ) & INT_CONST ) | IDENT | IDENT , IDENT ) )
6  #DEFINE OBJ_MAC IDENT ( IDENT , STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT ## IDENT , IDENT ## IDENT , IDENT ## IDENT , IDENT , IDENT } ,
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT ( IDENT ) , ( IDENT ) ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT ) || ( ( IDENT ) -> IDENT > IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) ( ( IDENT ) -> IDENT ) ) -> IDENT )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( IDENT ) ( IDENT ) & ( IDENT ) INT_CONST ) )
2  #DEFINE FUNC_MAC ( ) { IDENT ( INT_CONST , IDENT ) ; IDENT ( ( INT_CONST | IDENT ( IDENT ) ) , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == IDENT || IDENT == IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) IDENT ( ( ( UNSIGNED LONG ) IDENT ) + ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT < INT_CONST || IDENT >= IDENT ) { IDENT ( STRING , IDENT , IDENT ) ; IDENT ( IDENT ( ) ) ; }
1  #DEFINE FUNC_MAC ( ) { IDENT = IDENT ( ) ; }
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) ( IDENT ) , IDENT ( ) - ( IDENT ) + INT_CONST , IDENT )
1  #DEFINE CHAR OBJ_MAC
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRING , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = INT_CONST ; CONST STRUCT IDENT * IDENT = ( IDENT ) -> IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ )
1  #DEFINE OBJ_MAC IDENT = ! IDENT ( IDENT [ IDENT ] . IDENT , IDENT , IDENT ) && ! ( IDENT [ IDENT ] . IDENT & IDENT ) ;
2  #DEFINE OBJ_MAC ( ~ ( IDENT | IDENT | IDENT ) )
1  #DEFINE OBJ_MAC { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT IDENT = IDENT ( IDENT ) ; IDENT IDENT , IDENT ; IDENT IDENT = IDENT ( IDENT ) ; IDENT ( ) ; IDENT ( INT_CONST , IDENT , IDENT , STRING ) ; IDENT ( ) ; FOR ( ; IDENT <= IDENT ; IDENT v++ ) { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ( IDENT , IDENT < INT_CONST ? -v INT_CONST ?: INT_CONST ) ; IDENT ( IDENT ) = IDENT ; IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; IDENT ( IDENT + IDENT ) ; } IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , INT_CONST , IDENT , &v IDENT ) ; IDENT ( IDENT + IDENT ) ; IDENT ( ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT [ INT_CONST ] == IDENT ) && ( ( IDENT ) > INT_CONST ) && ( ( ( IDENT [ INT_CONST ] == CHAR_CONST ) && ( IDENT [ INT_CONST ] == CHAR_CONST ) ) || ( ( IDENT [ INT_CONST ] == CHAR_CONST ) && ( IDENT [ INT_CONST ] == CHAR_CONST ) ) || ( ( IDENT [ INT_CONST ] == CHAR_CONST ) && ( IDENT [ INT_CONST ] == CHAR_CONST ) ) || ( ( IDENT [ INT_CONST ] == CHAR_CONST ) && ( IDENT [ INT_CONST ] == CHAR_CONST ) ) || ( ( ( IDENT ) > INT_CONST ) && ( IDENT [ INT_CONST ] == CHAR_CONST ) && ( IDENT [ INT_CONST ] == CHAR_CONST ) && ( IDENT [ INT_CONST ] == CHAR_CONST ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT [ ( IDENT ) ] -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( INT_CONST , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { INT IDENT ; IDENT . IDENT = ( IDENT ) ; FOR ( IDENT = IDENT ; IDENT > INT_CONST ; --v IDENT ) IDENT ( ) ; IDENT . IDENT = ( IDENT ) ; FOR ( IDENT = IDENT ; IDENT > INT_CONST ; --v IDENT ) IDENT ( ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT = IDENT ( IDENT , IDENT ) , IDENT != IDENT ) RETURN IDENT
1  #DEFINE OBJ_MAC ( INT_CONST * ( IDENT + INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , IDENT + ( IDENT == -v INT_CONST ? INT_CONST ?: ( IDENT ? INT_CONST ?: INT_CONST ) ) )
4  #DEFINE FUNC_MAC ( IDENT ) WHILE ( *v IDENT == CHAR_CONST ) IDENT v++
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) ( IDENT ) , ( IDENT ) ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IF ( IDENT >= ( IDENT ) ) { IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; } }
1  #DEFINE OBJ_MAC { IDENT , IDENT , IDENT , IDENT , IDENT }
1  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT ( ) ) * INT_CONST + ! IDENT ( ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT -> IDENT == IDENT ) || ( IDENT -> IDENT == IDENT ) ) IDENT ( ( UNSIGNED CHAR *p ) ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ;
2  #DEFINE FUNC_MAC ( IDENT ) IDENT |= IDENT ( IDENT -> IDENT , &v IDENT -> IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( &v ( IDENT ) -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = IDENT ( IDENT , IDENT ( IDENT ) + INT_CONST ) ; IF ( IDENT < INT_CONST ) GOTO IDENT ; IDENT ( IDENT -> IDENT , IDENT ) ; IDENT = IDENT ( IDENT , IDENT -> IDENT , IDENT ( IDENT -> IDENT ) ) ; IF ( IDENT < INT_CONST ) GOTO IDENT ; } WHILE ( INT_CONST )
10  #DEFINE OBJ_MAC IDENT ( &v IDENT , &v IDENT , IDENT )
2  #DEFINE OBJ_MAC LONG DOUBLE
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) DO { } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT -> IDENT . IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * INT_CONST - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) -> IDENT . IDENT += ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( IDENT ) - ( INT ) ( CHAR_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT . IDENT = IDENT + IDENT , IDENT . IDENT = ( VOID *p ) IDENT , IDENT ( &v IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( INT_CONST ) { IF ( IDENT == IDENT ) IDENT ( IDENT ) ; ELSE IDENT ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ) IDENT ( IDENT , IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( &v ( ( IDENT ) [ IDENT ( IDENT ) ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) , ( UNSIGNED CHAR ) ( IDENT ( IDENT , ( IDENT ) ) & ~ ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT ) & INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( INT_CONST | ( ( IDENT & INT_CONST ) << INT_CONST ) ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( INT_CONST , IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING IDENT STRING : : STRING ( SIZEOF ( IDENT ) ) )
1  #DEFINE OBJ_MAC ( ( UNSIGNED INT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { ( IDENT ) = INT_CONST ^ IDENT ( ( ( STRUCT IDENT * ) ( IDENT ) ) -> IDENT . IDENT , ( ( STRUCT IDENT * ) ( IDENT ) ) -> IDENT . IDENT , ( ( STRUCT IDENT * ) ( IDENT ) ) -> IDENT + ( ( ( STRUCT IDENT * ) ( IDENT ) ) -> IDENT << INT_CONST ) + ( ( IDENT ) -> IDENT [ IDENT ] & IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = IDENT ; IF ( IDENT == IDENT ) { ( VOID ) IDENT ; ( VOID ) IDENT ; } ELSE { ( VOID ) IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT ) ) { UNSIGNED LONG IDENT ; IDENT ( IDENT ) ; IDENT ( ) ; IDENT -> IDENT [ IDENT -> IDENT ] = ( IDENT ) ; IDENT -> IDENT v++ ; IDENT -> IDENT = ( IDENT -> IDENT + INT_CONST ) % IDENT ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT ( ( IDENT ) ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) & IDENT ) [ IDENT ]
1  #DEFINE FUNC_MAC ( ) STRUCT IDENT * IDENT = IDENT -> IDENT ; CHAR *p IDENT ; IDENT ( IDENT , CHAR *p , IDENT -> IDENT + INT_CONST , IDENT , IDENT ) ; IDENT ( IDENT , IDENT -> IDENT , IDENT -> IDENT ) ; IDENT [ IDENT -> IDENT ] = CHAR_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( IDENT ( IDENT ) & INT_CONST ) )
92  #DEFINE OBJ_MAC ( IDENT - INT_CONST )
49  #DEFINE OBJ_MAC ( UNSIGNED CHAR *p ) STRING
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( IDENT ) & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { INT IDENT = INT_CONST ; DO { IDENT ( ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; } WHILE ( ( ( IDENT ( IDENT , IDENT ) & IDENT ) == INT_CONST ) && ( ++v IDENT < INT_CONST ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ) , ( *v ( ( VOLATILE IDENT * ) ( ( IDENT * ) ( ( IDENT + ( IDENT ? INT_CONST ?: INT_CONST ) ) + ( IDENT ) ) ) ) ) )
1  #DEFINE OBJ_MAC ( IDENT + IDENT -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) ^ IDENT ) & ( INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) && IDENT ( IDENT ) && ( IDENT ) -> IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT , IDENT , ( IDENT ) , ## IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ( IDENT , IDENT ) , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( ) { IF ( IDENT == IDENT ) { IDENT IDENT ; IDENT = IDENT ( &v IDENT ) ; IDENT ( INT_CONST == IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT -> IDENT & IDENT ## IDENT ) { IDENT ( STRING , IDENT ? STRING ?: STRING , # IDENT ) ; IDENT v++ ; } }
2  #DEFINE FUNC_MAC ( IDENT ) ( *v ( UNSIGNED SHORT *p ) ( IDENT ) == INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT + IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { INT IDENT = IDENT ; IDENT += IDENT ; IF ( IDENT ( IDENT , IDENT , IDENT ) != IDENT ) GOTO #ERROR ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT |= ( IDENT << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( IDENT ( ( IDENT ) -> IDENT ) ) { IDENT ( IDENT ( IDENT ) , ( IDENT ) , ( IDENT ) -> IDENT ) ; } ELSE { IDENT ( IDENT ( IDENT ) , ( IDENT ) , ( IDENT ) -> IDENT ) ; } }
4  #DEFINE OBJ_MAC ( IDENT ) IDENT
1  #DEFINE FUNC_MAC ( IDENT ) DO IF ( ! ( IDENT ) ) { IDENT ( IDENT , STRING # IDENT STRING , IDENT [ INT_CONST ] , IDENT ) ; IDENT ( ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * IDENT ) / INT_CONST )
2  #DEFINE FUNC_MAC ( ) IDENT ( IDENT -> IDENT & ~ IDENT )
11  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = INT_CONST ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! IDENT ( IDENT , IDENT ) ) { IDENT -> IDENT -> IDENT . IDENT = IDENT ; IDENT -> IDENT -> IDENT = IDENT ; BREAK ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( INT_CONST ) ; IDENT ( IDENT , IDENT , INT_CONST , INT_CONST ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT |= IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST ) ; IDENT ( IDENT , INT_CONST ) ; IDENT ( IDENT , INT_CONST ) ; IDENT ( IDENT , INT_CONST ) ; IDENT ( IDENT , INT_CONST ) ; IDENT ( IDENT , INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT ) && ! IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) + SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) | ( IDENT ) | ( ( IDENT ) << ( IDENT -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT + IDENT )
3  #DEFINE OBJ_MAC ( SIZEOF IDENT / SIZEOF IDENT [ INT_CONST ] )
1  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , STRING )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST && ( IDENT ) != -v IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT * ) IDENT + ( IDENT ) * IDENT + ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT != IDENT
1  #DEFINE OBJ_MAC IF ( ++v IDENT >= IDENT ) IDENT = INT_CONST
1  #DEFINE OBJ_MAC ( IDENT + ( IDENT / IDENT ) - INT_CONST )
3  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT != INT_CONST && ( ( ( ( IDENT & INT_CONST ) == INT_CONST ) && ( ( IDENT - ( ( IDENT / INT_CONST ) * INT_CONST ) ) != INT_CONST ) ) || ( IDENT - ( ( IDENT / INT_CONST ) * INT_CONST ) ) == INT_CONST ) )
9  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IF ( IDENT ( IDENT , IDENT , IDENT , IDENT ( IDENT ) , IDENT ( IDENT ) ) < INT_CONST ) { RETURN IDENT ; } IDENT
4  #DEFINE OBJ_MAC ( STRUCT IDENT * ) IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) + ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( UNSIGNED LONG ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( CHAR *p ) IDENT , ( CHAR *p ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ) ; ( *v ( VOLATILE IDENT * ) ( ( IDENT * ) ( IDENT ) ) = ( IDENT ) ( IDENT ? INT_CONST ?: INT_CONST ) ) ; IDENT ( ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... ) DO { } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT * IDENT ; IDENT IDENT ; IDENT = ( IDENT * ) IDENT ( IDENT , ( CHAR *p ) IDENT , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( IDENT ) IDENT = IDENT -> IDENT ; ELSE IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , IDENT , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + IDENT ( ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT ( IDENT , IDENT , IDENT + ( IDENT & ( ( INT_CONST << IDENT -> IDENT ) - INT_CONST ) ) + ( ( IDENT ) << IDENT -> IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) ( ( ( IDENT ) IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT , ( IDENT ) , IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( SIZEOF ( IDENT ) / SIZEOF ( STRUCT IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT ) ? ( *v ( IDENT ) -> IDENT ) ( ( IDENT ) -> IDENT , ( IDENT ) ) ?: ( *v ( STRUCT IDENT * ( *v ) ( LONG ) ) ( IDENT ) -> IDENT ) ( ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( IDENT ) ( IDENT )
5  #DEFINE OBJ_MAC ( IDENT / INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! ( IDENT ) ) { IDENT ( STRING , # IDENT , IDENT , IDENT , IDENT ) ; ## IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT IDENT ; IDENT . IDENT = IDENT ; IDENT . IDENT = IDENT ; IDENT . IDENT = IDENT ; IDENT . IDENT = IDENT ; IF ( IDENT ) ( ( IDENT * ) ( IDENT ) ) -> IDENT = &v IDENT ; IDENT ( IDENT , IDENT , &v IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST - ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT > ( IDENT ) ) IDENT ( IDENT IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( ( IDENT ) == ( IDENT ) && ( IDENT ) == ( IDENT ) ) || ( ( IDENT ) == IDENT && ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT && ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT && ( IDENT ) == IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( &v IDENT -> IDENT -> IDENT , IDENT ) ; IF ( IDENT -> IDENT ) { IDENT ( &v IDENT -> IDENT -> IDENT , IDENT ) ; RETURN -v IDENT ; } IDENT -> IDENT = INT_CONST ; IDENT ( &v IDENT -> IDENT -> IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) -> IDENT + IDENT ) & IDENT )
12  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? INT_CONST ?: INT_CONST )
2  #DEFINE OBJ_MAC IF ( IDENT > INT_CONST ) IDENT
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ( IDENT ) ) , IDENT ( IDENT ( IDENT -> IDENT ) ) , IDENT ( IDENT ( IDENT -> IDENT -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , INT_CONST , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT IDENT ; IF ( ! ( IDENT ) ) { IDENT = IDENT ( ( IDENT ) -> IDENT . IDENT , &v IDENT ) ; IDENT ( ( IDENT ) , IDENT ) ; } } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT . IDENT << IDENT ) + IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT . IDENT = ( IDENT ) ; IDENT ( ) ; IDENT . IDENT = ( IDENT ) ; IDENT ( ) ; } WHILE ( INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT == INT_CONST )
5  #DEFINE OBJ_MAC INT_CONST + IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) , STRING , IDENT ) ; IDENT ( ( IDENT ) , ( IDENT ) ) ; IDENT ( CHAR_CONST , ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ) { IDENT * IDENT = ( IDENT ) -> IDENT ; WHILE ( IDENT -> IDENT ) IDENT = IDENT -> IDENT ; WHILE ( IDENT ) { STRUCT IDENT * IDENT = IDENT ( IDENT , STRUCT IDENT , IDENT ) ; IDENT ( STRING , IDENT -> IDENT ) ; IDENT ( &v IDENT ) ; } }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( # IDENT , IDENT )
2  #DEFINE FUNC_MAC ( ) IDENT ( STRING STRING STRING STRING STRING , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT , IDENT -> IDENT . IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( ! IDENT ( IDENT , IDENT ) ) { IDENT -> IDENT -> IDENT . IDENT = IDENT ; IDENT -> IDENT -> IDENT = IDENT ; IDENT ( IDENT ) BREAK ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED SHORT ) ( ( UNSIGNED LONG ) ( IDENT ) - ( UNSIGNED LONG ) IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) -> IDENT == IDENT ) && ( ( IDENT ) -> IDENT == IDENT ) ) || ( ( ( IDENT ) -> IDENT == IDENT ) && ( ( IDENT ) -> IDENT == IDENT ) ) )
1  #DEFINE OBJ_MAC { *v IDENT = IDENT ; IDENT = IDENT ; ++v IDENT ; GOTO IDENT ; }
5  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT + IDENT )
8  #DEFINE OBJ_MAC ( ( STRUCT IDENT * ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) ? ( ( IDENT ) ( ( IDENT ) - IDENT ) ) ?: ( ( IDENT ) ( ( IDENT ) - IDENT + IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( IDENT ) & IDENT ) << INT_CONST )
1  #DEFINE FUNC_MAC ( ) DO { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IDENT ( INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT -> IDENT . IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED INT ) ( IDENT -> IDENT ) )
7  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) + ( ( IDENT ) >> INT_CONST ) * INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) < INT_CONST ? IDENT [ IDENT ] ?: IDENT [ INT_CONST + ( ( IDENT ) >> INT_CONST ) ] )
1  #DEFINE OBJ_MAC STATIC IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ) >= IDENT ? ( ( ( UNSIGNED ) IDENT << INT_CONST ) + ( UNSIGNED ) IDENT ( IDENT ( IDENT ) ) ) % IDENT ?: IDENT ( IDENT , IDENT ) % IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > INT_CONST ? ( IDENT ) ?: ( -v ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT . IDENT . IDENT [ INT_CONST ] != INT_CONST ) IDENT ; IF ( IDENT -> IDENT . IDENT . IDENT [ INT_CONST ] != INT_CONST ) IDENT ; IDENT -> IDENT -> IDENT . IDENT . IDENT = IDENT -> IDENT . IDENT . IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) WHILE ( ( LONG ) ( IDENT - ( IDENT ) ) < INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ... ) IF ( IDENT >= IDENT + IDENT ) IDENT ( ) ; IDENT = IDENT ( IDENT , IDENT ) ; *v IDENT v++ = IDENT ; IDENT += IDENT + INT_CONST ; IF ( IDENT >= IDENT + IDENT ) IDENT ( ) ;
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , IDENT , ( IDENT ) ) ; RETURN ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( STRING : : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT , IDENT [ IDENT ] , IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( FLOAT_CONST - FLOAT_CONST * IDENT ( INT_CONST * IDENT * ( IDENT ) ) ) ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) -> IDENT ( ( IDENT ) -> IDENT , ( IDENT ) , ( IDENT ) , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ( IDENT ) < INT_CONST ) { IDENT ( ) ; RETURN ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT * IDENT = ( IDENT * ) ( IDENT ) ; IDENT IDENT = ( IDENT ) ( IDENT ) ; *v IDENT v++ = ( IDENT ) ( IDENT >> INT_CONST ) ; *v IDENT = ( IDENT ) ( IDENT & INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) , INT_CONST , ( IDENT ) ) ; IDENT ( ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { CHAR IDENT [ INT_CONST ] ; IDENT ( IDENT , SIZEOF IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ; }
3  #DEFINE OBJ_MAC ( ( IDENT -> IDENT ) >= IDENT ) ? IDENT ( INT_CONST ) ?: INT_CONST
2  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) - SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT -> IDENT + IDENT ## IDENT * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT -> IDENT & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ; IDENT = IDENT ; IDENT = IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT != ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT ? ( IDENT ) . IDENT . IDENT ?: ( IDENT ) . IDENT . IDENT & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT . IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT IDENT = ( IDENT ) ; STRUCT IDENT * IDENT ; IF ( IDENT . IDENT ) IDENT = IDENT . IDENT , IDENT . IDENT = IDENT -> IDENT ; ELSE IDENT = ( STRUCT IDENT * ) IDENT ( SIZEOF ( STRUCT IDENT ) ) ; IDENT -> IDENT = INT_CONST ; IDENT -> IDENT . IDENT = &v IDENT ; IDENT -> IDENT . IDENT = IDENT ; IDENT = IDENT ; IF ( IDENT -> IDENT . IDENT == IDENT ) IDENT -> IDENT = IDENT . IDENT , IDENT . IDENT = IDENT ; ELSE IDENT -> IDENT = IDENT . IDENT , IDENT . IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC { IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) == -v IDENT ) RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IDENT ( IDENT ( &v IDENT , IDENT ) == INT_CONST ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) [ INT_CONST ] << INT_CONST ) + ( ( IDENT ) [ INT_CONST ] << INT_CONST ) + ( ( IDENT ) [ INT_CONST ] << INT_CONST ) + ( IDENT ) [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( ( INT_CONST - ( IDENT * INT_CONST / INT_CONST ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v ( IDENT ) -> IDENT ) > INT_CONST )
1  #DEFINE OBJ_MAC ( *v ( VOID *p *p ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT = INT_CONST ; IDENT ( IDENT , ( IDENT ) -> IDENT >> INT_CONST ) ; IDENT ( IDENT , ( IDENT ) -> IDENT & INT_CONST ) ; IDENT ( IDENT , ( IDENT ) -> IDENT >> INT_CONST ) ; IDENT ( IDENT , ( IDENT ) -> IDENT & INT_CONST ) ; IDENT ( IDENT , IDENT ( IDENT ) ) ; IDENT ( IDENT , IDENT ( IDENT ) ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( ) && IDENT ( ) == ( IDENT ) , IDENT )
1  #DEFINE OBJ_MAC IDENT ( INT_CONST , IDENT + INT_CONST ) ; IDENT ( INT_CONST , IDENT + INT_CONST ) ; IDENT ( INT_CONST , IDENT + INT_CONST ) ; IDENT ( INT_CONST , IDENT + INT_CONST ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( IDENT ) & INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < INT_CONST || IDENT > IDENT ) ? STRING ?: IDENT [ IDENT ]
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST | ( IDENT ) ) & ~ INT_CONST )
3  #DEFINE OBJ_MAC IDENT ( ) ; IF ( IDENT ) { ( *v ( VOLATILE IDENT * ) ( ( IDENT * ) ( IDENT + INT_CONST ) ) = INT_CONST ) ; IDENT ( ) ; }
217  #DEFINE OBJ_MAC - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) EXTERN INT IDENT ( VOID *p , VOID *p , VOID *p )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( STRING , IDENT , IDENT , IDENT , INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT < INT_CONST || IDENT >= IDENT ) IDENT ( STRING , IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ( *v ( IDENT * ) ( IDENT ) ) != ( IDENT ) ) IDENT ( STRING , IDENT , IDENT , IDENT , ( IDENT ) , ( IDENT ) ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { REGISTER DOUBLE IDENT IDENT ( STRING # IDENT ) ; IDENT IDENT ( STRING : : STRING ( IDENT ) , STRING ( IDENT ) : STRING ) ; } )
4  #DEFINE VOLATILE
1  #DEFINE OBJ_MAC ( IDENT + INT_CONST / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( UNSIGNED INT ) ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( UNSIGNED LONG ) IDENT , ( UNSIGNED LONG ) IDENT ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( &v IDENT -> IDENT , IDENT ( IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT * IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , &v IDENT -> IDENT ) ; IF ( IDENT ( &v IDENT -> IDENT ) < INT_CONST ) IDENT ( &v IDENT -> IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT ) { IDENT ( IDENT , IDENT ) ; IDENT ( IDENT ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( STRING , IDENT , IDENT , ! ! ( IDENT ) ) ; IDENT ( IDENT , IDENT , IDENT , ! ! ( IDENT ) ) ; }
3  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT )
8  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT = SIZEOF ( STRUCT IDENT ) + IDENT -> IDENT [ INT_CONST ] ; IF ( IDENT & INT_CONST ) IDENT v++ ; IDENT = ( ( UNSIGNED CHAR *p ) IDENT ) + IDENT ; IDENT = *v ( ( UNSIGNED CHAR *p ) IDENT ) - IDENT ; IF ( IDENT -> IDENT -> IDENT . IDENT . IDENT != -v INT_CONST ) { IDENT -= IDENT -> IDENT -> IDENT . IDENT . IDENT ; IDENT += IDENT -> IDENT -> IDENT . IDENT . IDENT ; IF ( IDENT < INT_CONST ) IDENT = INT_CONST ; } }
1  #DEFINE OBJ_MAC { IDENT , STRING , IDENT , INT_CONST , INT_CONST , IDENT }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || ( IDENT ( IDENT ) ) )
2  #DEFINE OBJ_MAC ( INT_CONST << ( IDENT + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) ^ INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) + IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT [ IDENT ] . IDENT [ ( IDENT ) - INT_CONST ] . IDENT = IDENT ; IDENT [ IDENT ] . IDENT [ ( IDENT ) - INT_CONST ] . IDENT = IDENT ; IDENT [ IDENT ] . IDENT [ ( IDENT ) - INT_CONST ] . IDENT = INT_CONST ;
1  #DEFINE OBJ_MAC ( UNSIGNED CHAR ) INT_CONST ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( CHAR *p ) IDENT + IDENT [ IDENT ] ) ) -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) IF ( IDENT -> IDENT -> IDENT == INT_CONST && IDENT ( IDENT -> IDENT ) == INT_CONST && ( IDENT ( IDENT -> IDENT ) >= INT_CONST ) && ( IDENT ( IDENT -> IDENT ) <= INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = ( IDENT ) ; IDENT ( STRING , IDENT , IDENT ) ; BREAK
6  #DEFINE OBJ_MAC ( IDENT * ) IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) FOR ( ; IDENT < IDENT ; ++v IDENT ) { IF ( INT_CONST == ( *v IDENT & *v IDENT ) ) { *v IDENT |= *v IDENT ; IDENT = ( INT ) ( ( UNSIGNED LONG ) IDENT - ( UNSIGNED LONG ) IDENT -> IDENT ) ; IDENT -> IDENT = IDENT + ( IDENT >> INT_CONST ) ; GOTO IDENT ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) - IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( IDENT ) ; ( IDENT ) = IDENT ( IDENT , IDENT ( IDENT ) , IDENT , IDENT , IDENT ) ; IF ( ! ( IDENT ) ) RETURN IDENT ; IDENT . IDENT = INT_CONST ; IDENT . IDENT = ( IDENT ) -> IDENT ; IDENT . IDENT = ( IDENT ) -> IDENT ; }
19  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) ) & ( ( INT_CONST << IDENT ) - INT_CONST ) ) % IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED CHAR *p ) & ( ( IDENT ) -> IDENT ) ) [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ) , ( *v ( VOLATILE IDENT * ) ( IDENT + INT_CONST + ( IDENT ) IDENT ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT / IDENT )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT = IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) &= ( ~ ( INT_CONST << INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( IDENT ) . IDENT != IDENT ) { ( *v ( IDENT ( IDENT ) . IDENT ) ) ( ( IDENT ) ( IDENT ) ) ; }
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ ( IDENT ) ] & IDENT )
8  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRUCT IDENT , IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT > IDENT ) RETURN ( IDENT ) ; IF ( ( ( CHAR *p ) ( IDENT ) ) [ INT_CONST ] ) IDENT -> IDENT = IDENT ; ELSE IDENT -> IDENT = IDENT ; IDENT += SIZEOF ( CHAR ) ; }
9  #DEFINE OBJ_MAC IDENT + INT_CONST + IDENT
2  #DEFINE OBJ_MAC ( IDENT ( IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( &v IDENT ) != INT_CONST ) IDENT ( INT_CONST ) ; *v IDENT += IDENT ; IF ( IDENT ( &v IDENT ) != INT_CONST ) IDENT ( INT_CONST ) ;
1  #DEFINE OBJ_MAC ( IDENT -> IDENT - IDENT -> IDENT + INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( IDENT [ IDENT ] == IDENT ) { IDENT [ IDENT ] = INT_CONST ; IDENT [ IDENT ] . IDENT = IDENT + ( IDENT ) , IDENT [ IDENT ] . IDENT = IDENT + ( IDENT ) ; IDENT = ( IDENT + INT_CONST ) & IDENT ; } ELSE IF ( IDENT [ IDENT ] != INT_CONST ) IDENT = IDENT [ IDENT ] ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , ( ( STRUCT IDENT * ) & ( IDENT ) ) -> IDENT . IDENT . IDENT , ( ( STRUCT IDENT * ) & ( IDENT ) ) -> IDENT . IDENT . IDENT , ( ( STRUCT IDENT * ) & ( IDENT ) ) -> IDENT . IDENT . IDENT , ( ( STRUCT IDENT * ) & ( IDENT ) ) -> IDENT . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT > IDENT ( IDENT , IDENT ) ) && ( IDENT < IDENT ( IDENT , IDENT ) + SIZEOF ( ( ( IDENT * ) INT_CONST ) -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == IDENT && IDENT ) ? IDENT ?: IDENT ( ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + ( IDENT ) - INT_CONST ) & -v ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * *v ) & ( ( IDENT ) -> IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) / ( IDENT ) - ( ( IDENT ) % ( IDENT ) < INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( IDENT += IDENT ( IDENT , IDENT , IDENT ) + IDENT , IDENT = ( IDENT << IDENT ) | ( IDENT >> ( INT_CONST - IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) | ( ( IDENT & INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) { #ERROR = IDENT ; GOTO IDENT ; }
13  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT >> INT_CONST ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( SHORT ) ( IDENT ( ( INT ) ( ( IDENT ) ( ( IDENT ) IDENT + ( IDENT ) IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) > ( IDENT ) ) ? IDENT ?: IDENT )
2  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT -> IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT . IDENT + ( IDENT ) -> IDENT . IDENT )
1  #DEFINE INT OBJ_MAC
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = ( IDENT ) ; INT IDENT ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { INT IDENT = IDENT ( IDENT ) ; INT IDENT = IDENT ( IDENT ) ; INT IDENT = IDENT ( IDENT ) ; INT IDENT = IDENT ( IDENT ) ; INT IDENT = IDENT ( IDENT ) ; IDENT ( IDENT , STRING , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , INT_CONST ) ; IDENT ( IDENT , STRING , IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IDENT ( IDENT , IDENT , IDENT , IDENT , ## IDENT )
13  #DEFINE FUNC_MAC ( ) IDENT ( ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( &v ( ( IDENT ) ( IDENT ) ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT &= INT_CONST ; IF ( IDENT ( IDENT ) == &v IDENT ) IDENT -> IDENT |= INT_CONST << INT_CONST ; ELSE IDENT -> IDENT |= IDENT ( IDENT ) << INT_CONST ;
1  #DEFINE OBJ_MAC * IDENT = ~ INT_CONST ;
7  #DEFINE OBJ_MAC ( ( IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT + ( ( IDENT ) << INT_CONST ) + INT_CONST ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ? ( ( IDENT ) -> IDENT &= ~ ( IDENT ) ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , +v INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( STRING , IDENT , ( VOID *p ) ( IDENT ) , ( VOID *p ) ( IDENT ) ) ; IF ( ( IDENT ) == ( IDENT ) ) IDENT ( INT_CONST ) ; }
8  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ## IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT -> IDENT != INT_CONST ) { IDENT -> IDENT v++ ; IF ( IDENT -> IDENT >= IDENT ) IDENT -> IDENT = INT_CONST ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT | IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT -> IDENT == INT_CONST && IDENT -> IDENT == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT = ( ( IDENT ) < INT_CONST ? IDENT ( ( -v ( IDENT ) ) / INT_CONST ) ?: ( IDENT ) / INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT != IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + ( SIZEOF ( LONG ) ) - INT_CONST ) & ~ ( ( SIZEOF ( LONG ) ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( UNSIGNED LONG ) ( IDENT )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) + ( ( IDENT ) - INT_CONST ) ) / ( IDENT ) ) * ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT ( IDENT ## IDENT , IDENT ( IDENT ## IDENT ) ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) STATIC INT IDENT ( IDENT * IDENT , STRUCT IDENT * IDENT , STRUCT IDENT * IDENT , INT IDENT ) { INT IDENT ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT = IDENT ## IDENT ## IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( IDENT ) ?: ( IDENT ) - IDENT )
10  #DEFINE OBJ_MAC IDENT -> IDENT -> IDENT . IDENT
1  #DEFINE OBJ_MAC { IDENT ( INT_CONST , IDENT ) ; RETURN INT_CONST ; }
2  #DEFINE OBJ_MAC ( IDENT | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + ( ( IDENT < INT_CONST ) ? INT_CONST ?: ( ( IDENT < INT_CONST ) ? INT_CONST ?: ( ( IDENT < INT_CONST ) ? INT_CONST ?: INT_CONST ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT == IDENT ) IDENT ( ( UNSIGNED IDENT * ) ( IDENT ) , ( IDENT ) ) ; ELSE { UNSIGNED IDENT IDENT [ INT_CONST ] ; IDENT [ INT_CONST ] = ( ( IDENT * ) IDENT ) [ INT_CONST ] ; IDENT [ INT_CONST ] = ( ( IDENT * ) IDENT ) [ INT_CONST ] ; IDENT [ INT_CONST ] = ( ( IDENT * ) IDENT ) [ INT_CONST ] ; IDENT [ INT_CONST ] = ( ( IDENT * ) IDENT ) [ INT_CONST ] ; IDENT ( IDENT , ( IDENT ) ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT , IDENT , IDENT , ++v IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) IDENT - IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( &v ( ( ( IDENT * ) IDENT ) -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN ( IDENT >= IDENT ) - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { IF ( ! IDENT || ! IDENT -> IDENT || ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT != IDENT ) { IDENT ( IDENT , IDENT ) ; RETURN IDENT ; } } )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) != ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ## IDENT ## IDENT ( VOID )
2  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT != INT_CONST ) { IDENT IDENT ; } }
4  #DEFINE OBJ_MAC ( IDENT ( &v IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( IDENT >= ( IDENT ) ) { IDENT ( ( IDENT ) , ( IDENT ) ) ; } }
1  #DEFINE FUNC_MAC ( REGISTER ) IDENT ( STRING # REGISTER : : STRING ( INT_CONST ) ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) + INT_CONST * IDENT ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? INT_CONST ?: INT_CONST )
1  #DEFINE OBJ_MAC ( ( ( INT_CONST ? INT_CONST ?: IDENT - IDENT + INT_CONST ) * IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) > ( IDENT ) ) ? IDENT ?: IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT ) >> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) IDENT ) -> IDENT . IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT STRING , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT == IDENT ) || ( IDENT == IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) IDENT ( IDENT , STRING , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ( IDENT , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v ( ( IDENT ) -> IDENT ) , &v ( ( IDENT ) -> IDENT ) , SIZEOF ( ( IDENT ) -> IDENT ) ) )
12  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { EXTERN STRUCT IDENT IDENT ## IDENT ## IDENT ; IDENT ( &v IDENT ## IDENT ## IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) STATIC IDENT IDENT ## IDENT ## IDENT = IDENT ; STRUCT IDENT IDENT = { IDENT ( IDENT , IDENT , IDENT ) , &v IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT , IDENT -> IDENT + IDENT + ( UNSIGNED INT ) ( ( ( STRUCT IDENT * ) ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ) -> IDENT ) * IDENT ) )
48  #DEFINE OBJ_MAC ( IDENT + IDENT )
1  #DEFINE OBJ_MAC ( ( INT_CONST / INT_CONST ) * ( INT_CONST << IDENT ) )
14  #DEFINE FUNC_MAC ( ) IDENT ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) -> IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT ) & INT_CONST ) )
1  #DEFINE OBJ_MAC ( *v ( CHAR *p ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT ( ( IDENT ) , ( IDENT ) ) ; IDENT = IDENT ( ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( IDENT ) == INT_CONST ? ( ( IDENT ) * INT_CONST ) ?: ( IDENT ) == INT_CONST ? ( ( IDENT ) * INT_CONST ) ?: ( IDENT ) == INT_CONST ? ( ( IDENT ) * INT_CONST ) ?: ( IDENT ) == INT_CONST ? ( IDENT ) ?: ( IDENT ) == INT_CONST ? ( ( IDENT ) * INT_CONST - INT_CONST ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT > IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) >> INT_CONST ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT STRING , IDENT , IDENT , ## IDENT )
1  #DEFINE OBJ_MAC ( ( ( UNSIGNED ) ( ~ INT_CONST ) << INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { UNSIGNED LONG IDENT ; IDENT ( IDENT ) ; IDENT ( ) ; IF ( IDENT [ IDENT -> #LINE ] . IDENT == IDENT ) { IDENT v++ ; IDENT ( IDENT ( IDENT -> #LINE , STRING , IDENT -> #LINE ) ) ; IDENT ( IDENT ( IDENT -> #LINE , STRING , IDENT ) ) ; IDENT ( &v IDENT [ IDENT -> #LINE ] , IDENT , ( UNSIGNED LONG ) IDENT , IDENT -> IDENT * INT_CONST , IDENT ) ; } ELSE { IDENT ( IDENT ( IDENT -> #LINE , STRING , IDENT -> #LINE ) ) ; } IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ? ( IDENT ) -> IDENT ?: ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IF ( IDENT ( IDENT , &v IDENT ) ) IF ( ! IDENT ( IDENT , &v IDENT ) ) { IF ( ! IDENT ) { IF ( IDENT ( IDENT , IDENT . IDENT ) ) IDENT = IDENT ; ELSE RETURN ; } IF ( IDENT ( IDENT , IDENT ) ) { IDENT ( IDENT , SIZEOF ( IDENT ) ,
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) WHILE ( IDENT ( IDENT ) ) IDENT ( )
1  #DEFINE FUNC_MAC ( ) DO { IDENT = IDENT ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) ] )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , IDENT , SIZEOF ( IDENT ) - INT_CONST ) ; IDENT += SIZEOF ( IDENT ) - INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT , INT_CONST + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT IDENT = IDENT == INT_CONST ? IDENT ?: IDENT ( IDENT , IDENT ) ; IDENT = IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ## IDENT , IDENT ## IDENT ## IDENT ## IDENT , IDENT , IDENT , INT_CONST , INT_CONST , ( UNSIGNED LONG ) IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( INT_CONST | ( IDENT ( IDENT ) << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT & ~ INT_CONST ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) ( IDENT ) ) * ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT != IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + IDENT + ( IDENT * INT_CONST ) )
2  #DEFINE OBJ_MAC IDENT ( SIZEOF ( IDENT ) , SIZEOF ( STRUCT IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) { { IDENT , ( VOID *p ) IDENT } , INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( STRING : STRING ( IDENT ) : STRING ( *v ( CONST UNSIGNED LONG *p ) ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) | ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT = ( IDENT ## IDENT ## IDENT * ) ( IDENT -> IDENT -> IDENT . IDENT ) ; IF ( IDENT == IDENT ) {
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT ( IDENT , IDENT + ( IDENT & ( ( INT_CONST << IDENT -> IDENT ) - INT_CONST ) ) + ( ( IDENT ) << IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( ) ; RETURN ( ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) << INT_CONST ) | ( IDENT ) ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT & INT_CONST ) ? ( IDENT [ ( IDENT & INT_CONST ) ] ) ?: ( IDENT [ IDENT ] ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT - INT_CONST + IDENT -> IDENT - IDENT -> IDENT ) % IDENT ) > IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v IDENT -> IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) * ( ( IDENT ) / INT_CONST ) + INT_CONST ) / INT_CONST )
1  #DEFINE OBJ_MAC ( ~ ( IDENT | IDENT | IDENT | IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) | ( ( IDENT ) & INT_CONST ) )
2  #DEFINE OBJ_MAC ( ~ IDENT )
1  #DEFINE FUNC_MAC ( ) ( IDENT ( &v IDENT ) [ -v INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ~ ( IDENT ) , IDENT )
20  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + ( IDENT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT ) -> IDENT v++ ) [ INT_CONST ] = IDENT ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT > INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT < INT_CONST ? ( INT_CONST + ( ( IDENT ) / INT_CONST ) ) << INT_CONST ?: ( ( ( IDENT ) + INT_CONST ) / INT_CONST ) << INT_CONST ) , INT_CONST , INT_CONST ) )
6  #DEFINE FUNC_MAC ( IDENT ) { IF ( ! IDENT ( IDENT ) ) IDENT ( IDENT , STRING ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( IDENT ) < ( IDENT ) ) ( IDENT ) = ( IDENT ) ; ELSE
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) [ INT_CONST ] == ( IDENT ) [ INT_CONST ] && ( IDENT ) [ INT_CONST ] == ( IDENT ) [ INT_CONST ] && ( IDENT ) [ INT_CONST ] == ( IDENT ) [ INT_CONST ] && ( IDENT ) [ INT_CONST ] == ( IDENT ) [ INT_CONST ] && ( IDENT ) [ INT_CONST ] == ( IDENT ) [ INT_CONST ] && ( IDENT ) [ INT_CONST ] == ( IDENT ) [ INT_CONST ] && ( IDENT ) [ INT_CONST ] == ( IDENT ) [ INT_CONST ] && ( IDENT ) [ INT_CONST ] == ( IDENT ) [ INT_CONST ] )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) + ( IDENT ) - INT_CONST ) & ~ ( ( IDENT ) - INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * INT_CONST / INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { INT IDENT ; IDENT IDENT = IDENT ( ) ; IDENT ( IDENT ( ) ) ; IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT ) ; IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( IDENT ) >> INT_CONST ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) &= IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT ? STRING ?: ( ( IDENT ) == IDENT ? STRING ?: ( ( IDENT ) == IDENT ? STRING ?: ( ( IDENT ) == IDENT ? STRING ?: STRING ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) [ IDENT ] = CHAR_CONST ) , IDENT ( ( IDENT ) , IDENT ) , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ( IDENT = &v IDENT -> IDENT [ IDENT ] , IDENT -> IDENT = ( IDENT ) , IDENT -> IDENT = ( IDENT ) , IDENT -> IDENT = ( IDENT ) , IDENT -> IDENT = ( IDENT ) , IDENT -> IDENT = ( IDENT ) , IDENT -> IDENT = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( INT_CONST ) IDENT ( STRING , IDENT , IDENT ) ; IF ( IDENT -> IDENT . IDENT < IDENT * INT_CONST ) IDENT ( IDENT , IDENT * INT_CONST ) ; IDENT -> IDENT . IDENT -= IDENT * INT_CONST ; IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT ( &v IDENT ) != INT_CONST ) IDENT ( INT_CONST ) ; *v IDENT = IDENT ; IF ( IDENT ( &v IDENT ) != INT_CONST ) IDENT ( INT_CONST ) ;
1  #DEFINE OBJ_MAC { IDENT ( STRING ) ; }
2  #DEFINE OBJ_MAC ( ( UNSIGNED SHORT *p ) ( ( ( CHAR *p ) IDENT ) + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT + IDENT ) | IDENT , IDENT + IDENT )
14  #DEFINE OBJ_MAC ( *v ( UNSIGNED LONG *p ) ( IDENT + INT_CONST ) )
1  #DEFINE OBJ_MAC INT_CONST * SIZEOF ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( ( CHAR *p ) ( IDENT ) ) - IDENT ) )
3  #DEFINE FUNC_MAC ( ) DO { IF ( IDENT - IDENT < IDENT - IDENT ) { IDENT += IDENT - IDENT ; IDENT = IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST * INT_CONST ) / ( IDENT / INT_CONST ) * ( IDENT / INT_CONST ) )
276  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED LONG ) ( IDENT ) + ( IDENT - INT_CONST ) ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) && ! ( ( IDENT < INT_CONST ? -v IDENT ?: IDENT ) > IDENT ) ) ? IDENT ( IDENT + ( +v FLOAT_CONST ) ) ?: *v ( IDENT -> IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ) { IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , CHAR_CONST ) ; IDENT ( IDENT , STRING ) ; IF ( IDENT ) IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , INT_CONST ) ; IDENT ( CHAR_CONST , IDENT ) ; } ELSE IDENT v-- ;
1  #DEFINE FUNC_MAC ( ) ( IDENT >> ( ( IDENT >> IDENT & IDENT ) == INT_CONST ? IDENT ?: IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) == INT_CONST && ( IDENT ) == INT_CONST ) || ( ( IDENT ) == INT_CONST && ( IDENT ) == INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT >= IDENT ) IDENT /= IDENT ; ELSE IDENT = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) ? INT_CONST ?: ( IDENT & INT_CONST ) ? INT_CONST ?: ( IDENT & INT_CONST ) ? INT_CONST ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT [ IDENT ] ) { *v IDENT v++ = IDENT ; *v IDENT v++ = IDENT ^ INT_CONST ; } ELSE *v IDENT v++ = IDENT ;
2  #DEFINE OBJ_MAC ( ( ( ( -v INT_CONST ) + INT_CONST ) * INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { INT IDENT = IDENT ; IDENT = IDENT ( IDENT , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) , IDENT ) ; IDENT ( IDENT ( IDENT ) , IDENT ( IDENT , IDENT ) ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) -> IDENT [ IDENT ] = IDENT , ( IDENT ) -> IDENT [ IDENT ] = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ( IDENT ) , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT + IDENT + ( IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT -> IDENT [ ( IDENT ) >> ( IDENT ) -> IDENT -> IDENT . IDENT ] )
5  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ) IDENT IDENT
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT ) , ( IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST & ( IDENT >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) -> IDENT = ( IDENT ) ; IDENT ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( LONG *p ) ( ( UNSIGNED CHAR *p ) IDENT + IDENT * ( SIZEOF ( LONG ) / INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT IF ( ! IDENT ( IDENT [ IDENT ] , STRING ) ) IDENT = IDENT ; ELSE IF ( ! IDENT ( IDENT [ IDENT ] , STRING ) ) IDENT = IDENT ; ELSE IF ( ! IDENT ( IDENT [ IDENT ] , STRING ) ) IDENT = IDENT ; ELSE IF ( ! IDENT ( IDENT [ IDENT ] , STRING ) ) IDENT = IDENT ; IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT + ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT VOID IDENT ## IDENT ( STRUCT IDENT * IDENT , LONG IDENT ) { IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ( ( IDENT ) ) != IDENT ) { ( *v ( IDENT ( ( IDENT ) ) ) ) ( ( IDENT ) ( IDENT ) , IDENT , IDENT , IDENT ) ; } ELSE
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT - IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( IDENT ) << INT_CONST ) , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT == IDENT ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) % IDENT )
1  #DEFINE OBJ_MAC ( ! IDENT && IDENT && ! IDENT ( IDENT ( IDENT ( IDENT ) ) ) && ( IDENT ( IDENT ( IDENT ( IDENT ) ) ) == IDENT ) )
1  #DEFINE OBJ_MAC IDENT ( STRING , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED LONG ) ( IDENT ) & INT_CONST ) + IDENT -> IDENT )
5  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT + ( IDENT ) , IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT IDENT ( CONST IDENT * IDENT , IDENT IDENT , IDENT IDENT [ ] , IDENT * IDENT , IDENT IDENT ) { IDENT IDENT , IDENT ; IF ( ! IDENT . IDENT . IDENT ) { IDENT * IDENT = &v IDENT [ *v IDENT ] ; IDENT = IDENT ( IDENT , IDENT , IDENT ) & ~ INT_CONST ; IDENT = IDENT ; WHILE ( IDENT > INT_CONST ) { IDENT IDENT ; IF ( IDENT ( IDENT , IDENT v++ ) ) RETURN -v IDENT ; *v IDENT v++ = IDENT ( IDENT ) ; IDENT v-- ; } } ELSE { IDENT * IDENT = &v IDENT [ *v IDENT >> INT_CONST ] ; IDENT * IDENT = IDENT + IDENT ; IDENT = IDENT ( IDENT , IDENT , IDENT ) >> INT_CONST & ~ INT_CONST ; IDENT = IDENT * INT_CONST ; WHILE ( IDENT > INT_CONST ) { IDENT IDENT ; IF ( IDENT ( IDENT , IDENT v++ ) ) RETURN -v IDENT ; *v IDENT v++ = IDENT ( IDENT ) ; IF ( IDENT ( IDENT , IDENT v++ ) ) RETURN -v IDENT ; *v IDENT v++ = IDENT ( IDENT ) ; IDENT v-- ; } } *v IDENT += IDENT ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT IDENT STRING , IDENT & INT_CONST ? STRING ?: STRING , IDENT & INT_CONST ? STRING ?: STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ) -> IDENT . IDENT += ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) & ( IDENT - INT_CONST ) )
1  #DEFINE OBJ_MAC ( INT_CONST | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) | ( INT_CONST << IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ IDENT ] . IDENT & IDENT )
5  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( SIZEOF ( STRUCT IDENT ) ) + ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ^ ( IDENT | ~ IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT , ( IDENT ) ( ( IDENT ( ( IDENT ) , IDENT ) & INT_CONST ) + INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) ) << INT_CONST ) | ( ( ( UNSIGNED LONG ) ( IDENT ) ) << INT_CONST ) | ( ( ( UNSIGNED LONG ) ( IDENT ) ) & INT_CONST ) | INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT [ IDENT ] . IDENT + INT_CONST ) & INT_CONST ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT ) + ( INT_CONST >> INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT >> IDENT ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( IDENT , IDENT ) ) ? ( IDENT ( ) , INT_CONST ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( &v ( ( IDENT ) -> IDENT ) , &v ( ( IDENT ) -> IDENT ) ) > INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT ( ) ? STRING ?: ( IDENT ( ) ? STRING ?: STRING ) )
45  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) & INT_CONST )
2  #DEFINE OBJ_MAC ( ( IDENT - INT_CONST ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT == IDENT ) { *v ( IDENT ) = *v IDENT ; } ELSE { IF ( ! IDENT ( IDENT , IDENT , IDENT , IDENT ) ) { IF ( IDENT ) IDENT ( IDENT ) ; RETURN IDENT ; } } }
1  #DEFINE OBJ_MAC ( ( IDENT ) && ( IDENT ) -> IDENT )
13  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ## IDENT * IDENT = ( IDENT ## IDENT * ) & ( ( IDENT ) -> IDENT [ IDENT ] ) ; IDENT ## IDENT * IDENT = ( IDENT ## IDENT * ) & IDENT ; IDENT ( ( *v IDENT & *v IDENT ) == *v IDENT ) ; *v IDENT &= ~ ( *v IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ) != IDENT && IDENT ( ( IDENT ) ) && ! ( IDENT ) -> IDENT . IDENT && IDENT ( IDENT ) -> IDENT != IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( IDENT - IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) STRUCT IDENT ## IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( *v ( ( VOLATILE UNSIGNED SHORT *p ) ( IDENT + IDENT ) = IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) > INT_CONST ? INT_CONST ?: ! ( ( ( IDENT ) >> ( ( IDENT ) + INT_CONST ) ) & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v IDENT = ( IDENT ) )
17  #DEFINE OBJ_MAC SIZEOF ( IDENT ) - INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) STRING [ IDENT ]
1  #DEFINE OBJ_MAC ( IDENT [ IDENT ] . IDENT * IDENT [ IDENT ] . IDENT * IDENT [ IDENT ] . IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT * ) ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , SIZEOF ( *v IDENT ) , ( IDENT ) IDENT , IDENT )
4  #DEFINE OBJ_MAC STRUCT IDENT * IDENT = IDENT ; IDENT IDENT ; IDENT ( &v IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT ) & ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) { IDENT ( IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) * IDENT = IDENT ## IDENT ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { INT_CONST ## IDENT , SIZEOF ( IDENT ## IDENT ) / SIZEOF ( STRUCT IDENT ) , IDENT ## IDENT , IDENT ## IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( ( CHAR *p ) & ( IDENT . IDENT ) - ( CHAR *p ) & IDENT ) , ( ( IDENT . IDENT = ( IDENT ) ) , ( CHAR *p ) & ( IDENT . IDENT ) ) , SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( INT_CONST | ( IDENT ) -> IDENT | ( ( IDENT ) & INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT + INT_CONST ) & INT_CONST ) - IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED ) ( IDENT ) >> INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
15  #DEFINE OBJ_MAC RETURN ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT v++ )
1  #DEFINE FUNC_MAC ( IDENT ... ) DO { IF ( IDENT ) IDENT ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT . IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) == SIZEOF ( IDENT ) - INT_CONST ) && ! IDENT ( ( IDENT ) , ( IDENT ) , SIZEOF ( IDENT ) - INT_CONST ) )
3  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT [ IDENT ] = IDENT ; IDENT = IDENT + IDENT ; IDENT = *v IDENT ; *v IDENT = CHAR_CONST ; IDENT = IDENT ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! ( ( LONG ) ( ++v ( IDENT ) ) & INT_CONST ) ) ( IDENT ) += INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT -> IDENT -= IDENT ; IDENT -> IDENT += IDENT ; IDENT -> IDENT -= IDENT ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ! IDENT ( IDENT ( IDENT ) , IDENT , SIZEOF ( IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT ) == -v IDENT ) RETURN -v IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( CHAR ) ( CHAR_CONST + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST / ( ( IDENT ) + INT_CONST ) )
1  #DEFINE OBJ_MAC ( ( INT ) ( FLOAT_CONST * IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & IDENT ? -v ( ( IDENT ) & IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT VOLATILE ( STRING : STRING ( *v ( IDENT ) ) : STRING ( IDENT ) : STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST , IDENT -> IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( VOID *p ) ( &v IDENT [ IDENT ] )
2  #DEFINE OBJ_MAC { IF ( IDENT == IDENT -> IDENT && IDENT -> IDENT != IDENT -> IDENT ) { IDENT = IDENT -> IDENT ; IDENT = IDENT ; } }
1  #DEFINE OBJ_MAC { IDENT ( INT_CONST ) ; CONTINUE ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) -> IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) + ( IDENT ) * INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT , IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IF ( IDENT ( IDENT ) ) { IDENT = ( IDENT ) IDENT ( IDENT ) ; } ELSE IF ( IDENT ( IDENT ) ) { IDENT = *v IDENT ( IDENT ) ; } ELSE { IDENT ( IDENT ) ; IDENT ( IDENT , IDENT = IDENT ( IDENT , IDENT , &v IDENT ) ) ; IF ( ! IDENT ) GOTO IDENT ; } IDENT
1  #DEFINE FUNC_MAC ( IDENT ... ) DO { IF ( IDENT + IDENT > IDENT + IDENT ) { *v IDENT = INT_CONST ; BREAK ; } IDENT += IDENT ( IDENT + IDENT , ## IDENT ) ; IF ( IDENT + IDENT < IDENT ) { IDENT += IDENT ; IDENT = INT_CONST ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) << INT_CONST ) | ( IDENT ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT = IDENT , IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ~ INT_CONST << ( IDENT - ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ... ) DO { IF ( IDENT < IDENT + IDENT - INT_CONST ) IDENT += IDENT ( IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { ( IDENT ) . IDENT += ( IDENT ) ; ( IDENT ) . IDENT += ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ;
1  #DEFINE OBJ_MAC FOR ( IDENT = IDENT ; IDENT < IDENT ; IDENT v++ ) { IDENT = IDENT ( IDENT , IDENT + IDENT ) ; IDENT ( IDENT -> IDENT , INT_CONST , IDENT -> IDENT ) ; IDENT ( IDENT , INT_CONST ) ; IDENT ( IDENT ) ; IF ( IDENT ( IDENT ) ) { IDENT ( IDENT , INT_CONST , &v IDENT ) ; IDENT ( IDENT ) ; } IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT ) { IDENT ( ( IDENT ) , STRING , IDENT , ( IDENT ) ) ; IDENT ( ( IDENT ) , STRING , IDENT , ( IDENT ) ) ; } ELSE { IDENT ( ( IDENT ) , STRING , IDENT , ( IDENT ) ) ; IDENT ( ( IDENT ) , STRING , IDENT , ( IDENT ) ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) ( VOID ) IDENT ( IDENT , IDENT , INT_CONST ) ; }
2  #DEFINE OBJ_MAC INT_CONST * IDENT / INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >= ( ( IDENT ) - INT_CONST ) ) ? INT_CONST ?: ( IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( ) DO { IDENT . IDENT = ( IDENT * ) IDENT ( IDENT * SIZEOF ( IDENT ) ) ; IF ( IDENT . IDENT == IDENT ) RETURN -v INT_CONST ; IDENT . IDENT = IDENT ; IDENT . IDENT = INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( IDENT -> IDENT = ( IDENT ) ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) RETURN IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) < INT_CONST ) ? -v INT_CONST ?: ( ( IDENT ) > INT_CONST ) ? INT_CONST ?: ( ( IDENT ) * INT_CONST ) / INT_CONST - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT , STRING , ( IDENT ) ) ; IDENT = -v INT_CONST ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT ( ( IDENT ) IDENT ( ( IDENT ) ( IDENT ) ) , IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT + SIZEOF ( STRUCT IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT = INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) > ( IDENT ) -> IDENT ? ( IDENT - INT_CONST ) ?: ( IDENT ) )
5  #DEFINE OBJ_MAC IDENT ( IDENT , STRING ) ;
1  #DEFINE OBJ_MAC FOR ( IDENT = IDENT ; IDENT < IDENT ; IDENT v++ )
2  #DEFINE OBJ_MAC ( INT_CONST / SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) * ( ( IDENT * ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT ( ( IDENT ) , ( IDENT ) ) , ( IDENT ) ) )
1  #DEFINE OBJ_MAC { IDENT = IDENT -> IDENT - IDENT ; IDENT = ( IDENT >> INT_CONST ) < IDENT ? IDENT >> INT_CONST ?: IDENT ; IDENT += IDENT ; IDENT -= IDENT ; IDENT -= IDENT << INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { ( IDENT ) -> IDENT = INT_CONST ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) IDENT ( STRING : : : STRING )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) << INT_CONST ) & INT_CONST ) | ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT > INT_CONST ) ? ( IDENT ) ?: ( -v INT_CONST * IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , ~ INT_CONST , IDENT * SIZEOF ( IDENT ) )
18  #DEFINE FUNC_MAC ( IDENT , IDENT ) INT_CONST
2  #DEFINE FUNC_MAC ( ) IF ( ! IDENT ) IDENT ( )
1  #DEFINE OBJ_MAC INT IDENT ; CHAR *p IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ) { IDENT ( IDENT , ( IDENT ) , ( IDENT ) ) ; IDENT ( STRING , IDENT ) ; #ERROR = ( IDENT ) ; GOTO IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT [ IDENT ] )
1  #DEFINE OBJ_MAC IF ( IDENT . IDENT ) IDENT ( ) ; ELSE IDENT ( ) ;
1  #DEFINE OBJ_MAC ( INT_CONST << ( IDENT - INT_CONST + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , IDENT , IDENT } ,
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) + ( IDENT ) , ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) |= INT_CONST << ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) VOID IDENT ## IDENT ## IDENT ( CHAR *p IDENT , INT *p IDENT ) { IDENT ( IDENT , IDENT , IDENT , IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) ] -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT ( STRING ) ; IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT . IDENT & ( IDENT - INT_CONST ) ) | IDENT )
3  #DEFINE OBJ_MAC * ( ( VOLATILE UNSIGNED INT *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ? ( ( IDENT ) -> IDENT |= ( IDENT ) ) ?: INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) ( IDENT ) ) >> IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) WHILE ( ( IDENT = IDENT ( IDENT ) ) != INT_CONST ) GOTO IDENT
3  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) * ( ( IDENT ) -> IDENT . IDENT + ( IDENT ) -> IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT . IDENT )
30  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { INT IDENT ; IDENT IDENT ( STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) , STRING ( IDENT ) : STRING ( IDENT & INT_CONST ) , STRING ( IDENT / INT_CONST ) , STRING ( IDENT ) , STRING ( INT_CONST ) ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IDENT ( IDENT ) IDENT = ( IDENT ) , IDENT = ( IDENT ) ; ( IDENT < IDENT ? IDENT ?: IDENT ) ; } )
7  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) - ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT & INT_CONST ) << INT_CONST ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , IDENT , IDENT , INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) WHILE ( ( IDENT = IDENT -> IDENT ) & IDENT ) { IDENT ( INT_CONST ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) {
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) != INT_CONST )
1  #DEFINE OBJ_MAC FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IDENT v++ ; IDENT >>= INT_CONST ; IF ( IDENT & INT_CONST ) { IDENT v++ ; IDENT |= INT_CONST ; } ELSE { IDENT = INT_CONST ; IDENT &= INT_CONST ; } IF ( IDENT == INT_CONST ) { IF ( IDENT == IDENT ) RETURN INT_CONST ; IDENT [ IDENT v++ ] = IDENT ; IDENT = INT_CONST ; } IF ( IDENT == INT_CONST ) { IDENT >>= INT_CONST ; IDENT &= INT_CONST ; IDENT v++ ; IDENT = INT_CONST ; } IF ( IDENT == INT_CONST ) { IF ( IDENT == IDENT ) RETURN INT_CONST ; IDENT [ IDENT v++ ] = IDENT ; IDENT = INT_CONST ; } IDENT >>= INT_CONST ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( ( IDENT * ) ( IDENT ) , ( IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( INT_CONST & IDENT ( ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ;
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) + SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT + ( IDENT / INT_CONST ) ) / IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT + IDENT ) * SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( { UNSIGNED LONG IDENT , IDENT ; IDENT ( IDENT ) ; IDENT = *v IDENT ; IDENT ( IDENT , INT_CONST , IDENT , INT_CONST , IDENT ) ; IDENT ( IDENT , INT_CONST , &v IDENT , IDENT ) ; IDENT ( IDENT ) ; } )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) ,
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = INT_CONST ; WHILE ( IDENT >= INT_CONST && ++v IDENT [ IDENT v-- ] == INT_CONST ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT )
1  #DEFINE OBJ_MAC IDENT ( IDENT , STRING , IDENT , IDENT , IDENT ( IDENT ) , IDENT ( IDENT ) )
5  #DEFINE FUNC_MAC ( ... ) DO { } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , &v IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) == IDENT ) || ( IDENT ( IDENT ) == IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT ) IDENT ( IDENT , IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT + ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ) , INT_CONST , IDENT * IDENT / INT_CONST ) + IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] . IDENT & ( IDENT | IDENT | IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) CASE IDENT ( IDENT , IDENT , IDENT , CHAR_CONST ) : { IDENT ( STRING # IDENT STRING ) ; IDENT -> IDENT = IDENT ## IDENT ; IF ( IDENT == INT_CONST ) IDENT ; IF ( IDENT >= INT_CONST ) { IDENT = IDENT + INT_CONST ; IF ( *v IDENT v++ != CHAR_CONST ) IDENT ; *v ( IDENT ) = IDENT - INT_CONST ; IF ( *v ( IDENT ) >= IDENT ) IDENT ; IDENT ( IDENT , IDENT , *v ( IDENT ) ) ; ( IDENT ) [ *v ( IDENT ) ] = INT_CONST ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) ( IDENT << INT_CONST ) | ( IDENT ) ( IDENT << INT_CONST ) | ( IDENT ) ( IDENT << INT_CONST ) | ( IDENT ) ( IDENT << INT_CONST ) | ( IDENT ) ( IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) ;
8  #DEFINE FUNC_MAC ( IDENT ) ( { IF ( ! ( IDENT ) || ( IDENT ) -> IDENT != IDENT ) { IDENT ( IDENT ) ; RETURN -v IDENT ; } } )
1  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | ( IDENT ? IDENT ?: INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { ( IDENT ) , SIZEOF ( IDENT ) - INT_CONST , ( IDENT ) , ( IDENT ) }
7  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v ( ( IDENT ) -> IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT ) ? ( *v ( IDENT ) -> IDENT ) ( ( IDENT ) -> IDENT , ( IDENT ) ) ?: ( *v ( STRUCT IDENT * ( *v ) ( ) ) ( IDENT ) -> IDENT ) ( ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT > ( UNSIGNED ) ( IDENT * IDENT ) ? INT_CONST ?: ( ( IDENT ) . IDENT = ( IDENT * ) IDENT ( ( IDENT ) . IDENT , ( IDENT ) . IDENT * SIZEOF ( IDENT ) , ( ( IDENT ) . IDENT << INT_CONST ) * SIZEOF ( IDENT ) ) , ( IDENT ) . IDENT == IDENT ? INT_CONST ?: ( ( IDENT ) . IDENT <<= INT_CONST , INT_CONST ) ) )
1  #DEFINE OBJ_MAC ( INT_CONST << IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( ( IDENT ) , ( ( IDENT ) >> INT_CONST ) & INT_CONST ) ; IDENT ( ( IDENT ) , ( IDENT ) & INT_CONST ) ; IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = INT_CONST ; IF ( IDENT ) IDENT ( IDENT , STRING , ( LONG ) IDENT , ( LONG ) IDENT , ( LONG ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = IDENT + IDENT -> IDENT ; IF ( IDENT > IDENT -> IDENT ) IDENT = IDENT -> IDENT ; IDENT -= IDENT ( IDENT , IDENT -> IDENT , IDENT ) ; IF ( IDENT <= -v IDENT -> IDENT ) IDENT = INT_CONST - IDENT -> IDENT ; IDENT -> IDENT = IDENT
1  #DEFINE OBJ_MAC ( IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT | IDENT )
2  #DEFINE OBJ_MAC { IDENT IDENT = IDENT ; IDENT -> IDENT = IDENT ; } ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { UNSIGNED LONG IDENT = ( IDENT & INT_CONST ) | ( ( IDENT -> IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT -> IDENT -> IDENT & INT_CONST ) << INT_CONST ) ; UNSIGNED LONG IDENT = ~ INT_CONST ; INT IDENT ; IDENT = IDENT ( STRING , INT_CONST , INT_CONST , &v IDENT , IDENT , IDENT ) ; *v IDENT = IDENT ; RETURN IDENT ? IDENT ?: IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) ( IDENT ) + ( ( UNSIGNED INT ) ( ( IDENT ) << INT_CONST ) | ( UNSIGNED INT ) ( ( IDENT ) << INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; ( IDENT ) [ IDENT ] = INT_CONST ; }
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , INT_CONST , IDENT )
1  #DEFINE OBJ_MAC SIZEOF ( INT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) IDENT ( IDENT [ IDENT ] ) + ( ( ( IDENT ) IDENT ( IDENT [ IDENT + INT_CONST ] ) ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( ( IDENT ) -> IDENT , STRING ) ; IDENT ( ( IDENT ) -> IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( INT_CONST & ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , ( IDENT ) & INT_CONST , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) WHILE ( IDENT > INT_CONST ) { INT IDENT = IDENT [ INT_CONST ] ; IF ( IDENT < IDENT + INT_CONST ) { IDENT ( IDENT , STRING ) ; RETURN ; } IDENT -= IDENT + INT_CONST ; IF ( ( *v IDENT & INT_CONST ) == ( IDENT ) ) { INT IDENT = IDENT ; IDENT += INT_CONST ; IDENT ; } ELSE { IDENT += IDENT + INT_CONST ; } }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) < ( IDENT ) ? ( IDENT ) <= ( IDENT ) || ( IDENT ) > ( IDENT ) ?: ( IDENT ) <= ( IDENT ) && ( IDENT ) > ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v IDENT ) ( IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = ( IDENT ) >> INT_CONST ; IDENT = ( IDENT ) & INT_CONST ; IDENT = INT_CONST << IDENT ; IF ( IDENT ) IDENT [ IDENT ] &= ~ IDENT ; ELSE IDENT [ IDENT ] |= IDENT ; }
16  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) IDENT , ( IDENT ) IDENT )
1  #DEFINE FUNC_MAC ( ) IF ( IDENT ) { IDENT += IDENT ; IDENT -= IDENT ; IF ( IDENT == INT_CONST ) { RETURN IDENT ; } IDENT += IDENT ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , ( IDENT ) -> IDENT + ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( *v IDENT [ IDENT ] ) ( ( IDENT ) , ( IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( { IF ( IDENT ( IDENT , IDENT , IDENT ) ) RETURN IDENT ; } )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT IF ( ! IDENT ( IDENT ) ) { IDENT * IDENT = ( IDENT * ) IDENT ; IDENT * IDENT = IDENT ( IDENT ) ; CONST IDENT * IDENT = IDENT -> IDENT ; IF ( IDENT ( *v IDENT ) ) { IDENT IDENT = IDENT ( *v IDENT ) ; IDENT v++ ; IF ( IDENT != INT_CONST ) { WHILE ( IDENT ( *v IDENT ) ) { IDENT = INT_CONST * IDENT + IDENT ( *v IDENT ) ; IDENT v++ ; } } IF ( *v IDENT == INT_CONST && IDENT ( IDENT ) ) IDENT = IDENT ( IDENT ) ; } ELSE { IDENT ( IDENT ) ; } } IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( IDENT ) << INT_CONST | ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT = ( IDENT [ INT_CONST ] ) >> INT_CONST ; IDENT [ INT_CONST ] |= IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = INT_CONST , IDENT = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( VOLATILE UNSIGNED CHAR *p ) IDENT ) = ( ( UNSIGNED CHAR ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( VOID *p ) ( ( UNSIGNED LONG ) ( IDENT ) & ( ~ INT_CONST ) )
2  #DEFINE OBJ_MAC ( IDENT ( INT_CONST , INT_CONST , INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ) { IDENT = INT_CONST ; IDENT = INT_CONST ; IF ( IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; } ELSE IDENT ( IDENT , IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( CHAR *p ) & IDENT -> IDENT , ( CHAR *p ) & IDENT -> IDENT , IDENT -> IDENT * SIZEOF ( IDENT ) + INT_CONST * SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ( IDENT ) || IDENT ( IDENT ) ) ? ( IDENT ) ?: ( IDENT ) IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT , IDENT ) ;
1  #DEFINE OBJ_MAC INT IDENT = INT_CONST ; IDENT ( IDENT , IDENT ) ; IF ( IDENT -> IDENT == INT_CONST ) IDENT -> IDENT = -v INT_CONST ; IDENT . IDENT = IDENT ; IDENT ( &v IDENT -> IDENT , &v IDENT ) ; IDENT : IDENT ( &v IDENT -> IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) [ IDENT ] = IDENT ,
1  #DEFINE OBJ_MAC ( IDENT + INT_CONST + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT ( IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( ) ( IDENT = ( IDENT ( INT_CONST ) & INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] >> INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST , &v ( IDENT ) -> IDENT ) ;
9  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ( IDENT ) ) -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) * IDENT ( IDENT ) )
2  #DEFINE OBJ_MAC IDENT . IDENT &= ~ IDENT
5  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + SIZEOF ( INT ) - INT_CONST ) & ~ ( SIZEOF ( INT ) - INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST ) , IDENT ( IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( IDENT + IDENT ) & INT_CONST , IDENT + IDENT ) ;
1  #DEFINE OBJ_MAC ( ( IDENT == IDENT ) ? STRING ?: STRING )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) STATIC INT IDENT ## IDENT ## IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { STRUCT IDENT * IDENT = IDENT -> IDENT ; IDENT ( IDENT -> IDENT , ( ( IDENT & INT_CONST ) << INT_CONST ) | ( IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT -> IDENT << INT_CONST ) | INT_CONST ) ; IDENT ## IDENT ( IDENT , IDENT -> IDENT + ( IDENT & IDENT ) , IDENT , IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( IDENT ) >> INT_CONST ) )
3  #DEFINE OBJ_MAC ( ( IDENT ) INT_CONST << ( IDENT - INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) DO { IDENT * IDENT = ( IDENT * ) IDENT -> IDENT ; INT IDENT = IDENT ( IDENT -> IDENT . IDENT -> IDENT ) ; INT IDENT ; IDENT = IDENT - INT_CONST ; IF ( IDENT && IDENT != IDENT && IDENT -> IDENT [ IDENT ] != IDENT ) { IDENT ( IDENT -> IDENT [ IDENT ] ) ; IDENT -> IDENT [ IDENT ] = IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) = IDENT ( ( IDENT = IDENT ( IDENT ) ) , ( IDENT ) ) ; IDENT = IDENT ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( ( IDENT ) >> INT_CONST ) & INT_CONST ]
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( IDENT ) << IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( VOLATILE UNSIGNED CHAR *p ) ( ( UNSIGNED LONG ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) * IDENT = IDENT ( ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IDENT * IDENT ; IF ( ! IDENT ( IDENT ) || IDENT == IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; } ELSE { IDENT ( IDENT -> IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ( IDENT , IDENT = IDENT ( IDENT , IDENT ( IDENT ) ) ) ; IF ( ! IDENT ) { IDENT = IDENT ; GOTO IDENT ; } *v IDENT = IDENT ( IDENT ) ; ) } IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT ) >> INT_CONST ] [ ( IDENT ) & INT_CONST ]
25  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT , IDENT , ## IDENT )
1  #DEFINE OBJ_MAC ( ( ( IDENT * ) IDENT ) + IDENT [ IDENT -> IDENT [ IDENT -> IDENT ] ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT > INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) & ( ( ( IDENT * ) INT_CONST ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ( IDENT ) ) / INT_CONST )
2  #DEFINE OBJ_MAC ( ( UNSIGNED SHORT ) ~ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST * INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( &v ( ( IDENT ) ( IDENT ) -> IDENT . IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( ) { IF ( ! IDENT ) { IDENT ( &v IDENT , IDENT , STRING ) ; IDENT = INT_CONST ; } IDENT ( &v IDENT ) ; }
4  #DEFINE OBJ_MAC IDENT = ( IDENT << INT_CONST ) - IDENT + *v IDENT v++ ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) DO { ( IDENT ) -> IDENT [ ( IDENT ) * ( IDENT ) ] . IDENT = IDENT ; IF ( IDENT == INT_CONST ) ( IDENT ) -> IDENT [ ( IDENT ) * ( IDENT ) ] . IDENT = -v INT_CONST ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IDENT ( IDENT , IDENT , ( ( IDENT + INT_CONST * SIZEOF ( INT ) - INT_CONST ) / ( INT_CONST * SIZEOF ( INT ) ) ) * SIZEOF ( INT ) ) ; IDENT
1  #DEFINE FUNC_MAC ( ) { INT IDENT = IDENT ; IDENT ( IDENT ( IDENT , IDENT ( IDENT ) ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) != ( IDENT ) || ! ( ( IDENT ) == ( IDENT ) || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT ) )
1  #DEFINE OBJ_MAC ( ( LONG LONG ) INT_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) < ( IDENT ) || ( IDENT ) > ( IDENT ) )
5  #DEFINE OBJ_MAC ( IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) )
59  #DEFINE OBJ_MAC IDENT ( IDENT , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( IDENT . IDENT [ INT_CONST ] )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED INT ) ( UNSIGNED CHAR ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( &v ( ( STRUCT IDENT * ) ( ( IDENT ) . IDENT ) ) -> IDENT ) & ( INT_CONST << INT_CONST ) ) != INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( STRING IDENT STRING : : STRING ( IDENT ( IDENT , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT -> IDENT , ( IDENT ) )
1  #DEFINE OBJ_MAC ( IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT ( IDENT ) | IDENT )
1  #DEFINE FUNC_MAC ( ) ( *v IDENT . IDENT )
1  #DEFINE OBJ_MAC ( IDENT ( INT_CONST ) + IDENT ( INT_CONST ) + IDENT ( INT_CONST ) + IDENT ( INT_CONST ) + IDENT ( INT_CONST ) )
54  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) ) -> IDENT . IDENT )
1  #DEFINE OBJ_MAC ( IDENT ^ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( IDENT & INT_CONST ) )
7  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT ;
12  #DEFINE OBJ_MAC IDENT * SIZEOF ( STRUCT IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( IDENT ) -> IDENT + INT_CONST + ( INT_CONST * SIZEOF ( IDENT ) ) + INT_CONST * SIZEOF ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) | ( ( IDENT ) << INT_CONST & INT_CONST ) | ( ( IDENT ) >> INT_CONST & INT_CONST ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , ( ( UNSIGNED LONG ) IDENT ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { UNSIGNED INT *p IDENT = &v ( IDENT [ INT_CONST ] ) ; STRUCT IDENT * IDENT = ( IDENT ) ; UNSIGNED INT *p IDENT ; INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IDENT [ IDENT ] = ( UNSIGNED INT ) IDENT -> IDENT [ IDENT ] ; IDENT ( IDENT ) ; IDENT = ( UNSIGNED INT *p ) ( IDENT -> IDENT [ INT_CONST ] & INT_CONST ) ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IDENT ( IDENT [ IDENT + INT_CONST ] , &v IDENT [ IDENT ] ) ; IDENT ( IDENT ) ; IDENT [ INT_CONST ] = IDENT ( IDENT -> IDENT ) ; IDENT [ INT_CONST ] = ( UNSIGNED INT ) IDENT -> IDENT ; IDENT [ INT_CONST ] = ( UNSIGNED INT ) IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT -> IDENT ; IDENT [ INT_CONST ] = IDENT [ INT_CONST ] = INT_CONST ; } WHILE ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ! IDENT ( IDENT ) && ( ( IDENT ) < INT_CONST ) )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST , UNSIGNED SHORT )
1  #DEFINE OBJ_MAC ( IDENT / IDENT / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( { IF ( ! ( IDENT & ( INT_CONST << IDENT ) ) ) GOTO IDENT ## IDENT ; IF ( ( IDENT & ( INT_CONST << IDENT ) ) == ( INT_CONST << IDENT ) ) GOTO IDENT ## IDENT ; IDENT ## IDENT : ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) CASE IDENT : IDENT ( IDENT , STRING , IDENT , # IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; BREAK ;
3  #DEFINE FUNC_MAC ( IDENT ... ) DO { IF ( IDENT < IDENT + IDENT ) IDENT += IDENT ( IDENT , ## IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT STRING , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT v++ ; IF ( ! IDENT ) GOTO IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT_CONST <= ( IDENT ) ) && ( ( IDENT ) <= INT_CONST ) && ( ( IDENT ) != INT_CONST ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ^ ( IDENT & ( IDENT ^ IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , CONST ) ( ( IDENT ) IDENT ( ( IDENT ) * ( CONST ) , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , &v IDENT -> IDENT -> IDENT . IDENT [ IDENT - INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) << IDENT | IDENT ( IDENT ) ) << IDENT | IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT ) ; IDENT ; IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ -v INT_CONST ] == CHAR_CONST && IDENT [ INT_CONST ] == CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IF ( IDENT >= IDENT * IDENT ) IDENT ( ) ; ELSE IDENT [ IDENT / IDENT ] |= INT_CONST << ( IDENT % IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT VOID IDENT ## IDENT ( STRUCT IDENT * IDENT , LONG IDENT ) { IDENT IDENT ; IDENT . IDENT = IDENT ; IDENT . IDENT = INT_CONST ; IDENT . IDENT = IDENT ; IDENT . IDENT = ( VOID *p ) IDENT ; IDENT ( IDENT , IDENT , IDENT , INT_CONST , IDENT , IDENT , &v IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! ( IDENT ) ) IDENT ( ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) < ( INT_CONST << ( ( IDENT ) - INT_CONST ) ) ? ( IDENT ) + ( ( ( -v INT_CONST ) << ( IDENT ) ) + INT_CONST ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( UNSIGNED LONG ) IDENT , ( UNSIGNED CHAR ) IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ( ( IDENT ) ) != IDENT ) ? ( *v ( IDENT ( ( IDENT ) ) ) ) ( ( IDENT ) ( IDENT ) , IDENT , IDENT ) ?: IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) || IDENT ( IDENT ) )
26  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT )
26  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) ( IDENT ) & INT_CONST ) == INT_CONST ? INT_CONST ?: INT_CONST )
2  #DEFINE FUNC_MAC ( ) DO { IF ( ( IDENT & IDENT ) ) IDENT ( ) ; ELSE IDENT ( ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < IDENT . IDENT )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) * IDENT -> IDENT ) + ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >= INT_CONST && ( IDENT ) < IDENT ) ? IDENT [ IDENT ] ?: STRING )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { IDENT ( IDENT ) IDENT = ( IDENT ) , IDENT = ( IDENT ) ; ( IDENT > IDENT ? IDENT ?: IDENT ) ; } )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) CASE IDENT ( IDENT , IDENT , IDENT , CHAR_CONST ) : { IDENT ( STRING # IDENT STRING ) ; IDENT -> IDENT = IDENT ## IDENT ; IF ( IDENT != INT_CONST ) IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ... ) ( IDENT ( IDENT ) )
6  #DEFINE OBJ_MAC ( ~ INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT * IDENT
8  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING , IDENT , IDENT )
1  #DEFINE OBJ_MAC ( ( UNSIGNED ) ( &v ( ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT IDENT ## IDENT ( IDENT , IDENT + ( IDENT & INT_CONST ) ) ; IF ( IDENT ( IDENT + INT_CONST ) & INT_CONST ) IDENT ( INT_CONST , IDENT + INT_CONST ) ; IDENT RETURN IDENT ;
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ IDENT ] . IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT -> IDENT == IDENT || IDENT != IDENT || ( IDENT ( IDENT ) && ( IDENT ( IDENT ) || IDENT ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT , IDENT , IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , INT_CONST , SIZEOF ( *v ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( ) IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ; IDENT = IDENT -> IDENT . IDENT ;
1  #DEFINE OBJ_MAC ( IDENT * ) & IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) > IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT -> IDENT == IDENT ) ? IDENT ( IDENT , IDENT , IDENT ) ?: IDENT ( ( IDENT * ) IDENT , IDENT , IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( STRUCT IDENT * ) IDENT , &v IDENT . IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ( ( IDENT ) , ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) ( {} )
1  #DEFINE OBJ_MAC ( ( IDENT & INT_CONST ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( INT_CONST << ( UNSIGNED LONG ) IDENT ( IDENT ) ) | ( ( ( UNSIGNED LONG ) IDENT ( IDENT ) ) << INT_CONST ) | ( ( ( UNSIGNED LONG ) ( IDENT ) ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) { IDENT = IDENT = INT_CONST ; }
4  #DEFINE FUNC_MAC ( IDENT ) ( ! ( IDENT ( IDENT ) & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT * ) & IDENT ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , ( INT ) ( ( IDENT ) - ( IDENT ) - INT_CONST ) , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ( ( CHAR *p ) ( IDENT ) - ( IDENT ) -> IDENT ) )
2  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST - INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < IDENT ? IDENT [ IDENT ] . IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( LONG LONG ) ( ( IDENT ) + ( ( IDENT ) << INT_CONST ) ) << INT_CONST ) | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << INT_CONST ) / IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT || ( ( IDENT ( IDENT ) == IDENT || IDENT ( IDENT ) == IDENT || ( IDENT ( IDENT ) == IDENT ) ) && ( IDENT ( IDENT ( IDENT , INT_CONST ) ) == IDENT || IDENT ( IDENT ( IDENT , INT_CONST ) ) == IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT = &v ( IDENT ) ; IDENT = &v ( IDENT ) ; *v IDENT = *v IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) , IDENT ( IDENT ) ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) - IDENT ) / INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR_CONST <= ( IDENT ) ) && ( ( IDENT ) <= CHAR_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) ( ( IDENT ) & INT_CONST ) << INT_CONST ) + ( IDENT ) ( ( IDENT ) & INT_CONST ) )
2  #DEFINE OBJ_MAC ( *v ( UNSIGNED CHAR *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & INT_CONST ) >> INT_CONST )
2  #DEFINE OBJ_MAC { IDENT = IDENT ( IDENT ) ; IDENT &= ~ ( IDENT | IDENT ) ; IDENT ( IDENT , IDENT ) ; }
2  #DEFINE OBJ_MAC { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) IF ( IDENT [ IDENT ] ) IDENT ( IDENT [ IDENT ] ) ; }
4  #DEFINE FUNC_MAC ( IDENT ) IDENT = ( IDENT ) ; BREAK
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT >= IDENT ) IDENT IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) || ! IDENT ( IDENT ) ) { IDENT ( IDENT , ( IDENT ) , IDENT , IDENT ) ; RETURN ; }
4  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT ) = IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) ( IDENT ( IDENT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) DO { IDENT = ( IDENT << INT_CONST ) | ( IDENT >> INT_CONST ) ; IDENT = ( IDENT << INT_CONST ) | ( IDENT >> INT_CONST ) ; IDENT = ( IDENT << INT_CONST ) | IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { ( IDENT ) IDENT ## IDENT , ( IDENT ) IDENT ## IDENT , ( IDENT ) IDENT ## IDENT , ( IDENT ) IDENT ## IDENT , SIZEOF ( STRUCT IDENT ## IDENT ) , SIZEOF ( STRUCT IDENT ## IDENT ) , INT_CONST , IDENT , IDENT , }
2  #DEFINE OBJ_MAC IDENT + IDENT + INT_CONST
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT |= INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ( IDENT ) ) != INT_CONST && ( IDENT ( IDENT ( IDENT ( IDENT ( IDENT ) ) ) ) != IDENT ) ) || IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = ( *v IDENT -> IDENT ) ( IDENT , IDENT ? IDENT ?: STRING , IDENT ? IDENT ( IDENT ) ?: INT_CONST ) ; IF ( IDENT < INT_CONST ) GOTO IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( UNSIGNED ) IDENT ( IDENT , IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( { UNION IDENT IDENT ; IDENT . IDENT = ( IDENT ) ; IDENT . IDENT [ IDENT ] ; } )
1  #DEFINE OBJ_MAC ( INT_CONST * SIZEOF ( UNSIGNED SHORT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( IDENT ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ( IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) WHILE ( IDENT > INT_CONST ) { IDENT v-- ; IDENT v-- ; IDENT v-- ; *v ( CHAR *p ) IDENT = *v ( CHAR *p ) IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) FOR ( ( IDENT ) = &v ( IDENT ) -> IDENT . IDENT [ ( IDENT ) -> IDENT ] ; ! ( ( IDENT ) -> IDENT . IDENT & IDENT ) ; ( IDENT ) = &v ( IDENT ) -> IDENT . IDENT [ ( IDENT ) -> IDENT ] )
153  #DEFINE OBJ_MAC IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , ( IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( VOLATILE IDENT * ) ( IDENT ) = ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ( IDENT ) [ INT_CONST ] == CHAR_CONST ) IDENT ( IDENT , IDENT + INT_CONST ) ; ELSE { CHAR *p IDENT ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; } } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ~ INT_CONST >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) * IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT & ( IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) - CHAR_CONST ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT [ IDENT ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ? ( INT_CONST + ( INT_CONST * IDENT ( IDENT ( IDENT ) ) ) / INT_CONST ) ?: ( INT_CONST * ( INT_CONST + IDENT ( IDENT ( IDENT ) ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( IDENT ) )
36  #DEFINE OBJ_MAC IDENT ( IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >= CHAR_CONST ) && ( IDENT <= CHAR_CONST ) )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) * ( ( IDENT + ( IDENT - INT_CONST ) ) / IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) -> IDENT = ( ( IDENT ) -> IDENT & INT_CONST ) | ( ( ( UNSIGNED ) ( IDENT ) ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) - ( IDENT ) + ( ( IDENT ) < ( IDENT ) ? INT_CONST / IDENT ?: INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) CASE IDENT : IDENT = ( CONST CHAR *p ) ( IDENT ) ; BREAK
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ## IDENT , # IDENT , IDENT ## IDENT }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT -> IDENT ) != INT_CONST && ( ( IDENT ) & IDENT -> IDENT ) != IDENT -> IDENT )
1  #DEFINE OBJ_MAC { IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT IDENT = IDENT ; IDENT ( IDENT , STRING , ( LONG ) IDENT , ( LONG ) IDENT , ( LONG ) IDENT + IDENT ) ; FOR ( ; IDENT <= IDENT ; IDENT v++ ) { IDENT IDENT = IDENT ; IDENT ( IDENT , STRING , ( LONG ) IDENT , ( LONG ) ( IDENT + IDENT ) ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT != IDENT && ( IDENT ( IDENT ) , INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) # IDENT ,
1  #DEFINE OBJ_MAC IDENT -> IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , ( INT ) ( ( IDENT ) - ( IDENT ) - INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ) -> IDENT [ ( IDENT ) -> IDENT ] = ( IDENT ) ; IF ( ++v ( ( IDENT ) -> IDENT ) >= ( IDENT ) -> IDENT ) { ( IDENT ) -> IDENT = INT_CONST ; } ( IDENT ) -> IDENT v++ ; IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) + INT_CONST - ( IDENT ) * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN ( IDENT -> IDENT = ( CHAR *p ) IDENT ( IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) WHILE ( IDENT & INT_CONST ) { IF ( IDENT <= INT_CONST ) RETURN ; IDENT v-- ; *v ( CHAR *p ) IDENT = *v ( CHAR *p ) IDENT ; IDENT v++ ; IDENT v++ ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT == IDENT ) ? ( ( IDENT ) ? IDENT ( IDENT , IDENT - INT_CONST ) ?: IDENT ) ?: ( ( IDENT == IDENT -> IDENT ) ? IDENT ?: IDENT ( IDENT , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( INT_CONST < IDENT ( IDENT ) ) ? ( INT_CONST << INT_CONST ) ?: ( IDENT ( IDENT ) << INT_CONST ) ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT , &v IDENT ) ; IDENT = IDENT ( IDENT ( IDENT ) ) ; IF ( *v IDENT ) { IF ( IDENT ) IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; } }
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT [ IDENT ] . IDENT < IDENT [ IDENT ] . IDENT || ( IDENT [ IDENT ] . IDENT == IDENT [ IDENT ] . IDENT && IDENT [ IDENT ] <= IDENT [ IDENT ] ) )
1  #DEFINE OBJ_MAC { UNSIGNED LONG IDENT ; IDENT ( IDENT ) ; IDENT ( ( INT_CONST << INT_CONST | ( IDENT -> IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT << INT_CONST ) | ( IDENT & ~ INT_CONST ) | ( ( IDENT -> IDENT -> IDENT == INT_CONST ) ? INT_CONST ?: INT_CONST ) ) , IDENT + INT_CONST ) ;
1  #DEFINE OBJ_MAC ( IDENT . IDENT [ IDENT . IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >> ( IDENT ) ) & INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) { DO { IDENT = IDENT ( IDENT ) ; } WHILE ( ! ( IDENT & IDENT ) ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT -> IDENT ## IDENT ) IDENT ( IDENT , IDENT , IDENT ) ; IF ( IDENT ( ( CHAR ) INT_CONST , IDENT -> IDENT + IDENT ( IDENT , IDENT ) ) ) IDENT ; } WHILE ( INT_CONST )
2140  #DEFINE OBJ_MAC
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ( IDENT , INT_CONST ) ) == IDENT && ( IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT ) ) || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ) == IDENT || ( IDENT ( IDENT ) == IDENT && IDENT ( IDENT ( IDENT , INT_CONST ) ) == IDENT && ( IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT || IDENT ( IDENT , INT_CONST ) == IDENT ) ) || IDENT ( IDENT ) == IDENT )
8  #DEFINE OBJ_MAC STRING STRING STRING STRING
23  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , { IDENT : &v IDENT } , IDENT , IDENT , IDENT , IDENT } ,
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT >= IDENT ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT * SIZEOF ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT / INT_CONST - INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT . IDENT -> IDENT [ IDENT ]
1  #DEFINE FUNC_MAC ( IDENT ) IDENT . IDENT = IDENT -> IDENT ;
32  #DEFINE OBJ_MAC IDENT ( INT_CONST , INT_CONST , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) -> IDENT & ( INT_CONST << ( IDENT ) ) ) != INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT [ IDENT -> IDENT - INT_CONST ] = IDENT ; IDENT ( ( IDENT * ) IDENT -> IDENT , INT_CONST , ( UNSIGNED ) ( IDENT -> IDENT - INT_CONST ) * SIZEOF ( *v IDENT -> IDENT ) ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! IDENT ( IDENT , IDENT , IDENT ) ) RETURN IDENT
1  #DEFINE FUNC_MAC ( IDENT ... ) DO { IDENT ( IDENT STRING , IDENT -> IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IDENT = IDENT * INT_CONST ;
2  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT . IDENT = IDENT -> IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) IDENT ( ( VOID *p ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT & IDENT ) + ( IDENT & ( IDENT ^ IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , STRING , IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( ( IDENT ) & ( IDENT - INT_CONST ) ) << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( CHAR *p ) & ( ( ( STRUCT IDENT ## IDENT * ) INT_CONST ) -> IDENT ) ) - ( ( CHAR *p ) INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( ( IDENT ) <= IDENT ) IDENT ( IDENT )
2  #DEFINE OBJ_MAC ( VOLATILE LONG *p ) IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( UNSIGNED LONG ) ( ( INT ) IDENT ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT v++ )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( FLOAT ) ( IDENT ) / ( IDENT - FLOAT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { ( IDENT ) -> IDENT = IDENT ( ( IDENT ) * ( IDENT ) -> IDENT -> IDENT ) ; IF ( ( IDENT ) -> IDENT == IDENT ) RETURN ( IDENT ) ; ( IDENT ) -> IDENT = INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ++v IDENT , ( IDENT ) ( IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: IDENT == INT_CONST ? IDENT ?: INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT IDENT ## IDENT ## IDENT ## IDENT ( UNSIGNED CHAR IDENT , UNSIGNED CHAR IDENT , UNSIGNED CHAR IDENT , UNSIGNED IDENT IDENT ) { STRUCT IDENT * IDENT = IDENT ( IDENT , IDENT ) ; IF ( ! IDENT ) RETURN IDENT ; RETURN IDENT ## IDENT ## IDENT ## IDENT ( IDENT , IDENT , IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( UNSIGNED LONG ) ( IDENT ) << INT_CONST ) | ( ( UNSIGNED LONG ) ( IDENT ) << INT_CONST ) | ( ( UNSIGNED LONG ) ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( UNSIGNED IDENT * ) ( IDENT ) , ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( &v IDENT , ( IDENT ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT -> IDENT != IDENT ) { IF ( IDENT -> IDENT < SIZEOF ( IDENT ) ) { IDENT -> IDENT = SIZEOF ( IDENT ) ; RETURN ( IDENT ) ; } *v ( IDENT * ) ( IDENT -> IDENT ) = ( IDENT ) ; } ELSE { STATIC IDENT IDENT ; IDENT = ( IDENT ) ; IDENT -> IDENT = ( IDENT ) & IDENT ; } IDENT -> IDENT = SIZEOF ( IDENT ) ; RETURN ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT - IDENT - ( INT_CONST - IDENT ( IDENT ) -> IDENT ) * IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) && INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { # IDENT , IDENT , IDENT ## IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT -> IDENT += IDENT ; IDENT -> IDENT -= IDENT ; IDENT -> IDENT += IDENT ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( CHAR *p ) IDENT ( &v ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { UNSIGNED LONG IDENT , IDENT ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( ) ; IF ( IDENT & ( INT_CONST << INT_CONST ) ) IDENT ( STRING , ( IDENT ) & ( INT_CONST << INT_CONST ) ? STRING ?: STRING ) ; IF ( IDENT ( &v ( IDENT ) -> IDENT ) && ( IDENT ) -> IDENT == IDENT ( ) ) { IDENT ( STRING , IDENT , IDENT ( ) , ( IDENT ) -> IDENT , ( IDENT ) -> IDENT ) ; IDENT ( STRING , ( ( IDENT ) & ( INT_CONST << INT_CONST ) ? STRING ?: STRING ) ) ; } IDENT ( &v ( IDENT ) -> IDENT ) ; ( IDENT ) -> IDENT = IDENT ; ( IDENT ) -> IDENT = IDENT ( ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT ( IDENT ) ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( ( ( INT *p ) ( INT ) IDENT ) [ ( IDENT ) ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = IDENT ( ) ; IDENT = IDENT ( ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IF ( IDENT == IDENT ) { IF ( IDENT == IDENT ) { IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT ) IDENT INT_CONST ; } ELSE IF ( IDENT == IDENT ) { IDENT = *v IDENT ( IDENT ) ; IDENT = *v IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT , IDENT ) ; } ELSE { IDENT = IDENT IDENT IDENT ; } } ELSE { IF ( IDENT == IDENT && IDENT ( IDENT ) ) { IDENT = *v IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT , IDENT ) ; } ELSE IF ( IDENT ( IDENT ) && IDENT == IDENT ) { IDENT = IDENT ( IDENT ) ; IDENT = *v IDENT ( IDENT ) ; IDENT = IDENT ( IDENT , IDENT , IDENT , IDENT ) ; } ELSE { IDENT = IDENT IDENT IDENT ; } } IDENT ( IDENT ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT STRING , ( ( IDENT ) / INT_CONST ) , ( ( IDENT ) % INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT [ IDENT -> IDENT ] . IDENT += INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ( &v ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT ) ) IDENT ( IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT -> IDENT ? IDENT -> IDENT -> IDENT ?: STRING )
1  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) - SIZEOF ( STRUCT IDENT ) + SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( VOLATILE UNSIGNED CHAR *p ) ( ( UNSIGNED LONG ) ( IDENT ) ) = ( IDENT ) )
8  #DEFINE OBJ_MAC ( ( IDENT << INT_CONST ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT IDENT ; IDENT ( INT_CONST , ( IDENT ) ) ; IDENT ( IDENT ) ; IDENT = IDENT ( IDENT ) ; IDENT &= ~ ( INT_CONST ) ; IDENT ( IDENT , ( IDENT ) ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( VOID ) IDENT ( IDENT , STRING , INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST + IDENT ( INT_CONST ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ INT_CONST ] == CHAR_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( SIZEOF ( ( IDENT ) ) / ( SIZEOF ( ( IDENT [ INT_CONST ] ) ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT & INT_CONST ) << INT_CONST | ( IDENT & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT ) , INT_CONST , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ IDENT ] . IDENT & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & -v ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( STRING ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT , CHAR_CONST , IDENT ) , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT + ( IDENT ) * SIZEOF ( STRUCT IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT VOLATILE ( STRING # IDENT STRING : : STRING ( IDENT ) ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( LONG ) & ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) * ( UNSIGNED SHORT *p ) IDENT = IDENT
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( &v IDENT , IDENT + IDENT ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ^ ( IDENT >> INT_CONST ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT IF ( IDENT ( IDENT ) && IDENT != IDENT ) { IDENT = IDENT ( IDENT ) ; } ELSE { IDENT ( IDENT ) ; IDENT ( IDENT , IDENT = IDENT ( IDENT , IDENT ) ) ; IF ( ! IDENT ) { IDENT = IDENT ; GOTO IDENT ; } } IDENT
2  #DEFINE OBJ_MAC ( ( STRUCT IDENT * ) ( IDENT + IDENT ) )
1  #DEFINE FUNC_MAC ( ) IDENT += ( INT_CONST - ( ( INT ) IDENT & INT_CONST ) ) & INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) ( *v IDENT ) ( IDENT , IDENT , IDENT , IDENT , IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; IF ( IDENT ) IDENT ( IDENT ) ; RETURN ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) IDENT ( IDENT , STRING ) ; IDENT = IDENT ( IDENT -> IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT STRING , IDENT ? IDENT ?: STRING ) ; IDENT ( IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT ( IDENT , CHAR_CONST , IDENT ) < ( IDENT ) ) GOTO #ERROR ;
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT [ IDENT ] & IDENT ) ? STRING ?: STRING )
2  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + INT_CONST * ( IDENT ) + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) CASE IDENT : IDENT IDENT ( STRING : : STRING ( IDENT ) ) ; BREAK
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT -> IDENT -> IDENT [ IDENT ]
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT = ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) > INT_CONST ) ? INT_CONST ?: ( ( ( IDENT ) < -v INT_CONST ) ? -v INT_CONST ?: ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( STRING , IDENT ( IDENT -> IDENT ) , ( IDENT -> IDENT ) , IDENT , IDENT -> IDENT , IDENT -> IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC = ( IDENT | IDENT IDENT | IDENT | IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRUCT IDENT )
26  #DEFINE OBJ_MAC ( IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { CHAR *p IDENT ; INT IDENT , IDENT = ( IDENT ) ? ( ( SIZEOF ( IDENT ) > SIZEOF ( IDENT ) ? SIZEOF ( IDENT ) ?: SIZEOF ( IDENT ) ) ) ?: SIZEOF ( IDENT ) ; IF ( IDENT ( IDENT , IDENT , IDENT ) ) RETURN -v IDENT ; IF ( IDENT ) FOR ( IDENT = IDENT , IDENT = INT_CONST ; *v IDENT && *v IDENT != CHAR_CONST && --v IDENT ; IDENT v++ , IDENT v++ ) ; ELSE IDENT = IDENT - INT_CONST ; IF ( IDENT ( CHAR_CONST , ( CHAR *p ) ( IDENT + IDENT ) ) ) RETURN -v IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( UNSIGNED LONG *p ) IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) ; IDENT ( ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & ( INT_CONST << ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >= CHAR_CONST && ( IDENT ) <= CHAR_CONST ? ( IDENT ) - CHAR_CONST ?: ( IDENT ) >= CHAR_CONST && ( IDENT ) <= CHAR_CONST ? ( IDENT ) - CHAR_CONST + INT_CONST ?: ( IDENT ) >= CHAR_CONST && ( IDENT ) <= CHAR_CONST ? ( IDENT ) - CHAR_CONST + INT_CONST ?: INT_CONST )
1  #DEFINE OBJ_MAC { IDENT , IDENT , IDENT , IDENT }
18  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT , IDENT -> IDENT . IDENT . IDENT , ( IDENT ? INT_CONST ?: INT_CONST ) , IDENT , IDENT )
144  #DEFINE OBJ_MAC IDENT . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) / IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT , { IDENT : IDENT } , IDENT , IDENT , IDENT , IDENT } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) != IDENT ) && ( ( UNSIGNED INT ) ( UNSIGNED LONG ) ( IDENT ) != IDENT ) )
1  #DEFINE OBJ_MAC IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT
5  #DEFINE FUNC_MAC ( ) ; { IDENT ( INT_CONST ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT -> IDENT = IDENT ; IDENT ( IDENT ) ; IDENT ( &v IDENT -> IDENT , &v IDENT ) ; IDENT ( &v IDENT -> IDENT ) ; RETURN IDENT ; }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) IDENT ( INT_CONST , SIZEOF ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( ) IF ( IDENT == IDENT ) { IDENT IDENT ; IDENT = IDENT ( &v IDENT ) ; IDENT ( INT_CONST == IDENT ) ; } }
2  #DEFINE FUNC_MAC ( ) IDENT |= IDENT
4  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) { ( IDENT ) += IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) + ( IDENT ) + ( IDENT ) INT_CONST ; ( IDENT ) = IDENT ( ( IDENT ) , ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( IDENT ) < IDENT ) ? IDENT + INT_CONST ?: IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ; IF ( ( ( INT ) IDENT ( IDENT , IDENT ) ) == ( ( INT ) IDENT ) ) GOTO IDENT
1  #DEFINE OBJ_MAC ( SIZEOF ( *v IDENT ) + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT = ( CHAR *p ) IDENT ( IDENT ( IDENT ) + INT_CONST ) , IDENT ( IDENT , ( IDENT ) ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ? IDENT ?: IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) * INT_CONST + ( IDENT ) )
26  #DEFINE OBJ_MAC GOTO IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ IDENT ] [ IDENT ] = IDENT [ IDENT ] [ IDENT ] = IDENT
2  #DEFINE OBJ_MAC ( *v ( UNSIGNED LONG *p ) IDENT )
7  #DEFINE FUNC_MAC ( IDENT ) ( IDENT & ( INT_CONST << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT -> IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { INT IDENT = IDENT ( ) ; IDENT ; IDENT += IDENT ( ) - IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) DO { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT > INT_CONST ; --v IDENT ) IDENT ( ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) { IDENT >>= ( IDENT ) ; IDENT -= ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT ? IDENT ?: ( ( IDENT ) == IDENT ? IDENT ?: ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT ) ( ( IDENT ) ? ( ( IDENT ) * IDENT ) ?: ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT [ IDENT v++ ] = ( IDENT >> INT_CONST ) & INT_CONST ; IDENT [ IDENT v++ ] = ( IDENT >> INT_CONST ) & INT_CONST ; IDENT [ IDENT v++ ] = ( IDENT >> INT_CONST ) & INT_CONST ; IDENT [ IDENT v++ ] = IDENT & INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) [ INT_CONST ] = IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT -> IDENT ( IDENT -> IDENT , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) / INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( &v IDENT [ IDENT ] ) ; IDENT [ IDENT ] &= ~ IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) ? IDENT ( IDENT , IDENT , IDENT ) ?: IDENT ( IDENT , IDENT , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT -> IDENT = IDENT ; IDENT ( ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( UNSIGNED INT ) ( IDENT + IDENT ( IDENT , IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING IDENT STRING ) ;
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v ( IDENT ) -> IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! ( IDENT ) ) IDENT ( # IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( IDENT ) -> IDENT = INT_CONST ; } WHILE ( INT_CONST )
5  #DEFINE FUNC_MAC ( ) ( IDENT < IDENT ? IDENT [ IDENT v++ ] ?: IDENT ( ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IF ( IDENT ) { IF ( IDENT ) { IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT , CHAR_CONST ) ; IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; } ELSE { IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT , CHAR_CONST ) ; IDENT ( IDENT , STRING ) ; IF ( IDENT ) IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT , IDENT , INT_CONST ) ; IDENT ( CHAR_CONST , IDENT ) ; } } IF ( IDENT && IDENT == ( IDENT | IDENT ) && IDENT ( IDENT , IDENT , STRING ) && IDENT ( IDENT , IDENT , STRING ) && IDENT > INT_CONST && ( IDENT & IDENT ) ) { IDENT ( IDENT , IDENT , IDENT , IDENT ) ; IDENT ( CHAR_CONST , IDENT ) ; } }
9  #DEFINE FUNC_MAC ( ) IDENT ( IDENT == IDENT || IDENT == IDENT ) ; IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = INT_CONST ; IDENT -> IDENT = ( IDENT || IDENT ) ? ( UNSIGNED IDENT ) IDENT IDENT ( UNSIGNED IDENT ) IDENT ?: ( IDENT IDENT IDENT )
19  #DEFINE OBJ_MAC ( ( CHAR *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , IDENT ) ; RETURN -v ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT , IDENT ( IDENT , IDENT ) , IDENT ( IDENT , IDENT ) ) , IDENT , INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) ( ( VOID ) INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) v++ )
2  #DEFINE OBJ_MAC ( ( IDENT + INT_CONST ) * IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT <= INT_CONST ) IDENT = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT && ! IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT + IDENT -> IDENT . IDENT - IDENT -> IDENT . IDENT - IDENT -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT * ) ( IDENT ) ) [ INT_CONST ] |= IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) DO { IDENT ( ( IDENT ) , ( IDENT ) ) ; IDENT ( ( IDENT ) , ( IDENT ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( UNSIGNED LONG ) ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ INT_CONST ] = IDENT [ IDENT ] ; IDENT [ INT_CONST ] = IDENT [ IDENT + INT_CONST ] ; IDENT ( IDENT , STRING , &v IDENT ) ; ( ( STRUCT IDENT * ) IDENT ) -> IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , IDENT ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ! IDENT ( IDENT , ( IDENT ) , ( IDENT ) ) ) RETURN INT_CONST ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ... ) IDENT += IDENT ( IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( ) UNSIGNED LONG IDENT
1  #DEFINE OBJ_MAC ( ( IDENT + IDENT ) * SIZEOF ( VOID *p ) )
1  #DEFINE OBJ_MAC ( ( IDENT - INT_CONST ) * INT_CONST - SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ! IDENT ( IDENT , IDENT , IDENT ) ) RETURN IDENT ;
1  #DEFINE OBJ_MAC ( SIZEOF ( STRING ) + INT_CONST )
19  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) >> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOLATILE UNSIGNED CHAR *p ) ( ( IDENT ( ( IDENT ) ) - IDENT ) + IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT , IDENT , IDENT }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { UNSIGNED LONG IDENT = ( IDENT ) ; IDENT [ INT_CONST ] = IDENT ; IDENT >>= INT_CONST ; IDENT [ INT_CONST ] = IDENT ; IDENT >>= INT_CONST ; IDENT [ INT_CONST ] = ( IDENT [ INT_CONST ] & INT_CONST ) | ( IDENT & INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( STRING , IDENT , IDENT ) ; FOR ( IDENT = INT_CONST ; IDENT < SIZEOF ( IDENT ) ; IDENT v++ ) IDENT [ IDENT ] = IDENT [ IDENT ] ; FOR ( IDENT = INT_CONST ; IDENT <= SIZEOF ( IDENT ) ; IDENT v++ ) { IDENT = ( ( IDENT >> ( IDENT * ( SIZEOF ( IDENT ) - IDENT ) ) ) & IDENT ) ; IDENT ( IDENT == INT_CONST ? CHAR_CONST ?: ( CHAR ) IDENT ) ; } IDENT ( STRING , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) { ; }
1  #DEFINE FUNC_MAC ( IDENT ) FOR ( IDENT = IDENT * INT_CONST ; ; )
1  #DEFINE FUNC_MAC ( IDENT ) ( VOID *p ) ( ( CHAR *p ) IDENT + SIZEOF ( *v IDENT ) + ( IDENT -> IDENT - SIZEOF ( IDENT -> IDENT ) ) )
1  #DEFINE OBJ_MAC ( INT_CONST * INT_CONST * INT_CONST - IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT , STRING ) ; IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( INT ) ( IDENT / FLOAT_CONST ) )
1  #DEFINE OBJ_MAC FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IDENT v++ ; IDENT >>= INT_CONST ; IF ( IDENT & INT_CONST ) { IDENT v++ ; IDENT |= INT_CONST ; } ELSE { IDENT = INT_CONST ; IDENT &= INT_CONST ; } IF ( IDENT == INT_CONST ) { IDENT -> IDENT . IDENT . IDENT [ IDENT v++ ] = IDENT ; IDENT = INT_CONST ; } IF ( IDENT == INT_CONST ) { IDENT >>= INT_CONST ; IDENT &= INT_CONST ; IDENT v++ ; IDENT = INT_CONST ; } IF ( IDENT == INT_CONST ) { IDENT -> IDENT . IDENT . IDENT [ IDENT v++ ] = IDENT ; IDENT = INT_CONST ; } IDENT >>= INT_CONST ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { INT IDENT ; FOR ( IDENT = INT_CONST ; ( IDENT ) [ IDENT ] [ INT_CONST ] ; IDENT v++ ) IF ( IDENT ( ( CHAR *p ) IDENT , ( IDENT ) [ IDENT ] , IDENT ( ( IDENT ) [ IDENT ] ) ) == INT_CONST ) RETURN ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT -> IDENT + IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IF ( IDENT >= ( IDENT ) ) IDENT ( STRING IDENT , IDENT , IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED LONG ) IDENT ) & INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT = IDENT -> IDENT . IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( INT_CONST ) ; *v IDENT v++ = ( UNSIGNED CHAR ) ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ( ( IDENT * ) ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) IDENT ( ( IDENT ) IDENT ( ( IDENT ) ) , IDENT ) != IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT , ( IDENT ) / IDENT , ( IDENT ) % IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ ( ( IDENT ) / ( ( IDENT ) -> IDENT >> INT_CONST ) ) & IDENT ] )
2  #DEFINE OBJ_MAC ( ( LONG ) ( ~ IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN -v ( IDENT < IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( &v ( IDENT ) -> IDENT ) ; ( IDENT ) -> IDENT = INT_CONST ; }
4  #DEFINE OBJ_MAC IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ; IDENT ( INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( IDENT * ) ( IDENT ) = ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { UNSIGNED LONG IDENT = ~ INT_CONST ; UNSIGNED LONG IDENT ; UNSIGNED INT IDENT ; INT IDENT ; IF ( IDENT == IDENT ) { IDENT = -v INT_CONST ; } ELSE { IDENT = ( IDENT -> IDENT << INT_CONST ) | ( IDENT -> IDENT << INT_CONST ) | IDENT ; IDENT = IDENT -> IDENT -> IDENT ; IF ( IDENT ) { IDENT = IDENT ( IDENT , INT_CONST , INT_CONST , &v IDENT , IDENT , IDENT >> INT_CONST , IDENT & INT_CONST , IDENT ) ; IF ( IDENT < INT_CONST || ( IDENT == INT_CONST ) ) IDENT = IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; } ELSE { IDENT = IDENT ( IDENT , INT_CONST , INT_CONST , &v IDENT , IDENT , IDENT ) ; } } *v IDENT = IDENT ; RETURN IDENT ; } INT IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , INT IDENT , IDENT IDENT ) { STRUCT IDENT * IDENT = IDENT ( IDENT ) ; INT IDENT = IDENT ## IDENT ( IDENT , IDENT , IDENT ) ; RETURN IDENT ? IDENT ?: IDENT ; }
1  #DEFINE FUNC_MAC ( ) { IDENT IDENT ; IDENT * IDENT = IDENT ( ) ; IF ( ! IDENT ( IDENT ) ) IDENT ( IDENT ) ; IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { ( IDENT ) &= INT_CONST ; IF ( ( IDENT ) < INT_CONST ) { ( IDENT ) = INT_CONST ; } } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) ( IDENT + INT_CONST ) & ~ INT_CONST )
2  #DEFINE FUNC_MAC ( ) IF ( ! IDENT ) IDENT v++ ;
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST << ( IDENT - IDENT ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT < INT_CONST ? IDENT ( IDENT v++ ) = IDENT ?: IDENT ( IDENT , STRING ) )
2  #DEFINE OBJ_MAC ( ( IDENT + INT_CONST ) * SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IDENT ( IDENT IDENT STRING IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT < INT_CONST || IDENT >= IDENT ) { IDENT ( IDENT STRING , IDENT , IDENT ) ; IDENT ( IDENT ( ) ) ; }
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) -> IDENT ) * ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) || IDENT ( IDENT , STRING ) )
2  #DEFINE FUNC_MAC ( IDENT ... ) IDENT ( IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT ) ; IDENT ( STRING ) ; IDENT ( STRING , IDENT ) ; IDENT ( IDENT , INT_CONST ) ; IDENT ( STRING ) ; IDENT ( STRING , IDENT ) ; IDENT ( STRING ) ; IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( IDENT -> IDENT ) * IDENT )
1  #DEFINE OBJ_MAC STRING STRING STRING STRING STRING STRING STRING
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST | ( ( IDENT << INT_CONST ) | ( IDENT & INT_CONST ) << INT_CONST ) )
10  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) >> INT_CONST ) + ( ( IDENT ) >> INT_CONST ) + ( ( IDENT ) >> INT_CONST ) + INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) -> IDENT & ( IDENT ) ) == ( IDENT ) ) && ( IDENT ( IDENT ) && IDENT ( IDENT ) ) )
9  #DEFINE FUNC_MAC ( IDENT ) IDENT ( STRING , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) + ( INT_CONST * ( IDENT ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT ) / IDENT ]
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT [ INT_CONST ] , &v ( IDENT ) -> IDENT [ INT_CONST ] )
2  #DEFINE OBJ_MAC ( ( INT_CONST << INT_CONST ) | INT_CONST )
1  #DEFINE OBJ_MAC IDENT -> IDENT += ( IDENT -> IDENT < INT_CONST ) ? INT_CONST ?: -v INT_CONST ;
1  #DEFINE OBJ_MAC ~ INT_CONST
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) >= SIZEOF ( STRUCT IDENT ) ? ( STRUCT IDENT * ) ( IDENT ) ?: ( STRUCT IDENT * ) IDENT )
1  #DEFINE OBJ_MAC LONG LONG INT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( ( IDENT ) <= ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) -> IDENT + INT_CONST ) == ( IDENT ) -> IDENT ) ? ( IDENT ) -> IDENT ?: ( IDENT ) -> IDENT + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT + ( IDENT * INT_CONST ) ) ; IDENT ( ( IDENT ) , IDENT + ( IDENT * INT_CONST + INT_CONST ) ) ;
1  #DEFINE OBJ_MAC ( IDENT / ( INT_CONST * SIZEOF ( LONG ) ) )
1  #DEFINE FUNC_MAC ( IDENT ... ) ;
1  #DEFINE FUNC_MAC ( IDENT ) EXTERN INT IDENT ## IDENT ( INT ) IDENT ( STRING # IDENT ) ; CONST STRUCT IDENT IDENT ## IDENT IDENT ( ( IDENT ( STRING ) ) ) = { ( UNSIGNED LONG ) & IDENT ## IDENT , STRING # IDENT }
2  #DEFINE FUNC_MAC ( IDENT ) { ( ( STRUCT IDENT * ) IDENT -> IDENT ) -> IDENT v++ ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ! IDENT ( ( CHAR *p ) & ( IDENT ) , ( CHAR *p ) & ( IDENT ) , SIZEOF ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT & INT_CONST ) | INT_CONST ) ; IDENT ( IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ] . IDENT != IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , INT_CONST , &v IDENT , INT_CONST , &v IDENT , &v IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) , IDENT , IDENT , IDENT , INT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT . IDENT -> IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( { INT IDENT = INT_CONST ; STRUCT IDENT * IDENT = ( IDENT ) ; IF ( IDENT -> IDENT != IDENT ) IDENT = INT_CONST ; IF ( IDENT -> IDENT [ IDENT ] != IDENT ) IDENT = INT_CONST ; IF ( ( IDENT -> IDENT & IDENT ) != INT_CONST ) IDENT = INT_CONST ; IF ( ( ( IDENT -> IDENT & IDENT ) != INT_CONST ) && ( ( IDENT -> IDENT & IDENT ) != IDENT ) ) IDENT = INT_CONST ; IDENT ; } )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( ( IDENT ) -> IDENT . IDENT ) )
2  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT ) ; IDENT
1  #DEFINE FUNC_MAC ( ) ( *v IDENT -> IDENT v++ )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT . IDENT -> IDENT . IDENT -> IDENT . IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT . IDENT [ IDENT - INT_CONST ] v++ ;
6  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
4  #DEFINE OBJ_MAC ( ( UNSIGNED LONG *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT ) IDENT ( ( IDENT ) , ( IDENT ) , IDENT ) ; ELSE ( IDENT ) = IDENT ( ( IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ( ( IDENT ( IDENT ( *v ( IDENT ) ) ) >= INT_CONST ) && ( ( ( IDENT * ) IDENT ( IDENT -> IDENT . IDENT ) ) -> IDENT . IDENT >= IDENT ) ) || ( IDENT && ( ( ( IDENT * ) IDENT ( IDENT -> IDENT . IDENT ) ) -> IDENT . IDENT == IDENT ) ) ) IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | IDENT | ( ( ( IDENT ) << INT_CONST ) & IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST + SIZEOF ( IDENT ) / SIZEOF ( IDENT [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) IDENT ) -> IDENT . IDENT )
8  #DEFINE OBJ_MAC ( ( ( IDENT ) INT_CONST ) << IDENT )
8  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v IDENT ) ( IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT <= IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT , { IDENT : INT_CONST } , IDENT , IDENT , IDENT , IDENT } ,
88  #DEFINE FUNC_MAC ( IDENT ) ( IDENT )
1  #DEFINE OBJ_MAC SIZEOF ( IDENT / SIZEOF ( STRUCT IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) DO { IDENT ( IDENT , IDENT , ## IDENT ) ; IDENT ( IDENT ) ; RETURN IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( ( ( IDENT ) ( IDENT ) ) >> INT_CONST ) )
2  #DEFINE OBJ_MAC IDENT ( IDENT &= INT_CONST , IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT ) )
4  #DEFINE FUNC_MAC ( ) ( IDENT ( IDENT + IDENT ) & IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT , IDENT , --v IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( STRING ) ; IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( &v ( IDENT ) [ IDENT - SIZEOF ( IDENT ) ] ) )
4  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( CONST CHAR *p ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { INT IDENT ; IDENT = SIZEOF ( IDENT ) - INT_CONST ; IF ( IDENT - IDENT + IDENT + IDENT >= IDENT ) RETURN -v IDENT ; IF ( IDENT >= IDENT + IDENT ) IDENT ( ) ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT + IDENT , IDENT , IDENT ) ; IDENT += IDENT ; IDENT [ IDENT ] = INT_CONST ; *v IDENT v++ = IDENT ; IDENT += IDENT + INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IDENT += IDENT ( IDENT + IDENT , IDENT , ## IDENT ) ; IF ( IDENT + IDENT > IDENT + IDENT ) BREAK ; IF ( IDENT + IDENT < IDENT ) { IDENT += IDENT ; IDENT = INT_CONST ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ? ( IDENT ) ?: STRING )
1  #DEFINE FUNC_MAC ( ) ( IDENT ? INT_CONST ?: IDENT ( ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) = ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , ( IDENT ) ^ IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( CHAR *p ) & ( ( IDENT * ) IDENT ) -> IDENT - ( CHAR *p ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ) && IDENT ( ) == ( IDENT ) )
8  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
2  #DEFINE OBJ_MAC ( INT_CONST << INT_CONST | INT_CONST << INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT < INT_CONST ) ? IDENT ?: ( ( IDENT < INT_CONST ) ? ( IDENT - INT_CONST ) ?: ( ( IDENT < INT_CONST ) ? ( IDENT - INT_CONST ) ?: ( IDENT - INT_CONST ) ) ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v ( IDENT ) -> IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IDENT ( IDENT -> IDENT . IDENT [ ( IDENT ) ] , -v ( UNSIGNED INT ) ( IDENT ) , -v INT_CONST ) ; } WHILE ( INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( IDENT ) < INT_CONST ? ( ( ( IDENT ) - INT_CONST ) / INT_CONST ) ?: ( ( IDENT ) + INT_CONST ) / INT_CONST ) , INT_CONST , INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) [ INT_CONST ] )
22  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT ( IDENT ) ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ^ ! ! ( IDENT -> IDENT . IDENT & IDENT ) )
1  #DEFINE OBJ_MAC CASE IDENT : IDENT = *v IDENT ; IDENT = ( IDENT ) IDENT >> INT_CONST ; IDENT = IDENT & INT_CONST ; IDENT = INT_CONST << IDENT ; IDENT = IDENT [ INT_CONST + IDENT ] & IDENT ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = IDENT ( *v IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = ! IDENT ( *v IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = IDENT ( *v IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = ! IDENT ( *v IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = IDENT ( *v IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = ! IDENT ( *v IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = *v IDENT ; IDENT = ( IDENT ) IDENT [ INT_CONST ] ; IDENT = ( IDENT == IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = *v IDENT ; IDENT = ( IDENT ) IDENT [ INT_CONST ] ; IDENT = IDENT ( IDENT , IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = *v IDENT ; IDENT = ( ( IDENT [ INT_CONST ] << INT_CONST ) | IDENT [ INT_CONST ] ) ; IDENT = ( IDENT == IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : IDENT = *v IDENT ; IDENT = ( ( IDENT [ INT_CONST ] << INT_CONST ) | IDENT [ INT_CONST ] ) ; IDENT = IDENT ( IDENT , IDENT ) ; IDENT = INT_CONST ; BREAK ; CASE IDENT : CASE IDENT : IDENT = ( IDENT [ INT_CONST ] << INT_CONST ) | IDENT [ INT_CONST ] ; IDENT += IDENT ; IDENT = *v IDENT ; IDENT = ( IDENT ) IDENT >> INT_CONST ; IF ( IDENT >= IDENT ) { IDENT = ( IDENT == IDENT ) ; } ELSE { IDENT = IDENT & INT_CONST ; IDENT = INT_CONST << IDENT ; IDENT = IDENT [ INT_CONST + IDENT ] & IDENT ; } IDENT = INT_CONST ; BREAK ;
10  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( *v IDENT ) )
2  #DEFINE FUNC_MAC ( ) IDENT ( IDENT ( IDENT ) )
1  #DEFINE OBJ_MAC IDENT IDENT ( IDENT , STRING ) ; IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT = ( ( IDENT ) -> IDENT & INT_CONST ) | ( ( IDENT ) & IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT [ IDENT ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( INT *p ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT [ IDENT ] = ( IDENT & IDENT ) | IDENT | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) . IDENT & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { IDENT ; IF ( IDENT == INT_CONST ) RETURN IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( &v ( ( IDENT * ) ( IDENT ) ) [ IDENT ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( STRING IDENT STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) , STRING ( IDENT ) , STRING ( IDENT ) : STRING ( IDENT ) , STRING ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT . IDENT + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT = ( IDENT ) ) != IDENT ) IDENT ; ELSE IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED LONG ) ( IDENT ) + ( IDENT - INT_CONST ) ) & ~ ( IDENT - INT_CONST ) ) - ( UNSIGNED LONG ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT + INT_CONST ) / INT_CONST ) , INT_CONST , INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST + IDENT ( IDENT -> IDENT ) / INT_CONST + INT_CONST * ! IDENT )
6  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ^ INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT ? STRING ?: STRING )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT ( IDENT , IDENT ) , INT_CONST , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT ) >> IDENT )
1  #DEFINE FUNC_MAC ( ) ( ( SIZEOF ( IDENT ) + INT_CONST ) / INT_CONST * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { UNSIGNED INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IF ( IDENT & IDENT -> IDENT -> IDENT ) BREAK ; } IDENT ( ( STRING , IDENT ) ) ; IDENT -> IDENT -> IDENT = IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT == ( ( IDENT . IDENT - INT_CONST ) & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT += IDENT ( IDENT + IDENT , IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) ( IDENT -> IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) DO { IF ( IDENT ( IDENT ) -> IDENT & ( IDENT ) ) IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( ) ( IDENT = INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT + INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( CHAR *p ) & ( IDENT ) -> IDENT + ( IDENT ) * INT_CONST ) ;
1  #DEFINE OBJ_MAC ( IDENT [ INT_CONST ] -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ IDENT [ INT_CONST ^ IDENT [ INT_CONST ] ] ^ IDENT [ INT_CONST ] ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { IDENT , { IDENT , IDENT , } , } ,
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT [ IDENT >> INT_CONST ] >> ( IDENT & INT_CONST ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( ! ( IDENT ) ) { IDENT ( STRING , IDENT , IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT -> IDENT -> IDENT )
1  #DEFINE OBJ_MAC ( ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) | ( INT_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) ( ( CHAR *p ) IDENT + IDENT ( ( ( STRUCT IDENT * ) IDENT ) -> IDENT ) ) ) -> IDENT
1  #DEFINE OBJ_MAC IDENT ( INT_CONST ) ;
4  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) , IDENT ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT [ ( IDENT ) -> IDENT ] = ( IDENT ) ( IDENT ) , ( IDENT ) -> IDENT = IDENT ( ( IDENT ) -> IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ( ( STRUCT IDENT * ) INT_CONST ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT v++ )
8  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT -> IDENT . IDENT . IDENT [ IDENT ] , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) -> IDENT << IDENT ) & IDENT ) | ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) ? ( IDENT - INT_CONST + ( IDENT & INT_CONST ) ) ?: ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) IF ( IDENT == IDENT ) { IDENT ( &v IDENT ) ; IF ( IDENT ( ) && ! IDENT ( IDENT ( ) ) ) IDENT ( IDENT ) ; } }
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT <= INT_CONST ) { INT IDENT = IDENT - ( IDENT * ( IDENT ) ) / ( IDENT << IDENT ) ; IF ( IDENT < INT_CONST ) IDENT = -v IDENT ; IF ( IDENT < IDENT ) IDENT = IDENT , IDENT = IDENT , IDENT = IDENT , IDENT = IDENT ; } }
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { ( *v ( IDENT * ) ( IDENT ) ) = ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT IDENT = IDENT ## IDENT ; IDENT IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC IDENT ## IDENT IDENT ## IDENT ( STRUCT IDENT * IDENT , IDENT IDENT ) { IDENT ## IDENT IDENT ; IDENT = IDENT ## IDENT ( IDENT + IDENT ) ; IDENT ( STRING , IDENT ) ; RETURN ( IDENT ) ; }
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( IDENT ) ] -> IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) | ( ( ( IDENT ) ( IDENT ) & INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ( IDENT ) & INT_CONST ) << ( IDENT - INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) != IDENT && ( IDENT ) != IDENT && ( IDENT [ IDENT ] && ( ! IDENT [ IDENT ] || IDENT ) ) )
7  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & IDENT ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) & IDENT ) || ( ( IDENT ) & ( IDENT | IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , ( IDENT ) -> IDENT , SIZEOF ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) * IDENT * IDENT . IDENT / INT_CONST / IDENT . IDENT / IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ! IDENT ( IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) ^ ! ! ( IDENT -> IDENT & IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) == IDENT ) && ( INT_CONST <= ( IDENT ) && ( IDENT ) <= INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ## IDENT ) - IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT | ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT . IDENT [ IDENT ] && IDENT . IDENT [ IDENT ] -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) RETURN ( IDENT ( IDENT . IDENT ) , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { INT_CONST , IDENT , IDENT , INT_CONST , INT_CONST , IDENT }
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( UNSIGNED CHAR *p ) ( IDENT ) ) + ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( { STRUCT IDENT * IDENT , *v IDENT ; IDENT * IDENT ; IDENT = &v ( IDENT ) -> IDENT ; IDENT = IDENT -> IDENT ; IF ( IDENT ( IDENT == IDENT ) ) { STRUCT IDENT * IDENT ; IDENT = &v ( IDENT ) -> IDENT ; IDENT = IDENT -> IDENT ; IF ( IDENT ( IDENT == IDENT ) ) GOTO IDENT ; IDENT ( IDENT ) ; IDENT ( IDENT , IDENT ) ; } IDENT = IDENT ( IDENT , IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; } )
1  #DEFINE FUNC_MAC ( ) DO { INT IDENT ; FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { IDENT ( STRING , IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT ) ; } FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) { IDENT ( STRING , IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT , IDENT -> IDENT [ IDENT ] . IDENT ) ; } } WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( IDENT + ( IDENT ) * IDENT + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC INT IDENT ## IDENT ( STRUCT IDENT * IDENT , IDENT * IDENT ) { STRUCT IDENT * IDENT = IDENT -> IDENT ; INT IDENT = INT_CONST ; IF ( IDENT -> IDENT ) IDENT ( IDENT -> IDENT ) ; IF ( IDENT -> IDENT ## IDENT ) IDENT = IDENT -> IDENT ## IDENT ( IDENT , IDENT ) ; ELSE *v IDENT = IDENT -> IDENT -> IDENT ; IF ( IDENT -> IDENT ) IDENT ( IDENT -> IDENT ) ; RETURN IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >> ( IDENT . IDENT [ IDENT ] . IDENT ) ) & INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT . IDENT = IDENT + ( IDENT ) ; IDENT . IDENT = ( VOID *p ) ( IDENT ) ; IDENT ( &v IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT ) IF ( IDENT != IDENT ) v++ IDENT ;
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) >> INT_CONST ) ^ IDENT [ ( ( IDENT ) ^ ( IDENT ) ) & INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) = ( IDENT ) -> IDENT [ ( IDENT ) -> IDENT ] , ( IDENT ) -> IDENT = IDENT ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) VOID IDENT ## IDENT ( IDENT ## IDENT IDENT , INT IDENT ) { INT IDENT = IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT -> IDENT ## IDENT ( IDENT [ IDENT ] , IDENT ( IDENT ) , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT = IDENT ; GOTO #ERROR ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { UNSIGNED LONG IDENT = ( IDENT ) -> IDENT ; IDENT ( IDENT , IDENT + IDENT ) ; IDENT ( IDENT , IDENT + IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) - IDENT ( IDENT . IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ) & INT_CONST ? INT_CONST ?: ( ( ( IDENT ) & INT_CONST ) >> INT_CONST ) + ( ( IDENT ) & INT_CONST ) + INT_CONST
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT == IDENT ) || ( ( IDENT ) -> IDENT == IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( CHAR *p ) ( IDENT ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) & ( ( UNSIGNED ) IDENT >> ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT = ( IDENT ) , IDENT = ( IDENT ) , IDENT = ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) STATIC CHAR IDENT ## IDENT ## IDENT [ ] IDENT = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) IF ( IDENT >= IDENT ) IDENT ( IDENT IDENT STRING , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { STRUCT IDENT * IDENT ; IDENT = ( STRUCT IDENT * ) IDENT -> IDENT . IDENT . IDENT ; IDENT = IDENT ( &v IDENT -> ## IDENT ) ; }
5  #DEFINE FUNC_MAC ( IDENT ) IDENT -> IDENT . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) - INT_CONST ) >> INT_CONST )
1  #DEFINE OBJ_MAC ( SIZEOF ( STRUCT IDENT ) >> INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) IDENT -> IDENT -> IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( UNSIGNED INT ) IDENT ( ( VOID *p ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT -> IDENT . IDENT . IDENT [ IDENT ] , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT = IDENT ( IDENT , ## IDENT ) ; IDENT += IDENT ; IF ( IDENT > IDENT ) { IDENT += IDENT ; IDENT += IDENT ; } IF ( IDENT >= IDENT ) GOTO IDENT ;
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT |= ( ( IDENT ) IDENT ) << IDENT ( IDENT ) ; IDENT |= ( ( IDENT ) IDENT ^ INT_CONST ) << IDENT ( IDENT ) ; IF ( IDENT v-- == INT_CONST ) { IDENT IDENT = *v IDENT ; IDENT |= IDENT ; IF ( IDENT == IDENT ) IDENT &= ~ IDENT ; *v IDENT v++ = IDENT ; IDENT = INT_CONST ; IDENT = INT_CONST ; IDENT = INT_CONST ; } IDENT v-- ; }
3  #DEFINE OBJ_MAC INT IDENT , IDENT
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) & ( IDENT | IDENT | IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT & IDENT ) == INT_CONST && ( IDENT < -v INT_CONST || IDENT > INT_CONST ) ) || ( ( IDENT & IDENT ) == INT_CONST && ( IDENT > -v INT_CONST && IDENT < INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { INT IDENT = IDENT ; IDENT IDENT = IDENT ( IDENT ) ; WHILE ( --v IDENT >= INT_CONST ) { IDENT IDENT = IDENT ( IDENT , IDENT ( IDENT ) ) ; IDENT = IDENT ( IDENT , IDENT , IDENT ) ; } IDENT ( IDENT ) = IDENT ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT VOID IDENT ( STRUCT IDENT * IDENT , LONG IDENT ) { IDENT IDENT ; IDENT . IDENT = IDENT ; IDENT . IDENT = INT_CONST ; IDENT . IDENT = IDENT ; IDENT . IDENT = ( VOID *p ) IDENT ; IDENT ( IDENT , IDENT , IDENT , IDENT , &v IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT [ INT_CONST ] = IDENT [ IDENT ] ; IDENT [ INT_CONST ] = IDENT [ IDENT + INT_CONST ] ; IF ( IDENT ( IDENT , STRING , &v IDENT ) != INT_CONST ) RETURN -v INT_CONST ; ( ( STRUCT IDENT * ) IDENT ) -> IDENT . IDENT = IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT = IDENT ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! IDENT ( IDENT , ( IDENT ) ) ) RETURN INT_CONST ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , STRUCT IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) )
1  #DEFINE OBJ_MAC { STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING }
2  #DEFINE FUNC_MAC ( IDENT ) FLOAT_CONST * IDENT * ( DOUBLE ) IDENT * ( DOUBLE ) IDENT / ( DOUBLE ) IDENT
1  #DEFINE OBJ_MAC ( ( INT_CONST << ( IDENT - INT_CONST ) ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ( IDENT , IDENT ) ) == IDENT )
1  #DEFINE OBJ_MAC ( IDENT * IDENT * ( INT_CONST * SIZEOF ( IDENT ) + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) -> IDENT -> IDENT & IDENT ) >> INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( ( IDENT ) , IDENT + IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) -> IDENT != ( IDENT ) )
1  #DEFINE OBJ_MAC ( ( UNSIGNED CHAR ) IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT [ ( IDENT ) ] . IDENT -> IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ( IDENT ) & INT_CONST ) == INT_CONST )
2  #DEFINE OBJ_MAC IDENT ( CHAR_CONST , INT_CONST , SIZEOF ( IDENT * ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT -> IDENT [ IDENT & ~ ( ( IDENT -> IDENT & IDENT ) == INT_CONST ) ] = ( IDENT -> IDENT & IDENT ) || ! ( IDENT & INT_CONST ) ? IDENT -> IDENT [ IDENT & ~ INT_CONST ] >> INT_CONST << INT_CONST | ( IDENT ) ( IDENT ) ?: IDENT -> IDENT [ IDENT & ~ INT_CONST ] << INT_CONST >> INT_CONST | ( IDENT ) ( IDENT ) << INT_CONST )
1  #DEFINE OBJ_MAC ( INT_CONST + IDENT + INT_CONST + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) == IDENT ? IDENT ( IDENT , IDENT ) ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) ^ ( ( IDENT ) >> INT_CONST ) ^ ( ( IDENT ) >> INT_CONST ) ^ ( IDENT ) ) & IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) = ( IDENT ) ( INT_CONST * ( ( IDENT ) IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) CASE IDENT ( IDENT , IDENT , IDENT , CHAR_CONST ) : { IDENT ( STRING # IDENT STRING ) ; IDENT -> IDENT = IDENT ## IDENT ; }
3  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ! ( IDENT ) ) IDENT ( STRING , IDENT , IDENT , IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( VOID *p ) ( ( ( UNSIGNED LONG *p ) IDENT -> IDENT [ IDENT ] ) + ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT -> IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC ( ( UNSIGNED LONG ) & IDENT )
1  #DEFINE OBJ_MAC ( IDENT || IDENT ( &v IDENT , IDENT ) ) ; IDENT ( IDENT ( &v IDENT ) == INT_CONST ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & ( CHAR_CONST << INT_CONST ) ) == ( CHAR_CONST << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) + IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT ) ( ( STRUCT IDENT * ) IDENT -> IDENT )
2  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( IDENT [ INT_CONST ] ) - INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) IDENT ( ( UNSIGNED ) IDENT ) )
4  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) ( IDENT )
6  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( STRING IDENT STRING , ## IDENT ) ;
14  #DEFINE OBJ_MAC IDENT * INT_CONST
13  #DEFINE OBJ_MAC ( IDENT ) ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT >> INT_CONST ) & INT_CONST ) | ( ( IDENT << INT_CONST ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( UNSIGNED CHAR *p ) & IDENT ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , IDENT , IDENT , ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( &v IDENT -> IDENT , ( IDENT + INT_CONST ) ) ; IDENT ( &v IDENT -> IDENT , ( IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( *v IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( ( ( IDENT ) - INT_CONST ) * INT_CONST ) / INT_CONST , INT_CONST , INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( ( ( ( UNSIGNED LONG ) IDENT . IDENT ## IDENT << INT_CONST ) | ( UNSIGNED LONG ) IDENT . IDENT ## IDENT ) << INT_CONST ) | ( UNSIGNED LONG ) IDENT . IDENT ## IDENT ) << INT_CONST ) | ( UNSIGNED LONG ) IDENT . IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT * IDENT -> IDENT ) / INT_CONST )
23  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT IDENT STRING IDENT STRING , ## IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! ( IDENT ) ) IDENT ( IDENT , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( ! IDENT ( IDENT , ( VOID *p ) ( IDENT ) , ( IDENT ) ) ) GOTO IDENT ;
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( ( IDENT ) -> IDENT ) == ( IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( IDENT <= IDENT ) { IDENT IDENT ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT * ) & IDENT -> IDENT . IDENT ) [ IDENT ]
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , ( IDENT ) + INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT IDENT ( ( IDENT ) -> IDENT > INT_CONST ) ; IF ( --v ( IDENT ) -> IDENT == INT_CONST ) IDENT ( IDENT , IDENT ) ; IDENT
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( IDENT ) == INT_CONST ? -v INT_CONST ?: ( IDENT ) == INT_CONST ? INT_CONST ?: INT_CONST / ( ( ( IDENT ) - IDENT ) * ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT == CHAR_CONST || IDENT == CHAR_CONST || IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ! IDENT ( IDENT , IDENT | IDENT ) && ( IDENT ) -> IDENT -> IDENT [ ( IDENT ) - INT_CONST ] . IDENT . IDENT == IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT >= ( IDENT + INT_CONST ) ) IDENT ( IDENT IDENT STRING ) ;
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) = INT_CONST )
1  #DEFINE OBJ_MAC ( ( IDENT == IDENT ) ? INT_CONST ?: INT_CONST )
1  #DEFINE OBJ_MAC ( SIZEOF ( IDENT -> IDENT ) / SIZEOF ( IDENT -> IDENT [ INT_CONST ] ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) { REGISTER IDENT IDENT , IDENT , IDENT ; IDENT ( STRING
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , STRING , IDENT , IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( ( IDENT ) + ( IDENT ) )
1  #DEFINE FUNC_MAC ( ) DO { IDENT ( IDENT , STRING , INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT != IDENT ) { IDENT ( STRING , IDENT ) ; IDENT ( STRING , IDENT , IDENT ) ; IF ( IDENT ) IDENT ( IDENT , IDENT , STRING ) ; IDENT ( STRING ) ; }
4  #DEFINE OBJ_MAC ( IDENT + IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT < IDENT ) ? IDENT ?: IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT = ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST ) | ( IDENT << INT_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST + ( IDENT & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) FOR ( IDENT = IDENT -> IDENT [ IDENT ] ; IDENT ; IDENT = IDENT -> IDENT )
1  #DEFINE OBJ_MAC IF ( IDENT == INT_CONST ) { INT IDENT , IDENT ; INT ( *v IDENT ) ( ) ; IDENT = ( INT ( *v ) ( ) ) IDENT ( IDENT , IDENT ) ; IDENT = IDENT ( IDENT , IDENT , INT_CONST , INT_CONST , INT_CONST , INT_CONST , INT_CONST ) ; IDENT = IDENT ; IDENT ( IDENT , IDENT ) ; IF ( IDENT == INT_CONST ) IDENT = INT_CONST ; ELSE IDENT = INT_CONST ; }
1  #DEFINE OBJ_MAC FOR ( IDENT = IDENT - INT_CONST ; IDENT >= IDENT ; IDENT -= INT_CONST )
1  #DEFINE OBJ_MAC ( IDENT [ IDENT -> IDENT [ IDENT -> IDENT ] ] )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT ? IDENT ?: IDENT )
1  #DEFINE OBJ_MAC IDENT = ( IDENT ) IDENT -> IDENT ; IDENT = IDENT ( IDENT ) ; IDENT -> IDENT = ( IDENT ) IDENT ; IDENT -> IDENT = IDENT ; IDENT -> IDENT = ( IDENT ) IDENT ; IDENT -> IDENT = -v INT_CONST ; IDENT -> IDENT = IDENT ;
3  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( LONG ) ( --v ( IDENT ) ) & INT_CONST ) ( IDENT ) -= INT_CONST ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( UNSIGNED LONG ) ( ( IDENT ) & ( ( IDENT ) - INT_CONST ) ) )
2  #DEFINE FUNC_MAC ( ) IDENT ( IDENT , IDENT , IDENT , INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( *v ( IDENT ) == CHAR_CONST && *v ( ( IDENT ) + INT_CONST ) == CHAR_CONST )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT STRING IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( ) ( INT_CONST * ( IDENT - ( ( IDENT ( ) & INT_CONST ) % ( IDENT / INT_CONST ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT , IDENT )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( IDENT ) + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IF ( IDENT > ( IDENT ) ) IDENT ( IDENT ) ;
2  #DEFINE OBJ_MAC IDENT IDENT ( STRING STRING STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT ( IDENT , IDENT ) , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ( IDENT ) , ( IDENT ) ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT &= ~ INT_CONST ; SWITCH ( IDENT ) { CASE INT_CONST : IDENT |= INT_CONST ; BREAK ; CASE INT_CONST : IDENT |= INT_CONST ; BREAK ; CASE INT_CONST : IDENT |= INT_CONST ; BREAK ; CASE INT_CONST : IDENT |= INT_CONST ; BREAK ; DEFAULT : IDENT |= INT_CONST ; BREAK ; } }
1  #DEFINE OBJ_MAC ( ( ~ INT_CONST - INT_CONST ) / INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT ( IDENT ) + ( IDENT ) )
2  #DEFINE OBJ_MAC { IDENT IDENT IDENT }
3  #DEFINE OBJ_MAC SIZEOF ( IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT -> IDENT ( IDENT , IDENT , IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT , ( UNSIGNED LONG ) IDENT , INT_CONST }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( IDENT ) < IDENT && IDENT ( IDENT ) >= IDENT ( IDENT ) && IDENT ( IDENT ) <= IDENT ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) | ( IDENT ( IDENT ) << INT_CONST )
6  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT |= IDENT ( IDENT [ IDENT ] , &v IDENT -> IDENT [ IDENT ] ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT , IDENT ) IF ( IDENT ( IDENT ) == IDENT ( IDENT , IDENT , IDENT , IDENT ) ) { IDENT ( STRING # IDENT STRING ) ; IDENT ## IDENT = IDENT ## IDENT ; }
1  #DEFINE OBJ_MAC ( IDENT ( &v IDENT ) != INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT = IDENT ( IDENT ) , IDENT ( IDENT , &v IDENT , SIZEOF ( IDENT ) ) , IDENT += SIZEOF ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { FOR ( IDENT = INT_CONST ; ! ( IDENT ) ; --v IDENT ) { IF ( IDENT == INT_CONST ) { IDENT ( STRING IDENT STRING ) ; RETURN -v IDENT ; } IDENT ( INT_CONST ) ; } } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC LONG INT
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ## IDENT ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT = ( LONG ) IDENT , IDENT = ( IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( *v ( IDENT ) == *v ( IDENT ) && IDENT ( ( IDENT ) , ( IDENT ) ) == INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , STRING , IDENT ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT -> IDENT = IDENT ; IDENT -> IDENT = ( IDENT ) ; IDENT -> IDENT = IDENT ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC DO { CONST INT IDENT = IDENT ( IDENT ( IDENT , INT ) ) ; CHAR IDENT [ INT_CONST ] ; IDENT v++ ; *v IDENT = CHAR_CONST ; IDENT ( IDENT , STRING , IDENT ) ; IDENT ( IDENT , IDENT ) ; WHILE ( *v IDENT ) IDENT v++ ; } WHILE ( INT_CONST )
2  #DEFINE OBJ_MAC ( INT_CONST + ( INT_CONST * IDENT -> IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { VOLATILE INT IDENT ; IDENT = IDENT ( IDENT -> IDENT . IDENT ) ; IDENT |= ( IDENT ) ; IDENT ( IDENT , IDENT -> IDENT . IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) { FOR ( IDENT = INT_CONST ; IDENT < IDENT ; IDENT v++ ) IF ( IDENT [ IDENT ] ) IDENT ( IDENT [ IDENT ] ) ; IDENT ( IDENT ) ; } RETURN ( IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT -> IDENT += ( IDENT ) ; IF ( IDENT -> IDENT > IDENT -> IDENT ) IDENT -> IDENT = IDENT -> IDENT ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT . IDENT &= ~ IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { LONG IDENT ; IDENT IDENT ( STRING STRING STRING STRING STRING STRING : STRING ( IDENT ) : STRING ( IDENT ( IDENT ) ) , STRING ( IDENT ) , STRING ( INT_CONST ) ) ; IDENT ; } )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + IDENT ) & ( ~ IDENT ) )
123  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT , IDENT , IDENT , IDENT , INT_CONST , IDENT , INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( STRING IDENT STRING : : STRING ( IDENT ) )
2  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) * INT_CONST )
7  #DEFINE FUNC_MAC ( IDENT ) DO { WHILE ( IDENT [ *v IDENT ] ) IDENT v++ ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT == IDENT ) IDENT -> IDENT |= IDENT ; RETURN ( IDENT -> IDENT . IDENT = IDENT ) ; }
1  #DEFINE OBJ_MAC ( ( UNSIGNED ) INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( UNSIGNED LONG ) ( IDENT ) < INT_CONST ) IDENT ( IDENT # IDENT STRING , ( INT ) ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( INT ) ( ( IDENT ) . IDENT << INT_CONST ) | ( IDENT ) . IDENT ) * ( IDENT ) . IDENT * ( IDENT ) . IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( IDENT ) != IDENT ) && ( ( IDENT ) != IDENT ) && ( IDENT ( ( IDENT ) , ( IDENT ) ) == INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT = *v ( IDENT ) ; *v ( IDENT ) = ( IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT * , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( INT_CONST + ( IDENT ) / INT_CONST ) / ( IDENT ) ) - INT_CONST )
8  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( IDENT ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( ) ( IDENT -> IDENT < IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ... ) IDENT ( IDENT IDENT STRING IDENT STRING IDENT , ## IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( &v ( IDENT ) -> IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT ( IDENT , IDENT ) ; IDENT ( IDENT , IDENT ) ; IDENT = IDENT IDENT IDENT ; IDENT ( IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT STRING , IDENT ( IDENT -> IDENT ) , ( IDENT -> IDENT ) , IDENT , IDENT -> IDENT , INT_CONST , IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) | IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT -> IDENT != IDENT ) && ( IDENT -> IDENT != IDENT ) && ( IDENT -> IDENT != IDENT ) ? IDENT -> IDENT ?: IDENT -> IDENT )
1  #DEFINE OBJ_MAC ( ( IDENT ) ( ( UNSIGNED ) ( ~ INT_CONST ) >> INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) -> IDENT v++ , ( IDENT ) -> IDENT ( ( IDENT ) -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) - IDENT ) >> IDENT )
5  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( SIZEOF ( STRUCT IDENT ) ) + IDENT ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( IDENT ) ) ( ( ( UNSIGNED LONG ) ( IDENT ) + ( ( IDENT ) - INT_CONST ) ) & ~ ( ( IDENT ) - INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( ) DO { IDENT . IDENT = INT_CONST ; } WHILE ( INT_CONST )
3  #DEFINE OBJ_MAC IDENT = IDENT ; IDENT = ( INT ) ( IDENT - IDENT ) ; IDENT = *v IDENT ; *v IDENT = CHAR_CONST ; IDENT = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ( IDENT , IDENT ) < INT_CONST ) ? INT_CONST ?: IDENT ( IDENT , IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( ( IDENT ) ( ( IDENT ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) | ( ( IDENT ) << INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT [ IDENT ] ) = INT_CONST
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v ( IDENT ) -> IDENT , IDENT )
2  #DEFINE OBJ_MAC ( FLOAT_CONST / FLOAT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) { }
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT & INT_CONST ) ? ( IDENT + INT_CONST - ( IDENT & INT_CONST ) ) ?: ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT + IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( *v ( LONG *p ) ( IDENT [ ( IDENT ) ] + ( IDENT * ) IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT - IDENT ) * INT_CONST + IDENT - INT_CONST ) / IDENT
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) >> INT_CONST ) , IDENT ( ( IDENT ) + INT_CONST , ( IDENT ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT ) ; IF ( ! ( IDENT ) ) RETURN IDENT
5  #DEFINE FUNC_MAC ( IDENT ) IDENT [ ( IDENT ) ] . IDENT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT + INT_CONST ) >> INT_CONST ) << INT_CONST )
1  #DEFINE FUNC_MAC ( ) DO { INT IDENT = INT_CONST ; WHILE ( --v IDENT > INT_CONST ) { IDENT ( INT_CONST ) ; } } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( UNSIGNED CHAR *p ) ( IDENT ) ) [ INT_CONST ] = ( IDENT ) >> INT_CONST , ( ( UNSIGNED CHAR *p ) ( IDENT ) ) [ INT_CONST ] = ( IDENT ) & INT_CONST )
2  #DEFINE OBJ_MAC ( ( UNSIGNED CHAR *p ) IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( CHAR *p ) ( IDENT ) )
3  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT -> IDENT )
10  #DEFINE OBJ_MAC UNSIGNED INT
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT * ) ( ( ( CHAR *p ) ( ( IDENT ) -> IDENT . IDENT ) ) + IDENT [ IDENT ] ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) , ( IDENT ) , ( IDENT ) ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( UNSIGNED INT ) ( IDENT ) + IDENT + ( IDENT << INT_CONST ) ) / ( IDENT << INT_CONST ) ) << INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) + IDENT )
1  #DEFINE OBJ_MAC ( ( ( IDENT * SIZEOF ( IDENT ) ) + ( IDENT - INT_CONST ) ) / IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT [ IDENT ] . IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) | ( ( ( IDENT ) & INT_CONST ) << INT_CONST ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT [ IDENT ] . IDENT , IDENT [ IDENT ] . IDENT )
3  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( IDENT ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IF ( IDENT && IDENT ) IDENT ( IDENT , IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == INT_CONST ) || ( ( IDENT ) == INT_CONST ) || ( ( IDENT ) == INT_CONST ) || ( ( IDENT == INT_CONST ) ) || ( ( IDENT ) == INT_CONST ) )
19  #DEFINE OBJ_MAC IDENT ( &v IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT >= CHAR_CONST && IDENT <= CHAR_CONST ) ? IDENT - CHAR_CONST ?: ( ( IDENT >= CHAR_CONST && IDENT <= CHAR_CONST ) ? IDENT - CHAR_CONST + INT_CONST ?: ( ( IDENT >= CHAR_CONST && IDENT <= CHAR_CONST ) ? IDENT - CHAR_CONST + INT_CONST ?: INT_CONST ) ) )
4  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { INT IDENT = IDENT ; IF ( IDENT -> IDENT > ( INT ) IDENT - IDENT ) { INT IDENT = IDENT ; IDENT -> IDENT |= ( IDENT << IDENT -> IDENT ) ; IDENT ( IDENT , IDENT -> IDENT ) ; IDENT -> IDENT = ( IDENT ) IDENT >> ( IDENT - IDENT -> IDENT ) ; IDENT -> IDENT += IDENT - IDENT ; } ELSE { IDENT -> IDENT |= ( IDENT ) << IDENT -> IDENT ; IDENT -> IDENT += IDENT ; } }
12  #DEFINE OBJ_MAC ( IDENT & INT_CONST )
3  #DEFINE OBJ_MAC IDENT ( IDENT ) ;
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ( ( IDENT ) , ( IDENT ) ) )
2  #DEFINE OBJ_MAC IDENT ( IDENT , STRING STRING ) ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) RETURN IDENT ( IDENT / IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IF ( ( IDENT ) & ( INT_CONST << IDENT ( ) ) ) IDENT ( STRING , IDENT , IDENT , IDENT ( ) ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT ) IF ( ( IDENT ) == INT_CONST ) GOTO IDENT ;
17  #DEFINE FUNC_MAC ( IDENT ) ( ( ( STRUCT IDENT * ) IDENT [ ( IDENT ) ] -> IDENT ) -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + ( ( ( IDENT ) & IDENT ) << IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT IDENT ; IDENT ( &v IDENT , ( INT *p ) IDENT -> IDENT -> IDENT , INT_CONST ) ; IDENT += IDENT ( IDENT + IDENT , STRING , # IDENT , IDENT ) ; }
1  #DEFINE FUNC_MAC ( ) IDENT ( IDENT . IDENT )
1  #DEFINE OBJ_MAC STATIC STRUCT IDENT IDENT ( IDENT ) = { IDENT : IDENT , IDENT : IDENT ( IDENT ) , IDENT : IDENT ( IDENT ) , IDENT : IDENT ( IDENT ) , IDENT : IDENT ( IDENT ) , IDENT : IDENT ( IDENT ) , IDENT : IDENT ( IDENT ) , IDENT : IDENT ( IDENT ) , IDENT : IDENT ( IDENT ) , IDENT : IDENT , }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT ( IDENT ( ( IDENT ) ) ) ) { IDENT ( IDENT ( IDENT ) , ( IDENT ) , IDENT ( ( IDENT ) ) ) ; } ELSE { IDENT ( IDENT ( IDENT ) , ( IDENT ) , IDENT ( ( IDENT ) ) ) ; } }
10  #DEFINE OBJ_MAC ( IDENT = IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT = ( UNSIGNED ) IDENT [ IDENT ] [ IDENT ] ; IF ( IDENT ) { IF ( IDENT < INT_CONST ) RETURN IDENT ; IF ( ( ( IDENT * ) IDENT ) -> IDENT & IDENT ) RETURN IDENT ; } }
1  #DEFINE OBJ_MAC { IDENT ( IDENT , INT_CONST ) ; IDENT ( &v IDENT -> IDENT , IDENT ) ; IDENT ( IDENT ) ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ) == INT_CONST ? ( IDENT -> IDENT . IDENT . IDENT ) ?: ( IDENT -> IDENT . IDENT . IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) CASE IDENT ( STRUCT IDENT , IDENT . IDENT ) : *v IDENT = IDENT [ IDENT ( STRUCT IDENT , IDENT ) / INT_CONST ] ; BREAK
65  #DEFINE FUNC_MAC ( IDENT ) ( IDENT + INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT ( ( IDENT ) -> IDENT , ( IDENT ) , ( IDENT ) )
5  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT . IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IDENT ( IDENT , IDENT , IDENT ) ; IDENT &= INT_CONST ; }
1  #DEFINE OBJ_MAC DO { IDENT = &v IDENT [ IDENT ] ; IDENT = IDENT -> IDENT ; IDENT = IDENT -> IDENT + IDENT -> IDENT ; IDENT -> IDENT = IDENT ; IDENT ( IDENT , IDENT - IDENT ) ; IDENT = INT_CONST ; IDENT = IDENT -> IDENT ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) + ( SIZEOF ( LONG ) - INT_CONST ) ) & ~ ( SIZEOF ( LONG ) - INT_CONST ) )
5  #DEFINE OBJ_MAC ( SIZEOF ( IDENT ) / SIZEOF ( UNSIGNED SHORT ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( CHAR *p ) IDENT ( ( ( ( UNSIGNED LONG ) ( IDENT ) ) - IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( { LONG LONG IDENT ; IDENT = ( ( UNSIGNED LONG LONG ) IDENT ) % ( UNSIGNED ) IDENT ; IDENT = ( ( UNSIGNED LONG LONG ) IDENT ) / ( UNSIGNED ) IDENT ; IDENT ; } )
1  #DEFINE OBJ_MAC IDENT ( ( IDENT ( INT_CONST ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ) IDENT ( ( IDENT ) ( ( IDENT ) + IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( IDENT ) ( ( ( UNSIGNED LONG ) ( IDENT ) -> IDENT ) + ( IDENT ) -> IDENT [ IDENT ] )
2  #DEFINE FUNC_MAC ( IDENT ) { WHILE ( IDENT ( IDENT + IDENT ) & IDENT ) { } IDENT ( IDENT + IDENT , ( IDENT | IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) FOR ( ( IDENT ) = ( IDENT ) ; ( IDENT ) != IDENT ; ( IDENT ) = ( IDENT ) -> IDENT )
3  #DEFINE OBJ_MAC ( IDENT | ( INT_CONST << ( INT ) IDENT ) | ( INT_CONST << ( INT ) IDENT ) )
1  #DEFINE OBJ_MAC #ERROR = IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; #ERROR |= IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; IDENT &= INT_CONST ; IF ( #ERROR ) { IDENT ( IDENT STRING ) ; CONTINUE ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IF ( IDENT & IDENT ) IDENT
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ^= IDENT | IDENT ; IDENT ( IDENT , IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT ) || ( ( IDENT ) == IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT , INT_CONST , IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) EXTERN VOID IDENT ( VOID ) ; IDENT ( IDENT )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v ( IDENT ) -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT < INT_CONST ) ? INT_CONST + IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( ( ( IDENT ) & INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT = ( IDENT [ IDENT v++ ] << INT_CONST ) & INT_CONST ; IDENT |= ( IDENT [ IDENT v++ ] << INT_CONST ) & INT_CONST ; IDENT |= ( IDENT [ IDENT v++ ] << INT_CONST ) & INT_CONST ; IDENT |= IDENT [ IDENT v++ ] & INT_CONST ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( ( ( ( IDENT ) >> INT_CONST ) & INT_CONST ) | ( ( IDENT ) << INT_CONST ) )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { UNSIGNED LONG IDENT = ( IDENT ) ; IDENT -> IDENT = ( ( IDENT -> IDENT + IDENT ) / ( IDENT + INT_CONST ) ) * ( IDENT + INT_CONST ) + IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( ( IDENT ) -> IDENT == ( IDENT ) -> IDENT ) && ( ( IDENT ) -> IDENT == ( IDENT ) -> IDENT ) && ( ( IDENT ) -> IDENT == ( IDENT ) -> IDENT ) && ( ( IDENT ) -> IDENT == ( IDENT ) -> IDENT ) && ( ( IDENT ) -> IDENT == ( IDENT ) -> IDENT ) ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) DO { IF ( IDENT ) BREAK ; IDENT ( IDENT , IDENT , IDENT ( IDENT ) , IDENT ( IDENT ) ) ; } WHILE ( INT_CONST )
3  #DEFINE FUNC_MAC ( IDENT ) ( INT_CONST & ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT [ INT_CONST ] , IDENT [ INT_CONST ] , IDENT [ INT_CONST ] , IDENT [ INT_CONST ] )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( ( INT ) ( IDENT ) < ( INT ) ( IDENT ) ) ? IDENT ?: IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT ( IDENT ) -> IDENT = INT_CONST ; IDENT ; } WHILE ( INT_CONST )
1  #DEFINE FLOAT OBJ_MAC
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( IDENT > IDENT ) { IDENT IDENT ; } }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) { *v ( ( IDENT * ) IDENT ( IDENT ) ) = ( IDENT ) ( IDENT ) ; IDENT ( ) ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IF ( ( IDENT ) -> IDENT -> IDENT == INT_CONST ) RETURN -v INT_CONST ; *v ( VOLATILE IDENT * ) IDENT = ( ( IDENT -> IDENT -> IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT -> IDENT & INT_CONST ) << INT_CONST ) | ( IDENT & INT_CONST ) ; } WHILE ( INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( ( ( ( ( IDENT ) << INT_CONST ) + ( IDENT ) ) << INT_CONST ) + ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( &v IDENT [ IDENT ] . IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ... ) WHILE ( INT_CONST )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) ( IDENT ) ) -> IDENT . IDENT == IDENT )
4  #DEFINE FUNC_MAC ( IDENT ) ( ( *v IDENT [ ( IDENT ) -> #LINE ] . IDENT ) & IDENT [ ( IDENT ) -> #LINE ] . IDENT )
1  #DEFINE FUNC_MAC ( IDENT ) ( ( INT ) ( ( ( DOUBLE ) ( IDENT ( IDENT [ IDENT ] ) * IDENT [ IDENT ] * IDENT [ IDENT ] ) / ( IDENT [ IDENT ] - IDENT [ IDENT ] ) ) * INT_CONST ) )
1  #DEFINE OBJ_MAC IDENT ( &v IDENT -> IDENT , IDENT ) ; IDENT ( IDENT , &v IDENT ) ; IDENT ( &v IDENT -> IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT & INT_CONST ) << INT_CONST ) | ( ( IDENT & INT_CONST ) >> INT_CONST ) )
15  #DEFINE OBJ_MAC CHAR *p
1  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT - IDENT ( SIZEOF ( IDENT ) ) ) / ( ( IDENT ) * IDENT + IDENT ( SIZEOF ( IDENT ) ) ) )
1  #DEFINE FUNC_MAC ( IDENT ) { IF ( IDENT ) IDENT ( IDENT ) ; *v IDENT = IDENT ## IDENT ; RETURN ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( &v ( IDENT ) , IDENT )
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) IDENT ( IDENT , IDENT ( IDENT ) )
6  #DEFINE FUNC_MAC ( IDENT ) ( IDENT ( IDENT ## IDENT , &v IDENT -> IDENT ) )
1  #DEFINE FUNC_MAC ( ) IF ( IDENT ) IDENT ( IDENT ) ; IDENT ( ) -> IDENT = INT_CONST ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT = ( IDENT ) -> IDENT ; ( IDENT ) -> IDENT = IDENT ;
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) { IF ( ( IDENT ) & IDENT ) IDENT IDENT ; }
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) IDENT ( IDENT , IDENT , INT_CONST , INT_CONST , IDENT )
7  #DEFINE FUNC_MAC ( IDENT ) ( ( ( IDENT ) & INT_CONST ) == INT_CONST )
1  #DEFINE OBJ_MAC DO { IDENT ( IDENT ) ; IDENT ( IDENT ) ; IDENT ( IDENT ) ; } WHILE ( INT_CONST )
2  #DEFINE FUNC_MAC ( IDENT ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , INT_CONST ) IDENT ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) IDENT ( IDENT , IDENT ) IDENT ( IDENT , IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) { IDENT ## IDENT * IDENT = ( IDENT ## IDENT * ) & ( IDENT [ IDENT & ~ ( ( IDENT >> INT_CONST ) - INT_CONST ) ] ) ; IDENT ## IDENT * IDENT = ( IDENT ## IDENT * ) & IDENT [ IDENT ] ; IDENT ( IDENT , IDENT , IDENT ) ; IDENT = ( IDENT ## IDENT * ) & IDENT [ INT_CONST ] ; IDENT ( IDENT , IDENT , IDENT ) ; }
2  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( IDENT ) >> ( IDENT ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT , IDENT ) ( IDENT ) -> IDENT . IDENT = IDENT ; ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = ( IDENT ) ; ( IDENT ) -> IDENT = ( IDENT )
2  #DEFINE OBJ_MAC IF ( IDENT -> IDENT ) IDENT -> IDENT -> IDENT ( IDENT -> IDENT -> IDENT ) ;
1  #DEFINE FUNC_MAC ( IDENT ) { IDENT IDENT ; }
1  #DEFINE OBJ_MAC - ( IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) STATIC CHAR *p IDENT ( CHAR *p IDENT ) { STATIC CHAR *p IDENT = IDENT ; IF ( IDENT ) { RETURN IDENT ; } IDENT = IDENT ( IDENT ) ; IF ( IDENT ) { RETURN IDENT ; } RETURN IDENT ; }
3  #DEFINE FUNC_MAC ( IDENT ) ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( ( IDENT ) == INT_CONST ? INT_CONST ?: ( ( IDENT ) == INT_CONST ? INT_CONST ?: INT_CONST ) ) )
2  #DEFINE FUNC_MAC ( IDENT , IDENT , IDENT ) IDENT VOLATILE ( STRING # IDENT STRING # IDENT STRING # IDENT : : STRING ( IDENT ) )
1  #DEFINE FUNC_MAC ( IDENT ) DO { IDENT * IDENT ; IDENT * IDENT ; CHAR *p IDENT ; IDENT IDENT ; IDENT IDENT ; IDENT = ( IDENT -> IDENT -> IDENT ) . IDENT ; IDENT = ( IDENT * ) IDENT ( IDENT , IDENT , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( ! IDENT ) IDENT ( IDENT , STRING ) ; IDENT = IDENT -> IDENT ; IDENT = ( IDENT * ) IDENT ( IDENT , ( CHAR *p ) & IDENT , IDENT , &v IDENT ) ; IF ( IDENT == IDENT ) IDENT ( IDENT , STRING ) ; IF ( ! IDENT ) IDENT ( IDENT , STRING ) ; } WHILE ( INT_CONST )
1  #DEFINE OBJ_MAC IDENT ( STRING ) ;
5  #DEFINE OBJ_MAC IDENT = *v IDENT v++ + INT_CONST * IDENT
2  #DEFINE OBJ_MAC FOR ( IDENT = INT_CONST ; IDENT < INT_CONST ; IDENT v++ ) { IDENT [ IDENT v++ ] = IDENT ( IDENT ) ; IDENT ( IDENT / ( INT_CONST / IDENT ) ) ; }
1  #DEFINE FUNC_MAC ( IDENT ) ( IDENT [ ( ( UNSIGNED CHAR ) ( IDENT ) ) / IDENT ] |= INT_CONST << ( ( ( UNSIGNED CHAR ) IDENT ) % IDENT ) )
1  #DEFINE OBJ_MAC ( INT_CONST - INT_CONST * INT_CONST )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) ( ( UNSIGNED LONG ) ( IDENT ) + ( IDENT ) -> IDENT -> IDENT )
1  #DEFINE FUNC_MAC ( IDENT , IDENT ) DO { IDENT ( INT_CONST ) ; *v IDENT v++ = ( UNSIGNED CHAR ) ( IDENT ) ; *v IDENT v++ = ( UNSIGNED CHAR ) ( IDENT ) ; } WHILE ( INT_CONST )
