STATIC
CONST
CHAR
=
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
CHAR
;
}
;
STATIC
INT
=
;
INT
;
INT
;
INT
;
SIGNED
SHORT
;
INT
;
INT
;
UNSIGNED
CHAR
;
UNSIGNED
INT
;
UNSIGNED
INT
;
UNSIGNED
CHAR
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
=
;
INT
;
INT
;
STATIC
VOID
(
CHAR
)
{
(
,
,
)
;
(
)
;
}
INT
(
VOID
)
{
REGISTER
INT
;
REGISTER
INT
;
REGISTER
UNSIGNED
INT
;
SIGNED
SHORT
;
SIGNED
SHORT
;
SIGNED
SHORT
;
INT
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
=
;
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
;
;
}
RETURN
;
}
VOID
(
INT
,
CHAR
)
{
INT
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
=
(
)
;
IF
(
)
=
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
;
}
}
=
;
=
;
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
{
(
,
)
;
(
)
;
}
(
)
;
IF
(
)
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
}
ELSE
{
=
;
=
(
)
(
)
;
}
}
}
STATIC
STRUCT
=
{
,
}
;
STATIC
STRUCT
;
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
STATIC
UNSIGNED
SHORT
=
;
INT
;
INT
=
;
INT
=
;
INT
=
;
INT
;
INT
;
INT
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
BREAK
;
}
}
}
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
}
IF
(
)
=
;
ELSE
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
IF
(
)
=
;
=
=
;
=
;
=
;
=
;
;
=
(
)
(
)
;
=
;
=
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
INT
)
{
STATIC
UNSIGNED
CHAR
=
{
,
,
,
,
}
;
STATIC
CHAR
=
;
IF
(
)
{
(
,
,
)
;
}
ELSE
{
=
;
;
=
(
)
;
;
=
(
)
;
;
=
;
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
=
;
FOR
(
=
;
(
)
(
UNSIGNED
CHAR
)
;
)
{
=
;
}
(
,
)
;
FOR
(
=
;
;
)
=
(
,
(
)
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
;
;
INT
(
INT
,
CHAR
)
{
INT
=
;
INT
;
INT
;
INT
;
INT
=
;
UNSIGNED
CHAR
;
STRUCT
=
{
,
}
;
INT
;
INT
;
INT
;
INT
;
INT
=
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
,
)
;
WHILE
(
)
{
;
IF
(
)
{
DO
{
=
;
=
(
,
,
,
,
)
;
IF
(
)
{
=
(
,
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
(
,
,
)
;
SWITCH
(
)
{
CASE
(
,
,
)
;
IF
(
)
{
=
;
(
,
,
)
;
}
;
;
;
;
;
;
;
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
,
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
{
INT
;
(
,
,
)
;
=
;
=
(
(
CHAR
)
,
,
)
;
;
;
=
(
)
;
(
,
,
)
;
(
)
;
}
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
}
}
ELSE
IF
(
)
{
(
)
;
}
}
WHILE
(
)
;
}
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
;
IF
(
)
=
;
}
}
(
)
;
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
;
VOID
(
INT
,
INT
,
INT
)
{
INT
;
EXTERN
INT
;
=
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
}
VOID
(
INT
,
INT
)
{
INT
;
=
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
,
INT
)
{
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
CHAR
;
}
;
;
INT
;
VOID
;
(
)
(
)
(
)
(
)
(
)
(
(
LONG
)
(
(
UNSIGNED
LONG
)
(
)
)
)
(
)
(
(
SHORT
)
(
(
UNSIGNED
SHORT
)
(
)
)
)
UNSIGNED
LONG
(
UNSIGNED
LONG
)
{
RETURN
(
)
(
(
)
)
(
(
)
)
(
)
;
}
UNSIGNED
SHORT
(
UNSIGNED
SHORT
)
{
RETURN
(
)
(
)
;
}
STATIC
VOID
(
CHAR
)
{
(
,
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
WHILE
(
)
=
(
)
;
}
INT
(
INT
)
{
STRUCT
;
IF
(
(
,
)
)
(
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
;
;
=
(
,
)
;
IF
(
)
(
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
(
)
;
=
(
)
(
(
CHAR
)
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
;
=
(
)
;
=
(
)
;
}
}
VOID
(
CHAR
,
INT
)
{
INT
;
VOID
;
FOR
(
=
;
;
)
{
IF
(
(
,
,
)
)
BREAK
;
}
IF
(
)
{
=
;
}
ELSE
{
=
(
VOID
)
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
}
RETURN
;
}
VOID
(
CHAR
,
INT
)
{
UNSIGNED
CHAR
;
UNSIGNED
CHAR
;
INT
;
INT
;
INT
;
CHAR
;
(
,
,
)
;
=
(
UNSIGNED
CHAR
)
(
,
)
;
=
(
(
(
)
)
)
;
=
(
UNSIGNED
CHAR
)
(
,
)
;
FOR
(
=
;
;
)
=
;
=
;
RETURN
(
VOID
)
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
ENUM
{
,
}
;
=
{
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
=
{
{
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
}
;
__E__O__F__
TYPEDEF
STRUCT
{
;
INT
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
;
INT
;
INT
;
INT
;
INT
;
}
;
;
VOID
(
CHAR
,
,
,
INT
,
INT
)
{
;
;
INT
,
;
INT
;
INT
,
;
,
;
=
;
=
(
,
(
VOID
)
)
;
IF
(
)
RETURN
;
=
(
)
;
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
(
)
(
)
)
;
=
;
=
;
IF
(
)
{
=
(
)
;
(
,
(
)
,
)
;
}
IF
(
)
=
;
IF
(
)
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
{
=
;
=
;
}
ELSE
=
;
WHILE
(
)
=
;
}
}
IF
(
(
)
)
{
(
,
)
;
(
)
;
=
;
}
(
)
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
=
;
(
)
;
}
}
VOID
(
VOID
)
{
(
,
)
;
(
,
(
,
)
)
;
}
INT
(
INT
)
{
INT
;
INT
,
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
,
;
;
INT
;
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
(
)
,
)
;
FOR
(
=
;
;
)
=
;
=
;
=
;
WHILE
(
)
{
=
(
)
;
=
(
)
;
IF
(
)
BREAK
;
=
(
)
;
IF
(
)
BREAK
;
=
;
;
}
=
;
}
}
(
)
{
;
;
INT
;
INT
;
;
INT
;
INT
,
;
=
(
)
(
)
(
)
;
=
;
=
=
(
)
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
BREAK
;
=
;
}
=
(
)
;
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
BREAK
;
=
;
}
=
(
)
;
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
BREAK
;
=
;
}
=
(
)
;
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
BREAK
;
=
;
}
=
(
)
;
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
BREAK
;
=
;
}
=
(
)
;
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
BREAK
;
=
;
}
=
(
)
;
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
BREAK
;
=
;
}
=
(
)
;
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
BREAK
;
=
;
}
=
(
)
;
;
}
IF
(
)
{
(
,
(
)
)
;
}
=
;
RETURN
;
}
(
VOID
)
{
INT
;
INT
;
;
;
INT
;
;
,
;
INT
,
,
;
=
(
,
,
,
)
;
IF
(
)
=
(
,
,
,
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
(
)
,
)
;
=
;
}
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
(
,
)
;
(
,
,
)
;
=
;
=
(
)
;
=
;
(
,
,
)
;
(
,
,
,
,
)
;
=
;
=
;
=
(
)
;
=
;
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
,
)
;
=
;
}
IF
(
)
(
)
;
=
;
=
;
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
=
;
(
)
;
=
;
RETURN
;
}
}
(
VOID
)
{
IF
(
)
{
RETURN
;
}
IF
(
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
,
;
;
CHAR
,
;
INT
;
(
)
;
=
;
=
(
,
)
;
IF
(
(
,
)
)
{
(
,
(
)
,
,
)
;
(
,
,
,
,
)
;
=
;
=
;
(
)
;
=
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
{
(
,
,
(
)
)
;
(
)
;
}
RETURN
;
}
(
,
(
)
,
,
)
;
(
,
)
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
(
)
;
=
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
)
;
=
(
)
;
IF
(
)
{
=
;
(
,
)
;
(
)
;
(
,
)
;
}
=
;
=
(
)
;
=
(
)
;
}
__E__O__F__
EXTERN
STRUCT
;
INT
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
;
;
;
;
}
;
;
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
;
;
;
INT
=
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
(
(
(
)
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
(
(
)
)
)
)
;
(
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
(
(
(
)
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
(
(
)
)
)
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
(
,
)
;
=
;
BREAK
;
}
}
ELSE
=
;
}
IF
(
)
{
IF
(
)
{
=
;
}
}
}
}
VOID
(
VOID
)
{
INT
,
;
;
;
(
,
,
(
)
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
CONTINUE
;
}
=
;
FOR
(
=
;
;
)
{
=
=
(
)
;
}
IF
(
)
(
,
)
;
(
,
,
,
,
)
;
(
,
)
;
(
)
;
}
}
INT
;
INT
(
UNSIGNED
)
{
UNSIGNED
,
;
INT
;
INT
;
=
(
)
;
IF
(
)
{
=
(
)
;
;
}
IF
(
)
{
=
(
)
;
;
}
IF
(
)
{
=
(
)
;
;
}
FOR
(
=
;
;
)
IF
(
(
)
)
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
=
;
RETURN
;
}
VOID
(
,
,
INT
,
INT
)
{
=
;
(
,
)
;
=
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
IF
(
(
(
)
)
(
)
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
IF
(
(
(
)
)
(
)
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
}
VOID
(
,
INT
,
,
INT
)
{
;
;
=
;
=
(
)
;
;
;
(
,
,
,
)
;
IF
(
(
)
(
)
(
)
)
{
=
;
}
IF
(
)
{
=
;
=
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
}
ELSE
{
=
;
}
=
;
=
;
}
VOID
(
,
)
{
INT
;
INT
;
;
INT
,
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
{
IF
(
)
=
;
ELSE
{
=
(
)
(
)
;
=
;
}
}
WHILE
(
)
{
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
)
;
IF
(
)
BREAK
;
WHILE
(
)
{
IF
(
)
(
,
)
;
(
,
,
,
)
;
;
IF
(
)
=
;
ELSE
{
=
(
)
(
)
;
=
;
}
}
IF
(
)
{
IF
(
)
(
,
)
;
IF
(
)
(
)
;
;
IF
(
)
=
;
ELSE
{
=
(
)
(
)
;
=
;
}
CONTINUE
;
}
IF
(
)
{
IF
(
)
(
,
)
;
(
,
,
,
)
;
;
IF
(
)
=
;
ELSE
{
=
(
)
(
)
;
=
;
}
CONTINUE
;
}
IF
(
)
{
IF
(
)
(
,
)
;
(
,
,
,
)
;
CONTINUE
;
}
}
WHILE
(
)
{
IF
(
)
(
,
)
;
(
,
,
,
)
;
;
IF
(
)
=
;
ELSE
{
=
(
)
(
)
;
=
;
}
}
}
VOID
(
,
)
{
INT
;
;
INT
;
INT
;
=
;
IF
(
)
=
;
ELSE
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
=
(
)
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
=
(
)
;
}
VOID
(
)
{
;
INT
,
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
;
(
,
,
(
)
)
;
(
)
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
IF
(
)
{
(
)
;
}
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
=
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
IF
(
)
(
)
;
=
;
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
(
,
)
;
IF
(
)
(
)
;
}
=
;
(
)
;
(
)
;
}
}
STRUCT
(
,
CHAR
)
{
INT
;
CHAR
;
STRUCT
;
CHAR
;
CHAR
;
=
;
=
;
IF
(
)
{
=
(
,
)
;
IF
(
)
{
;
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
}
}
IF
(
)
(
,
)
;
(
,
(
)
,
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
(
)
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
(
)
,
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
(
)
,
)
;
=
(
)
;
}
}
}
RETURN
;
}
VOID
(
)
{
;
;
FLOAT
;
INT
;
INT
;
;
INT
;
;
UNSIGNED
INT
,
;
=
(
)
;
=
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
;
;
}
IF
(
)
{
;
;
;
}
IF
(
)
{
;
;
;
}
IF
(
)
{
;
;
;
}
=
;
=
;
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
=
(
)
;
}
}
IF
(
)
{
=
;
=
(
(
(
(
)
)
)
)
;
=
;
}
ELSE
{
IF
(
)
{
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
IF
(
(
(
CHAR
)
,
,
)
)
{
=
(
)
;
=
(
)
;
}
ELSE
IF
(
(
(
CHAR
)
,
,
)
)
{
=
(
)
;
=
(
)
;
}
ELSE
IF
(
(
(
CHAR
)
,
,
)
)
{
=
(
)
;
=
(
)
;
}
}
}
ELSE
{
=
;
=
;
=
;
}
}
IF
(
)
=
;
IF
(
(
)
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
(
)
;
=
;
{
;
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
}
}
ELSE
{
FLOAT
,
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
,
,
)
;
}
}
IF
(
)
{
;
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
CONTINUE
;
}
IF
(
)
CONTINUE
;
IF
(
)
{
;
=
;
}
IF
(
)
{
;
=
;
}
IF
(
)
{
;
IF
(
)
=
;
ELSE
=
;
}
(
)
;
IF
(
)
{
=
;
=
;
(
)
;
}
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
{
=
;
=
(
)
;
IF
(
)
=
;
=
;
IF
(
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
ELSE
IF
(
)
{
=
;
=
;
=
;
}
ELSE
=
;
(
)
;
=
;
=
;
}
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
=
;
=
;
(
)
;
=
;
(
)
;
}
IF
(
(
)
)
{
IF
(
)
{
(
,
,
)
;
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
(
,
)
;
(
,
,
,
,
)
;
}
ELSE
{
(
,
)
;
(
,
,
,
,
)
;
}
}
ELSE
IF
(
)
{
IF
(
)
(
,
,
,
,
)
;
ELSE
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
STATIC
INT
=
{
,
,
,
,
,
}
;
IF
(
)
{
(
)
;
=
;
}
ELSE
{
=
;
}
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
;
(
)
;
=
(
(
)
)
;
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
FLOAT
;
=
(
(
(
)
)
)
;
IF
(
)
(
,
,
,
,
)
;
ELSE
(
,
,
,
,
)
;
}
ELSE
{
(
)
;
(
,
,
,
,
)
;
}
}
ELSE
IF
(
)
{
(
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
ELSE
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
(
,
)
;
}
(
,
,
,
,
)
;
}
}
(
,
)
;
}
}
VOID
(
,
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
IF
(
)
=
;
ELSE
=
;
}
=
;
=
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
,
;
;
;
,
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
=
;
IF
(
(
)
(
)
(
)
)
=
;
=
;
=
;
IF
(
(
)
(
)
)
{
UNSIGNED
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
}
=
;
IF
(
)
(
)
;
}
ELSE
{
FOR
(
=
;
;
)
=
(
(
)
)
;
}
IF
(
)
{
FOR
(
=
;
;
)
=
;
}
ELSE
{
FOR
(
=
;
;
)
=
(
,
,
)
;
}
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
=
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
(
,
)
;
=
;
=
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
)
;
=
;
=
;
}
ELSE
=
(
)
;
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
,
)
{
;
IF
(
)
(
,
)
;
=
;
(
,
)
;
}
__E__O__F__
VOID
(
,
INT
)
;
VOID
(
)
;
STATIC
;
EXTERN
STRUCT
;
EXTERN
STRUCT
;
TYPEDEF
STRUCT
{
INT
;
FLOAT
;
FLOAT
;
}
;
;
INT
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
INT
;
;
=
;
IF
(
)
RETURN
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
=
=
;
CONTINUE
;
}
IF
(
)
=
=
=
;
ELSE
=
=
=
;
}
}
VOID
(
INT
)
{
CHAR
;
INT
,
;
=
;
=
(
)
;
IF
(
)
(
,
,
)
;
=
;
FOR
(
=
;
;
)
=
(
FLOAT
)
(
)
(
FLOAT
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
(
,
,
,
)
;
}
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
(
INT
)
{
INT
;
;
IF
(
)
{
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
}
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
}
=
;
(
,
,
(
)
)
;
=
;
RETURN
;
}
VOID
(
INT
,
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
RETURN
;
}
;
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
,
;
;
INT
,
;
;
INT
;
FLOAT
;
CHAR
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
;
;
=
;
=
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
=
(
(
)
)
;
ELSE
=
(
(
)
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
SWITCH
(
)
{
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
(
)
,
,
(
(
)
)
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
(
(
)
)
;
=
;
=
;
=
;
(
,
(
)
,
,
(
(
)
)
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
(
(
)
)
;
=
;
=
;
=
;
=
;
(
,
(
)
,
,
(
(
)
)
)
;
(
,
,
,
(
)
,
,
,
)
;
(
,
(
)
,
,
(
(
)
)
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
(
(
)
)
;
=
;
=
;
=
;
=
;
(
,
(
)
,
,
(
(
)
)
)
;
(
,
,
,
(
)
,
,
,
)
;
(
,
(
)
,
,
(
(
)
)
)
;
(
,
,
,
(
)
,
,
,
)
;
(
,
(
)
,
,
(
(
)
)
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
(
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
(
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
(
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
}
}
VOID
(
VOID
)
{
INT
;
;
INT
;
;
,
;
CHAR
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
(
)
;
(
,
)
;
=
(
(
)
)
;
=
;
=
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
(
)
,
,
(
)
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
(
(
)
)
;
=
;
=
;
=
;
=
;
BREAK
;
}
}
VOID
(
VOID
)
{
INT
;
;
=
;
IF
(
)
{
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
,
,
)
;
}
}
ELSE
{
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
(
)
)
{
=
(
)
;
=
;
=
;
=
;
}
(
,
,
,
,
)
;
}
}
}
,
;
;
INT
=
;
VOID
(
VOID
)
{
INT
;
=
;
=
;
FOR
(
=
;
;
)
=
;
=
;
}
VOID
(
,
,
INT
,
INT
)
{
INT
,
;
;
FLOAT
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
,
,
INT
,
INT
)
{
INT
,
;
;
FLOAT
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
,
,
INT
,
INT
)
{
INT
,
;
;
FLOAT
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
)
;
}
=
(
(
)
)
;
=
(
(
)
)
;
=
=
;
=
;
=
;
=
;
}
}
VOID
(
,
INT
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
(
(
)
)
;
ELSE
IF
(
)
=
(
(
)
)
;
ELSE
=
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
)
{
INT
;
;
FLOAT
,
;
STATIC
INT
=
{
,
,
,
}
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
(
(
(
)
)
)
;
=
(
)
;
=
(
)
;
=
(
)
(
(
(
)
)
)
;
=
(
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
,
)
{
INT
,
;
;
FLOAT
;
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
;
;
INT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
(
,
,
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
;
;
INT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
(
,
,
)
;
}
}
VOID
(
,
,
FLOAT
)
{
;
;
FLOAT
;
INT
;
;
INT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
(
,
,
)
;
}
}
VOID
(
,
,
,
INT
)
{
;
;
FLOAT
;
INT
;
;
FLOAT
;
FLOAT
;
FLOAT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
WHILE
(
)
{
;
IF
(
)
RETURN
;
IF
(
(
(
)
)
)
{
=
;
=
;
=
;
=
;
(
)
;
=
;
IF
(
)
{
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
;
}
ELSE
IF
(
)
{
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
;
}
ELSE
{
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
;
}
}
;
IF
(
)
=
;
(
,
,
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
=
;
=
;
=
;
=
(
,
)
;
(
,
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
,
,
)
{
;
;
FLOAT
;
INT
;
;
FLOAT
;
(
,
,
,
)
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
IF
(
(
(
)
)
)
{
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
;
}
(
,
,
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
;
;
FLOAT
;
,
;
INT
;
FLOAT
,
,
;
;
=
;
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
(
)
;
=
(
)
;
(
,
,
)
;
(
,
,
,
)
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
,
,
)
;
}
=
;
(
,
,
)
;
(
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
(
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
(
,
,
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
;
;
INT
;
INT
=
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
(
,
,
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
,
;
;
FLOAT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
;
(
,
,
)
;
}
}
VOID
(
,
INT
)
{
INT
;
;
FLOAT
;
FLOAT
,
,
,
,
,
;
;
FLOAT
=
;
FLOAT
;
IF
(
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
(
(
)
)
;
}
=
(
FLOAT
)
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
}
}
VOID
(
,
)
{
INT
;
INT
;
INT
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
=
;
IF
(
)
=
;
ELSE
{
=
;
IF
(
)
=
;
ELSE
=
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
;
FLOAT
;
FLOAT
,
,
,
,
,
;
;
FLOAT
=
;
;
FLOAT
;
IF
(
)
{
FOR
(
=
;
;
)
=
(
(
)
)
;
}
=
(
FLOAT
)
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
(
)
;
(
)
;
(
,
,
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
}
}
VOID
(
)
{
;
;
,
;
FLOAT
;
INT
;
;
INT
;
;
(
,
)
;
(
,
)
;
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
=
;
(
,
,
)
;
}
{
INT
,
,
;
;
FLOAT
;
;
;
;
(
,
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
(
(
(
)
)
)
;
=
(
(
(
)
)
(
)
)
;
=
(
(
(
)
)
(
)
)
;
=
(
(
(
)
)
(
)
)
;
=
;
=
;
=
;
(
)
;
=
(
)
;
(
,
,
)
;
=
=
;
=
;
}
}
}
VOID
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
)
{
INT
,
,
;
;
FLOAT
;
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
(
(
(
)
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
;
(
)
;
=
(
(
)
)
;
(
,
,
)
;
=
=
;
=
;
}
}
VOID
(
VOID
)
{
,
;
FLOAT
;
FLOAT
,
;
;
INT
;
,
;
=
;
=
;
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
CONTINUE
;
}
}
ELSE
{
=
;
}
=
;
IF
(
)
=
=
;
ELSE
{
=
;
=
;
}
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
EXTERN
STRUCT
;
VOID
(
)
{
SWITCH
(
)
{
CASE
(
,
,
,
(
)
,
,
,
)
;
(
)
;
BREAK
;
CASE
(
,
,
,
(
)
,
,
,
)
;
(
)
;
BREAK
;
CASE
IF
(
)
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
__E__O__F__
;
EXTERN
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
;
,
,
,
;
,
,
,
;
,
,
,
;
,
;
INT
;
VOID
(
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
;
}
VOID
(
)
{
INT
;
CHAR
;
UNSIGNED
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
{
=
=
;
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
(
)
;
=
(
)
;
IF
(
)
;
ELSE
;
;
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
=
(
(
)
)
;
}
FLOAT
(
)
{
FLOAT
;
INT
;
;
=
;
=
;
IF
(
)
{
;
=
;
}
IF
(
)
{
(
,
)
;
}
=
(
FLOAT
)
;
IF
(
)
=
;
IF
(
)
=
;
RETURN
;
}
;
;
;
;
;
;
;
VOID
(
VOID
)
{
FLOAT
;
FLOAT
,
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
{
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
}
=
(
)
;
=
(
)
;
;
;
}
VOID
(
)
{
(
)
;
(
,
,
(
)
)
;
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
}
IF
(
(
)
(
INT
)
(
)
)
{
;
;
;
}
}
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
IF
(
)
;
IF
(
)
=
;
IF
(
)
=
;
}
VOID
(
)
{
INT
;
INT
;
IF
(
)
;
;
IF
(
)
;
;
IF
(
)
;
=
;
IF
(
)
=
;
=
;
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
;
=
;
=
(
)
;
}
(
VOID
)
{
;
=
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
=
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
,
,
)
;
}
VOID
(
VOID
)
{
;
;
INT
;
,
;
;
INT
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
)
;
=
;
(
,
)
;
(
,
(
)
)
;
}
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
}
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
(
)
(
)
;
=
;
(
,
,
(
)
)
;
(
,
,
)
;
=
;
=
(
)
(
)
;
=
;
(
,
,
)
;
=
;
=
(
)
(
)
;
=
;
(
,
,
)
;
=
(
,
,
)
;
(
,
,
)
;
}
__E__O__F__
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
CHAR
)
{
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
,
;
INT
;
CHAR
;
INT
,
;
CHAR
;
CHAR
;
INT
;
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
{
=
;
;
}
}
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
)
;
;
;
(
,
,
)
;
(
,
,
)
;
;
FOR
(
=
;
;
)
{
=
;
(
,
(
)
,
,
)
;
=
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
=
(
)
;
BREAK
;
}
(
,
(
)
,
,
,
,
)
;
IF
(
)
(
)
;
ELSE
{
IF
(
(
INT
)
(
)
)
(
,
,
)
;
}
(
,
,
)
;
;
}
}
__E__O__F__
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
VOID
(
VOID
)
{
INT
,
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
,
,
)
;
(
)
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
;
INT
;
INT
;
;
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
,
(
)
,
,
(
)
,
(
)
)
;
(
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
}
(
,
)
;
(
,
)
;
(
,
)
;
}
}
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
}
(
,
)
;
(
,
,
,
,
)
;
}
(
,
)
;
(
,
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
IF
(
(
)
)
{
(
,
)
;
(
,
(
)
)
;
}
}
VOID
(
VOID
)
{
INT
=
(
)
;
IF
(
)
{
CHAR
;
INT
;
(
,
(
)
)
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
(
,
)
;
}
(
)
;
}
ELSE
IF
(
)
{
CHAR
=
(
(
)
)
;
IF
(
)
{
(
,
(
)
,
)
;
}
ELSE
{
(
,
(
)
,
)
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
(
,
(
)
)
;
}
}
VOID
(
VOID
)
{
IF
(
(
)
(
)
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
(
,
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
=
(
)
;
=
(
)
;
=
;
(
,
,
,
,
,
,
(
)
)
;
}
VOID
(
VOID
)
{
;
IF
(
(
)
)
{
=
;
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
=
(
)
;
=
;
(
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
(
,
)
,
)
;
}
ELSE
{
(
)
;
}
=
(
)
;
(
)
;
(
)
;
=
;
(
,
,
(
)
)
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
CHAR
)
;
=
(
CHAR
)
;
=
(
CHAR
)
;
=
(
CHAR
)
;
=
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
{
(
,
(
)
)
;
(
,
)
;
}
IF
(
)
=
;
ELSE
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
IF
(
)
=
(
)
;
}
(
,
(
)
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
INT
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
}
(
)
;
(
)
;
(
)
;
=
;
(
)
;
IF
(
)
(
)
;
=
;
(
(
CHAR
)
,
)
;
(
,
(
)
,
)
;
(
,
(
)
,
)
;
(
,
(
)
,
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
}
=
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
,
;
CHAR
,
;
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
IF
(
(
(
)
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
=
(
)
;
=
(
)
;
=
;
=
=
=
=
(
CHAR
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
;
}
ELSE
=
;
}
=
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
(
)
;
=
;
(
,
)
;
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
ELSE
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
CHAR
;
CHAR
;
;
;
(
)
;
(
)
;
=
(
,
,
)
;
IF
(
)
{
=
;
=
(
)
;
(
,
,
(
,
)
)
;
}
=
(
,
,
)
;
IF
(
)
{
=
;
=
(
)
;
(
,
,
(
,
)
)
;
}
FOR
(
=
;
;
)
{
(
,
(
)
,
,
)
;
=
(
)
;
IF
(
)
CONTINUE
;
(
,
)
;
IF
(
(
,
)
)
{
(
,
)
;
CONTINUE
;
}
IF
(
)
=
(
)
;
(
,
,
(
,
)
)
;
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
(
)
;
(
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
(
)
,
)
;
IF
(
(
,
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
,
)
;
(
,
)
;
(
,
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
(
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
(
)
)
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
,
,
(
)
)
;
RETURN
;
}
(
)
;
}
VOID
(
VOID
)
{
WHILE
(
(
,
,
)
)
{
(
)
;
}
}
VOID
(
VOID
)
{
WHILE
(
(
,
,
)
)
{
IF
(
(
INT
)
)
{
(
)
;
CONTINUE
;
}
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
(
)
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
(
,
(
)
)
;
CONTINUE
;
}
IF
(
(
,
)
)
CONTINUE
;
(
)
;
}
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
ELSE
=
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
IF
(
)
{
IF
(
)
{
=
;
RETURN
;
}
(
,
,
(
)
)
;
IF
(
(
=
(
,
)
)
)
=
;
IF
(
(
,
)
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
(
,
)
)
(
,
)
;
ELSE
(
,
)
;
=
;
}
}
VOID
(
VOID
)
{
(
)
;
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
INT
;
INT
;
INT
;
INT
;
;
(
)
(
)
STATIC
CONST
CHAR
=
{
,
,
,
,
,
}
;
VOID
(
VOID
)
{
UNSIGNED
;
CHAR
;
;
IF
(
)
RETURN
;
IF
(
)
=
;
IF
(
)
{
=
;
IF
(
)
IF
(
(
)
)
RETURN
;
}
IF
(
)
{
IF
(
)
{
WHILE
(
)
{
IF
(
)
{
;
CONTINUE
;
}
IF
(
)
{
IF
(
(
)
)
{
=
;
RETURN
;
}
=
;
}
IF
(
)
{
(
,
(
VOID
)
)
;
IF
(
)
{
=
;
;
CONTINUE
;
}
IF
(
(
(
UNSIGNED
)
)
)
{
(
)
;
=
;
=
;
;
CONTINUE
;
}
=
(
)
;
IF
(
(
)
)
{
;
=
;
CONTINUE
;
}
}
=
(
)
;
WHILE
(
(
)
)
{
IF
(
(
(
CHAR
)
(
)
(
)
)
)
{
;
RETURN
;
}
;
}
IF
(
)
{
(
)
;
=
;
}
=
;
;
}
}
=
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
;
WHILE
(
)
{
IF
(
)
{
;
CONTINUE
;
}
(
,
(
)
,
,
)
;
IF
(
(
)
)
RETURN
;
}
}
=
;
}
IF
(
)
{
IF
(
)
;
WHILE
(
)
{
(
,
(
)
,
,
)
;
IF
(
(
)
)
RETURN
;
}
=
;
}
IF
(
)
{
IF
(
)
{
WHILE
(
)
{
INT
,
;
CHAR
,
,
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
(
)
;
CONTINUE
;
}
IF
(
(
=
(
,
)
)
)
;
ELSE
=
;
(
,
)
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
ELSE
=
;
SWITCH
(
)
{
CASE
(
,
(
)
,
,
)
;
IF
(
(
)
)
{
=
;
RETURN
;
}
;
CASE
(
,
(
)
,
,
)
;
IF
(
(
)
)
{
=
;
RETURN
;
}
;
CASE
(
,
(
)
,
,
)
;
IF
(
(
)
)
{
=
;
RETURN
;
}
;
CASE
(
,
(
)
,
,
,
)
;
IF
(
(
)
)
{
=
;
RETURN
;
}
;
CASE
(
,
(
)
,
,
,
)
;
IF
(
(
)
)
{
=
;
RETURN
;
}
=
(
)
;
}
}
}
=
;
}
IF
(
)
{
=
;
(
,
,
)
;
IF
(
(
)
)
{
(
,
,
,
)
;
RETURN
;
}
}
IF
(
)
{
IF
(
)
{
WHILE
(
)
{
INT
=
;
IF
(
)
(
,
(
)
,
,
,
)
;
ELSE
(
,
(
)
,
,
,
)
;
IF
(
(
)
)
RETURN
;
}
}
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
EXTERN
INT
;
EXTERN
;
IF
(
)
{
WHILE
(
)
{
CHAR
;
(
,
,
)
;
IF
(
(
)
)
RETURN
;
}
}
=
;
}
(
)
;
(
)
;
(
,
)
;
(
,
(
,
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
UNSIGNED
;
(
,
,
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
(
(
)
)
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
=
;
=
(
)
;
(
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
(
)
,
,
(
)
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
)
;
(
)
;
(
)
;
}
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
INT
;
VOID
(
VOID
)
{
INT
;
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
WHILE
(
)
{
=
(
,
,
)
;
;
}
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
{
(
,
)
;
}
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
STATIC
INT
;
STATIC
INT
;
IF
(
)
RETURN
;
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
(
)
;
=
;
;
=
;
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
=
(
)
;
(
)
;
IF
(
)
=
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
(
,
)
;
}
ELSE
{
INT
=
(
)
;
IF
(
)
(
,
,
)
;
=
;
}
}
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
(
)
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
EXTERN
,
;
EXTERN
;
EXTERN
INT
;
EXTERN
;
EXTERN
VOID
(
,
,
)
;
VOID
(
,
)
{
FLOAT
;
FLOAT
,
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
(
(
,
)
)
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
;
=
(
)
;
=
(
(
,
)
)
;
IF
(
)
;
}
=
;
=
;
=
;
}
VOID
(
INT
,
)
{
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
INT
,
INT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
;
IF
(
(
)
(
(
)
(
)
(
)
)
)
{
=
;
=
;
=
;
=
;
}
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
)
{
;
;
FLOAT
;
;
FLOAT
;
,
;
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
=
;
=
;
=
(
(
)
)
;
(
,
)
;
(
,
,
)
;
}
}
VOID
(
,
,
INT
,
INT
,
INT
)
{
;
;
FLOAT
;
INT
;
;
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
=
(
)
;
(
,
,
)
;
}
}
VOID
(
,
,
INT
)
{
;
;
FLOAT
;
INT
;
;
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
=
;
=
;
=
(
(
)
)
;
}
(
,
,
)
;
}
}
VOID
(
,
)
{
INT
,
;
INT
;
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
}
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
=
(
)
;
}
}
VOID
(
,
,
INT
,
INT
,
INT
,
INT
,
FLOAT
)
{
INT
,
;
;
FLOAT
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
(
(
)
)
;
ELSE
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
,
,
INT
)
{
;
;
FLOAT
;
INT
,
;
;
FLOAT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
;
;
(
,
,
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
,
;
;
,
;
INT
;
FLOAT
,
,
;
;
FLOAT
;
FLOAT
=
;
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
FLOAT
)
;
FOR
(
=
;
;
)
{
=
(
,
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
IF
(
)
{
(
,
(
)
,
)
;
(
,
(
)
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
,
)
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
}
(
,
,
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
;
;
,
;
INT
;
FLOAT
,
;
;
FLOAT
;
FLOAT
=
,
;
FLOAT
;
FLOAT
;
FLOAT
;
;
(
,
,
,
)
;
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
=
(
FLOAT
)
;
=
(
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
(
)
,
)
;
(
,
(
)
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
,
)
;
}
=
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
(
,
,
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
;
;
,
,
;
INT
;
FLOAT
,
,
;
;
FLOAT
;
FLOAT
=
,
;
FLOAT
;
FLOAT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
;
}
(
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
}
VOID
(
,
,
INT
,
INT
,
INT
)
{
INT
,
;
;
FLOAT
;
,
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
(
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
)
{
INT
,
;
;
FLOAT
;
,
;
;
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
(
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
=
;
=
;
=
;
=
(
(
)
)
;
}
;
}
VOID
(
,
,
INT
)
{
;
;
,
,
,
;
FLOAT
;
INT
;
;
INT
;
FLOAT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
(
,
,
)
;
}
}
VOID
(
)
{
;
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
,
)
;
}
}
VOID
(
)
{
;
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
,
)
;
}
}
VOID
(
)
{
;
INT
;
;
STATIC
INT
=
{
,
,
,
}
;
FLOAT
;
=
(
(
(
FLOAT
)
(
FLOAT
)
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
(
)
,
,
)
;
}
}
VOID
(
)
{
;
INT
;
;
STATIC
INT
=
{
,
,
,
}
;
FLOAT
;
=
(
(
(
FLOAT
)
(
FLOAT
)
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
(
)
,
,
)
;
}
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
}
;
INT
;
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
)
{
,
;
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
}
}
VOID
(
,
,
FLOAT
)
{
;
;
FLOAT
;
INT
;
;
INT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
(
,
,
)
;
}
}
VOID
(
,
INT
,
INT
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
,
,
INT
,
INT
,
INT
)
{
INT
,
;
;
FLOAT
;
,
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
(
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
=
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
,
,
UNSIGNED
INT
)
{
INT
,
;
;
FLOAT
;
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
)
;
}
=
=
;
=
;
=
;
=
(
(
)
)
;
}
}
VOID
(
,
)
{
;
;
FLOAT
;
INT
;
;
INT
;
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
(
,
,
)
;
}
}
__E__O__F__
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
CHAR
,
INT
,
CHAR
)
{
IF
(
(
,
,
)
)
(
,
,
,
,
)
;
ELSE
(
,
,
,
(
)
,
)
;
}
(
CHAR
)
{
;
CHAR
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
RETURN
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
{
INT
;
(
,
,
)
;
=
(
)
;
=
;
(
,
)
;
(
,
)
;
(
,
(
,
,
)
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
(
,
(
,
)
)
;
}
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
(
)
,
,
(
)
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
,
)
)
;
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
=
(
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
=
;
}
(
)
;
RETURN
;
}
IF
(
)
{
(
,
(
)
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
{
;
(
,
)
;
(
)
;
RETURN
;
}
}
(
,
,
,
)
;
;
IF
(
)
{
(
)
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
}
=
;
(
,
)
;
(
,
)
;
}
ELSE
{
CHAR
;
CHAR
;
(
)
;
(
,
(
)
,
)
;
(
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
EXTERN
;
CHAR
;
INT
;
(
)
;
(
)
;
=
;
=
(
)
;
=
;
IF
(
(
)
)
{
}
ELSE
IF
(
)
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
IF
(
(
(
(
,
)
)
)
(
(
)
)
)
(
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
(
,
,
)
;
=
;
}
}
VOID
(
VOID
)
{
;
INT
;
INT
;
;
(
,
,
(
)
)
;
=
(
)
;
=
;
(
,
,
,
)
;
}
VOID
(
,
CHAR
)
{
INT
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
(
,
,
(
)
)
;
(
)
=
;
(
,
,
(
)
)
;
(
)
=
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
(
,
(
)
,
)
;
(
,
(
)
,
)
;
(
,
(
)
,
)
;
(
,
(
)
,
)
;
=
(
)
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
(
,
)
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
=
;
=
;
(
,
(
)
)
;
(
,
(
)
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
(
,
(
)
,
)
;
=
(
)
;
}
(
,
(
)
,
,
,
)
;
=
(
)
;
IF
(
(
,
)
)
{
(
,
)
;
(
,
(
)
,
)
;
=
(
)
;
(
,
(
)
,
,
,
)
;
=
(
)
;
}
IF
(
)
{
(
,
(
)
,
,
,
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
(
,
(
)
,
,
,
)
;
=
(
)
;
IF
(
(
,
)
)
{
(
,
(
)
,
,
)
;
=
(
)
;
}
IF
(
)
BREAK
;
}
(
,
(
)
,
,
,
)
;
=
(
)
;
}
IF
(
)
{
=
;
=
;
=
;
=
;
RETURN
;
}
}
VOID
(
INT
)
{
CHAR
;
;
=
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
IF
(
)
(
(
)
,
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
}
}
ELSE
IF
(
)
{
IF
(
)
=
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
=
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
)
;
}
}
VOID
(
VOID
)
{
;
FLOAT
;
INT
,
;
INT
;
FLOAT
;
FLOAT
;
INT
;
FLOAT
;
=
(
)
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
(
,
,
)
;
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
(
,
)
;
=
;
}
ELSE
=
;
IF
(
)
RETURN
;
(
,
,
,
,
,
,
)
;
}
VOID
(
CHAR
)
{
IF
(
)
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
)
;
WHILE
(
)
{
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
)
;
IF
(
)
{
(
)
;
BREAK
;
}
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
)
;
}
SWITCH
(
)
{
DEFAULT
(
,
)
;
BREAK
;
CASE
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
)
;
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
BREAK
;
CASE
=
(
)
;
IF
(
)
{
(
)
;
=
;
}
(
,
(
)
)
;
=
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
(
)
;
(
,
,
(
)
)
;
BREAK
;
CASE
CASE
CASE
(
,
)
;
BREAK
;
}
}
(
)
;
IF
(
)
(
)
;
}
__E__O__F__
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
;
(
)
;
(
,
,
)
;
=
(
)
(
)
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
(
)
)
(
,
,
)
;
(
,
)
;
FOR
(
=
;
;
)
=
;
}
}
VOID
(
,
,
,
,
)
{
INT
,
,
,
;
;
INT
;
FLOAT
;
;
INT
;
;
,
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
;
}
ELSE
{
=
(
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
=
;
=
=
;
=
;
=
;
=
(
,
)
;
=
;
}
IF
(
)
RETURN
;
=
(
,
,
,
,
,
,
,
)
;
IF
(
)
{
=
(
STRUCT
)
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
}
ELSE
IF
(
)
=
;
}
}
(
,
,
,
)
{
;
=
(
,
,
,
,
,
)
;
IF
(
)
=
(
STRUCT
)
;
(
,
,
,
,
)
;
RETURN
;
}
INT
(
)
{
INT
;
;
INT
;
;
INT
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
(
,
,
,
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
INT
;
INT
;
;
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
=
(
)
;
}
RETURN
;
}
=
;
=
;
IF
(
)
{
IF
(
)
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
=
;
=
;
=
(
)
;
=
;
=
;
WHILE
(
)
{
=
(
)
;
=
;
=
;
(
)
;
(
,
)
;
}
=
(
)
(
)
;
=
;
=
;
IF
(
(
)
)
{
=
;
=
;
}
=
;
=
;
=
;
(
,
)
;
}
__E__O__F__
FLOAT
;
FLOAT
;
;
INT
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
TYPEDEF
STRUCT
{
INT
,
,
,
;
}
;
,
;
CHAR
;
INT
,
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
=
(
)
;
=
;
;
IF
(
)
=
;
(
,
)
;
}
TYPEDEF
STRUCT
{
FLOAT
;
INT
;
}
;
STATIC
INT
;
STATIC
;
VOID
(
FLOAT
,
INT
)
{
=
;
=
;
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
FLOAT
;
INT
;
=
;
=
;
=
;
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
=
;
IF
(
)
(
(
INT
)
(
)
)
;
=
(
INT
)
(
INT
)
;
(
,
,
,
,
)
;
}
}
CHAR
;
FLOAT
;
FLOAT
;
INT
;
INT
;
VOID
(
CHAR
)
{
CHAR
;
CHAR
;
INT
,
,
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
;
;
}
(
)
;
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
FOR
(
=
;
(
)
;
)
=
;
FOR
(
=
;
;
)
{
=
;
}
=
;
=
;
(
,
)
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
INT
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
(
,
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
IF
(
)
RETURN
;
}
(
,
)
;
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
INT
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
;
;
=
;
;
=
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
=
(
(
)
)
;
ELSE
=
;
IF
(
(
)
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
}
ELSE
{
=
;
=
;
=
;
}
(
(
)
,
,
)
;
}
VOID
(
VOID
)
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
(
(
)
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
RETURN
;
=
;
(
,
,
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
)
(
)
;
}
}
VOID
(
VOID
)
{
(
)
;
=
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
(
)
;
=
(
)
;
=
;
}
VOID
(
VOID
)
{
=
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
INT
(
CONST
,
CONST
)
{
IF
(
)
{
RETURN
(
(
INT
)
(
INT
)
)
;
}
ELSE
{
RETURN
(
(
INT
)
(
INT
)
)
;
}
}
VOID
(
VOID
)
{
INT
;
INT
,
;
FLOAT
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
(
)
)
{
(
)
;
FOR
(
=
;
;
)
{
=
;
(
)
;
}
(
)
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
(
)
;
(
)
;
(
)
;
}
}
=
(
)
;
=
(
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
,
,
,
;
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
(
,
,
,
,
)
;
=
;
}
IF
(
)
{
=
;
(
,
,
,
,
)
;
=
;
}
IF
(
)
{
=
;
(
,
,
,
,
)
;
=
;
}
IF
(
)
{
=
;
(
,
,
,
,
)
;
=
;
}
}
CHAR
=
{
{
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
}
}
;
VOID
(
CHAR
,
INT
,
INT
)
{
INT
,
,
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
{
;
=
;
}
ELSE
{
;
IF
(
)
=
;
}
;
}
=
;
=
;
}
VOID
(
CHAR
,
INT
,
INT
,
INT
,
INT
)
{
INT
;
CHAR
;
INT
;
INT
;
=
;
WHILE
(
)
{
=
;
WHILE
(
)
=
;
=
;
IF
(
)
=
(
)
;
ELSE
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
;
}
IF
(
)
{
;
=
;
;
}
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
CHAR
,
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
=
;
(
,
)
;
(
,
)
;
(
,
(
)
,
,
)
;
=
(
)
;
IF
(
)
=
;
(
)
;
=
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
;
;
;
}
}
VOID
(
VOID
)
{
INT
,
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
(
)
;
IF
(
)
{
IF
(
)
=
;
(
,
(
)
,
,
(
INT
)
(
)
)
;
(
,
,
)
;
IF
(
)
=
;
}
}
VOID
(
CHAR
)
{
INT
,
;
INT
;
CHAR
;
INT
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
,
)
;
}
CONTINUE
;
}
IF
(
(
,
)
)
{
INT
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
(
,
)
)
;
(
,
,
(
,
)
)
;
(
,
,
(
,
)
)
;
IF
(
)
=
;
(
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
INT
,
;
CHAR
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
(
,
,
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
INT
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
(
,
,
)
;
(
,
,
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
INT
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
(
)
;
ELSE
CONTINUE
;
IF
(
)
(
,
,
)
;
(
,
,
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
INT
;
=
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
(
,
,
)
;
(
,
,
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
IF
(
)
(
,
)
;
(
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
(
,
,
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
(
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
(
,
,
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
(
,
,
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
WHILE
(
(
,
)
)
{
=
(
)
;
}
}
CONTINUE
;
}
}
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
FLOAT
=
{
,
}
;
IF
(
)
{
IF
(
(
)
)
{
=
;
(
)
;
}
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
FOR
(
=
;
;
)
{
(
)
;
IF
(
)
{
INT
,
;
(
)
;
=
;
(
,
,
)
;
(
(
)
,
(
)
,
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
(
)
;
}
ELSE
{
(
)
;
}
}
ELSE
{
IF
(
)
{
(
)
;
=
;
}
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
}
(
)
;
}
__E__O__F__
TYPEDEF
ENUM
{
,
,
,
,
,
,
}
;
TYPEDEF
STRUCT
{
;
;
INT
;
FLOAT
;
;
FLOAT
;
INT
;
}
;
;
TYPEDEF
STRUCT
{
INT
;
INT
;
STRUCT
;
INT
;
;
,
;
}
;
;
;
TYPEDEF
STRUCT
{
;
INT
;
}
;
;
;
EXTERN
VOID
(
)
;
VOID
(
,
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
)
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
VOID
(
VOID
)
{
INT
;
CHAR
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
,
(
)
,
,
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
(
,
,
)
;
IF
(
)
=
;
}
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
}
(
VOID
)
{
INT
;
INT
;
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
(
)
)
;
RETURN
;
}
}
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
}
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
)
{
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
,
;
,
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
INT
(
STRUCT
)
{
INT
;
,
;
;
INT
;
=
(
)
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
)
;
RETURN
;
}
}
(
)
;
RETURN
;
}
INT
(
STRUCT
)
{
INT
;
,
,
;
;
INT
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
}
(
)
;
RETURN
;
}
INT
(
STRUCT
)
{
INT
;
,
,
;
;
INT
;
=
(
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
,
,
)
;
ELSE
IF
(
)
{
=
;
(
,
,
,
)
;
}
ELSE
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
}
(
)
;
RETURN
;
}
INT
(
STRUCT
)
{
INT
,
;
,
;
;
INT
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
{
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
)
;
RETURN
;
}
}
(
)
;
RETURN
;
}
VOID
(
INT
)
{
;
;
;
INT
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
=
;
=
(
(
(
(
)
)
)
)
;
=
;
=
;
=
;
RETURN
;
}
}
}
VOID
(
VOID
)
{
,
;
INT
,
;
INT
;
INT
;
INT
;
INT
;
,
;
=
(
)
;
IF
(
)
{
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
=
;
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
}
ELSE
{
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
ELSE
{
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
;
(
,
,
,
,
)
;
}
}
VOID
(
VOID
)
{
;
INT
,
;
,
;
=
(
)
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
=
;
(
,
)
;
=
;
=
;
=
;
=
;
}
ELSE
{
(
,
)
;
}
}
VOID
(
VOID
)
{
;
INT
;
,
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
=
;
(
,
)
;
=
;
=
;
=
;
=
;
}
ELSE
{
(
,
)
;
}
}
STATIC
=
{
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
,
,
;
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
(
)
;
SWITCH
(
)
{
CASE
(
,
)
;
(
,
)
;
(
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
(
,
)
;
(
,
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
IF
(
)
{
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
,
)
;
}
BREAK
;
CASE
CASE
(
,
)
;
(
,
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
)
;
}
BREAK
;
CASE
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
(
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
IF
(
)
=
(
,
)
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
(
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
(
)
;
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
IF
(
(
)
)
=
;
=
;
(
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
(
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
=
;
=
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
=
;
=
;
BREAK
;
CASE
(
,
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
BREAK
;
CASE
CASE
=
(
)
;
BREAK
;
CASE
(
,
)
;
(
)
;
(
,
,
,
(
)
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
(
,
,
,
)
;
BREAK
;
CASE
CASE
(
,
)
;
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
IF
(
)
=
(
,
)
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
IF
(
)
=
;
ELSE
{
=
;
=
;
=
;
}
=
;
=
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
IF
(
(
)
)
=
;
=
;
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
=
(
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
=
(
)
;
(
,
,
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
(
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
=
;
(
,
)
;
(
,
)
;
=
;
=
;
(
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
,
)
;
(
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
)
;
BREAK
;
CASE
CASE
(
,
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
,
)
;
(
)
;
BREAK
;
DEFAULT
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
,
;
FLOAT
;
;
FLOAT
,
;
FLOAT
;
FLOAT
,
;
FLOAT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
)
;
;
}
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
(
(
,
)
)
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
;
=
(
)
;
=
(
(
,
)
)
;
IF
(
)
;
}
=
(
)
;
(
,
,
(
)
)
;
IF
(
)
{
=
;
;
}
ELSE
{
=
;
}
=
(
)
;
=
(
)
(
)
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
=
;
=
;
=
;
=
(
)
;
(
)
;
RETURN
;
}
WHILE
(
)
{
(
,
)
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
}
ELSE
{
=
;
=
;
=
(
)
;
}
(
)
;
FOR
(
=
;
;
)
;
;
}
}
}
EXTERN
;
VOID
(
VOID
)
{
INT
,
;
;
,
;
FLOAT
;
;
FLOAT
,
;
FLOAT
;
FLOAT
,
;
INT
;
FLOAT
;
FLOAT
;
;
,
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
;
}
FOR
(
=
,
=
;
;
,
)
{
,
,
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
{
IF
(
)
{
=
;
=
(
)
;
=
;
IF
(
)
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
}
(
,
(
)
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
}
ELSE
(
,
)
;
}
ELSE
{
IF
(
)
{
(
,
)
;
;
}
(
,
,
)
;
}
(
,
,
)
;
IF
(
(
)
(
)
)
{
;
=
(
)
;
(
,
,
)
;
(
,
(
)
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
}
}
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
(
(
,
)
)
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
;
=
(
)
;
=
(
(
,
)
)
;
IF
(
)
;
}
IF
(
(
)
)
{
IF
(
)
{
=
;
=
;
=
;
=
;
(
,
,
,
)
;
IF
(
(
,
)
)
{
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
}
ELSE
{
(
)
;
}
}
ELSE
{
=
;
}
}
IF
(
(
(
)
(
)
)
)
{
(
,
)
;
}
=
(
)
;
(
,
,
(
)
)
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
;
}
ELSE
{
=
;
}
=
(
)
;
=
(
)
(
)
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
=
;
=
;
=
;
=
(
)
;
(
)
;
RETURN
;
}
WHILE
(
)
{
(
,
)
;
=
;
IF
(
(
)
)
{
=
;
=
;
=
;
=
(
)
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
}
ELSE
{
=
;
=
;
=
(
)
;
}
(
)
;
FOR
(
=
;
;
)
;
;
}
}
}
VOID
(
VOID
)
{
;
INT
;
;
FLOAT
;
INT
;
(
,
,
(
)
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
{
=
;
BREAK
;
}
=
(
)
;
BREAK
;
CASE
IF
(
)
{
=
;
BREAK
;
}
=
;
BREAK
;
CASE
IF
(
)
{
=
;
BREAK
;
}
=
(
(
FLOAT
)
)
;
IF
(
)
{
=
(
)
;
IF
(
)
=
;
}
ELSE
{
;
IF
(
)
=
;
ELSE
=
;
}
BREAK
;
CASE
IF
(
)
{
=
;
BREAK
;
}
=
(
(
FLOAT
)
)
;
=
;
;
BREAK
;
}
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
,
,
)
;
}
(
,
)
;
IF
(
)
=
;
=
;
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
(
)
;
}
}
VOID
(
)
{
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
IF
(
(
)
(
)
)
{
(
)
;
}
ELSE
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
INT
;
STRUCT
;
;
;
;
;
;
;
INT
;
;
INT
;
;
INT
;
;
;
CHAR
;
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
}
VOID
(
,
INT
,
FLOAT
)
{
;
IF
(
)
RETURN
;
=
;
(
,
)
;
=
;
=
;
}
VOID
(
,
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
;
IF
(
)
RETURN
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
}
VOID
(
INT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
;
INT
,
;
FLOAT
,
,
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
)
)
;
=
(
(
(
)
)
)
;
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
FLOAT
,
;
;
=
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
(
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
FLOAT
,
;
;
=
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
(
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
=
;
=
(
(
)
)
;
=
(
(
(
)
)
)
;
=
(
(
(
)
)
)
;
=
;
}
}
VOID
(
VOID
)
{
CHAR
;
INT
;
CHAR
;
FLOAT
;
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
=
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
IF
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
;
}
}
ELSE
{
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
}
IF
(
)
(
)
;
}
(
,
)
;
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
)
;
}
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
,
)
;
(
,
)
;
(
)
;
=
(
)
;
(
,
,
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
(
(
)
,
)
;
}
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
;
FLOAT
;
IF
(
)
(
,
,
)
;
=
(
)
;
=
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
;
(
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
=
;
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
(
)
)
{
=
;
RETURN
;
}
(
,
(
)
,
,
(
)
)
;
=
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
RETURN
;
(
(
(
)
)
,
(
(
)
)
,
)
;
}
VOID
(
FLOAT
)
{
EXTERN
INT
(
CONST
,
CONST
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
=
(
)
;
;
}
IF
(
(
)
)
{
=
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
IF
(
)
{
;
(
,
,
)
;
(
,
,
)
;
}
;
;
;
=
;
=
;
=
;
=
;
=
(
,
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
(
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
,
(
INT
(
)
(
CONST
VOID
,
CONST
VOID
)
)
)
;
}
(
)
;
IF
(
)
(
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
(
INT
)
,
(
INT
)
,
(
INT
)
,
(
INT
)
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
}
__E__O__F__
;
;
EXTERN
CHAR
;
EXTERN
INT
;
EXTERN
INT
;
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
,
)
;
}
ELSE
{
(
)
;
=
;
IF
(
(
)
(
)
)
(
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
}
ELSE
=
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
;
CHAR
;
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
(
)
,
,
(
)
,
(
)
)
;
(
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
BREAK
;
}
=
;
FOR
(
;
;
)
{
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
BREAK
;
}
FOR
(
=
;
;
)
;
(
,
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
,
;
CHAR
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
)
=
(
(
)
)
;
}
}
(
)
;
}
=
;
=
;
}
VOID
(
VOID
)
{
=
;
(
)
;
(
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
;
;
(
(
)
,
,
)
;
}
VOID
(
CHAR
)
{
INT
;
INT
,
;
STATIC
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
;
}
ELSE
=
;
WHILE
(
(
=
)
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
(
)
)
=
;
;
IF
(
)
{
;
=
;
}
IF
(
)
{
(
)
;
IF
(
)
=
;
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
=
;
=
;
;
IF
(
)
=
;
BREAK
;
}
}
}
VOID
(
CHAR
)
{
INT
;
CHAR
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
;
)
=
;
IF
(
)
;
=
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
=
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
INT
;
INT
;
CHAR
;
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
(
)
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
;
}
IF
(
)
{
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
{
(
,
,
)
;
=
;
}
=
;
IF
(
(
)
(
)
)
(
(
)
(
)
)
;
=
;
WHILE
(
)
{
(
(
)
,
,
)
;
;
}
(
(
)
,
,
(
(
)
)
)
;
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
}
}
VOID
(
FLOAT
)
{
INT
,
,
,
,
;
INT
;
CHAR
;
INT
;
INT
;
CHAR
;
CHAR
;
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
(
,
,
,
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
(
(
)
,
,
)
;
;
;
}
=
;
FOR
(
=
;
;
,
,
)
{
IF
(
)
BREAK
;
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
}
IF
(
)
{
IF
(
(
=
(
,
)
)
)
;
ELSE
=
;
=
(
(
)
)
;
=
(
)
;
=
;
IF
(
(
)
)
{
=
;
(
,
,
)
;
=
;
(
,
)
;
}
ELSE
(
,
)
;
(
,
)
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
ELSE
=
;
=
;
=
;
(
(
)
,
,
)
;
=
;
FOR
(
=
;
(
)
;
)
(
(
)
,
,
)
;
}
(
)
;
}
__E__O__F__
CHAR
;
INT
;
INT
=
;
INT
;
INT
=
;
INT
=
;
INT
;
CHAR
;
;
;
INT
;
INT
;
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
VOID
(
VOID
)
{
CHAR
,
;
=
;
IF
(
)
;
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
=
;
(
,
)
;
=
(
)
;
=
;
;
=
;
RETURN
;
}
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
IF
(
(
(
)
)
(
(
(
)
(
)
)
)
)
{
CHAR
;
IF
(
(
=
(
)
)
)
{
INT
;
(
,
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
=
;
(
,
)
;
;
}
(
)
;
}
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
,
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
(
)
(
(
)
(
)
)
)
{
IF
(
)
;
RETURN
;
}
IF
(
(
)
(
)
(
(
)
)
)
{
DO
{
=
(
)
;
}
WHILE
(
)
;
IF
(
)
=
(
)
;
(
,
)
;
=
(
)
;
RETURN
;
}
IF
(
(
)
(
)
(
(
)
)
)
{
IF
(
)
RETURN
;
DO
{
=
(
)
;
}
WHILE
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
(
,
)
;
=
(
)
;
}
RETURN
;
}
IF
(
)
{
;
RETURN
;
}
IF
(
)
{
;
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
;
=
;
}
}
;
CHAR
;
INT
=
;
VOID
(
INT
)
{
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
;
=
;
}
RETURN
;
}
IF
(
(
)
)
RETURN
;
=
;
=
;
}
INT
(
CHAR
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
CHAR
(
INT
)
{
;
STATIC
CHAR
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
RETURN
;
}
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
INT
,
CHAR
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
=
;
}
=
(
)
;
=
(
)
;
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
CHAR
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
(
)
,
)
;
ELSE
(
,
(
)
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
IF
(
(
)
)
(
,
)
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
,
,
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
,
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
INT
,
,
UNSIGNED
)
{
CHAR
;
CHAR
;
IF
(
)
{
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
;
IF
(
)
RETURN
;
IF
(
)
(
,
(
)
)
;
}
ELSE
{
=
;
}
IF
(
)
=
;
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
RETURN
;
}
IF
(
)
=
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
,
)
;
}
RETURN
;
}
=
;
IF
(
)
{
IF
(
)
;
}
ELSE
{
;
IF
(
)
=
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
(
)
,
,
,
,
)
;
(
)
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
(
)
,
,
,
,
)
;
(
)
;
}
}
RETURN
;
}
IF
(
(
)
(
)
(
(
)
)
)
{
=
;
IF
(
)
{
IF
(
)
{
(
,
(
)
,
,
,
,
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
}
}
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
=
;
=
;
}
}
INT
(
VOID
)
{
=
;
WHILE
(
)
(
)
;
RETURN
;
}
__E__O__F__
STATIC
INT
;
STATIC
CHAR
=
;
STATIC
CHAR
=
;
STATIC
CHAR
=
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
;
VOID
(
)
(
VOID
)
;
CONST
CHAR
(
)
(
INT
)
;
TYPEDEF
STRUCT
{
VOID
(
)
(
VOID
)
;
CONST
CHAR
(
)
(
INT
)
;
}
;
;
INT
;
STATIC
VOID
(
CHAR
)
{
INT
,
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
(
)
(
VOID
)
,
CONST
CHAR
(
)
(
INT
)
)
{
INT
;
IF
(
(
)
(
)
)
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
}
IF
(
)
{
IF
(
)
(
,
)
;
=
;
=
;
;
}
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
(
,
)
;
;
=
;
=
;
IF
(
)
(
)
;
}
CONST
CHAR
(
,
INT
)
{
CONST
CHAR
=
;
;
IF
(
)
{
IF
(
(
=
(
)
)
)
{
IF
(
)
{
IF
(
(
(
)
,
)
)
RETURN
;
}
}
}
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
CASE
CASE
IF
(
)
{
;
(
,
)
;
=
;
}
BREAK
;
CASE
IF
(
)
{
;
(
,
)
;
=
;
}
BREAK
;
CASE
CASE
IF
(
)
{
;
(
,
)
;
=
;
}
BREAK
;
CASE
CASE
IF
(
)
{
(
,
)
;
=
;
}
BREAK
;
CASE
CASE
IF
(
)
{
(
,
)
;
=
;
}
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
IF
(
)
(
)
;
=
;
BREAK
;
}
RETURN
;
}
VOID
(
INT
,
INT
,
INT
)
{
(
(
(
)
)
,
(
(
)
)
,
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
(
)
)
;
;
;
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
(
(
(
)
)
,
(
(
)
)
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
CHAR
;
STATIC
;
IF
(
)
{
INT
;
FOR
(
=
;
;
)
{
(
,
(
)
,
,
)
;
(
)
;
}
=
;
}
(
,
(
)
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
INT
;
=
;
=
;
(
,
,
)
;
FOR
(
=
;
;
)
{
;
(
,
,
)
;
}
(
,
,
)
;
;
WHILE
(
)
{
=
;
(
,
,
)
;
FOR
(
=
;
;
)
{
;
(
,
,
)
;
}
(
,
,
)
;
;
;
}
=
;
(
,
,
)
;
FOR
(
=
;
;
)
{
;
(
,
,
)
;
}
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
,
;
INT
;
INT
;
INT
=
;
INT
=
;
CHAR
;
CHAR
=
{
,
,
,
,
,
}
;
FOR
(
=
;
;
)
{
(
,
,
)
;
IF
(
)
=
;
(
)
;
}
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
}
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
,
(
INT
)
(
)
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
CONST
CHAR
(
INT
)
{
CONST
CHAR
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
CASE
IF
(
)
=
;
RETURN
;
CASE
CASE
IF
(
)
=
;
RETURN
;
CASE
CASE
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
(
)
;
(
,
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
)
;
(
)
;
}
CONST
CHAR
(
INT
)
{
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
CHAR
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
INT
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
CHAR
)
{
INT
;
INT
;
CHAR
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
(
,
)
;
}
}
STATIC
VOID
(
CHAR
,
INT
)
{
INT
;
INT
;
INT
;
CHAR
;
=
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
{
=
;
;
IF
(
)
BREAK
;
}
}
}
STATIC
VOID
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
(
INT
)
(
(
)
)
)
)
;
}
STATIC
VOID
(
VOID
)
{
INT
;
=
(
)
;
(
,
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
{
INT
;
CONST
CHAR
;
=
(
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
(
)
)
;
}
}
}
STATIC
VOID
(
VOID
)
{
=
(
)
;
INT
;
(
,
)
;
IF
(
)
(
)
;
=
;
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
INT
=
;
INT
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
(
)
;
}
STATIC
CONST
CHAR
(
INT
)
{
=
(
)
(
)
;
IF
(
)
{
IF
(
)
{
CHAR
;
(
,
(
)
,
,
(
)
,
)
;
(
)
;
}
(
,
)
;
=
;
RETURN
;
}
SWITCH
(
)
{
CASE
CASE
(
)
;
RETURN
;
CASE
CASE
CASE
(
)
;
RETURN
;
DEFAULT
RETURN
(
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
;
EXTERN
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
(
,
,
)
)
;
=
;
=
;
(
,
(
,
,
)
)
;
=
;
(
,
(
,
,
)
)
;
=
;
(
,
(
,
,
)
)
;
=
;
(
,
(
,
,
)
)
;
=
;
(
,
(
,
,
)
)
;
=
;
=
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
{
(
,
(
)
)
;
}
ELSE
{
(
,
(
)
)
;
}
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
EXTERN
VOID
(
VOID
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
(
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
CONST
CHAR
=
{
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
,
,
}
;
=
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
(
)
;
}
CONST
CHAR
(
INT
)
{
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
INT
;
STATIC
CONST
CHAR
;
STATIC
CHAR
;
STATIC
CHAR
;
STATIC
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
,
;
FOR
(
=
,
=
(
(
)
)
;
;
,
)
{
INT
,
=
;
INT
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
FOR
(
=
;
;
)
{
INT
;
=
(
(
)
)
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
}
IF
(
)
=
;
}
CONST
CHAR
(
INT
)
{
SWITCH
(
)
{
CASE
IF
(
)
(
)
;
(
)
;
BREAK
;
}
RETURN
;
}
EXTERN
INT
(
INT
)
;
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
;
INT
=
;
=
;
=
(
,
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
WHILE
(
)
{
;
IF
(
)
BREAK
;
}
IF
(
)
{
=
;
IF
(
)
BREAK
;
}
=
;
IF
(
)
BREAK
;
}
=
;
=
;
}
ELSE
{
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
=
;
}
}
=
;
(
,
)
;
}
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
=
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
STATIC
CONST
CHAR
=
{
,
,
,
}
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
(
)
;
}
CONST
CHAR
(
INT
)
{
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
=
;
}
STATIC
;
STATIC
;
STATIC
;
CHAR
;
;
VOID
(
VOID
)
{
INT
;
;
CHAR
;
FOR
(
=
;
;
)
{
(
,
(
)
,
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
{
(
,
(
)
,
)
;
(
)
;
=
;
}
}
}
VOID
(
VOID
)
{
=
(
)
;
IF
(
)
(
(
,
)
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
;
=
;
(
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
CONST
CHAR
(
INT
)
{
IF
(
)
{
=
;
IF
(
)
=
;
}
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
;
STATIC
;
VOID
(
VOID
)
{
=
(
)
;
(
(
,
)
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
(
,
)
;
}
}
CONST
CHAR
(
INT
)
{
IF
(
)
{
=
;
IF
(
)
=
;
}
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
RETURN
;
(
)
;
(
,
)
;
(
)
;
}
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
INT
;
STATIC
CHAR
;
STATIC
;
VOID
(
,
CHAR
)
{
INT
;
IF
(
)
RETURN
;
WHILE
(
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
=
;
(
,
,
(
)
)
;
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
=
(
)
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
(
,
(
)
,
,
(
)
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
(
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
CONST
CHAR
(
INT
)
{
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
;
STATIC
CHAR
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
IF
(
(
)
)
(
,
)
;
=
;
}
ELSE
IF
(
(
)
)
{
IF
(
)
{
=
;
=
;
}
}
}
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
;
CHAR
;
(
,
(
,
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
(
,
,
)
)
;
(
,
(
,
,
)
)
;
(
,
(
,
,
)
)
;
(
,
)
;
IF
(
(
)
(
(
)
)
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
(
,
)
;
}
=
;
IF
(
)
{
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
}
IF
(
)
{
IF
(
(
)
)
(
)
;
(
(
,
,
)
)
;
}
ELSE
{
(
(
,
)
)
;
}
(
)
;
}
VOID
(
VOID
)
{
STATIC
CONST
CHAR
=
{
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
,
}
;
CHAR
;
CHAR
;
CHAR
;
INT
;
INT
;
;
(
,
(
)
,
,
(
)
)
;
IF
(
(
=
(
,
)
)
)
{
IF
(
(
=
(
,
(
VOID
)
)
)
)
(
,
)
;
}
ELSE
{
=
(
(
)
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
,
)
;
}
=
;
=
;
WHILE
(
)
{
IF
(
)
;
;
}
IF
(
)
(
,
)
;
=
(
(
CHAR
)
(
)
)
;
(
,
,
(
CHAR
)
(
)
)
;
=
;
FOR
(
=
;
;
)
{
CHAR
;
CHAR
;
CHAR
;
INT
,
;
(
,
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
(
)
)
;
(
,
(
)
,
,
,
)
;
=
(
(
)
)
;
(
,
)
;
}
=
;
IF
(
)
{
=
;
(
)
;
}
ELSE
{
(
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
=
;
ELSE
=
;
IF
(
(
)
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
(
,
)
;
ELSE
(
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
CONST
CHAR
(
INT
)
{
IF
(
)
{
IF
(
)
{
INT
;
FOR
(
=
;
;
)
(
)
;
(
)
;
}
=
;
=
;
}
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
CHAR
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
=
(
)
;
INT
;
INT
=
;
=
(
)
;
IF
(
)
{
IF
(
)
;
ELSE
;
GOTO
;
}
ELSE
IF
(
)
{
IF
(
)
;
ELSE
;
GOTO
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
;
ELSE
;
GOTO
;
}
ELSE
IF
(
)
{
IF
(
)
;
ELSE
;
GOTO
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
;
;
}
ELSE
IF
(
)
{
;
;
}
ELSE
{
(
)
;
}
GOTO
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
;
ELSE
;
GOTO
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
(
)
)
{
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
}
IF
(
)
{
IF
(
)
;
ELSE
;
}
(
,
)
;
(
,
(
)
,
,
)
;
}
VOID
(
VOID
)
{
STATIC
CONST
CHAR
=
{
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
,
}
;
INT
=
(
)
;
INT
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
CONST
CHAR
(
INT
)
{
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
=
(
)
;
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
}
VOID
(
VOID
)
{
STATIC
CONST
CHAR
=
{
,
,
}
;
INT
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
IF
(
)
=
;
}
VOID
(
VOID
)
{
(
)
;
}
CONST
CHAR
(
INT
)
{
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
;
STATIC
;
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
;
CHAR
;
(
,
(
)
,
,
)
;
=
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
}
}
CONST
CHAR
(
INT
)
{
IF
(
)
{
INT
;
CHAR
;
FOR
(
=
;
;
)
{
(
,
(
)
,
,
)
;
(
,
)
;
}
}
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
CHAR
;
CHAR
;
}
;
STATIC
;
STATIC
CHAR
;
STATIC
INT
;
STATIC
INT
=
{
,
,
,
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
IF
(
(
)
(
)
)
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
=
;
=
;
}
STATIC
VOID
(
CHAR
,
INT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
;
=
;
}
}
(
)
;
}
STATIC
(
CHAR
,
CHAR
,
INT
)
{
INT
;
CHAR
;
(
,
)
;
(
,
)
=
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
STATIC
(
VOID
)
{
CHAR
;
CHAR
;
INT
=
,
=
;
CHAR
;
CHAR
=
;
INT
;
EXTERN
CHAR
(
CHAR
,
INT
,
UNSIGNED
,
UNSIGNED
)
;
=
;
DO
{
=
(
)
;
(
,
(
)
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
BREAK
;
}
WHILE
(
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
INT
,
;
CHAR
,
,
;
CHAR
;
CHAR
;
INT
;
INT
=
;
IF
(
)
CONTINUE
;
(
,
)
;
(
,
)
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
(
)
;
CONTINUE
;
}
(
)
;
(
,
)
;
(
,
)
;
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
=
;
CONTINUE
;
}
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
)
)
{
;
}
}
}
IF
(
)
CONTINUE
;
=
(
(
CHAR
)
(
)
)
;
(
,
,
(
CHAR
)
(
)
)
;
FOR
(
=
,
=
;
;
)
{
CHAR
,
,
;
IF
(
(
,
)
)
{
IF
(
(
,
,
)
)
{
=
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
IF
(
(
,
)
)
(
,
)
=
;
=
(
)
;
;
}
}
}
=
;
=
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
,
)
;
(
,
)
;
;
}
IF
(
)
(
,
)
;
}
STATIC
INT
(
CONST
VOID
,
CONST
VOID
)
{
CONST
=
(
CONST
)
;
CONST
=
(
CONST
)
;
IF
(
(
,
)
)
RETURN
;
ELSE
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
ELSE
IF
(
(
,
)
)
RETURN
;
RETURN
(
,
)
;
}
(
VOID
)
{
EXTERN
;
EXTERN
;
EXTERN
;
CHAR
;
CHAR
;
INT
=
;
INT
=
;
INT
=
;
=
(
,
,
)
;
STATIC
CONST
CHAR
=
{
,
,
,
}
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
(
,
)
;
IF
(
(
,
)
)
{
(
,
(
,
)
)
;
(
,
)
=
;
}
ELSE
IF
(
(
,
)
)
{
(
,
(
,
)
)
;
(
,
)
=
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
(
,
,
(
)
,
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
,
)
)
{
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
;
BREAK
;
}
}
}
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
FOR
(
=
;
(
)
(
)
;
)
IF
(
(
)
)
BREAK
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
EXTERN
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
;
;
CHAR
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
(
,
,
)
;
=
;
IF
(
)
{
STATIC
INT
;
INT
=
;
;
(
,
,
(
)
)
;
(
,
(
)
,
,
)
;
=
(
)
;
(
,
(
)
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
IF
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
(
)
(
)
,
(
)
(
)
,
,
)
;
;
(
)
;
(
,
(
)
,
,
,
)
;
(
,
,
)
;
}
}
CONST
CHAR
(
INT
)
{
INT
;
IF
(
)
{
CHAR
;
(
,
)
;
(
,
(
)
,
,
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
=
;
}
(
)
;
=
;
=
;
}
}
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
EXTERN
VOID
(
VOID
)
;
EXTERN
CONST
CHAR
(
INT
)
;
(
,
)
;
}
CONST
CHAR
(
INT
)
{
SWITCH
(
)
{
CASE
CASE
CASE
(
)
;
BREAK
;
CASE
CASE
=
;
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
(
,
,
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
,
,
,
,
)
;
ELSE
(
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
INT
)
{
CONST
CHAR
;
IF
(
)
IF
(
(
=
(
)
)
)
(
(
CHAR
)
)
;
}
__E__O__F__
STATIC
VOID
(
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
CONST
CHAR
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
,
INT
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
,
INT
)
;
EXTERN
;
EXTERN
;
VOID
(
)
{
IF
(
)
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
ELSE
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
IF
(
)
(
)
;
}
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
)
{
INT
;
CHAR
=
;
IF
(
)
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
,
)
;
}
(
,
,
)
;
IF
(
(
)
)
{
INT
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
(
INT
)
(
(
)
)
)
)
{
(
(
)
,
,
)
;
}
ELSE
{
(
(
)
,
,
)
;
}
}
}
(
,
INT
)
{
EXTERN
INT
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
IF
(
)
{
SWITCH
(
)
{
CASE
DEFAULT
RETURN
;
}
}
IF
(
(
(
)
)
(
(
(
)
(
)
)
)
)
{
CHAR
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
=
;
(
)
;
}
RETURN
;
}
SWITCH
(
)
{
CASE
CASE
CASE
IF
(
)
{
(
,
,
(
)
)
;
;
IF
(
)
{
;
}
}
BREAK
;
CASE
CASE
(
,
,
(
)
)
;
BREAK
;
CASE
CASE
CASE
CASE
RETURN
;
CASE
DEFAULT
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
{
=
;
=
;
IF
(
)
{
;
}
}
}
RETURN
;
}
VOID
(
,
VOID
)
{
IF
(
)
=
;
IF
(
)
{
=
;
(
(
)
)
=
;
;
}
=
(
)
;
}
VOID
(
,
INT
)
{
;
IF
(
)
{
IF
(
(
=
(
)
)
)
{
IF
(
)
RETURN
;
}
}
IF
(
)
{
WHILE
(
)
{
=
(
)
;
IF
(
)
IF
(
)
BREAK
;
;
IF
(
)
=
;
}
}
ELSE
{
WHILE
(
)
{
=
(
)
;
IF
(
)
IF
(
)
BREAK
;
;
IF
(
)
=
;
}
}
}
VOID
(
)
{
INT
;
=
(
(
)
)
;
;
=
(
)
;
}
VOID
(
)
{
INT
;
;
FOR
(
=
;
;
)
{
SWITCH
(
(
(
)
)
)
{
CASE
(
(
)
)
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
}
}
=
(
)
;
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
(
,
,
(
(
INT
)
(
(
)
)
)
)
;
}
ELSE
{
(
,
,
(
(
INT
)
(
(
)
)
)
)
;
}
}
IF
(
)
{
IF
(
)
(
(
VOID
)
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
}
ELSE
{
(
)
;
}
}
VOID
(
CONST
CHAR
)
{
IF
(
)
{
INT
=
(
)
;
INT
=
;
INT
=
;
INT
=
;
(
,
,
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
,
,
)
;
}
}
VOID
(
INT
,
INT
,
CONST
CHAR
)
{
UNSIGNED
;
FOR
(
=
;
(
)
;
)
{
(
(
)
,
,
)
;
}
}
VOID
(
INT
,
INT
,
CONST
CHAR
)
{
UNSIGNED
;
FOR
(
=
;
(
)
;
)
{
(
(
)
,
,
)
;
}
}
VOID
(
INT
,
INT
,
CONST
CHAR
)
{
UNSIGNED
;
FOR
(
=
;
(
)
;
)
{
(
(
)
,
,
(
)
)
;
}
}
VOID
(
INT
,
INT
,
CONST
CHAR
)
{
UNSIGNED
;
FOR
(
=
;
(
)
;
)
{
(
(
)
,
,
(
)
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
=
(
)
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
RETURN
(
(
)
)
;
CASE
(
(
)
)
;
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
}
}
RETURN
;
}
VOID
(
,
CONST
CHAR
)
{
=
;
}
VOID
(
,
INT
)
{
=
(
)
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
(
(
)
,
)
;
BREAK
;
CASE
(
(
)
,
)
;
BREAK
;
}
}
}
INT
(
)
{
INT
;
INT
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
INT
=
;
CONST
CHAR
=
(
(
)
)
;
WHILE
(
)
,
;
;
}
ELSE
{
;
}
}
RETURN
;
}
VOID
(
)
{
INT
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
)
{
CONST
CHAR
;
INT
=
;
(
,
,
)
;
=
;
(
,
,
,
,
)
;
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
)
{
IF
(
)
(
,
,
)
;
}
VOID
(
,
INT
)
{
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
)
;
}
VOID
(
)
{
INT
;
(
,
,
)
;
=
(
)
(
FLOAT
)
(
)
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
)
;
(
(
INT
)
(
(
)
)
,
,
)
;
}
VOID
(
)
{
;
IF
(
)
=
;
IF
(
)
(
)
;
}
VOID
(
,
INT
)
{
;
IF
(
)
=
;
ELSE
IF
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
,
)
;
}
IF
(
(
,
)
)
{
(
,
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
=
;
(
,
,
)
;
(
,
(
,
)
)
;
(
,
,
)
;
}
}
__E__O__F__
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
;
INT
;
;
=
;
INT
=
;
;
;
;
;
;
;
INT
;
INT
;
(
)
;
INT
;
;
;
;
INT
;
;
;
;
;
;
;
;
INT
;
;
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
(
)
;
=
(
,
,
)
;
IF
(
)
(
)
;
ELSE
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
(
)
)
RETURN
;
(
)
;
=
;
=
;
=
;
=
;
(
,
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
(
)
;
(
,
,
(
)
)
;
}
=
;
}
(
CHAR
,
)
{
INT
;
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
(
)
)
(
,
,
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
RETURN
;
}
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
IF
(
)
(
,
)
;
;
}
=
;
(
,
,
(
)
)
;
(
,
)
;
=
;
RETURN
;
}
(
CHAR
,
CHAR
)
{
;
CHAR
;
INT
;
=
(
)
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
IF
(
)
(
,
)
;
;
}
=
;
(
,
,
(
)
)
;
(
,
)
;
=
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
;
=
;
}
(
CHAR
)
{
;
IF
(
)
RETURN
;
=
(
,
)
;
=
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
(
)
;
(
,
,
(
)
)
;
}
ELSE
{
IF
(
)
{
=
;
(
(
)
,
)
;
}
}
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
)
;
}
=
;
}
(
INT
,
INT
)
{
INT
;
INT
;
INT
;
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
BREAK
;
}
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
;
=
;
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
,
FLOAT
,
FLOAT
,
INT
,
INT
)
{
;
;
,
,
;
;
IF
(
)
{
=
=
;
RETURN
;
}
(
,
,
)
;
=
(
)
;
;
IF
(
)
=
;
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
=
(
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
}
VOID
(
)
{
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
(
,
)
;
}
ELSE
(
,
)
;
(
,
,
,
,
)
;
}
(
VOID
)
{
;
=
;
IF
(
)
RETURN
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
;
;
IF
(
)
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
(
)
;
=
;
=
(
)
;
=
;
(
)
;
}
STRUCT
(
,
CHAR
)
{
INT
;
CHAR
;
STRUCT
;
;
CHAR
;
CHAR
;
CHAR
;
=
;
=
;
IF
(
)
{
=
(
,
)
;
IF
(
)
{
;
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
}
}
IF
(
)
(
,
)
;
(
,
(
)
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
IF
(
)
{
(
)
;
=
(
)
;
}
ELSE
{
(
,
(
)
,
,
,
)
;
=
(
,
)
;
}
}
RETURN
;
}
VOID
(
,
INT
,
INT
,
,
FLOAT
,
FLOAT
,
FLOAT
)
{
;
INT
;
,
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
(
,
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
(
)
;
}
ELSE
IF
(
)
{
=
;
=
(
)
;
}
ELSE
{
;
}
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
=
)
;
=
;
=
;
=
;
=
;
}
VOID
(
CHAR
)
{
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
ELSE
=
;
(
)
;
IF
(
)
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
=
=
;
=
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
(
,
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
INT
;
INT
,
,
,
;
;
;
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
=
;
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
(
)
(
)
;
=
;
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
(
)
(
)
;
=
;
(
,
,
,
,
)
;
;
;
}
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
)
{
INT
;
INT
,
;
FLOAT
;
IF
(
)
RETURN
;
IF
(
)
=
;
=
(
FLOAT
)
;
IF
(
)
{
IF
(
)
{
FOR
(
=
;
;
)
{
=
(
)
;
;
=
(
(
(
SHORT
)
)
)
;
=
(
(
(
SHORT
)
)
)
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
BREAK
;
=
(
)
;
;
=
(
(
(
SHORT
)
)
)
;
=
(
(
(
SHORT
)
)
)
;
}
}
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
BREAK
;
=
(
)
;
;
=
(
(
(
SHORT
)
)
)
;
=
(
(
(
SHORT
)
)
)
;
}
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
BREAK
;
=
(
)
;
;
=
(
(
CHAR
)
)
;
=
(
(
CHAR
)
)
;
}
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
BREAK
;
=
(
)
;
;
=
(
(
(
)
)
)
;
=
(
(
(
)
)
)
;
}
}
}
VOID
(
,
,
,
)
{
INT
;
INT
;
;
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
(
)
)
;
CONTINUE
;
}
(
)
;
IF
(
)
{
(
,
,
(
)
)
;
CONTINUE
;
}
}
(
)
;
IF
(
)
{
=
;
=
;
FOR
(
=
;
;
,
)
IF
(
(
)
)
{
(
,
,
,
)
;
;
}
(
,
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
STATIC
INT
;
STATIC
INT
;
INT
;
=
;
=
(
)
;
IF
(
)
{
;
IF
(
)
{
=
;
=
;
(
)
;
}
}
=
;
=
;
}
VOID
(
VOID
)
{
UNSIGNED
;
INT
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
(
)
;
=
;
}
=
;
=
(
)
(
)
;
=
(
)
;
IF
(
)
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
=
;
WHILE
(
(
)
)
{
IF
(
(
(
)
,
)
)
{
(
,
(
)
)
;
(
,
)
;
}
ELSE
(
,
(
)
)
;
=
(
)
;
(
,
,
,
,
,
,
)
;
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
INT
,
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
{
=
(
)
;
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
,
,
)
;
}
ELSE
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
}
(
,
)
;
}
__E__O__F__
INT
;
(
INT
)
;
VOID
(
,
INT
,
INT
,
)
{
INT
;
INT
;
FLOAT
;
INT
;
INT
,
,
;
;
=
;
IF
(
)
RETURN
;
=
(
FLOAT
)
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
(
(
SIGNED
CHAR
)
)
=
(
INT
)
(
(
UNSIGNED
CHAR
)
(
)
)
;
}
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
(
(
(
SHORT
)
)
)
;
ELSE
=
(
INT
)
(
(
UNSIGNED
CHAR
)
(
)
)
;
IF
(
)
(
(
SHORT
)
)
=
;
ELSE
(
(
SIGNED
CHAR
)
)
=
;
}
}
}
(
)
{
CHAR
;
;
;
INT
;
FLOAT
;
;
INT
;
CHAR
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
)
;
ELSE
(
,
(
)
,
,
)
;
=
(
,
(
VOID
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
RETURN
;
}
=
(
FLOAT
)
;
=
;
=
;
=
=
(
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
;
;
;
;
INT
;
SHORT
(
VOID
)
{
SHORT
=
;
=
;
=
(
(
)
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
;
RETURN
;
}
VOID
(
CHAR
)
{
WHILE
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
=
;
RETURN
;
}
;
=
(
(
)
)
;
IF
(
(
,
,
)
)
RETURN
;
}
}
VOID
(
CHAR
)
{
=
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
;
=
;
DO
{
(
,
,
)
;
;
=
(
)
;
(
,
(
INT
)
(
)
,
,
)
;
(
)
;
}
WHILE
(
)
;
}
(
CHAR
,
,
INT
)
{
;
INT
;
INT
;
INT
;
(
,
,
(
)
)
;
IF
(
)
RETURN
;
=
;
=
;
(
)
;
IF
(
(
(
,
,
)
)
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
;
=
(
)
;
(
)
;
IF
(
)
{
;
=
(
)
;
(
)
;
IF
(
)
{
IF
(
(
,
,
)
)
{
;
=
(
)
;
=
;
}
}
}
ELSE
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
}
ELSE
=
;
=
;
RETURN
;
}
__E__O__F__
;
INT
;
INT
,
,
;
SHORT
;
VOID
(
VOID
)
;
(
)
VOID
(
VOID
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
ELSE
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
ELSE
=
;
}
}
(
)
VOID
(
VOID
)
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
VOID
(
UNSIGNED
LONG
,
INT
)
{
INT
;
INT
;
=
(
INT
)
;
=
;
WHILE
(
)
{
=
(
(
)
)
;
=
(
SHORT
)
(
)
;
=
(
)
;
IF
(
)
=
;
;
(
)
;
;
(
)
;
}
}
VOID
(
INT
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
UNSIGNED
LONG
;
=
(
UNSIGNED
LONG
)
;
IF
(
)
{
INT
;
INT
;
=
(
)
;
FOR
(
=
;
;
)
=
=
(
(
)
)
;
}
IF
(
)
{
(
,
)
;
}
ELSE
{
=
(
INT
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
{
SHORT
=
(
SHORT
)
;
WHILE
(
)
{
=
;
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
=
;
=
(
)
;
}
}
ELSE
IF
(
)
{
UNSIGNED
CHAR
=
(
UNSIGNED
CHAR
)
;
WHILE
(
)
{
=
;
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
=
(
)
;
=
(
)
;
}
}
}
}
VOID
(
,
,
INT
,
INT
)
;
VOID
(
,
,
INT
,
INT
)
;
VOID
(
INT
)
{
INT
;
INT
;
;
;
INT
,
;
;
=
;
WHILE
(
)
{
=
;
IF
(
)
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
(
)
;
CONTINUE
;
}
IF
(
)
=
;
BREAK
;
}
IF
(
)
{
(
,
,
(
)
(
)
)
;
}
ELSE
{
INT
;
INT
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
FOR
(
;
;
)
{
=
=
;
}
}
=
;
FOR
(
=
;
;
,
)
{
=
;
WHILE
(
)
{
IF
(
(
)
)
BREAK
;
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
{
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
;
}
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
}
}
}
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
=
(
(
SIGNED
CHAR
)
)
;
}
}
(
)
VOID
(
,
,
INT
,
INT
)
{
INT
;
INT
,
;
UNSIGNED
CHAR
;
INT
;
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
SIGNED
CHAR
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
;
;
}
;
}
(
)
VOID
(
,
,
INT
,
INT
)
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
VOID
(
,
,
INT
,
INT
)
{
INT
;
INT
,
;
INT
,
;
SIGNED
SHORT
;
INT
;
;
=
;
=
;
=
(
SIGNED
SHORT
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
)
;
=
(
)
;
;
;
}
;
}
__E__O__F__
STATIC
UNSIGNED
LONG
;
STATIC
UNSIGNED
LONG
;
STATIC
UNSIGNED
LONG
,
;
STATIC
UNSIGNED
LONG
;
(
)
VOID
(
VOID
)
{
,
}
(
)
VOID
(
VOID
)
{
,
,
,
,
,
}
(
)
STATIC
(
)
UNSIGNED
LONG
(
VOID
)
{
,
,
}
(
DEFAULT
)
VOID
(
UNSIGNED
LONG
,
UNSIGNED
)
{
INT
;
UNSIGNED
LONG
;
=
;
=
;
FOR
(
=
;
;
)
{
(
)
;
=
(
)
;
IF
(
)
=
;
}
;
=
(
(
UNSIGNED
LONG
)
)
;
}
UNSIGNED
LONG
(
VOID
)
{
RETURN
;
}
__E__O__F__
(
)
;
EXTERN
;
(
,
FLOAT
)
;
;
;
INT
;
FLOAT
;
VOID
(
VOID
)
{
;
INT
,
;
IF
(
)
=
;
ELSE
=
;
=
;
WHILE
(
)
{
;
IF
(
)
=
;
=
;
IF
(
(
)
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
}
}
VOID
(
,
FLOAT
)
{
(
,
,
)
;
}
VOID
(
,
FLOAT
)
{
;
IF
(
)
(
,
,
)
;
IF
(
)
{
IF
(
)
{
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
(
)
;
(
,
)
;
}
ELSE
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
(
)
)
{
IF
(
)
{
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
}
}
}
VOID
(
,
FLOAT
)
{
(
,
)
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
(
)
)
{
IF
(
)
{
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
}
}
}
VOID
(
,
FLOAT
)
{
;
(
,
,
)
;
=
(
)
;
(
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
,
FLOAT
)
{
IF
(
)
(
,
,
)
;
IF
(
(
)
)
RETURN
;
(
)
;
}
INT
(
,
)
{
;
FLOAT
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
;
;
;
(
,
)
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
;
FLOAT
;
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
(
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
=
;
=
;
}
=
;
(
,
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
=
(
)
;
IF
(
)
{
=
=
;
(
)
;
(
,
,
(
)
,
)
;
RETURN
;
}
=
;
;
=
;
=
;
(
)
;
}
(
)
{
;
;
INT
;
IF
(
)
{
IF
(
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
IF
(
)
RETURN
;
=
;
IF
(
(
(
)
)
(
)
)
{
=
;
IF
(
)
{
RETURN
;
}
}
ELSE
IF
(
(
)
)
{
=
;
=
;
}
ELSE
IF
(
(
)
(
(
)
)
(
)
)
{
=
;
=
;
}
ELSE
{
=
;
IF
(
)
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
IF
(
)
RETURN
;
}
ELSE
RETURN
;
IF
(
)
{
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
{
RETURN
;
}
IF
(
)
{
IF
(
(
,
)
)
{
RETURN
;
}
}
ELSE
IF
(
)
{
IF
(
(
,
)
)
{
RETURN
;
}
}
=
;
IF
(
(
,
)
)
{
;
IF
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
}
}
}
ELSE
{
;
IF
(
)
{
IF
(
(
,
)
)
RETURN
;
}
ELSE
{
IF
(
(
,
)
)
RETURN
;
}
(
,
,
)
;
IF
(
(
)
)
{
RETURN
;
}
IF
(
)
IF
(
(
,
)
)
RETURN
;
=
(
)
;
(
)
;
;
=
;
}
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
(
)
{
FLOAT
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
,
;
FLOAT
;
;
IF
(
)
{
(
,
)
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
)
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
{
RETURN
;
}
IF
(
)
;
ELSE
IF
(
)
;
IF
(
(
)
)
{
=
;
=
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
RETURN
;
}
VOID
(
)
{
=
;
(
)
;
IF
(
(
)
)
{
(
)
;
=
;
}
}
VOID
(
)
{
=
;
(
)
;
IF
(
(
)
)
{
(
)
;
=
;
}
}
;
VOID
(
,
FLOAT
)
{
FLOAT
;
=
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
RETURN
;
=
;
(
,
,
)
;
}
(
,
FLOAT
)
{
;
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
(
)
;
}
ELSE
{
=
;
RETURN
;
}
}
}
=
;
=
;
IF
(
(
)
(
)
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
;
}
}
ELSE
{
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
}
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
(
)
;
}
ELSE
{
IF
(
)
{
=
;
(
)
;
}
ELSE
{
=
;
(
)
;
}
RETURN
;
}
}
=
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
RETURN
(
)
;
}
VOID
(
,
FLOAT
)
{
;
;
;
;
;
FLOAT
,
;
;
,
;
FLOAT
,
,
;
,
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
)
;
IF
(
(
)
)
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
;
(
,
)
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
IF
(
(
)
(
(
)
)
)
{
(
,
)
;
=
;
RETURN
;
}
=
;
=
(
)
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
(
)
;
=
;
}
IF
(
)
{
;
=
;
IF
(
)
{
;
=
;
(
,
)
;
=
;
}
ELSE
IF
(
)
{
;
=
(
)
;
}
ELSE
{
=
(
)
;
}
IF
(
)
{
(
,
)
;
=
;
=
=
;
=
;
}
}
(
,
,
)
;
=
(
)
;
IF
(
)
{
;
=
;
}
(
,
)
;
IF
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
,
)
;
=
(
)
;
=
;
=
(
(
)
)
;
=
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
=
(
,
,
,
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
=
(
,
,
,
,
,
)
;
=
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
,
)
;
}
(
,
)
;
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
=
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
,
)
;
}
(
,
)
;
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
=
(
)
;
}
}
}
(
,
)
;
(
)
;
IF
(
)
=
;
}
__E__O__F__
VOID
(
)
{
,
,
;
;
,
;
;
INT
;
;
;
IF
(
)
{
=
;
RETURN
;
}
=
;
(
,
)
;
(
,
)
;
;
(
,
)
;
IF
(
)
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
)
;
IF
(
)
=
;
IF
(
)
;
=
(
,
,
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
;
}
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
;
}
=
;
(
,
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
)
;
(
,
)
;
=
;
;
(
)
;
IF
(
(
(
)
)
)
{
CHAR
;
=
;
(
,
,
)
;
(
)
;
(
)
;
(
,
)
;
}
}
VOID
(
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
DO
{
;
IF
(
)
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
BREAK
;
}
WHILE
(
)
;
=
;
=
;
}
VOID
(
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
DO
{
;
IF
(
)
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
BREAK
;
}
WHILE
(
)
;
=
;
=
;
}
__E__O__F__
CHAR
(
)
{
CHAR
;
STATIC
CHAR
;
=
;
IF
(
)
RETURN
;
(
,
(
,
)
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
(
INT
)
(
)
)
{
=
;
RETURN
;
}
RETURN
;
}
(
,
)
{
CHAR
;
CHAR
;
IF
(
(
(
INT
)
(
)
(
)
)
)
RETURN
;
(
,
(
)
)
;
(
,
(
)
)
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
,
INT
)
{
;
INT
,
;
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
=
;
RETURN
;
}
=
;
}
VOID
(
,
INT
)
{
;
INT
,
;
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
=
;
RETURN
;
}
=
;
}
VOID
(
)
{
;
=
;
IF
(
)
RETURN
;
(
,
)
;
}
VOID
(
)
{
CHAR
;
;
INT
;
INT
;
;
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
IF
(
(
(
)
,
)
)
{
IF
(
(
)
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
RETURN
;
}
IF
(
(
,
)
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
;
}
IF
(
)
RETURN
;
}
IF
(
(
,
)
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
,
,
)
;
}
IF
(
)
RETURN
;
}
IF
(
(
,
)
)
{
;
=
(
)
;
(
)
=
;
=
(
)
;
(
)
=
;
=
(
)
;
=
(
)
;
(
)
=
;
IF
(
)
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
=
;
(
,
)
;
(
,
,
,
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
=
;
}
RETURN
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
IF
(
(
)
)
=
(
(
)
)
;
ELSE
;
}
ELSE
{
=
(
)
;
=
;
(
,
)
;
(
,
,
,
)
;
IF
(
)
(
)
;
}
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
;
IF
(
(
)
)
=
;
ELSE
=
;
(
,
,
)
;
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
;
IF
(
(
)
)
=
;
ELSE
=
;
(
,
,
)
;
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
,
)
;
}
VOID
(
)
{
INT
;
;
CHAR
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
;
CHAR
;
IF
(
(
(
)
,
)
(
=
(
)
)
)
{
(
,
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
;
=
;
=
;
=
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
FOR
(
=
;
;
)
{
(
)
;
}
(
,
)
;
}
VOID
(
)
{
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
;
=
;
IF
(
)
RETURN
;
(
,
)
;
}
VOID
(
)
{
;
INT
,
;
;
INT
;
=
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
,
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
;
INT
,
;
;
INT
;
=
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
,
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
;
INT
;
;
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
,
)
;
}
VOID
(
)
{
;
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
;
=
;
=
;
(
,
,
,
,
)
;
}
VOID
(
)
{
=
;
=
;
=
;
IF
(
)
(
)
;
=
;
}
INT
(
VOID
CONST
,
VOID
CONST
)
{
INT
,
;
=
(
INT
)
;
=
(
INT
)
;
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
INT
;
INT
;
CHAR
;
CHAR
;
INT
;
=
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
;
}
(
,
,
(
)
,
)
;
=
;
FOR
(
=
;
;
)
{
(
,
(
)
,
,
,
)
;
IF
(
(
)
(
)
(
)
)
{
(
,
)
;
BREAK
;
}
(
,
)
;
}
(
,
,
,
,
)
;
}
VOID
(
)
{
INT
;
=
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
SWITCH
(
)
{
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
DEFAULT
(
,
,
)
;
=
;
=
;
BREAK
;
}
}
(
)
{
INT
;
;
IF
(
)
{
=
;
IF
(
)
{
(
,
,
,
(
INT
)
(
)
)
;
RETURN
;
}
=
;
IF
(
)
=
(
(
)
(
)
)
;
IF
(
)
{
=
;
(
,
,
,
(
INT
)
)
;
RETURN
;
}
=
(
)
(
(
)
(
)
)
;
=
;
}
RETURN
;
}
VOID
(
,
,
)
{
INT
;
;
CHAR
;
CHAR
;
IF
(
(
)
)
RETURN
;
IF
(
(
(
INT
)
(
)
(
)
)
)
=
;
IF
(
)
(
,
(
)
,
,
)
;
ELSE
(
,
(
)
,
,
)
;
IF
(
)
{
(
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
{
=
(
)
;
IF
(
)
{
;
(
)
=
;
}
(
,
)
;
}
IF
(
(
)
)
=
;
(
,
)
;
IF
(
(
)
)
RETURN
;
IF
(
)
(
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
(
,
)
)
CONTINUE
;
}
(
,
,
,
)
;
}
}
VOID
(
)
{
CHAR
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
,
)
(
,
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
(
,
,
)
;
}
__E__O__F__
(
,
)
{
;
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
,
,
INT
,
)
{
IF
(
)
=
;
=
;
IF
(
(
)
(
)
)
{
IF
(
(
)
)
{
;
IF
(
)
;
IF
(
(
,
)
)
=
;
}
}
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
=
;
(
)
;
}
(
,
,
,
,
)
;
}
VOID
(
INT
,
,
,
INT
)
{
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
STATIC
INT
(
,
,
,
INT
,
INT
)
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
=
;
}
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
;
FLOAT
;
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
(
)
;
}
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
(
,
,
,
)
;
=
;
=
;
IF
(
)
;
ELSE
;
RETURN
;
}
STATIC
INT
(
,
,
,
INT
,
INT
,
INT
)
{
;
INT
;
INT
;
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
=
(
(
(
)
)
)
;
ELSE
=
(
(
(
)
)
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
;
(
,
,
,
)
;
RETURN
;
}
VOID
(
,
)
{
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
IF
(
)
{
IF
(
)
{
IF
(
(
,
)
)
{
=
;
RETURN
;
}
=
;
}
=
;
IF
(
(
)
)
(
)
;
RETURN
;
}
IF
(
(
(
(
)
)
(
(
)
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
)
{
IF
(
)
IF
(
)
=
;
=
;
IF
(
(
)
)
(
)
;
}
ELSE
{
IF
(
)
IF
(
)
=
;
=
;
(
)
;
}
}
(
,
)
{
IF
(
)
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
,
,
,
,
,
INT
,
INT
,
INT
,
INT
)
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
(
(
(
(
INT
)
(
)
(
)
)
)
)
)
{
IF
(
(
,
)
)
{
IF
(
(
INT
)
(
)
)
=
;
ELSE
;
}
}
=
;
IF
(
)
{
;
IF
(
)
=
;
}
=
;
IF
(
)
=
;
ELSE
=
;
(
)
;
IF
(
(
)
(
)
(
)
(
)
(
)
)
;
=
(
,
)
;
IF
(
)
=
;
IF
(
(
)
)
{
IF
(
(
)
(
)
(
)
(
)
(
)
)
{
;
FLOAT
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
(
FLOAT
)
,
)
;
ELSE
(
,
(
FLOAT
)
,
)
;
(
,
,
)
;
}
}
=
;
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
(
,
,
,
)
;
}
IF
(
(
)
(
)
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
=
;
=
;
}
IF
(
(
(
INT
)
)
)
{
=
=
;
}
ELSE
{
=
(
,
,
,
,
)
;
;
=
(
,
,
,
,
,
)
;
;
}
;
=
(
,
)
;
IF
(
(
)
(
,
)
)
RETURN
;
(
,
)
;
IF
(
)
{
IF
(
(
)
(
)
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
IF
(
(
)
)
=
;
IF
(
)
{
IF
(
(
)
(
)
)
;
(
,
,
,
,
)
;
RETURN
;
}
}
IF
(
)
{
(
,
)
;
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
IF
(
)
=
;
}
}
ELSE
IF
(
)
{
IF
(
(
)
(
)
(
)
)
(
,
,
,
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
,
,
)
;
}
IF
(
)
{
;
;
;
;
(
,
)
;
}
}
VOID
(
,
,
FLOAT
,
,
FLOAT
,
INT
)
{
FLOAT
;
=
;
;
;
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
IF
(
(
,
)
)
{
(
,
,
)
;
(
,
,
,
,
,
,
(
INT
)
,
(
INT
)
,
,
)
;
}
}
}
}
__E__O__F__
TYPEDEF
ENUM
{
,
,
,
,
}
;
TYPEDEF
ENUM
{
,
,
,
}
;
TYPEDEF
STRUCT
{
INT
,
;
INT
,
;
FLOAT
;
INT
;
;
FLOAT
;
INT
;
;
;
CHAR
;
INT
;
INT
;
FLOAT
;
CHAR
;
;
}
;
;
;
;
;
;
;
;
;
;
;
;
CHAR
=
;
STATIC
CHAR
=
{
,
,
,
,
}
;
VOID
(
,
CHAR
)
{
(
)
;
(
)
;
(
,
)
;
}
STATIC
(
,
,
FLOAT
)
{
;
INT
;
IF
(
)
=
;
ELSE
;
FOR
(
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
(
(
)
)
;
IF
(
(
)
)
CONTINUE
;
RETURN
;
}
RETURN
;
}
STATIC
VOID
(
,
,
,
)
{
(
,
,
)
;
(
,
)
;
;
(
,
)
;
;
(
,
)
;
;
;
(
,
,
)
;
(
,
)
;
;
(
,
)
;
;
(
,
)
;
;
;
}
STATIC
(
,
)
{
;
;
INT
;
;
IF
(
)
RETURN
;
(
,
,
,
)
;
(
,
)
;
;
FOR
(
=
;
;
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
RETURN
;
}
STATIC
;
STATIC
;
VOID
(
VOID
)
{
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
(
,
,
(
)
)
;
(
)
;
IF
(
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
}
CHAR
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
}
RETURN
;
}
CHAR
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
}
RETURN
;
}
INT
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
}
RETURN
;
}
(
VOID
)
;
(
VOID
)
;
FLOAT
(
)
;
VOID
(
,
CHAR
)
{
INT
=
;
CHAR
;
CHAR
;
(
,
(
)
,
,
)
;
IF
(
(
=
(
,
)
)
)
=
;
ELSE
(
,
)
;
SWITCH
(
)
{
CASE
(
,
(
,
,
,
)
)
;
BREAK
;
CASE
(
,
(
,
,
,
)
)
;
BREAK
;
DEFAULT
(
,
(
,
,
)
)
;
BREAK
;
}
}
VOID
(
)
{
;
INT
;
INT
=
,
=
;
=
;
IF
(
(
(
INT
)
)
)
{
=
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
}
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
=
;
}
(
)
{
,
,
;
INT
=
;
INT
;
FLOAT
,
,
;
CHAR
;
IF
(
)
IF
(
(
INT
)
(
)
)
RETURN
(
)
;
ELSE
RETURN
(
)
;
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
RETURN
(
)
;
}
=
;
=
=
;
=
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
(
)
;
IF
(
)
{
=
=
;
}
ELSE
;
=
(
)
;
=
;
DO
{
=
(
,
(
)
,
)
;
IF
(
)
;
}
WHILE
(
)
;
RETURN
;
}
VOID
(
,
,
)
{
INT
;
;
,
;
INT
;
,
;
CHAR
;
,
;
IF
(
)
{
IF
(
)
IF
(
)
;
IF
(
)
;
}
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
(
)
)
{
=
;
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
}
RETURN
;
}
IF
(
(
)
)
{
;
(
,
,
,
(
)
)
;
IF
(
)
;
RETURN
;
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
RETURN
;
}
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
)
)
BREAK
;
}
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
BREAK
;
=
;
}
(
,
,
)
;
(
,
,
)
;
IF
(
(
(
)
(
)
(
,
)
(
,
)
)
)
{
;
IF
(
)
(
,
,
,
(
)
)
;
ELSE
(
,
,
,
(
)
)
;
IF
(
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
IF
(
(
)
(
)
(
,
)
(
,
)
)
{
;
(
,
,
,
(
)
)
;
IF
(
)
;
RETURN
;
}
}
}
VOID
(
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
=
;
}
VOID
(
INT
)
{
CHAR
;
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
RETURN
;
}
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
)
(
)
;
ELSE
{
;
=
;
(
)
;
=
;
}
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
(
,
)
{
INT
;
INT
;
;
,
;
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
IF
(
(
)
)
{
IF
(
(
)
)
{
(
,
,
,
(
)
)
;
(
)
=
;
=
;
=
;
IF
(
)
;
ELSE
;
(
,
,
(
)
,
,
,
)
;
;
IF
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
ELSE
IF
(
)
{
IF
(
)
;
IF
(
)
{
(
,
,
)
;
;
}
IF
(
)
{
(
,
,
)
;
;
}
}
}
(
)
;
RETURN
;
}
RETURN
;
}
(
,
,
,
(
)
)
;
;
=
;
(
,
,
(
)
,
,
,
)
;
(
)
;
RETURN
;
}
(
,
,
,
(
)
)
;
;
(
)
=
;
=
;
IF
(
(
)
)
{
;
;
=
;
}
RETURN
;
}
STATIC
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
(
,
,
,
)
;
}
STATIC
VOID
(
)
{
IF
(
(
,
)
)
{
(
)
;
(
,
,
(
)
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
(
,
,
(
)
)
;
}
}
VOID
(
)
{
=
;
IF
(
(
)
)
{
=
(
,
)
;
(
)
=
;
(
,
,
,
(
)
)
;
}
ELSE
IF
(
(
)
)
{
=
(
,
)
;
(
)
=
;
(
,
,
,
(
)
)
;
}
IF
(
)
{
=
;
=
;
=
;
}
}
(
,
)
{
IF
(
(
)
)
(
,
,
)
;
ELSE
(
,
,
)
;
RETURN
;
}
STATIC
VOID
(
)
{
IF
(
)
=
(
(
(
)
)
)
;
=
;
}
VOID
(
)
{
;
;
FLOAT
;
=
(
,
,
)
;
(
,
)
;
=
(
,
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
;
=
;
=
;
=
(
,
,
)
;
(
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
(
,
)
;
(
)
;
=
;
=
;
}
VOID
(
)
{
(
)
;
IF
(
)
{
IF
(
(
)
)
{
;
}
IF
(
(
)
)
{
;
}
}
IF
(
(
)
)
=
(
)
;
ELSE
IF
(
(
)
)
=
(
)
;
ELSE
=
;
}
VOID
(
VOID
)
{
INT
;
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
;
ELSE
IF
(
)
;
}
}
VOID
(
)
{
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
{
(
,
,
)
;
=
;
}
}
STATIC
VOID
(
)
{
,
;
;
,
;
FLOAT
=
,
;
INT
;
=
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
=
(
)
;
RETURN
;
}
(
,
,
,
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
(
,
)
)
{
=
;
=
;
}
}
IF
(
)
=
(
)
;
}
VOID
(
)
{
;
INT
;
INT
,
;
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
(
,
)
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
=
;
=
;
WHILE
(
)
{
IF
(
(
=
(
)
)
(
)
)
{
=
(
)
;
BREAK
;
}
;
}
=
(
)
;
=
(
,
(
)
,
)
;
IF
(
)
{
IF
(
)
{
INT
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
{
=
(
)
;
BREAK
;
}
}
ELSE
IF
(
)
=
(
)
;
}
=
(
)
;
=
(
,
(
)
,
)
;
IF
(
)
{
IF
(
)
{
INT
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
{
=
(
)
;
BREAK
;
}
}
ELSE
IF
(
)
=
(
)
;
}
=
;
=
;
IF
(
)
{
IF
(
)
IF
(
)
=
;
ELSE
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
=
;
=
;
=
;
IF
(
(
)
(
)
)
=
(
)
;
ELSE
IF
(
(
)
(
)
)
=
(
)
;
=
;
=
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
=
;
IF
(
)
(
)
;
}
VOID
(
)
{
}
VOID
(
)
{
}
VOID
(
)
{
IF
(
)
(
)
;
}
VOID
(
)
{
IF
(
)
{
FLOAT
=
;
;
IF
(
)
=
;
(
,
,
(
)
,
,
,
)
;
=
;
=
;
=
;
=
;
;
(
)
;
}
}
VOID
(
,
,
,
)
{
FLOAT
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
,
,
,
,
,
,
,
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
;
IF
(
)
=
;
(
,
,
(
)
,
,
,
)
;
(
,
,
(
)
,
,
,
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
)
;
}
VOID
(
)
{
,
,
,
,
;
;
FLOAT
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
;
IF
(
(
)
)
RETURN
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
)
;
VOID
(
)
{
,
;
FLOAT
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
ELSE
(
,
)
;
IF
(
(
,
)
)
{
FLOAT
=
;
IF
(
)
=
;
(
,
,
,
,
,
,
,
,
,
)
;
(
,
,
(
)
,
,
,
)
;
}
IF
(
)
{
(
)
;
RETURN
;
}
}
(
)
;
IF
(
)
{
,
;
(
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
FLOAT
=
;
IF
(
)
=
;
;
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
(
,
,
)
;
(
,
)
;
(
)
;
}
}
VOID
(
,
,
,
INT
,
INT
,
INT
)
{
;
;
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
}
VOID
(
,
,
INT
,
INT
)
{
,
;
;
;
FLOAT
=
;
IF
(
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
=
;
IF
(
)
=
;
(
,
,
(
)
,
,
,
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
INT
;
=
;
(
,
,
,
)
;
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
}
;
INT
;
IF
(
(
)
)
=
;
IF
(
(
)
)
{
(
)
;
IF
(
)
=
;
}
IF
(
)
{
=
;
=
;
}
=
;
(
,
,
,
,
,
,
,
)
;
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
=
;
}
}
VOID
(
)
{
CHAR
,
;
INT
;
=
(
)
;
IF
(
)
{
(
,
,
,
(
)
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
,
(
)
)
;
RETURN
;
}
=
;
;
=
;
=
;
=
(
,
)
;
(
,
)
;
IF
(
)
{
(
)
;
=
;
=
;
=
;
(
,
,
,
(
)
)
;
RETURN
;
}
=
;
(
,
,
,
,
)
;
=
;
(
)
;
=
;
(
,
,
,
(
)
)
;
}
VOID
(
,
)
{
CHAR
;
CHAR
;
INT
;
INT
,
,
,
;
INT
;
INT
;
INT
,
,
;
INT
;
;
;
INT
;
INT
=
;
=
=
;
=
=
;
=
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
;
;
}
=
;
=
;
(
,
,
,
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
(
,
,
)
;
IF
(
(
)
)
{
(
,
)
;
=
(
)
;
}
=
;
IF
(
)
{
=
;
=
;
(
(
)
,
,
(
)
,
,
(
)
,
)
;
IF
(
(
)
)
(
,
)
;
(
(
)
,
,
,
,
,
)
;
IF
(
(
)
)
(
(
)
,
,
)
;
IF
(
(
)
)
{
(
,
)
;
=
(
)
;
=
;
}
}
IF
(
)
{
=
;
=
;
(
(
)
,
,
(
)
,
,
(
)
,
)
;
IF
(
(
)
)
(
,
)
;
(
(
)
,
,
,
,
,
)
;
IF
(
(
)
)
(
(
)
,
,
)
;
IF
(
(
)
)
{
(
,
)
;
=
(
)
;
=
;
}
}
}
IF
(
)
=
;
ELSE
=
;
=
(
)
;
=
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
=
(
)
;
;
}
(
(
)
,
,
(
)
,
,
,
,
)
;
IF
(
(
)
)
{
(
,
)
;
=
(
)
;
}
IF
(
)
;
;
}
}
IF
(
)
(
(
)
,
,
(
)
,
)
;
IF
(
)
(
(
)
,
,
(
)
,
)
;
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
)
;
=
;
}
}
(
)
{
;
INT
;
=
;
WHILE
(
)
{
IF
(
(
=
(
)
)
(
)
)
{
RETURN
;
}
;
}
RETURN
;
}
(
,
)
{
;
INT
;
=
;
WHILE
(
)
{
IF
(
(
=
(
)
)
(
)
)
{
(
)
;
RETURN
;
}
;
}
(
)
;
=
;
RETURN
;
}
STATIC
VOID
(
,
)
;
STATIC
(
VOID
)
{
=
;
INT
=
(
)
;
WHILE
(
)
=
(
,
(
)
,
)
;
IF
(
)
=
(
,
(
)
,
)
;
RETURN
;
}
STATIC
VOID
(
)
{
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
)
;
}
ELSE
{
=
;
=
;
}
}
VOID
(
,
)
{
;
=
(
,
)
;
=
;
=
;
(
)
=
;
}
VOID
(
)
{
;
;
INT
;
=
;
WHILE
(
)
{
IF
(
(
=
(
)
)
(
)
)
{
=
(
,
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
;
(
)
=
;
}
;
}
}
STATIC
VOID
(
,
)
{
;
,
;
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
(
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
=
;
=
;
=
;
(
)
;
}
STATIC
VOID
(
)
{
;
;
INT
;
=
;
WHILE
(
)
{
IF
(
(
=
(
)
)
(
=
(
)
)
)
(
,
)
;
;
}
IF
(
)
(
)
;
}
VOID
(
)
{
;
IF
(
(
=
(
)
)
)
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
(
(
INT
)
)
)
RETURN
;
=
(
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
IF
(
(
)
)
(
)
;
}
(
)
;
}
INT
(
,
INT
)
{
STATIC
=
;
FLOAT
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
IF
(
(
)
)
{
(
,
,
(
)
,
,
,
)
;
RETURN
;
}
RETURN
;
}
INT
(
,
INT
)
{
STATIC
=
;
IF
(
)
=
(
)
;
IF
(
(
)
)
{
RETURN
;
}
RETURN
;
}
(
)
{
STATIC
=
;
FLOAT
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
IF
(
(
)
)
{
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
}
RETURN
;
}
RETURN
;
}
(
)
{
STATIC
=
;
IF
(
)
=
(
)
;
IF
(
(
)
)
RETURN
;
RETURN
;
}
VOID
(
)
{
STATIC
=
;
FLOAT
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
IF
(
(
)
)
{
=
;
(
,
,
(
)
,
,
,
)
;
}
}
VOID
(
)
{
STATIC
=
;
=
;
;
INT
;
FLOAT
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
IF
(
)
=
(
)
;
IF
(
(
)
)
{
IF
(
)
{
=
;
IF
(
)
{
;
IF
(
)
=
;
;
=
;
}
=
(
)
;
IF
(
)
{
;
IF
(
)
=
;
;
=
;
}
}
IF
(
)
{
=
;
(
,
,
(
)
,
,
,
)
;
}
}
}
(
)
{
STATIC
=
;
IF
(
)
=
(
)
;
IF
(
(
)
)
RETURN
;
RETURN
;
}
STRUCT
{
CHAR
;
INT
;
}
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
STATIC
VOID
(
,
CHAR
)
{
=
;
=
;
FLOAT
=
,
;
;
INT
=
;
INT
;
;
INT
=
;
,
;
=
;
;
WHILE
(
(
=
(
,
,
)
)
)
{
FOR
(
=
;
;
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
=
(
)
;
CONTINUE
;
}
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
{
=
;
=
;
=
;
=
(
,
)
;
}
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
(
=
(
,
(
)
,
)
)
(
=
(
,
(
)
,
)
)
)
{
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
BREAK
;
}
IF
(
(
=
(
)
)
)
{
(
,
)
;
RETURN
;
}
IF
(
)
(
,
)
;
ELSE
=
;
(
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
IF
(
)
(
,
)
;
ELSE
(
,
)
;
ELSE
(
,
)
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
CHAR
)
{
;
INT
,
;
INT
;
=
;
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
IF
(
)
(
(
)
,
,
(
)
,
)
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
(
(
)
,
,
,
)
;
}
}
IF
(
)
(
,
)
;
}
STATIC
VOID
(
,
CHAR
)
{
IF
(
)
(
,
)
;
ELSE
(
,
,
)
;
}
STATIC
VOID
(
,
CHAR
)
{
;
INT
;
=
;
WHILE
(
)
{
IF
(
(
=
(
)
)
(
)
)
{
(
,
,
)
;
RETURN
;
}
;
}
(
,
)
;
}
STATIC
VOID
(
,
CHAR
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
STATIC
VOID
(
,
CHAR
)
{
INT
;
;
INT
=
;
CHAR
;
CHAR
;
=
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
)
{
IF
(
(
)
(
)
(
)
)
{
IF
(
)
(
,
)
;
(
,
)
;
=
;
}
;
}
(
,
)
;
}
IF
(
)
{
IF
(
(
)
(
)
(
)
)
{
IF
(
)
(
,
)
;
(
,
)
;
}
(
,
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
CHAR
)
{
CHAR
;
CHAR
;
INT
;
CHAR
;
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
)
{
(
)
=
;
;
}
FOR
(
=
;
(
)
(
)
;
)
{
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
(
,
)
;
(
,
)
;
(
)
;
BREAK
;
CASE
CASE
(
,
)
;
(
,
)
;
(
)
;
BREAK
;
CASE
CASE
(
,
)
;
(
,
)
;
(
)
;
BREAK
;
CASE
CASE
(
,
)
;
(
,
)
;
(
)
;
BREAK
;
CASE
CASE
(
,
)
;
(
,
)
;
(
)
;
BREAK
;
CASE
CASE
(
,
)
;
(
,
)
;
(
)
;
BREAK
;
DEFAULT
=
;
}
}
ELSE
=
;
}
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
,
,
,
,
)
;
}
}
STATIC
VOID
(
)
{
=
(
)
;
=
;
}
VOID
(
)
{
=
;
=
;
=
(
)
;
IF
(
)
=
;
=
(
)
;
(
)
;
=
;
=
;
}
VOID
(
)
{
=
;
=
;
=
(
)
;
IF
(
)
=
;
=
(
)
;
(
)
;
=
;
=
;
}
STATIC
VOID
(
)
{
STATIC
CHAR
;
=
;
IF
(
)
(
,
,
(
)
)
;
ELSE
(
,
,
(
)
)
;
(
)
=
;
=
;
}
(
,
,
CHAR
)
{
INT
;
INT
;
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
(
)
;
=
;
(
,
,
(
)
)
;
(
,
,
)
;
(
,
)
;
(
,
,
,
,
(
INT
)
(
)
)
;
RETURN
;
}
VOID
(
)
;
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
;
(
)
;
}
(
)
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
}
}
IF
(
)
=
;
}
VOID
(
)
{
INT
,
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
BREAK
;
}
=
;
(
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
INT
=
;
=
;
=
;
=
=
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
=
;
;
=
(
(
(
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
}
}
VOID
(
VOID
)
{
=
;
(
,
)
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
(
)
;
}
(
VOID
)
{
IF
(
)
{
=
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
SWITCH
(
)
{
CASE
IF
(
)
(
,
)
;
=
;
(
)
;
BREAK
;
CASE
=
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
,
,
,
)
;
(
,
,
(
)
)
;
(
)
;
BREAK
;
}
=
;
}
VOID
(
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
(
,
,
,
,
(
INT
)
(
)
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
(
,
,
)
;
(
,
,
,
,
(
INT
)
(
)
)
;
}
VOID
(
)
{
INT
,
;
;
INT
,
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
(
,
,
)
;
=
=
;
FOR
(
=
,
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
}
IF
(
)
{
(
,
)
;
=
;
=
;
}
}
VOID
(
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
(
,
,
)
;
IF
(
)
{
(
,
)
;
=
;
=
;
}
}
VOID
(
)
{
INT
;
INT
;
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
(
)
;
(
,
,
,
(
)
)
;
RETURN
;
}
}
(
,
,
)
;
}
(
VOID
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
VOID
)
{
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
)
;
VOID
(
,
)
;
VOID
(
,
)
;
VOID
(
,
)
;
VOID
(
,
)
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
STATIC
CONST
INT
=
;
STATIC
CONST
INT
=
;
STATIC
CONST
INT
=
;
STATIC
CONST
INT
=
;
STATIC
CONST
INT
=
;
STATIC
CONST
INT
=
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
VOID
(
,
INT
)
{
CHAR
;
(
)
;
;
=
;
=
;
=
(
,
)
;
(
,
)
;
IF
(
)
{
IF
(
)
=
;
=
;
(
)
;
}
(
)
;
=
;
=
;
=
;
(
,
,
,
(
)
)
;
IF
(
)
{
(
,
)
;
}
}
VOID
(
,
)
{
(
,
)
;
}
VOID
(
,
)
{
(
,
)
;
}
VOID
(
,
)
{
INT
;
;
IF
(
)
{
=
;
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
(
)
;
=
;
RETURN
;
}
}
(
)
;
(
)
;
(
,
,
,
(
)
(
)
,
)
;
}
VOID
(
,
)
{
(
)
;
(
)
;
}
VOID
(
,
)
{
CHAR
;
(
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
)
;
VOID
(
,
)
{
(
)
;
=
;
=
;
(
)
;
}
INT
(
)
{
STATIC
CHAR
;
STATIC
CHAR
;
INT
,
,
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
}
IF
(
)
{
IF
(
(
,
)
)
{
=
;
=
;
}
ELSE
IF
(
(
,
)
)
{
=
;
=
;
}
}
IF
(
)
=
;
ELSE
=
;
(
)
;
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
;
ELSE
IF
(
)
;
}
(
,
,
)
;
(
,
,
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
IF
(
)
RETURN
;
ELSE
IF
(
)
RETURN
;
RETURN
(
(
)
)
;
}
VOID
(
)
{
INT
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
(
)
(
)
,
)
;
}
VOID
(
,
)
{
(
)
;
(
,
,
,
(
)
(
)
,
)
;
}
(
)
{
IF
(
)
RETURN
;
IF
(
(
(
INT
)
)
)
{
=
;
=
;
;
=
;
=
;
(
)
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
=
;
=
;
;
=
;
=
;
=
;
(
)
;
(
)
;
}
(
VOID
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
VOID
)
{
INT
;
INT
,
;
CHAR
;
;
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
{
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
(
,
)
;
(
)
;
}
ELSE
{
=
;
}
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
}
}
IF
(
)
RETURN
;
=
;
SWITCH
(
)
{
CASE
FOR
(
=
,
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
;
}
IF
(
)
(
,
,
,
,
)
;
ELSE
(
,
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
,
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
,
,
)
;
(
,
)
;
BREAK
;
}
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
RETURN
;
}
STATIC
VOID
(
,
,
,
)
{
;
INT
;
;
IF
(
)
RETURN
;
=
(
,
(
)
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
)
;
IF
(
(
)
)
{
}
(
)
;
}
VOID
(
)
{
;
INT
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
;
=
;
=
;
(
,
)
;
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
)
{
;
}
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
;
;
;
;
;
}
;
(
)
VOID
(
,
)
;
VOID
(
)
;
VOID
(
,
)
{
=
;
CHAR
;
INT
;
IF
(
)
{
(
,
,
,
)
;
IF
(
)
{
=
(
)
;
}
(
,
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
,
,
)
;
IF
(
)
{
=
(
)
;
}
(
,
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
,
,
)
;
IF
(
)
{
=
(
)
;
}
(
,
,
)
;
(
,
)
;
}
IF
(
(
(
INT
)
)
)
{
(
,
,
,
)
;
=
(
INT
)
;
IF
(
)
;
ELSE
;
(
,
,
)
;
(
,
)
;
}
IF
(
(
(
INT
)
)
)
{
(
,
,
,
)
;
=
(
INT
)
;
IF
(
)
;
ELSE
;
(
,
,
)
;
(
,
)
;
}
IF
(
(
(
INT
)
)
)
{
(
,
,
,
)
;
=
(
INT
)
;
IF
(
)
;
ELSE
;
(
,
,
)
;
(
,
)
;
}
IF
(
(
(
INT
)
)
)
{
(
,
,
,
)
;
(
,
,
(
INT
)
)
;
(
,
)
;
}
IF
(
(
(
INT
)
)
)
{
(
,
,
,
)
;
(
,
,
(
INT
)
)
;
(
,
)
;
}
(
)
;
(
)
;
}
VOID
(
,
)
{
=
;
(
)
;
(
)
;
}
VOID
(
,
)
{
=
;
=
(
)
;
IF
(
)
=
;
(
,
)
;
}
VOID
(
,
)
{
=
;
=
(
)
;
IF
(
)
=
;
(
,
)
;
}
VOID
(
,
)
{
=
;
=
(
)
;
IF
(
)
=
;
(
,
)
;
}
VOID
(
,
)
{
=
;
=
;
(
,
)
;
}
VOID
(
,
)
{
=
;
=
;
(
,
)
;
}
VOID
(
,
)
{
=
;
=
;
(
,
)
;
}
VOID
(
,
)
{
=
;
=
;
(
,
)
;
}
VOID
(
,
)
{
=
;
=
;
(
,
)
;
}
VOID
(
,
)
{
INT
=
;
CHAR
;
=
;
(
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
,
)
;
;
(
)
;
}
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
VOID
(
,
)
{
;
;
(
)
;
=
(
(
)
)
;
=
;
=
;
=
;
=
(
(
INT
)
)
;
=
(
(
INT
)
)
;
=
(
(
INT
)
)
;
=
;
=
;
=
(
,
,
,
(
)
(
)
,
)
;
(
,
)
;
}
VOID
(
,
)
{
(
)
;
IF
(
)
{
(
,
)
;
=
;
=
;
}
ELSE
IF
(
)
{
(
,
)
;
=
;
=
;
(
)
;
}
}
VOID
(
,
)
{
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
=
;
(
)
;
}
}
VOID
(
,
)
{
(
)
;
}
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
}
;
VOID
(
)
{
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
(
,
,
,
(
)
(
)
,
)
;
}
VOID
(
)
{
CHAR
;
IF
(
(
)
(
,
(
)
)
)
{
=
;
(
,
,
)
;
(
,
,
)
;
}
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
RETURN
;
}
IF
(
)
(
)
;
(
)
;
}
VOID
(
)
{
INT
,
;
;
CHAR
;
CHAR
;
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
IF
(
(
)
(
)
(
)
)
(
,
)
;
}
}
}
FOR
(
=
,
=
;
;
,
)
IF
(
)
BREAK
;
IF
(
)
{
IF
(
)
(
,
,
,
)
;
(
,
,
)
;
RETURN
;
}
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
=
;
ELSE
=
(
)
;
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
(
)
)
{
(
(
)
,
)
;
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
}
(
,
,
,
)
;
}
VOID
(
)
{
INT
;
CHAR
;
CHAR
;
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
IF
(
(
)
(
)
(
)
)
(
,
)
;
}
}
}
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
,
,
(
)
,
(
(
)
)
,
,
,
(
)
(
)
,
)
;
IF
(
(
)
(
)
(
)
)
{
(
(
)
,
)
;
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
}
(
,
,
,
)
;
}
VOID
(
)
{
CHAR
;
CHAR
,
;
STATIC
CONST
CHAR
=
;
IF
(
(
)
)
{
(
,
,
)
;
(
,
,
,
)
;
RETURN
;
}
=
(
)
;
=
(
,
)
;
WHILE
(
)
{
IF
(
(
,
(
)
)
)
BREAK
;
=
(
,
)
;
}
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
(
)
;
IF
(
)
{
(
,
,
,
(
)
)
;
(
,
(
)
,
(
)
)
;
(
)
;
RETURN
;
}
(
,
,
,
(
)
)
;
IF
(
(
,
,
)
)
(
,
(
)
,
(
)
)
;
}
VOID
(
)
{
INT
;
;
CHAR
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
,
,
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
,
)
;
(
)
;
}
__E__O__F__
VOID
(
)
{
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
=
;
=
;
}
VOID
(
)
{
FLOAT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
=
(
(
)
)
;
;
=
(
)
;
=
;
}
VOID
(
)
;
VOID
(
,
,
VOID
(
)
(
)
)
{
(
)
;
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
{
IF
(
(
(
)
)
)
{
(
)
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
=
;
=
;
=
;
}
}
VOID
(
)
{
(
)
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
=
;
=
;
}
VOID
(
)
{
;
FLOAT
;
FLOAT
;
FLOAT
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
;
=
;
}
VOID
(
,
VOID
(
)
(
)
)
{
(
)
;
=
;
IF
(
(
(
)
)
)
{
(
)
;
}
ELSE
{
=
;
=
;
}
}
(
,
)
(
(
(
)
)
)
VOID
(
)
{
FLOAT
;
FLOAT
;
=
;
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
=
(
,
)
;
IF
(
(
)
)
{
FLOAT
;
=
(
)
(
)
;
=
(
(
(
)
)
)
(
)
;
=
(
,
)
;
}
=
;
}
;
VOID
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
;
}
RETURN
;
}
IF
(
)
IF
(
(
)
)
{
FLOAT
;
FLOAT
;
FLOAT
;
=
;
=
(
(
)
)
;
=
;
=
;
=
(
)
;
RETURN
;
}
IF
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
=
;
;
IF
(
)
=
;
IF
(
(
)
)
RETURN
;
=
;
=
(
)
;
=
(
(
)
)
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
)
;
RETURN
;
}
RETURN
;
}
;
VOID
(
)
{
;
IF
(
)
(
)
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
=
;
=
;
}
VOID
(
)
;
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
(
,
,
)
;
}
VOID
(
,
)
{
IF
(
(
)
(
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
}
VOID
(
,
,
)
{
IF
(
)
RETURN
;
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
ELSE
IF
(
)
=
;
}
VOID
(
)
{
;
,
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
=
(
)
;
=
;
}
IF
(
)
{
=
(
)
;
=
;
}
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
(
)
;
=
;
=
;
(
,
)
;
=
;
IF
(
)
=
;
ELSE
;
IF
(
)
=
;
ELSE
;
IF
(
)
=
;
ELSE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
(
,
)
;
IF
(
)
;
ELSE
(
)
;
=
;
(
)
;
IF
(
)
{
=
;
}
ELSE
{
(
,
)
;
(
)
;
=
;
}
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
,
)
{
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
)
{
IF
(
(
,
)
)
{
=
;
(
)
;
=
;
}
ELSE
{
=
;
(
,
,
)
;
IF
(
)
=
;
}
}
VOID
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
IF
(
)
(
,
,
)
;
IF
(
)
;
IF
(
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
=
;
;
;
}
VOID
(
)
{
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
}
VOID
(
)
{
=
;
;
;
(
,
)
;
=
;
IF
(
)
{
=
;
=
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
(
,
,
)
;
}
VOID
(
,
,
)
{
=
;
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
;
FLOAT
;
(
,
)
;
=
;
=
;
(
,
)
;
IF
(
)
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
(
,
,
,
)
;
=
;
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
,
)
)
{
(
,
)
;
}
}
}
VOID
(
)
;
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
(
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
IF
(
)
{
=
;
=
;
}
=
;
IF
(
(
,
)
)
(
,
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
}
VOID
(
,
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
=
;
RETURN
;
}
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
IF
(
(
,
)
)
(
,
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
,
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
FOR
(
=
;
;
=
)
{
=
;
=
;
(
)
;
}
RETURN
;
}
}
FOR
(
=
;
;
=
)
{
=
;
=
;
(
,
)
;
}
}
;
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
,
)
;
}
VOID
(
)
{
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
=
)
{
=
(
)
;
IF
(
)
=
;
}
=
;
FOR
(
=
;
;
=
)
{
=
(
)
;
=
;
IF
(
)
=
;
ELSE
;
IF
(
)
=
;
ELSE
;
=
;
}
}
VOID
(
)
{
;
,
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
=
)
{
(
,
,
)
;
(
,
,
)
;
}
;
;
;
;
=
(
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
}
VOID
(
,
)
{
;
IF
(
(
)
(
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
FOR
(
=
;
;
=
)
(
,
)
;
}
ELSE
{
FOR
(
=
;
;
=
)
(
)
;
}
}
}
VOID
(
,
,
,
INT
,
)
{
;
FOR
(
=
;
;
=
)
{
=
;
=
;
}
(
,
,
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
,
)
;
(
,
,
(
)
,
,
,
)
;
}
VOID
(
)
{
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
(
,
)
;
=
;
=
;
(
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
=
;
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
(
)
;
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
}
(
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
=
;
=
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
;
IF
(
)
=
;
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
;
(
,
)
;
=
;
=
;
(
,
)
;
SWITCH
(
)
{
DEFAULT
BREAK
;
CASE
=
(
)
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
BREAK
;
}
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
=
;
=
=
=
;
IF
(
)
=
;
=
;
=
;
IF
(
)
;
=
;
(
)
;
}
VOID
(
)
;
VOID
(
,
)
{
IF
(
(
)
(
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
CHAR
;
;
=
;
=
;
=
;
(
,
)
;
=
;
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
(
)
;
;
(
)
;
=
;
}
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
}
ELSE
{
(
)
;
}
}
VOID
(
)
{
;
;
;
=
;
IF
(
)
{
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
IF
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
RETURN
;
}
=
;
(
,
,
)
;
(
,
)
;
(
)
;
GOTO
;
}
=
;
=
;
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
(
,
,
)
;
=
;
(
,
)
;
(
,
)
;
(
,
,
)
;
;
}
VOID
(
)
{
;
;
=
;
(
,
,
)
;
=
;
(
,
)
;
(
,
)
;
(
,
,
)
;
;
}
VOID
(
)
{
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
(
,
,
)
;
(
)
;
IF
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
}
VOID
(
,
,
)
{
=
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
;
(
)
;
=
;
}
ELSE
{
IF
(
)
(
)
;
ELSE
(
)
;
}
}
VOID
(
)
{
=
;
(
)
;
=
;
IF
(
)
=
;
ELSE
{
IF
(
)
=
;
}
=
;
(
,
)
;
IF
(
)
=
(
)
;
IF
(
)
=
;
=
;
=
=
;
=
;
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
(
,
(
)
)
;
}
}
VOID
(
,
,
)
{
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
(
,
)
;
=
(
)
;
}
VOID
(
,
,
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
=
;
=
;
IF
(
)
{
=
;
(
,
(
)
)
;
}
IF
(
)
{
=
(
)
;
=
;
}
=
;
}
VOID
(
,
,
)
{
IF
(
)
{
=
;
;
}
ELSE
{
=
;
;
}
IF
(
(
)
)
=
;
}
VOID
(
)
{
IF
(
)
=
;
IF
(
(
)
)
{
=
;
=
;
}
=
;
(
,
)
;
=
;
(
)
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
,
)
{
IF
(
(
,
)
)
RETURN
;
(
,
,
)
;
(
,
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
)
{
(
,
,
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
(
,
,
)
;
}
VOID
(
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
}
(
,
)
;
}
VOID
(
,
)
{
IF
(
(
)
(
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
,
INT
,
)
{
=
;
(
,
,
)
;
}
VOID
(
)
{
,
,
;
FLOAT
;
FLOAT
;
FLOAT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
=
=
=
;
(
,
,
,
)
;
(
)
;
=
(
)
;
IF
(
)
=
(
(
,
)
)
;
ELSE
=
(
(
,
)
)
;
=
(
(
,
)
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
{
(
)
;
=
;
}
=
;
(
)
;
}
VOID
(
,
,
)
{
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
=
;
}
__E__O__F__
(
,
)
;
VOID
(
,
)
;
VOID
(
,
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
,
,
,
,
}
;
=
{
,
,
,
,
}
;
=
{
,
,
,
,
}
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
,
)
;
STATIC
INT
;
(
INT
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
CHAR
)
{
INT
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
INT
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
VOID
(
)
{
IF
(
)
{
;
INT
;
INT
;
=
;
IF
(
(
(
INT
)
)
(
)
)
=
;
ELSE
{
FOR
(
=
,
=
;
;
=
,
)
;
=
(
)
;
FOR
(
=
,
=
;
;
=
,
)
;
}
}
;
=
;
(
)
;
=
;
}
VOID
(
,
FLOAT
)
{
;
;
=
;
=
;
=
;
(
)
;
}
(
,
)
{
INT
;
=
(
)
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
(
)
)
RETURN
;
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
)
;
IF
(
(
(
INT
)
)
(
(
)
(
)
)
)
{
IF
(
(
)
(
)
)
=
(
)
;
(
,
)
;
}
}
RETURN
;
}
VOID
(
,
)
{
(
,
)
;
(
)
;
(
)
;
}
(
,
)
{
IF
(
)
;
IF
(
)
=
;
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
(
,
)
{
;
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
(
,
)
{
;
INT
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
(
,
)
{
;
INT
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
VOID
(
,
)
{
INT
;
(
)
;
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
IF
(
)
;
ELSE
=
;
(
,
,
(
)
,
,
,
)
;
}
VOID
(
,
)
{
(
)
;
(
)
;
IF
(
)
;
ELSE
=
;
}
VOID
(
,
)
{
(
)
;
(
)
;
IF
(
)
;
ELSE
=
;
}
VOID
(
,
)
{
(
)
;
(
)
;
IF
(
)
;
ELSE
=
;
(
,
,
(
)
,
,
,
)
;
}
VOID
(
,
)
{
(
)
;
(
)
;
;
}
(
,
)
{
IF
(
)
{
IF
(
(
,
)
)
{
IF
(
(
(
)
)
)
RETURN
;
(
)
;
(
(
)
)
;
}
ELSE
{
IF
(
(
)
)
RETURN
;
(
)
=
;
}
RETURN
;
}
(
)
;
RETURN
;
}
(
,
,
INT
)
{
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
;
IF
(
)
=
;
RETURN
;
}
(
,
)
{
INT
;
INT
;
;
=
(
)
;
IF
(
(
)
(
(
INT
)
)
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
(
)
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
)
{
IF
(
(
(
)
)
)
=
;
}
IF
(
(
(
)
)
(
)
)
(
,
)
;
RETURN
;
}
VOID
(
,
)
{
;
INT
;
=
(
)
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
;
(
)
;
}
VOID
(
)
{
IF
(
(
)
)
{
=
;
;
RETURN
;
}
IF
(
(
)
(
)
)
(
,
)
;
ELSE
(
)
;
}
(
,
)
{
IF
(
(
)
)
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
IF
(
)
=
;
IF
(
(
)
)
{
IF
(
)
=
;
}
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
;
;
=
;
}
ELSE
{
IF
(
(
)
(
)
)
(
,
)
;
}
RETURN
;
}
INT
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
INT
;
;
;
INT
;
FLOAT
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
;
}
ELSE
IF
(
)
{
(
)
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
=
;
IF
(
)
=
;
=
;
(
)
=
;
}
ELSE
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
}
}
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
INT
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
)
{
INT
;
IF
(
)
{
;
(
,
,
(
)
,
,
,
)
;
}
ELSE
{
=
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
;
(
,
,
(
)
,
,
,
)
;
}
}
(
,
)
{
INT
;
=
(
)
;
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
)
;
IF
(
)
(
,
)
;
}
RETURN
;
}
VOID
(
,
)
{
IF
(
(
)
(
(
)
)
)
(
,
)
;
(
,
)
;
}
VOID
(
,
,
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
(
,
)
;
IF
(
)
{
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
=
=
(
)
;
IF
(
)
{
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
}
}
IF
(
(
)
)
{
(
,
)
;
;
}
IF
(
)
RETURN
;
IF
(
(
(
)
(
)
)
(
(
)
)
)
{
IF
(
)
;
ELSE
(
)
;
}
}
STATIC
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
(
,
,
,
)
;
}
STATIC
VOID
(
)
{
=
;
IF
(
)
{
=
;
=
;
}
}
(
,
)
{
;
,
;
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
=
(
,
,
,
,
,
)
;
(
,
)
;
}
ELSE
{
(
,
,
,
)
;
(
,
)
;
}
(
,
,
)
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
VOID
(
,
,
)
{
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
)
;
}
VOID
(
)
{
;
;
FLOAT
;
=
(
,
,
)
;
(
,
)
;
=
(
,
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
;
=
;
=
;
=
(
,
,
)
;
(
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
(
,
)
;
IF
(
)
{
;
=
;
=
;
;
=
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
;
;
}
IF
(
)
{
;
=
;
=
;
}
(
)
;
}
VOID
(
)
{
CHAR
,
;
CHAR
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
)
;
}
=
;
IF
(
)
RETURN
;
WHILE
(
)
{
=
;
WHILE
(
)
;
=
;
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
IF
(
)
;
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
}
}
VOID
(
,
)
{
(
)
;
IF
(
)
{
IF
(
(
,
)
)
{
=
;
(
,
,
(
)
)
;
}
}
IF
(
)
{
IF
(
(
INT
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
INT
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
INT
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
INT
)
)
{
IF
(
(
)
(
(
,
)
)
)
{
(
)
;
RETURN
;
}
}
}
IF
(
(
(
,
)
)
)
{
(
(
)
)
;
;
}
IF
(
(
)
(
)
)
{
=
;
}
IF
(
(
(
,
)
(
,
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
(
)
;
IF
(
(
,
)
(
,
)
)
{
=
;
}
}
=
{
{
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
}
}
;
VOID
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
(
)
)
;
(
)
;
}
VOID
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
(
)
)
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
(
)
)
;
(
)
;
}
VOID
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
(
)
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
=
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
(
,
)
;
}
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
}
__E__O__F__
;
;
;
;
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
VOID
(
CHAR
,
CHAR
,
CHAR
)
;
VOID
(
,
)
;
(
,
CHAR
)
;
VOID
(
,
CHAR
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
CHAR
,
)
;
VOID
(
CHAR
)
;
VOID
(
CHAR
)
;
VOID
(
CHAR
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
RETURN
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
)
;
}
}
(
CHAR
)
{
;
=
(
)
;
=
;
(
,
(
)
,
,
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
;
CHAR
,
,
;
STATIC
CONST
CHAR
=
;
IF
(
(
INT
)
)
{
(
(
)
)
;
RETURN
;
}
IF
(
)
{
(
(
)
)
;
RETURN
;
}
IF
(
)
{
=
(
)
;
=
;
=
(
,
)
;
WHILE
(
)
{
IF
(
(
,
)
)
{
=
(
,
)
;
IF
(
)
{
IF
(
)
(
(
)
)
;
ELSE
(
(
)
)
;
}
ELSE
(
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
=
(
,
)
;
}
(
)
;
}
IF
(
)
(
(
)
)
;
ELSE
{
=
(
,
(
)
,
)
;
IF
(
)
{
(
(
)
)
;
RETURN
;
}
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
{
IF
(
)
{
(
,
)
;
(
)
;
RETURN
;
}
}
IF
(
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
)
;
(
)
;
RETURN
;
}
}
}
VOID
(
VOID
)
{
INT
;
;
CHAR
;
=
;
=
;
IF
(
(
)
)
RETURN
;
(
,
(
)
,
,
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
(
,
)
;
IF
(
(
)
(
)
)
{
=
;
IF
(
(
(
)
)
(
)
)
{
(
)
;
}
}
IF
(
)
{
(
)
;
CONTINUE
;
}
(
)
;
}
(
)
;
(
)
;
}
__E__O__F__
VOID
(
,
,
)
{
;
(
,
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
INT
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
VOID
(
)
{
;
=
;
IF
(
)
{
=
;
=
(
)
;
}
}
VOID
(
,
,
,
)
{
,
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
(
,
)
;
IF
(
)
{
;
=
;
=
;
}
}
}
VOID
(
,
,
,
INT
,
)
{
(
)
;
}
VOID
(
,
CHAR
,
INT
,
INT
)
{
;
;
;
;
FLOAT
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
=
;
;
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
)
;
(
,
,
,
)
;
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
(
)
;
}
VOID
(
,
CHAR
,
INT
,
INT
)
{
;
FLOAT
;
=
;
=
;
(
)
;
(
)
;
=
;
(
,
)
;
=
;
;
;
=
;
;
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
)
;
(
,
,
,
)
;
(
)
;
=
(
)
;
=
;
=
(
)
;
(
)
;
}
VOID
(
,
INT
)
{
;
CHAR
;
IF
(
(
)
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
;
=
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
;
=
;
(
,
)
;
(
,
,
)
;
IF
(
)
{
=
;
=
;
}
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
(
)
;
}
VOID
(
,
CHAR
,
FLOAT
,
)
{
;
;
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
,
)
)
{
(
)
;
(
,
,
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
(
,
,
(
)
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
,
,
,
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
CHAR
;
=
;
=
;
(
,
)
;
=
;
}
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
;
;
(
,
)
;
=
(
)
;
}
=
=
;
IF
(
)
{
=
;
(
)
;
RETURN
;
}
IF
(
)
{
=
;
(
)
;
}
ELSE
{
(
,
,
)
;
=
(
)
;
}
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
;
(
)
;
}
VOID
(
,
,
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
=
(
)
;
IF
(
)
{
(
,
,
(
)
,
)
;
=
;
}
=
;
}
ELSE
IF
(
(
)
(
(
)
)
)
{
=
;
;
(
)
;
}
IF
(
)
{
=
;
=
;
=
;
;
}
IF
(
)
{
CHAR
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
)
;
=
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
(
)
;
}
;
STATIC
INT
;
VOID
(
)
{
=
(
)
;
=
;
IF
(
)
{
IF
(
)
{
=
(
)
;
=
;
}
}
}
VOID
(
)
{
(
)
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
(
)
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
(
)
;
}
;
VOID
(
)
{
(
,
)
;
(
,
)
;
}
;
STATIC
VOID
(
,
,
)
{
IF
(
)
{
(
,
)
;
;
}
ELSE
{
(
,
)
;
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
}
VOID
(
,
,
)
{
IF
(
)
{
=
;
;
(
)
;
}
ELSE
{
=
;
;
}
(
)
;
IF
(
(
)
)
=
;
}
VOID
(
)
{
=
;
(
,
)
;
IF
(
)
;
IF
(
)
;
IF
(
(
)
)
{
=
;
(
)
;
RETURN
;
}
IF
(
(
)
)
{
;
}
IF
(
)
{
IF
(
(
)
)
{
(
)
;
;
}
}
=
;
IF
(
)
{
=
;
}
ELSE
{
=
;
;
}
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
,
)
{
=
;
;
=
;
(
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
;
;
;
;
;
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
;
}
IF
(
)
;
IF
(
)
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
;
;
;
INT
;
INT
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
=
;
IF
(
)
(
,
,
,
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
IF
(
)
=
;
WHILE
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
}
=
;
IF
(
)
=
;
WHILE
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
,
,
)
{
(
,
,
,
,
)
;
}
VOID
(
,
,
)
{
=
;
;
=
;
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
;
=
;
=
;
}
ELSE
{
=
;
IF
(
)
=
;
}
IF
(
)
;
IF
(
)
;
IF
(
)
{
IF
(
)
=
;
=
;
=
;
}
(
)
;
}
VOID
(
,
,
,
)
{
FLOAT
;
;
IF
(
(
)
(
)
)
RETURN
;
=
(
FLOAT
)
(
FLOAT
)
;
(
,
,
)
;
(
,
(
)
,
)
;
}
VOID
(
)
{
;
FLOAT
;
;
(
,
,
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
=
(
FLOAT
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
FLOAT
)
;
(
,
)
;
(
,
,
,
)
;
(
,
)
;
;
(
,
,
,
)
;
(
,
)
;
;
(
,
,
,
)
;
(
,
)
;
;
;
(
,
,
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
=
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
,
,
)
{
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
}
VOID
(
,
,
)
{
=
;
=
;
(
,
,
(
)
,
,
,
)
;
}
VOID
(
)
{
=
;
;
}
VOID
(
)
{
=
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
(
)
;
=
;
=
;
}
VOID
(
)
{
=
(
)
;
=
;
}
VOID
(
)
{
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
=
;
=
;
}
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
RETURN
;
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
;
=
;
;
(
)
;
}
EXTERN
VOID
(
,
,
)
;
EXTERN
VOID
(
)
;
VOID
(
,
,
)
{
;
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
=
=
=
;
(
)
;
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
(
)
;
}
VOID
(
,
,
,
)
{
(
,
)
;
=
;
(
,
,
,
,
,
)
;
(
)
;
}
VOID
(
)
{
;
FLOAT
;
=
;
=
;
IF
(
)
=
;
(
,
,
)
;
=
;
=
;
(
,
)
;
=
;
}
VOID
(
,
,
)
{
;
=
;
;
;
=
;
=
;
=
;
=
;
=
;
=
(
,
(
)
,
)
;
(
,
,
)
;
=
;
(
,
)
;
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
=
;
=
;
;
(
)
;
}
EXTERN
VOID
(
,
,
)
;
EXTERN
VOID
(
)
;
VOID
(
,
,
)
{
;
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
=
=
=
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
(
)
;
}
VOID
(
)
{
=
;
=
;
=
(
)
;
(
)
;
}
VOID
(
)
{
=
;
=
;
=
(
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
;
=
;
=
;
=
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
;
=
;
=
;
=
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
;
=
;
=
;
=
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
VOID
(
)
{
=
;
(
,
)
;
=
;
=
;
(
)
;
RETURN
;
}
VOID
(
,
,
)
{
;
INT
,
;
CHAR
;
=
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
{
=
;
CONTINUE
;
}
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
}
VOID
(
)
{
IF
(
)
=
;
=
;
}
STATIC
VOID
(
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
}
STATIC
VOID
(
)
{
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
,
,
)
;
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
(
,
,
,
,
(
(
)
)
,
)
;
IF
(
)
=
;
IF
(
)
=
;
RETURN
;
}
}
VOID
(
)
{
IF
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
(
)
;
;
}
ELSE
IF
(
)
{
(
)
;
;
}
ELSE
{
STRUCT
;
;
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
}
=
;
(
,
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
IF
(
)
{
CHAR
;
CHAR
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
}
IF
(
(
)
)
RETURN
;
(
)
;
IF
(
)
RETURN
;
}
=
;
}
VOID
(
,
,
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
=
;
;
(
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
,
,
,
)
{
;
INT
;
IF
(
)
RETURN
;
=
(
,
(
)
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
,
)
;
(
,
)
;
;
(
)
;
=
;
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
__E__O__F__
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
FLOAT
,
INT
)
{
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
;
=
;
}
STATIC
VOID
(
)
{
IF
(
)
RETURN
;
;
=
(
)
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
=
(
)
;
}
VOID
(
,
FLOAT
)
{
=
;
}
VOID
(
)
{
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
(
,
)
;
=
;
=
;
=
;
}
}
VOID
(
)
{
;
INT
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
)
)
{
=
;
=
;
RETURN
;
}
=
;
=
;
;
=
(
)
;
IF
(
(
)
)
RETURN
;
=
;
;
=
(
)
;
IF
(
)
=
;
}
VOID
(
)
{
INT
;
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
=
;
(
,
,
,
,
,
,
,
,
,
)
;
=
;
}
}
}
ELSE
{
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
=
;
(
,
,
,
,
,
,
,
,
,
)
;
=
;
}
}
}
}
IF
(
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
;
}
RETURN
;
}
IF
(
(
)
(
)
)
{
IF
(
)
{
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
}
IF
(
(
)
(
)
)
{
IF
(
)
{
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
}
IF
(
(
)
)
{
IF
(
(
)
)
{
IF
(
)
IF
(
(
)
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
}
;
=
;
}
}
VOID
(
)
{
;
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
IF
(
)
{
;
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
;
}
ELSE
IF
(
)
{
;
;
}
}
}
VOID
(
)
{
;
INT
;
=
;
=
;
IF
(
(
)
(
)
(
)
)
{
=
;
=
;
}
ELSE
{
IF
(
)
{
IF
(
)
{
(
)
;
=
;
IF
(
)
RETURN
;
}
}
IF
(
)
{
;
=
;
}
ELSE
{
IF
(
(
)
)
{
;
IF
(
)
=
;
}
}
}
=
;
IF
(
)
IF
(
(
)
)
(
,
)
;
ELSE
(
,
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
(
)
;
IF
(
)
{
=
;
(
)
;
}
(
)
;
(
)
;
(
)
;
}
VOID
(
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
=
;
(
)
;
}
VOID
(
)
;
VOID
(
)
{
;
(
)
;
=
;
=
;
;
=
;
(
)
;
(
)
;
IF
(
(
)
(
)
)
{
(
)
;
}
ELSE
{
=
;
}
}
VOID
(
,
,
)
{
=
;
=
;
IF
(
)
=
;
=
;
}
VOID
(
)
{
=
;
=
;
;
=
;
=
;
}
VOID
(
)
{
(
)
;
;
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
=
;
IF
(
)
RETURN
;
(
,
)
;
}
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
;
;
}
IF
(
(
)
)
;
=
;
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
IF
(
)
=
;
(
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
,
,
(
)
,
)
;
}
IF
(
)
=
(
(
)
(
)
)
;
RETURN
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
;
;
;
=
;
=
;
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
,
)
)
{
=
;
=
;
}
ELSE
{
=
;
}
}
IF
(
)
(
,
,
(
)
)
;
IF
(
)
=
;
}
IF
(
)
{
;
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
,
)
)
{
(
,
,
(
INT
)
,
(
INT
)
,
(
INT
)
,
,
,
(
INT
)
,
(
INT
)
,
(
INT
)
)
;
}
}
}
IF
(
)
{
=
=
(
)
;
IF
(
)
{
(
,
,
,
(
)
)
;
=
;
=
;
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
,
,
)
;
=
=
(
)
;
(
)
;
=
;
}
ELSE
{
=
=
;
=
;
(
)
;
}
}
ELSE
{
=
;
(
)
;
}
=
;
=
;
}
VOID
(
)
{
IF
(
(
)
)
{
(
)
;
IF
(
)
IF
(
(
,
,
)
)
(
,
,
(
)
)
;
}
IF
(
)
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
,
,
)
)
(
,
,
(
)
)
;
IF
(
)
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
;
=
;
(
)
;
}
__E__O__F__
(
)
{
;
INT
;
IF
(
)
=
;
ELSE
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
}
(
)
{
FLOAT
;
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
(
)
;
RETURN
;
}
VOID
(
,
)
{
;
=
;
IF
(
)
(
,
,
,
)
;
IF
(
)
(
,
,
,
)
;
}
INT
(
,
,
,
FLOAT
)
{
FLOAT
;
FLOAT
;
INT
,
;
=
;
IF
(
)
;
IF
(
)
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
}
RETURN
;
}
INT
(
,
FLOAT
,
INT
)
{
;
INT
,
;
;
FLOAT
;
INT
;
;
,
,
;
INT
,
;
;
;
FLOAT
;
INT
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
=
;
}
IF
(
)
BREAK
;
=
;
IF
(
)
{
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
;
}
(
,
)
;
IF
(
)
BREAK
;
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
{
(
,
)
;
}
ELSE
{
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
RETURN
;
}
VOID
(
)
{
;
}
(
,
)
{
;
;
;
INT
;
(
,
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
(
,
,
,
,
,
)
;
(
,
)
;
(
)
;
IF
(
)
{
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
GOTO
;
}
}
IF
(
)
(
)
;
RETURN
;
}
TYPEDEF
STRUCT
{
;
;
;
FLOAT
;
}
;
,
;
;
(
,
,
)
{
INT
,
;
,
;
,
;
;
,
,
,
,
,
;
FOR
(
=
;
;
)
{
FLOAT
;
=
;
IF
(
)
;
ELSE
;
=
(
INT
)
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
(
,
,
)
;
(
,
,
,
)
;
=
;
(
,
)
;
(
,
)
;
IF
(
)
=
;
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
}
IF
(
(
)
(
)
)
{
=
;
(
,
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
)
{
;
}
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
(
,
,
)
;
=
(
)
;
IF
(
)
{
;
CONTINUE
;
}
}
=
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
IF
(
)
{
=
;
}
(
)
;
}
RETURN
;
}
FOR
(
=
;
;
)
(
)
;
RETURN
;
}
VOID
(
)
{
,
;
,
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
BREAK
;
}
}
IF
(
)
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
=
)
{
IF
(
)
;
}
IF
(
)
(
,
)
;
IF
(
)
GOTO
;
}
ELSE
{
FOR
(
=
;
;
=
)
{
(
)
;
}
}
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
IF
(
(
)
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
)
{
;
;
FLOAT
;
;
;
;
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
IF
(
)
IF
(
)
=
;
IF
(
)
RETURN
;
(
,
)
;
(
)
;
IF
(
)
(
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
IF
(
)
{
IF
(
)
{
=
;
=
;
(
,
)
;
(
,
)
;
}
}
}
=
(
)
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
=
)
{
(
,
)
;
(
)
;
}
}
VOID
(
)
{
INT
;
FLOAT
;
(
,
,
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
{
;
IF
(
)
=
;
}
}
}
VOID
(
)
{
;
=
;
FLOAT
;
FLOAT
,
,
;
FLOAT
;
;
INT
;
IF
(
)
(
)
;
=
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
)
;
IF
(
)
IF
(
(
)
)
IF
(
(
(
)
(
)
)
)
{
IF
(
)
=
;
IF
(
)
(
)
;
}
IF
(
(
)
(
)
)
{
=
(
)
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
;
;
}
IF
(
(
)
(
)
)
{
=
(
)
;
=
;
=
(
)
;
IF
(
)
=
;
;
;
}
IF
(
)
{
IF
(
(
)
(
(
)
)
)
IF
(
(
(
)
)
)
{
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
IF
(
)
=
;
;
;
;
}
}
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
)
;
(
)
;
IF
(
)
IF
(
)
IF
(
)
(
,
,
(
)
,
,
,
)
;
}
(
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
SWITCH
(
(
INT
)
)
{
CASE
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
,
(
INT
)
)
;
}
}
__E__O__F__
=
{
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
}
;
=
{
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
,
}
}
;
=
{
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
,
}
}
;
=
{
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
,
}
}
;
VOID
(
VOID
)
{
(
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
}
IF
(
)
(
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
)
;
(
,
(
)
,
)
;
(
,
(
)
,
)
;
=
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
(
(
)
,
)
;
=
;
(
)
;
}
VOID
(
,
,
)
{
VOID
;
INT
;
INT
;
=
(
VOID
)
(
)
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
BREAK
;
CASE
CASE
IF
(
(
CHAR
)
)
=
(
(
CHAR
)
)
;
ELSE
=
;
(
INT
)
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
INT
)
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
INT
)
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
INT
)
=
;
BREAK
;
DEFAULT
(
)
;
}
}
VOID
(
,
,
)
{
INT
;
VOID
;
=
(
VOID
)
(
)
;
SWITCH
(
)
{
CASE
CASE
IF
(
(
CHAR
)
)
{
=
(
(
CHAR
)
)
;
(
(
CHAR
)
,
,
,
)
;
}
BREAK
;
}
}
VOID
(
,
,
)
{
VOID
;
INT
;
INT
;
=
(
VOID
)
(
)
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
CHAR
)
=
;
ELSE
{
(
CHAR
)
=
(
,
)
;
(
(
CHAR
)
,
,
,
)
;
}
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
CHAR
)
=
;
ELSE
{
(
CHAR
)
=
(
,
)
;
(
(
CHAR
)
,
,
,
)
;
}
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
BREAK
;
DEFAULT
(
)
;
}
}
VOID
(
,
)
{
;
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
,
)
{
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
CHAR
,
)
{
;
INT
;
CHAR
;
IF
(
)
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
(
)
)
;
(
,
)
;
(
,
(
)
,
,
)
;
=
;
(
,
(
)
,
,
)
;
=
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
;
INT
;
CHAR
;
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
(
)
,
,
)
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
}
=
(
(
)
,
)
;
=
;
(
,
(
)
,
,
)
;
=
(
(
)
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
}
VOID
(
,
)
{
;
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
)
{
;
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
,
)
{
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
)
{
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
CHAR
)
{
INT
;
;
;
VOID
;
=
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
(
)
,
,
)
;
=
(
VOID
)
;
(
,
(
)
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
(
)
,
,
)
;
(
,
)
;
}
=
;
(
,
(
)
,
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
INT
;
;
INT
;
VOID
;
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
)
;
(
,
,
(
)
)
;
=
;
(
,
(
)
,
,
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
}
(
,
(
)
,
,
)
;
IF
(
(
VOID
)
)
{
(
)
;
(
)
;
}
(
)
;
WHILE
(
)
{
IF
(
(
,
(
)
,
,
)
)
{
(
)
;
(
)
;
}
IF
(
)
BREAK
;
IF
(
)
=
;
=
;
(
,
)
;
(
,
,
(
)
)
;
(
)
;
}
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
IF
(
(
,
)
)
=
;
}
}
__E__O__F__
TYPEDEF
STRUCT
{
CHAR
;
VOID
(
)
(
)
;
}
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
VOID
(
)
{
;
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
}
(
,
)
;
}
CHAR
(
CHAR
)
{
CHAR
,
;
INT
,
;
=
(
)
;
=
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
}
RETURN
;
}
VOID
(
CHAR
,
CHAR
,
)
{
;
;
FLOAT
;
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
)
=
(
)
;
ELSE
=
(
)
;
SWITCH
(
)
{
CASE
(
CHAR
)
(
)
=
(
)
;
BREAK
;
CASE
(
,
,
,
,
)
;
(
(
FLOAT
)
(
)
)
=
;
(
(
FLOAT
)
(
)
)
=
;
(
(
FLOAT
)
(
)
)
=
;
BREAK
;
CASE
(
INT
)
(
)
=
(
)
;
BREAK
;
CASE
(
FLOAT
)
(
)
=
(
)
;
BREAK
;
CASE
=
(
)
;
(
(
FLOAT
)
(
)
)
=
;
(
(
FLOAT
)
(
)
)
=
;
(
(
FLOAT
)
(
)
)
=
;
BREAK
;
CASE
BREAK
;
}
RETURN
;
}
}
(
,
)
;
}
CHAR
(
CHAR
,
)
{
;
CHAR
;
CHAR
;
=
;
(
,
,
(
)
)
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
)
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
IF
(
)
CONTINUE
;
(
,
,
)
;
}
IF
(
)
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
VOID
)
{
,
,
;
INT
,
;
INT
,
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
=
;
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
;
=
;
=
;
=
;
;
}
}
}
(
,
,
)
;
}
VOID
(
CHAR
,
CHAR
,
CHAR
)
{
;
INT
;
CHAR
;
INT
;
FLOAT
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
(
,
(
,
)
)
;
(
)
;
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
=
;
=
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
,
)
;
IF
(
)
=
;
ELSE
=
(
)
;
=
(
,
)
;
IF
(
(
,
)
(
,
)
(
,
)
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
;
CONTINUE
;
}
}
ELSE
{
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
(
(
(
)
(
)
)
(
)
)
)
{
(
)
;
;
CONTINUE
;
}
}
(
)
;
}
(
)
;
}
(
,
)
;
(
)
;
(
)
;
(
)
;
}
IF
CHAR
=
;
CHAR
=
;
VOID
(
)
{
=
;
=
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
(
)
)
;
}
ELSE
(
,
,
(
)
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
,
(
,
)
)
;
(
,
(
,
,
,
)
)
;
(
,
(
,
)
)
;
(
,
(
,
(
INT
)
(
)
)
)
;
IF
(
)
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
ELSE
(
,
)
;
ELSE
(
,
)
;
(
)
;
=
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
(
)
;
(
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
VOID
(
VOID
)
{
(
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
IF
(
(
,
)
)
(
)
;
ELSE
(
,
,
,
)
;
}
__E__O__F__
VOID
(
,
,
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
)
{
=
;
}
VOID
(
,
,
)
{
INT
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
)
;
}
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
(
,
(
)
,
,
)
;
ELSE
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
=
;
(
)
;
}
VOID
(
,
,
)
{
IF
(
)
(
,
,
(
)
)
;
ELSE
(
,
,
(
)
)
;
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
=
;
}
VOID
(
,
,
)
{
(
,
,
,
,
,
)
;
;
(
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
=
;
=
(
)
;
=
;
;
IF
(
(
,
)
)
=
;
}
VOID
(
,
,
)
{
(
,
,
,
,
,
)
;
;
IF
(
)
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
=
;
=
(
)
;
=
;
;
}
VOID
(
)
{
FLOAT
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
,
,
,
)
;
=
;
=
;
(
,
)
;
=
;
}
VOID
(
,
,
)
{
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
}
IF
(
(
(
INT
)
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
,
)
;
}
IF
(
(
,
)
)
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
(
(
,
)
)
(
(
,
)
)
)
=
;
=
;
=
;
}
VOID
(
,
,
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
(
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
(
,
)
;
IF
(
)
=
;
=
;
}
VOID
(
)
;
VOID
(
,
,
)
{
;
=
(
)
;
=
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
}
VOID
(
)
{
=
;
=
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
}
}
VOID
(
,
,
)
{
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
(
,
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
VOID
(
,
,
)
{
;
(
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
IF
(
(
)
)
{
(
,
)
;
(
)
;
}
}
VOID
(
)
{
IF
(
)
=
;
=
;
=
;
=
;
}
VOID
(
)
{
;
;
;
;
;
;
INT
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
IF
(
(
,
)
)
;
}
=
;
(
,
)
;
(
,
,
,
)
;
WHILE
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
BREAK
;
IF
(
(
)
(
)
)
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
{
IF
(
)
{
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
}
=
;
(
,
)
;
}
(
,
)
;
=
;
}
VOID
(
)
{
IF
(
)
=
;
;
;
(
)
;
}
VOID
(
)
{
;
;
=
;
}
VOID
(
,
,
)
{
=
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
)
{
;
=
;
=
;
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
IF
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
(
,
,
(
)
,
)
;
=
;
}
ELSE
{
(
,
)
;
}
}
=
;
=
;
IF
(
)
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
CHAR
;
=
(
)
;
=
;
(
,
)
;
IF
(
(
)
)
{
=
;
}
ELSE
IF
(
)
{
CHAR
;
=
;
=
;
=
;
;
}
}
VOID
(
,
,
)
{
IF
(
)
{
;
=
;
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
BREAK
;
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
(
,
,
,
(
)
)
;
}
ELSE
{
=
;
}
}
IF
(
)
{
(
,
,
,
(
)
)
;
(
)
;
RETURN
;
}
}
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
)
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
;
=
;
=
;
=
;
=
;
=
(
)
(
)
;
}
VOID
(
)
{
INT
;
;
IF
(
)
{
(
,
,
,
,
,
,
)
;
=
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
(
)
;
(
)
;
=
(
)
;
}
IF
(
)
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
(
,
,
(
)
)
;
IF
(
)
=
;
IF
(
)
=
;
;
=
;
=
;
=
(
)
;
}
__E__O__F__
VOID
(
)
{
IF
(
(
,
)
)
(
,
)
;
=
;
=
;
(
,
)
;
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
}
VOID
(
,
,
)
{
=
;
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
{
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
ELSE
RETURN
;
IF
(
(
,
)
)
{
;
(
,
,
,
)
;
IF
(
(
,
)
)
RETURN
;
}
=
;
(
)
;
}
VOID
(
,
,
)
{
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
IF
(
)
=
;
=
;
=
;
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
(
,
)
)
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
;
(
,
,
,
)
;
;
;
(
,
,
(
)
)
;
}
=
;
(
)
;
}
VOID
(
,
,
)
{
(
,
)
;
}
VOID
(
)
{
=
;
}
VOID
(
,
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
(
,
,
)
;
(
,
,
(
)
,
,
,
)
;
RETURN
;
}
(
,
,
(
)
,
,
,
)
;
IF
(
)
{
INT
;
;
IF
(
(
,
)
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
)
BREAK
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
{
;
(
)
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
}
}
}
ELSE
{
;
}
(
,
)
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
,
(
)
)
;
RETURN
;
}
IF
(
)
{
(
,
,
(
)
)
;
RETURN
;
}
(
)
;
(
)
;
=
;
}
VOID
(
,
,
)
{
IF
(
)
RETURN
;
;
IF
(
)
{
IF
(
(
)
)
{
(
,
,
)
;
(
,
,
(
)
,
,
,
)
;
}
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
(
,
,
(
)
,
,
,
)
;
}
=
;
(
)
;
}
VOID
(
)
{
=
;
IF
(
)
=
;
=
;
}
VOID
(
)
{
IF
(
)
=
;
(
,
)
;
}
STATIC
INT
;
VOID
(
,
,
,
)
{
IF
(
(
,
)
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
IF
(
)
{
(
,
)
;
IF
(
)
{
=
;
(
,
,
,
,
,
)
;
}
}
}
IF
(
)
(
)
;
}
VOID
(
)
{
(
)
;
=
(
)
;
=
;
IF
(
)
=
;
(
)
;
}
VOID
(
,
,
)
{
IF
(
)
=
;
ELSE
=
;
(
)
;
IF
(
(
)
)
=
;
}
VOID
(
,
,
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
{
IF
(
(
)
)
(
,
,
,
,
,
)
;
}
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
(
)
;
=
(
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
(
)
;
}
VOID
(
,
,
,
)
{
=
;
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
=
;
}
VOID
(
,
,
,
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
=
;
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
=
;
=
;
}
__E__O__F__
VOID
(
,
,
,
,
)
{
=
;
=
;
=
;
}
(
,
INT
,
CHAR
)
{
CHAR
;
IF
(
)
=
;
ELSE
;
FOR
(
;
;
)
{
IF
(
)
CONTINUE
;
=
(
CHAR
)
(
(
)
)
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
(
,
,
FLOAT
)
{
;
INT
;
IF
(
)
=
;
ELSE
;
FOR
(
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
(
(
)
)
;
IF
(
(
)
)
CONTINUE
;
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
=
;
INT
=
;
;
IF
(
)
{
(
)
;
RETURN
;
}
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
BREAK
;
=
;
IF
(
)
BREAK
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
RETURN
(
)
;
}
VOID
(
)
{
(
,
)
;
(
)
;
}
VOID
(
,
)
{
;
IF
(
)
{
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
(
)
;
=
;
=
;
=
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
,
,
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
}
IF
(
)
{
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
}
IF
(
)
{
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
,
)
(
(
,
)
(
,
)
)
)
CONTINUE
;
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
)
(
,
,
)
;
}
IF
(
)
{
(
)
;
RETURN
;
}
}
}
}
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
STATIC
INT
;
STATIC
;
FLOAT
;
=
;
=
(
)
;
=
;
=
;
=
;
RETURN
;
}
CHAR
(
)
{
STATIC
INT
;
STATIC
CHAR
;
CHAR
;
=
;
=
(
)
;
(
,
,
,
(
INT
)
,
(
INT
)
,
(
INT
)
)
;
RETURN
;
}
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
VOID
(
,
)
{
IF
(
(
,
)
)
{
(
,
)
;
}
ELSE
IF
(
(
,
)
)
{
(
,
)
;
}
ELSE
{
(
,
,
,
)
;
}
(
)
;
}
FLOAT
(
)
{
FLOAT
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
RETURN
;
}
VOID
(
,
)
{
FLOAT
;
FLOAT
,
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
(
INT
)
(
(
,
)
)
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
;
=
(
)
;
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
=
;
=
;
=
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
(
(
)
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
)
{
=
;
=
;
=
;
=
;
}
(
VOID
)
{
INT
;
;
=
(
INT
)
;
FOR
(
=
;
;
,
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
IF
(
)
(
)
;
;
(
)
;
RETURN
;
}
VOID
(
)
{
(
)
;
IF
(
(
)
(
)
)
{
RETURN
;
}
(
,
,
(
)
)
;
=
;
=
;
=
;
}
VOID
(
)
{
INT
,
;
,
;
IF
(
(
(
)
)
(
)
)
RETURN
;
=
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
,
)
;
}
}
VOID
(
)
{
INT
,
;
,
;
=
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
,
,
,
)
;
IF
(
)
BREAK
;
}
}
(
)
{
;
WHILE
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
BREAK
;
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
RETURN
;
}
__E__O__F__
STATIC
VOID
(
,
,
,
INT
)
{
;
;
;
FLOAT
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
(
,
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
(
,
)
)
{
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
}
}
(
,
,
INT
,
INT
)
{
;
,
,
;
;
;
FLOAT
;
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
(
,
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
)
=
;
}
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
RETURN
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
,
)
;
IF
(
)
=
;
RETURN
;
}
STATIC
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
;
;
,
,
;
;
FLOAT
;
FLOAT
;
;
=
;
INT
=
;
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
{
(
,
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
(
)
)
{
=
;
(
,
)
;
;
}
=
(
,
,
,
,
,
)
;
IF
(
)
{
INT
;
=
;
(
,
)
;
IF
(
(
,
)
)
{
IF
(
)
{
IF
(
(
,
)
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
(
,
,
)
;
(
,
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
=
(
,
,
,
,
,
)
;
}
}
IF
(
(
(
)
(
)
)
)
{
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
(
,
,
)
;
}
}
}
}
IF
(
)
{
;
(
,
,
)
;
(
)
;
(
,
,
,
)
;
IF
(
(
)
)
(
,
)
;
ELSE
=
(
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
(
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
)
;
}
(
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
)
{
;
;
(
)
;
=
(
)
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
}
STATIC
VOID
(
)
{
;
INT
;
IF
(
)
(
,
,
)
;
IF
(
)
{
FLOAT
;
;
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
(
INT
)
,
(
INT
)
,
,
)
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
)
;
(
,
,
,
)
;
(
)
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
}
ELSE
{
IF
(
)
(
)
;
ELSE
(
)
;
}
(
)
;
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
}
ELSE
{
(
,
,
(
)
,
,
,
)
;
}
RETURN
;
}
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
INT
,
FLOAT
,
FLOAT
)
{
;
;
,
,
;
(
,
)
;
(
,
,
,
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
INT
,
FLOAT
,
FLOAT
,
)
{
;
;
,
,
;
(
,
)
;
(
,
,
,
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
IF
(
)
(
)
;
ELSE
{
(
,
,
(
)
,
,
,
)
;
(
)
;
}
}
VOID
(
,
,
,
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
(
,
,
)
;
(
,
,
,
)
;
IF
(
)
{
(
,
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
IF
(
)
{
IF
(
(
)
(
(
)
)
)
{
=
(
)
;
WHILE
(
)
(
,
,
,
)
;
}
}
}
(
,
,
,
,
,
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
,
,
,
INT
,
INT
,
FLOAT
,
INT
)
{
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
IF
(
)
(
,
,
,
)
;
(
)
;
}
VOID
(
,
,
,
INT
,
INT
)
{
;
;
;
;
INT
;
;
(
,
,
,
)
;
(
,
)
;
=
;
=
;
=
;
WHILE
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
{
(
)
;
=
;
}
ELSE
{
IF
(
(
)
(
)
)
=
;
ELSE
=
;
IF
(
(
)
(
)
)
(
,
,
,
,
,
,
,
,
,
)
;
}
(
,
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
IF
(
)
(
,
,
)
;
}
VOID
(
)
{
;
FLOAT
;
;
FLOAT
;
IF
(
)
{
=
;
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
,
,
,
,
(
INT
)
,
,
,
)
;
}
}
=
;
;
IF
(
)
=
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
,
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
(
)
,
,
,
)
;
=
;
=
;
(
,
,
,
)
;
(
)
;
=
(
)
;
=
;
=
;
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
)
{
;
;
;
;
;
;
INT
;
;
IF
(
)
=
;
ELSE
=
;
=
;
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
(
(
,
)
)
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
=
;
(
,
)
;
(
,
,
,
)
;
WHILE
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
BREAK
;
IF
(
(
)
(
)
(
)
)
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
BREAK
;
}
=
;
(
,
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
=
;
}
VOID
(
,
,
,
INT
,
INT
,
FLOAT
)
{
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
(
,
,
,
)
;
(
)
;
}
__E__O__F__
INT
,
;
(
)
{
,
,
,
;
;
INT
,
;
FLOAT
,
;
(
,
,
)
;
(
,
,
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
GOTO
;
}
;
RETURN
;
;
=
;
=
=
(
)
;
=
=
(
)
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
=
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
=
;
=
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
}
;
RETURN
;
}
(
,
,
)
{
FLOAT
;
,
,
;
;
INT
;
FLOAT
;
;
INT
;
(
,
)
;
(
,
,
)
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
=
;
IF
(
)
{
IF
(
)
;
IF
(
(
(
)
(
)
)
)
IF
(
)
;
}
ELSE
{
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
;
}
}
=
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
IF
(
)
RETURN
;
}
}
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
IF
(
(
)
)
RETURN
;
}
}
IF
(
)
{
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
RETURN
;
}
IF
(
)
BREAK
;
}
RETURN
;
}
IF
(
(
)
)
=
;
ELSE
=
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
=
;
RETURN
;
}
RETURN
;
}
(
,
)
;
IF
(
(
)
)
{
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
}
RETURN
;
}
(
,
)
;
RETURN
;
}
IF
(
)
{
;
}
=
;
=
;
IF
(
)
{
(
)
;
(
)
;
}
RETURN
;
}
VOID
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
=
(
)
;
=
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
=
(
)
;
}
(
,
FLOAT
,
FLOAT
)
{
,
;
FLOAT
;
=
;
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
(
,
)
;
IF
(
(
,
,
)
)
{
=
;
IF
(
)
{
(
,
)
;
}
(
)
;
(
)
;
RETURN
;
}
(
)
;
(
)
;
RETURN
;
}
VOID
(
)
{
;
}
VOID
(
,
,
FLOAT
)
{
FLOAT
,
;
FLOAT
;
FLOAT
,
,
;
IF
(
)
RETURN
;
=
(
(
INT
)
(
)
)
;
=
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
(
(
)
)
)
(
)
(
)
)
{
=
;
=
;
=
;
}
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
}
ELSE
{
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
(
)
)
(
)
;
}
(
,
,
FLOAT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
,
FLOAT
)
{
;
=
;
IF
(
(
(
)
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
(
)
)
(
,
,
)
)
{
IF
(
)
(
,
,
)
;
}
}
(
,
FLOAT
,
FLOAT
)
{
;
IF
(
(
(
)
)
)
RETURN
;
=
;
=
(
)
;
=
(
)
;
=
;
RETURN
(
,
,
)
;
}
__E__O__F__
VOID
(
,
CHAR
)
;
VOID
(
)
;
STATIC
VOID
(
)
{
;
;
=
;
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
RETURN
;
IF
(
)
CONTINUE
;
(
,
,
)
;
IF
(
(
)
)
{
IF
(
(
)
(
,
)
)
{
=
;
}
RETURN
;
}
}
}
STATIC
VOID
(
)
{
;
IF
(
(
,
)
)
{
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
{
=
;
=
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
}
VOID
(
,
,
FLOAT
,
INT
)
{
}
(
)
{
CHAR
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
,
)
{
INT
;
CHAR
;
CHAR
;
;
IF
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
}
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
CASE
IF
(
(
)
)
=
;
ELSE
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
IF
(
(
)
)
=
;
ELSE
=
;
BREAK
;
}
}
IF
(
)
{
(
,
,
,
)
;
IF
(
)
;
=
;
RETURN
;
}
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
IF
(
)
{
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
)
;
ELSE
;
}
RETURN
;
}
}
}
(
,
,
)
;
IF
(
)
;
}
VOID
(
,
,
,
)
;
VOID
(
)
{
;
;
;
FLOAT
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
IF
(
(
(
,
)
)
)
=
;
IF
(
(
(
INT
)
(
)
)
)
=
;
ELSE
=
(
(
)
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
=
(
,
)
;
;
=
;
}
IF
(
)
{
;
=
(
,
(
)
)
;
;
;
=
;
=
(
)
;
=
;
}
}
VOID
(
,
,
)
{
;
IF
(
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
}
ELSE
{
=
;
RETURN
;
}
IF
(
)
=
(
,
)
;
ELSE
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
IF
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
INT
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
(
,
,
)
;
IF
(
)
{
;
=
;
}
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
}
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
)
;
=
;
=
;
=
;
}
ELSE
{
IF
(
)
{
STATIC
INT
;
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
(
,
,
(
(
,
(
(
)
)
)
)
,
,
,
)
;
}
}
=
;
(
)
;
}
VOID
(
)
{
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
INT
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
}
}
VOID
(
)
{
=
;
=
;
IF
(
)
;
IF
(
)
=
;
}
FLOAT
(
)
{
;
FLOAT
;
;
INT
;
FLOAT
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
=
(
)
;
IF
(
)
=
;
}
RETURN
;
}
(
VOID
)
{
,
,
;
INT
=
;
INT
;
FLOAT
,
,
;
=
;
=
=
;
=
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
;
IF
(
)
{
=
=
;
}
ELSE
;
=
(
)
;
=
;
DO
{
=
(
,
(
)
,
)
;
IF
(
)
;
}
WHILE
(
)
;
RETURN
;
}
(
VOID
)
{
;
FLOAT
,
;
;
=
;
=
;
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
RETURN
;
}
=
(
,
(
)
,
)
;
RETURN
;
}
(
VOID
)
{
IF
(
(
INT
)
(
)
)
RETURN
(
)
;
ELSE
RETURN
(
)
;
}
(
)
{
INT
;
=
;
CHAR
;
=
;
IF
(
)
RETURN
;
=
;
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
IF
(
(
,
)
)
{
;
IF
(
)
RETURN
;
}
}
RETURN
;
}
VOID
(
,
,
)
{
=
;
IF
(
)
IF
(
)
=
(
)
;
ELSE
=
(
)
;
ELSE
IF
(
)
=
(
)
;
IF
(
)
{
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
{
IF
(
)
{
=
(
,
(
)
,
)
;
}
IF
(
)
(
,
)
;
}
}
(
,
)
;
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
}
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
;
(
,
)
;
=
;
}
}
VOID
(
)
{
;
=
(
INT
)
;
=
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
(
)
;
;
(
)
;
=
;
=
;
=
;
=
;
RETURN
;
}
(
)
;
}
VOID
(
)
{
=
{
,
,
}
;
=
{
,
,
}
;
INT
;
,
;
;
INT
;
;
;
(
,
,
)
;
=
;
=
;
IF
(
)
{
CHAR
;
=
;
(
,
,
(
)
)
;
(
)
;
(
,
)
;
}
ELSE
IF
(
)
{
INT
;
CHAR
;
=
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
=
;
(
,
)
;
IF
(
)
=
;
}
ELSE
{
(
,
,
(
)
)
;
}
=
;
(
,
,
(
)
)
;
=
;
IF
(
)
(
)
;
=
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
;
IF
(
(
(
INT
)
)
)
{
=
;
}
ELSE
{
=
(
(
,
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
;
(
,
)
;
FOR
(
=
;
;
)
=
(
)
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
{
}
(
)
;
=
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
)
{
INT
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
(
)
;
=
;
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
}
}
(
)
;
}
VOID
(
,
CHAR
)
{
CHAR
;
INT
;
IF
(
(
)
)
{
(
,
)
;
}
=
(
,
)
;
(
,
,
(
)
)
;
=
(
,
)
;
=
;
IF
(
)
(
,
)
;
ELSE
(
,
(
,
,
)
)
;
IF
(
(
(
INT
)
)
)
{
=
;
}
ELSE
{
=
(
(
,
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
}
(
,
,
(
)
)
;
}
(
,
CHAR
)
{
CHAR
;
=
(
,
)
;
=
(
,
)
;
IF
(
(
,
)
(
,
)
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
(
,
)
;
IF
(
)
(
,
)
;
=
;
RETURN
;
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
}
;
(
,
,
,
)
{
IF
(
)
RETURN
(
,
,
,
,
,
)
;
ELSE
RETURN
(
,
,
,
,
,
)
;
}
UNSIGNED
(
VOID
,
INT
)
{
INT
,
;
=
;
FOR
(
=
;
;
)
(
(
)
)
;
RETURN
;
}
VOID
(
)
{
UNSIGNED
,
;
=
(
,
(
)
)
;
=
(
,
(
)
)
;
(
,
,
,
)
;
}
VOID
(
,
)
{
;
;
INT
,
;
;
=
;
=
;
IF
(
)
{
=
;
IF
(
(
)
)
=
;
RETURN
;
}
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
IF
(
(
,
,
(
)
)
)
{
=
;
}
=
;
=
;
=
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
{
(
,
,
(
)
,
,
,
)
;
(
,
,
)
;
}
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
IF
(
)
(
)
;
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
,
)
;
}
=
;
=
;
;
=
;
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
}
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
)
;
}
IF
(
)
{
(
)
;
(
,
)
;
=
;
=
;
}
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
ELSE
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
(
(
(
INT
)
)
)
(
)
)
{
(
)
;
=
;
}
}
RETURN
;
}
IF
(
)
IF
(
(
,
(
)
)
)
(
)
;
=
;
}
__E__O__F__
VOID
(
)
{
IF
(
)
=
;
(
,
)
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
}
VOID
(
)
{
INT
,
;
,
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
)
;
}
=
;
=
;
IF
(
(
,
)
)
{
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
}
}
}
ELSE
{
IF
(
)
{
=
;
RETURN
;
}
}
=
;
=
(
,
(
)
,
)
;
IF
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
=
(
,
(
)
,
)
;
}
ELSE
{
=
(
)
;
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
=
(
,
(
)
,
)
;
}
}
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
)
;
}
}
VOID
(
,
)
{
CHAR
;
CHAR
;
INT
;
INT
,
,
;
INT
;
INT
;
INT
,
;
INT
;
INT
,
;
;
;
CHAR
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
;
}
=
;
=
(
)
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
,
(
)
,
,
,
,
)
;
=
(
)
;
IF
(
)
BREAK
;
(
,
)
;
;
}
(
,
(
)
,
,
,
,
,
,
,
(
)
)
;
=
(
)
;
IF
(
)
BREAK
;
(
,
)
;
;
}
(
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
(
,
)
;
}
VOID
(
)
{
=
;
=
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
RETURN
;
}
=
;
(
)
;
}
VOID
(
)
{
CHAR
;
CHAR
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
(
)
,
,
,
,
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
IF
(
(
)
)
{
=
;
RETURN
;
}
=
;
=
;
(
)
;
}
VOID
(
)
{
;
INT
,
;
INT
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
(
)
;
=
;
}
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
IF
(
)
{
;
(
,
,
(
)
,
,
,
)
;
=
;
;
}
}
=
(
)
;
IF
(
(
(
)
)
)
{
=
(
)
;
=
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
IF
(
)
=
;
ELSE
=
(
)
;
=
;
=
;
IF
(
)
{
IF
(
)
;
IF
(
)
;
}
ELSE
{
IF
(
)
;
IF
(
)
;
}
=
;
IF
(
(
)
)
=
(
)
;
ELSE
IF
(
(
)
)
=
(
)
;
ELSE
=
;
(
)
;
}
__E__O__F__
(
,
,
INT
,
INT
,
VOID
)
{
;
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
(
)
;
}
=
(
(
)
)
;
=
;
=
(
(
)
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
IF
(
)
=
(
)
;
=
;
IF
(
)
{
FOR
(
=
,
=
;
;
,
)
IF
(
)
BREAK
;
}
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
(
)
;
(
,
)
;
RETURN
;
}
VOID
(
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
IF
(
)
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
=
;
=
;
}
VOID
(
,
CONST
CHAR
,
INT
,
)
{
IF
(
)
(
)
;
=
(
)
;
=
;
=
;
}
VOID
(
)
{
CHAR
;
INT
;
;
INT
;
;
CHAR
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
)
)
CONTINUE
;
=
;
IF
(
)
{
=
;
;
}
(
(
)
,
,
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
(
)
)
;
ELSE
=
;
(
(
)
,
,
(
(
)
)
)
;
IF
(
)
(
(
)
,
,
)
;
ELSE
IF
(
)
(
(
)
,
,
)
;
ELSE
(
(
)
,
,
)
;
=
;
}
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
,
)
;
=
;
=
;
}
=
;
=
;
}
VOID
(
)
{
;
INT
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
RETURN
;
=
;
=
;
DO
{
,
;
IF
(
)
=
,
=
;
IF
(
)
BREAK
;
}
WHILE
(
)
;
=
;
(
)
;
}
VOID
(
)
{
;
INT
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
RETURN
;
=
;
=
;
DO
{
IF
(
)
{
=
;
=
;
}
ELSE
,
;
IF
(
)
BREAK
;
}
WHILE
(
)
;
=
;
(
)
;
}
VOID
(
)
{
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
,
)
;
}
__E__O__F__
;
INT
;
=
;
(
)
(
(
(
)
)
(
)
)
(
)
(
(
(
)
)
(
)
)
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
=
;
=
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
(
,
)
;
=
;
(
,
(
)
,
)
;
=
(
)
;
=
(
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
}
(
)
{
INT
;
INT
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
)
{
IF
(
)
=
(
)
;
ELSE
BREAK
;
}
IF
(
(
,
)
)
{
RETURN
;
}
IF
(
(
,
(
)
)
)
{
RETURN
(
)
;
}
RETURN
;
}
(
)
{
INT
;
INT
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
)
{
IF
(
)
=
(
)
;
ELSE
BREAK
;
}
RETURN
;
}
(
VOID
)
{
RETURN
(
)
;
}
__E__O__F__
STATIC
;
STATIC
;
STATIC
,
,
;
FLOAT
;
FLOAT
;
INT
;
FLOAT
;
FLOAT
(
,
)
{
FLOAT
;
FLOAT
;
FLOAT
;
=
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
VOID
(
)
{
;
FLOAT
;
FLOAT
,
,
;
;
INT
,
;
STATIC
=
{
,
,
}
;
STATIC
=
{
,
,
}
;
STATIC
=
{
,
,
}
;
=
;
=
;
IF
(
)
;
IF
(
(
)
(
)
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
STATIC
INT
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
)
;
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
}
}
=
;
IF
(
)
=
;
IF
(
(
)
(
)
(
)
)
{
=
(
(
)
)
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
(
(
,
,
)
)
,
,
,
)
;
}
IF
(
)
=
;
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
IF
(
)
(
,
(
FLOAT
)
,
,
)
;
IF
(
)
(
,
(
FLOAT
)
,
,
)
;
IF
(
)
(
,
(
FLOAT
)
,
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
(
)
;
=
(
,
)
;
=
;
=
(
,
)
;
=
;
=
;
}
=
;
=
;
=
;
=
;
}
VOID
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
;
=
;
IF
(
)
{
(
)
;
=
;
=
;
=
;
}
ELSE
{
(
,
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
;
;
=
(
)
;
IF
(
)
=
;
;
=
(
,
)
;
;
=
(
,
)
;
;
=
;
IF
(
)
;
;
=
;
IF
(
)
;
IF
(
)
=
;
;
}
(
)
;
;
=
(
)
;
IF
(
)
=
;
;
=
;
IF
(
)
=
;
;
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
(
,
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
;
;
}
(
)
;
FOR
(
=
;
;
)
{
(
)
;
;
(
)
;
}
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
,
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
)
{
INT
;
;
INT
;
=
=
=
=
;
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
;
ELSE
;
IF
(
(
)
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
}
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
;
IF
(
)
=
;
;
IF
(
)
=
;
}
VOID
(
)
{
FLOAT
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
(
)
(
)
)
{
=
;
}
ELSE
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
;
IF
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
=
;
IF
(
)
=
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
=
;
=
(
)
;
IF
(
)
=
;
(
,
,
,
)
;
IF
(
(
(
INT
)
)
)
(
,
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
=
;
RETURN
;
}
}
VOID
(
VOID
)
{
;
;
INT
,
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
,
,
)
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
;
=
;
}
IF
(
)
{
(
,
,
)
;
(
,
,
(
)
,
,
,
)
;
;
}
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
}
IF
(
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
}
}
IF
(
)
{
IF
(
)
{
=
;
IF
(
(
(
INT
)
(
)
)
)
{
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
;
(
,
,
)
;
}
}
IF
(
)
{
IF
(
)
{
=
;
;
IF
(
)
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
(
)
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
}
}
ELSE
{
=
;
=
;
}
IF
(
(
(
)
)
)
{
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
=
;
}
IF
(
)
(
,
,
,
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
,
,
,
)
;
}
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
,
)
;
}
}
}
}
VOID
(
)
{
INT
;
INT
;
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
IF
(
)
{
;
}
ELSE
IF
(
)
{
;
;
}
}
(
)
;
IF
(
(
)
)
{
=
;
IF
(
(
)
)
;
}
IF
(
(
)
)
{
=
;
IF
(
(
)
)
;
}
IF
(
)
{
;
(
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
INT
)
(
)
)
=
;
}
}
VOID
(
)
{
CHAR
;
IF
(
)
{
=
;
=
;
}
IF
(
(
)
)
{
;
(
,
,
(
)
,
,
,
)
;
}
IF
(
)
=
;
ELSE
=
;
IF
(
(
(
)
)
)
=
;
ELSE
IF
(
(
,
)
)
=
(
)
;
ELSE
IF
(
(
,
)
)
=
(
)
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
;
,
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
{
IF
(
)
{
;
RETURN
;
}
}
ELSE
IF
(
)
{
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
RETURN
;
}
=
;
=
;
=
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
IF
(
)
=
;
=
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
}
VOID
(
)
{
FLOAT
;
INT
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
(
)
;
RETURN
;
}
(
,
,
,
)
;
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
=
;
=
(
,
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
=
(
)
;
IF
(
)
;
=
(
INT
)
;
=
(
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
,
(
)
)
;
=
;
BREAK
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
IF
(
(
)
)
{
IF
(
)
{
(
)
;
=
;
=
;
}
ELSE
(
,
)
;
(
,
)
;
}
}
__E__O__F__
STATIC
;
STATIC
;
VOID
(
,
)
;
VOID
(
,
,
,
,
,
)
{
;
(
,
)
;
IF
(
)
;
ELSE
IF
(
)
=
;
(
,
,
,
,
)
;
}
VOID
(
,
,
INT
)
{
;
IF
(
)
{
IF
(
)
{
;
RETURN
;
}
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
}
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
(
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
)
;
}
(
,
)
{
INT
;
;
=
(
)
;
IF
(
(
(
(
INT
)
(
)
)
)
)
{
IF
(
(
(
)
)
)
RETURN
;
}
;
IF
(
(
)
)
{
=
(
)
;
IF
(
(
INT
)
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
(
)
)
{
IF
(
)
{
IF
(
(
INT
)
(
)
)
;
ELSE
(
,
)
;
}
IF
(
)
;
}
}
IF
(
(
)
(
(
)
)
)
=
;
RETURN
;
}
VOID
(
)
{
INT
;
IF
(
)
{
=
;
=
;
(
,
)
;
=
;
}
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
=
(
(
)
)
;
ELSE
=
;
=
(
)
;
}
IF
(
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
=
(
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
;
(
)
;
}
}
VOID
(
,
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
}
=
;
}
VOID
(
,
)
{
INT
;
IF
(
(
INT
)
(
)
)
RETURN
;
=
(
)
;
IF
(
(
(
)
(
)
)
(
)
)
{
(
,
,
)
;
RETURN
;
}
(
,
)
;
;
}
(
)
(
)
(
)
STATIC
VOID
(
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
,
VOID
(
)
(
)
)
{
INT
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
(
)
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
=
;
=
;
(
,
,
,
,
,
,
,
)
;
RETURN
;
}
;
RETURN
;
}
IF
(
(
)
(
)
)
{
=
;
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
=
;
IF
(
(
)
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
)
)
{
;
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
}
}
ELSE
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
}
}
;
RETURN
;
}
}
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
(
)
)
IF
(
)
(
,
,
(
)
,
,
,
)
;
(
)
;
(
)
;
BREAK
;
}
}
IF
(
)
;
IF
(
)
=
;
}
}
VOID
(
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
,
VOID
(
)
(
)
)
{
INT
=
;
(
,
,
,
,
,
,
,
)
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
(
)
(
(
,
)
)
)
)
{
(
,
,
,
,
,
,
,
)
;
}
}
VOID
(
,
)
{
;
,
;
;
INT
=
;
FLOAT
;
INT
;
FLOAT
;
=
;
IF
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
=
;
=
(
)
(
(
)
)
;
(
,
,
,
,
,
,
,
)
;
IF
(
(
(
INT
)
)
)
;
=
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
}
VOID
(
)
{
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
)
)
{
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
}
RETURN
;
}
IF
(
(
)
(
)
(
)
(
)
)
{
IF
(
(
)
)
RETURN
;
}
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
)
{
IF
(
)
{
=
;
=
(
)
;
}
IF
(
)
{
=
;
(
,
)
;
=
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
RETURN
;
}
}
}
IF
(
)
{
=
;
(
,
)
;
}
IF
(
(
)
(
)
)
RETURN
;
;
IF
(
)
{
=
;
=
;
}
}
}
VOID
(
)
{
;
,
;
;
INT
=
;
FLOAT
;
=
;
IF
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
,
;
,
;
INT
;
FLOAT
;
INT
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
IF
(
)
{
;
;
}
(
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
INT
,
,
INT
)
{
,
;
;
;
IF
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
)
;
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
FLOAT
;
;
INT
;
INT
;
=
(
)
;
IF
(
(
)
)
{
;
}
ELSE
{
IF
(
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
(
)
(
)
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
)
;
IF
(
(
(
INT
)
)
)
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
;
IF
(
)
=
;
}
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
}
VOID
(
)
{
STATIC
INT
=
{
}
;
STATIC
INT
=
{
,
,
,
,
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
INT
;
;
,
;
;
INT
=
;
INT
=
;
;
IF
(
(
)
)
{
=
;
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
RETURN
;
}
IF
(
)
{
;
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
IF
(
)
{
;
IF
(
)
=
;
}
(
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
=
;
IF
(
)
{
=
(
INT
)
(
(
)
)
;
=
;
}
ELSE
{
=
(
INT
)
(
(
)
)
;
=
;
}
}
VOID
(
)
{
STATIC
INT
=
{
,
,
}
;
STATIC
INT
=
{
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
INT
;
INT
;
;
,
,
;
FLOAT
,
;
;
INT
;
INT
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
(
)
)
{
=
;
=
;
RETURN
;
}
ELSE
IF
(
(
)
(
)
)
{
=
;
}
ELSE
{
;
}
IF
(
)
{
=
;
(
,
,
(
)
,
,
,
)
;
}
ELSE
{
=
(
)
;
}
=
;
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
=
(
)
;
=
;
}
IF
(
)
=
;
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
IF
(
)
=
;
IF
(
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
RETURN
;
}
IF
(
)
{
;
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
(
,
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
)
;
}
(
)
;
(
)
;
(
(
)
)
;
(
,
)
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
,
}
;
STATIC
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
;
,
;
;
INT
=
;
INT
=
;
IF
(
)
{
;
RETURN
;
}
(
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
IF
(
)
{
;
;
}
IF
(
)
(
,
,
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
;
,
;
;
;
INT
=
;
INT
=
;
(
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
IF
(
)
{
;
;
}
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
;
,
;
;
INT
;
INT
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
;
;
}
(
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
,
;
,
;
INT
;
FLOAT
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
RETURN
;
}
IF
(
)
{
;
RETURN
;
}
IF
(
)
;
(
,
,
,
)
;
(
,
,
)
;
=
;
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
,
}
;
STATIC
INT
=
{
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
__E__O__F__
(
)
(
)
=
{
,
,
}
;
(
,
)
VOID
(
,
CONST
,
CONST
,
FLOAT
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
INT
;
,
,
;
=
;
=
;
=
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
=
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
}
}
(
,
)
VOID
(
,
,
,
)
{
FLOAT
;
STATIC
FLOAT
,
,
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
;
}
}
VOID
(
,
CONST
,
CONST
)
{
FLOAT
;
;
FLOAT
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
CONST
)
{
INT
;
INT
;
FLOAT
=
;
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
)
{
=
;
=
(
)
;
}
}
=
=
=
;
=
;
(
,
,
)
;
(
)
;
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
FLOAT
(
FLOAT
)
{
IF
(
)
RETURN
;
RETURN
;
INT
=
(
INT
)
;
;
RETURN
(
FLOAT
)
;
}
(
)
(
)
LONG
(
FLOAT
)
{
STATIC
INT
;
,
}
(
DEFAULT
)
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
IF
(
)
;
IF
(
)
;
RETURN
(
)
;
}
FLOAT
(
FLOAT
)
{
IF
(
)
(
INT
)
(
)
;
ELSE
(
(
INT
)
(
)
)
;
=
(
)
(
(
INT
)
(
(
)
)
)
;
RETURN
;
}
INT
;
;
INT
(
,
,
STRUCT
)
{
INT
;
FLOAT
,
;
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
IF
(
)
;
RETURN
;
}
INT
(
,
,
STRUCT
)
{
FLOAT
,
;
INT
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
=
=
;
(
)
;
BREAK
;
}
=
;
IF
(
)
=
;
IF
(
)
;
(
)
;
RETURN
;
}
(
)
(
)
INT
(
,
,
STRUCT
)
{
STATIC
INT
;
STATIC
INT
;
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
,
(
)
,
,
,
,
,
,
,
,
INT
}
}
(
DEFAULT
)
VOID
(
,
)
{
=
=
=
;
=
=
=
;
}
VOID
(
,
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
INT
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
FLOAT
,
;
=
;
=
(
)
;
IF
(
)
{
=
;
;
;
;
}
RETURN
;
}
(
,
)
{
FLOAT
,
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
RETURN
;
}
VOID
(
,
FLOAT
,
,
)
{
=
;
=
;
=
;
}
(
,
)
{
RETURN
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
DOUBLE
(
DOUBLE
)
;
(
)
{
INT
;
FLOAT
;
=
;
FOR
(
=
;
;
)
;
=
(
)
;
RETURN
;
}
VOID
(
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
INT
(
INT
)
{
INT
=
;
WHILE
(
)
;
RETURN
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
;
WHILE
(
)
{
IF
(
)
=
;
;
}
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
WHILE
(
)
=
;
=
;
}
CHAR
(
CHAR
)
{
STATIC
CHAR
;
INT
;
WHILE
(
)
;
IF
(
)
RETURN
;
;
FOR
(
=
;
;
,
)
=
;
=
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
,
;
=
(
)
;
WHILE
(
)
;
FOR
(
=
;
;
)
;
IF
(
)
=
;
ELSE
{
;
(
,
,
)
;
=
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
)
;
(
,
,
)
;
=
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
)
{
IF
(
)
RETURN
;
;
}
(
,
)
;
}
;
SHORT
(
)
(
SHORT
)
;
SHORT
(
)
(
SHORT
)
;
INT
(
)
(
INT
)
;
INT
(
)
(
INT
)
;
FLOAT
(
)
(
FLOAT
)
;
FLOAT
(
)
(
FLOAT
)
;
SHORT
(
SHORT
)
{
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
RETURN
(
)
;
}
INT
(
INT
)
{
RETURN
(
)
;
}
INT
(
INT
)
{
RETURN
(
)
;
}
FLOAT
(
FLOAT
)
{
RETURN
(
)
;
}
FLOAT
(
FLOAT
)
{
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
,
;
=
;
=
(
)
;
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
RETURN
;
}
INT
(
INT
)
{
,
,
,
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
(
(
INT
)
)
(
(
INT
)
)
(
(
INT
)
)
;
}
INT
(
INT
)
{
RETURN
;
}
FLOAT
(
FLOAT
)
{
UNION
{
FLOAT
;
;
}
,
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
FLOAT
(
FLOAT
)
{
RETURN
;
}
VOID
(
VOID
)
{
=
{
,
}
;
IF
(
(
SHORT
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
CHAR
(
CHAR
,
)
{
;
STATIC
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
CHAR
;
CHAR
(
CHAR
)
{
INT
;
INT
;
CHAR
;
=
;
=
;
=
;
IF
(
)
{
=
;
RETURN
;
}
WHILE
(
(
=
)
)
{
IF
(
)
{
=
;
RETURN
;
}
;
}
IF
(
)
{
WHILE
(
)
;
GOTO
;
}
IF
(
)
{
;
WHILE
(
)
{
=
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
;
}
}
}
DO
{
IF
(
)
{
=
;
;
}
;
=
;
}
WHILE
(
)
;
IF
(
)
{
=
;
}
=
;
=
;
RETURN
;
}
INT
;
VOID
(
,
INT
)
{
INT
;
FOR
(
=
;
;
)
;
}
INT
(
CHAR
,
CHAR
)
{
(
)
RETURN
(
,
)
;
RETURN
(
,
)
;
}
INT
(
CHAR
,
CHAR
,
INT
)
{
INT
,
;
DO
{
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
}
}
WHILE
(
)
;
RETURN
;
}
INT
(
CHAR
,
CHAR
)
{
RETURN
(
,
,
)
;
}
VOID
(
CHAR
,
INT
,
CHAR
,
)
{
INT
;
;
CHAR
;
(
,
)
;
=
(
,
,
)
;
(
)
;
IF
(
)
(
,
,
)
;
(
,
,
)
;
}
CHAR
(
CHAR
,
CHAR
)
{
CHAR
;
STATIC
CHAR
;
STATIC
INT
;
CHAR
;
;
IF
(
)
;
WHILE
(
)
{
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
IF
(
(
,
)
)
{
RETURN
;
}
WHILE
(
)
{
=
;
IF
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
IF
(
)
RETURN
;
}
}
(
CHAR
)
{
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
,
CHAR
)
{
CHAR
,
;
INT
;
INT
=
;
IF
(
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
IF
(
(
)
)
RETURN
;
(
,
(
)
,
,
,
)
;
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
WHILE
(
)
{
=
;
;
IF
(
)
=
;
}
=
;
}
__E__O__F__
(
)
;
EXTERN
;
(
,
FLOAT
)
;
;
;
INT
;
FLOAT
;
VOID
(
VOID
)
{
;
INT
,
;
IF
(
)
=
;
ELSE
=
;
=
;
WHILE
(
)
{
;
IF
(
)
=
;
=
;
IF
(
(
)
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
}
}
VOID
(
,
FLOAT
)
{
(
,
,
)
;
}
VOID
(
,
FLOAT
)
{
;
IF
(
)
(
,
,
)
;
IF
(
)
{
IF
(
)
{
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
(
)
;
(
,
)
;
}
ELSE
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
(
)
)
{
IF
(
)
{
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
}
}
}
VOID
(
,
FLOAT
)
{
(
,
)
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
(
)
)
{
IF
(
)
{
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
}
}
}
VOID
(
,
FLOAT
)
{
;
(
,
,
)
;
=
(
)
;
(
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
,
FLOAT
)
{
IF
(
)
(
,
,
)
;
IF
(
(
)
)
RETURN
;
(
)
;
}
INT
(
,
)
{
;
FLOAT
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
;
;
;
(
,
)
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
;
FLOAT
;
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
(
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
=
;
=
;
}
=
;
(
,
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
=
(
)
;
IF
(
)
{
=
=
;
(
)
;
(
,
,
(
)
,
)
;
RETURN
;
}
=
;
;
=
;
=
;
(
)
;
}
(
)
{
;
;
INT
;
IF
(
)
{
IF
(
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
IF
(
)
RETURN
;
=
;
IF
(
(
(
)
)
(
)
)
{
=
;
IF
(
)
{
RETURN
;
}
}
ELSE
IF
(
(
)
)
{
=
;
=
;
}
ELSE
IF
(
(
)
(
(
)
)
(
)
)
{
=
;
=
;
}
ELSE
{
=
;
IF
(
)
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
IF
(
)
RETURN
;
}
ELSE
RETURN
;
IF
(
)
{
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
{
RETURN
;
}
IF
(
)
{
IF
(
(
,
)
)
{
RETURN
;
}
}
ELSE
IF
(
)
{
IF
(
(
,
)
)
{
RETURN
;
}
}
=
;
IF
(
(
,
)
)
{
;
IF
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
}
}
}
ELSE
{
;
IF
(
)
{
IF
(
(
,
)
)
RETURN
;
}
ELSE
{
IF
(
(
,
)
)
RETURN
;
}
(
,
,
)
;
IF
(
(
)
)
{
RETURN
;
}
IF
(
)
IF
(
(
,
)
)
RETURN
;
=
(
)
;
(
)
;
;
=
;
}
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
(
)
{
FLOAT
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
,
;
FLOAT
;
;
IF
(
)
{
(
,
)
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
)
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
{
RETURN
;
}
IF
(
)
;
ELSE
IF
(
)
;
IF
(
(
)
)
{
=
;
=
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
RETURN
;
}
VOID
(
)
{
=
;
(
)
;
IF
(
(
)
)
{
(
)
;
=
;
}
}
VOID
(
)
{
=
;
(
)
;
IF
(
(
)
)
{
(
)
;
=
;
}
}
;
VOID
(
,
FLOAT
)
{
FLOAT
;
=
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
RETURN
;
=
;
(
,
,
)
;
}
(
,
FLOAT
)
{
;
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
(
)
;
}
ELSE
{
=
;
RETURN
;
}
}
}
=
;
=
;
IF
(
(
)
(
)
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
;
}
}
ELSE
{
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
}
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
(
)
;
}
ELSE
{
IF
(
)
{
=
;
(
)
;
}
ELSE
{
=
;
(
)
;
}
RETURN
;
}
}
=
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
RETURN
(
)
;
}
VOID
(
,
FLOAT
)
{
;
;
;
;
;
FLOAT
,
;
;
,
;
FLOAT
,
,
;
,
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
)
;
IF
(
(
)
)
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
;
(
,
)
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
IF
(
(
)
(
(
)
)
)
{
(
,
)
;
=
;
RETURN
;
}
=
;
=
(
)
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
(
)
;
=
;
}
IF
(
)
{
;
=
;
IF
(
)
{
;
=
;
(
,
)
;
=
;
}
ELSE
IF
(
)
{
;
=
(
)
;
}
ELSE
{
=
(
)
;
}
IF
(
)
{
(
,
)
;
=
;
=
=
;
=
;
}
}
(
,
,
)
;
=
(
)
;
IF
(
)
{
;
=
;
}
(
,
)
;
IF
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
,
)
;
=
(
)
;
=
;
=
(
(
)
)
;
=
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
=
(
,
,
,
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
=
(
,
,
,
,
,
)
;
=
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
,
)
;
}
(
,
)
;
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
=
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
,
)
;
}
(
,
)
;
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
=
(
)
;
}
}
}
(
,
)
;
(
)
;
IF
(
)
=
;
}
__E__O__F__
VOID
(
)
{
,
,
;
;
,
;
;
INT
;
;
;
IF
(
)
{
=
;
(
)
;
IF
(
)
{
=
;
;
RETURN
;
}
}
=
;
(
,
)
;
(
,
)
;
;
(
,
)
;
IF
(
)
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
)
;
IF
(
)
=
;
IF
(
)
;
=
(
,
,
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
;
}
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
;
}
IF
(
)
=
;
ELSE
=
;
(
,
)
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
=
;
;
(
)
;
}
VOID
(
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
DO
{
;
IF
(
)
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
BREAK
;
}
WHILE
(
)
;
=
;
=
;
}
VOID
(
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
DO
{
;
IF
(
)
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
BREAK
;
}
WHILE
(
)
;
=
;
=
;
}
VOID
(
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
(
)
;
RETURN
;
}
}
(
,
)
;
}
__E__O__F__
CHAR
(
)
{
CHAR
;
STATIC
CHAR
;
=
;
IF
(
)
RETURN
;
(
,
(
,
)
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
(
INT
)
(
)
)
{
=
;
RETURN
;
}
RETURN
;
}
(
,
)
{
CHAR
;
CHAR
;
IF
(
(
(
INT
)
(
)
(
)
)
)
RETURN
;
(
,
(
)
)
;
(
,
(
)
)
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
,
INT
)
{
;
INT
,
;
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
=
;
RETURN
;
}
=
;
}
VOID
(
,
INT
)
{
;
INT
,
;
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
=
;
RETURN
;
}
=
;
}
VOID
(
)
{
;
=
;
IF
(
)
RETURN
;
(
,
)
;
}
VOID
(
)
{
CHAR
;
;
INT
;
INT
;
;
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
IF
(
(
(
)
,
)
)
{
IF
(
(
)
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
RETURN
;
}
IF
(
(
,
)
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
;
}
IF
(
)
RETURN
;
}
IF
(
(
,
)
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
,
,
)
;
}
IF
(
)
RETURN
;
}
IF
(
(
,
)
)
{
;
=
(
)
;
(
)
=
;
=
(
)
;
(
)
=
;
=
(
)
;
=
(
)
;
(
)
=
;
IF
(
)
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
=
(
)
;
=
;
(
,
)
;
(
,
,
,
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
=
;
}
RETURN
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
IF
(
(
)
)
=
(
(
)
)
;
ELSE
;
}
ELSE
{
=
(
)
;
=
;
(
,
)
;
(
,
,
,
)
;
IF
(
)
(
)
;
}
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
;
IF
(
(
)
)
=
;
ELSE
=
;
(
,
,
)
;
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
;
IF
(
(
)
)
=
;
ELSE
=
;
(
,
,
)
;
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
,
)
;
}
VOID
(
)
{
INT
;
;
CHAR
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
;
CHAR
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
;
=
;
=
;
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
(
)
;
FOR
(
=
;
;
)
{
(
)
;
}
(
,
)
;
}
VOID
(
)
{
;
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
;
INT
,
;
;
INT
;
=
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
,
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
;
INT
,
;
;
INT
;
=
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
,
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
;
INT
;
;
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
,
)
;
}
VOID
(
)
{
;
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
RETURN
;
;
=
;
=
;
(
,
,
,
,
)
;
}
VOID
(
)
{
=
;
=
;
=
;
}
INT
(
VOID
CONST
,
VOID
CONST
)
{
INT
,
;
=
(
INT
)
;
=
(
INT
)
;
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
INT
;
INT
;
CHAR
;
CHAR
;
INT
;
=
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
;
}
(
,
,
(
)
,
)
;
=
;
FOR
(
=
;
;
)
{
(
,
(
)
,
,
,
)
;
IF
(
(
)
(
)
(
)
)
{
(
,
)
;
BREAK
;
}
(
,
)
;
}
(
,
,
,
,
)
;
}
VOID
(
)
{
INT
;
=
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
SWITCH
(
)
{
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
DEFAULT
(
,
,
)
;
=
;
=
;
BREAK
;
}
}
VOID
(
,
,
)
{
INT
,
;
;
CHAR
;
CHAR
;
;
IF
(
(
)
)
RETURN
;
IF
(
(
(
INT
)
(
)
(
)
)
)
=
;
IF
(
)
(
,
(
)
,
,
)
;
ELSE
(
,
(
)
,
,
)
;
IF
(
)
{
(
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
{
=
(
)
;
IF
(
)
{
;
(
)
=
;
}
(
,
)
;
}
IF
(
(
)
)
=
;
(
,
)
;
IF
(
)
{
=
;
IF
(
)
{
(
,
,
,
(
INT
)
(
)
)
;
RETURN
;
}
=
;
IF
(
)
=
(
(
)
(
)
)
;
IF
(
)
{
=
;
(
,
,
,
(
INT
)
)
;
RETURN
;
}
=
(
)
(
(
)
(
)
)
;
=
;
}
IF
(
)
(
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
(
,
)
)
CONTINUE
;
}
(
,
,
,
)
;
}
}
VOID
(
)
{
INT
;
CHAR
;
CHAR
;
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
(
)
,
(
(
)
)
,
,
,
,
)
;
IF
(
(
)
(
)
(
)
)
{
(
(
)
,
)
;
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
}
(
,
,
,
)
;
}
VOID
(
)
{
CHAR
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
(
,
,
)
;
}
__E__O__F__
(
,
)
{
;
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
,
,
INT
,
)
{
IF
(
)
=
;
=
;
IF
(
(
)
(
)
)
{
IF
(
(
)
)
{
;
IF
(
)
;
IF
(
(
,
)
)
=
;
}
}
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
=
;
(
)
;
}
(
,
,
,
,
)
;
}
VOID
(
INT
,
,
,
INT
)
{
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
STATIC
INT
(
,
,
,
INT
,
INT
)
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
=
;
}
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
;
FLOAT
;
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
(
)
;
}
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
(
,
,
,
)
;
=
;
=
;
IF
(
)
;
ELSE
;
RETURN
;
}
STATIC
INT
(
,
,
,
INT
,
INT
,
INT
)
{
;
INT
;
INT
;
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
=
(
(
(
)
)
)
;
ELSE
=
(
(
(
)
)
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
;
(
,
,
,
)
;
RETURN
;
}
VOID
(
,
)
{
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
IF
(
)
{
;
IF
(
)
{
IF
(
(
,
)
)
{
=
;
RETURN
;
}
=
;
}
=
;
IF
(
(
)
)
(
)
;
RETURN
;
}
IF
(
(
(
(
)
)
(
(
)
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
)
{
IF
(
)
=
;
=
;
IF
(
(
)
)
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
=
;
IF
(
(
)
)
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
=
;
IF
(
(
)
)
(
)
;
}
}
(
,
)
{
RETURN
;
}
VOID
(
,
,
,
,
,
,
INT
,
INT
,
INT
,
INT
)
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
(
(
(
(
INT
)
(
)
(
)
)
)
)
)
{
IF
(
(
,
)
)
{
IF
(
(
INT
)
(
)
)
=
;
ELSE
;
}
}
=
;
IF
(
)
{
;
IF
(
)
=
;
}
=
;
IF
(
)
=
;
ELSE
=
;
(
)
;
IF
(
(
)
(
)
(
)
(
)
(
)
)
;
IF
(
)
=
;
IF
(
(
)
)
{
IF
(
(
)
(
)
(
)
(
)
(
)
)
{
;
FLOAT
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
(
FLOAT
)
,
)
;
ELSE
(
,
(
FLOAT
)
,
)
;
(
,
,
)
;
}
}
=
;
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
(
,
,
,
)
;
}
IF
(
(
)
(
)
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
=
;
=
;
}
=
(
,
,
,
,
)
;
;
=
(
,
,
,
,
,
)
;
;
;
IF
(
(
)
(
,
)
)
RETURN
;
IF
(
)
{
IF
(
(
)
(
)
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
=
;
IF
(
)
{
IF
(
(
)
(
)
)
;
(
,
,
,
,
)
;
RETURN
;
}
}
IF
(
)
{
(
,
)
;
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
IF
(
)
=
;
}
}
ELSE
IF
(
)
{
IF
(
(
)
(
)
)
(
,
,
,
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
,
,
)
;
}
IF
(
)
{
;
;
;
;
(
,
)
;
}
}
VOID
(
,
,
FLOAT
,
,
FLOAT
,
INT
)
{
FLOAT
;
=
;
;
;
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
IF
(
(
,
)
)
{
(
,
,
)
;
(
,
,
,
,
,
,
(
INT
)
,
(
INT
)
,
,
)
;
}
}
}
}
__E__O__F__
VOID
(
)
{
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
=
;
=
;
}
VOID
(
)
{
FLOAT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
=
(
(
)
)
;
;
=
(
)
;
=
;
}
VOID
(
)
;
VOID
(
,
,
VOID
(
)
(
)
)
{
(
)
;
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
{
IF
(
(
(
)
)
)
{
(
)
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
=
;
=
;
=
;
}
}
VOID
(
)
{
(
)
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
=
;
=
;
}
VOID
(
)
{
;
FLOAT
;
FLOAT
;
FLOAT
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
;
=
;
}
VOID
(
,
VOID
(
)
(
)
)
{
(
)
;
=
;
IF
(
(
(
)
)
)
{
(
)
;
}
ELSE
{
=
;
=
;
}
}
(
,
)
(
(
(
)
)
)
VOID
(
)
{
FLOAT
;
FLOAT
;
=
;
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
=
(
,
)
;
IF
(
(
)
)
{
FLOAT
;
=
(
)
(
)
;
=
(
(
(
)
)
)
(
)
;
=
(
,
)
;
}
=
;
}
;
VOID
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
;
}
RETURN
;
}
IF
(
)
IF
(
(
)
)
{
FLOAT
;
FLOAT
;
FLOAT
;
=
;
=
(
(
)
)
;
=
;
=
;
=
(
)
;
RETURN
;
}
IF
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
=
;
;
IF
(
)
=
;
IF
(
(
)
)
RETURN
;
=
;
=
(
)
;
=
(
(
)
)
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
)
;
RETURN
;
}
RETURN
;
}
;
VOID
(
)
{
;
IF
(
)
(
)
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
=
;
=
;
}
VOID
(
)
;
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
(
,
,
)
;
}
VOID
(
,
)
{
IF
(
(
)
(
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
}
VOID
(
,
,
)
{
IF
(
)
RETURN
;
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
ELSE
IF
(
)
=
;
}
VOID
(
)
{
;
,
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
=
(
)
;
=
;
}
IF
(
)
{
=
(
)
;
=
;
}
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
(
)
;
=
;
=
;
(
,
)
;
=
;
IF
(
)
=
;
ELSE
;
IF
(
)
=
;
ELSE
;
IF
(
)
=
;
ELSE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
(
,
)
;
IF
(
)
;
ELSE
(
)
;
=
;
(
)
;
IF
(
)
{
=
;
}
ELSE
{
(
,
)
;
(
)
;
=
;
}
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
,
)
{
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
)
{
IF
(
(
,
)
)
{
=
;
(
)
;
=
;
}
ELSE
{
=
;
(
,
,
)
;
IF
(
)
=
;
}
}
VOID
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
IF
(
)
(
,
,
)
;
IF
(
)
;
IF
(
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
=
;
;
;
}
VOID
(
)
{
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
}
VOID
(
)
{
=
;
;
;
(
,
)
;
=
;
IF
(
)
{
=
;
=
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
(
,
,
)
;
}
VOID
(
,
,
)
{
=
;
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
;
FLOAT
;
(
,
)
;
=
;
=
;
(
,
)
;
IF
(
)
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
(
,
,
,
)
;
=
;
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
,
)
)
{
(
,
)
;
}
}
}
VOID
(
)
;
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
(
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
IF
(
)
{
=
;
=
;
}
=
;
IF
(
(
,
)
)
(
,
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
}
VOID
(
,
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
=
;
RETURN
;
}
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
=
;
IF
(
(
,
)
)
(
,
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
,
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
FOR
(
=
;
;
=
)
{
=
;
=
;
(
)
;
}
RETURN
;
}
}
FOR
(
=
;
;
=
)
{
=
;
=
;
(
,
)
;
}
}
;
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
,
)
;
}
VOID
(
)
{
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
=
)
{
=
(
)
;
IF
(
)
=
;
}
=
;
FOR
(
=
;
;
=
)
{
=
(
)
;
=
;
IF
(
)
=
;
ELSE
;
IF
(
)
=
;
ELSE
;
=
;
}
}
VOID
(
)
{
;
,
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
=
)
{
(
,
,
)
;
(
,
,
)
;
}
;
;
;
;
=
(
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
}
VOID
(
,
)
{
;
IF
(
(
)
(
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
FOR
(
=
;
;
=
)
(
,
)
;
}
ELSE
{
FOR
(
=
;
;
=
)
(
)
;
}
}
}
VOID
(
,
,
,
INT
,
)
{
;
FOR
(
=
;
;
=
)
{
=
;
=
;
}
(
,
,
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
,
)
;
(
,
,
(
)
,
,
,
)
;
}
VOID
(
)
{
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
(
,
)
;
=
;
=
;
(
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
=
;
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
(
)
;
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
}
(
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
=
;
=
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
;
IF
(
)
=
;
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
;
(
,
)
;
=
;
=
;
(
,
)
;
SWITCH
(
)
{
DEFAULT
BREAK
;
CASE
=
(
)
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
BREAK
;
}
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
=
;
=
=
=
;
IF
(
)
=
;
=
;
=
;
IF
(
)
;
=
;
(
)
;
}
VOID
(
)
;
VOID
(
,
)
{
IF
(
(
)
(
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
CHAR
;
;
=
;
=
;
=
;
(
,
)
;
=
;
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
(
)
;
;
(
)
;
=
;
}
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
}
ELSE
{
(
)
;
}
}
VOID
(
)
{
;
;
;
=
;
IF
(
)
{
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
IF
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
RETURN
;
}
=
;
(
,
,
)
;
(
,
)
;
=
;
(
)
;
GOTO
;
}
=
;
=
;
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
(
,
,
)
;
=
;
(
,
)
;
(
,
)
;
(
,
,
)
;
;
}
VOID
(
)
{
;
;
=
;
(
,
,
)
;
=
;
(
,
)
;
(
,
)
;
(
,
,
)
;
;
}
VOID
(
)
{
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
(
,
,
)
;
(
)
;
IF
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
}
VOID
(
,
,
)
{
=
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
;
(
)
;
=
;
}
ELSE
{
IF
(
)
(
)
;
ELSE
(
)
;
}
}
VOID
(
)
{
=
;
(
)
;
=
;
IF
(
)
=
;
ELSE
{
IF
(
)
=
;
}
=
;
(
,
)
;
IF
(
)
=
(
)
;
IF
(
)
=
;
=
;
=
=
;
=
;
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
(
,
(
)
)
;
}
}
VOID
(
,
,
)
{
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
(
,
)
;
=
(
)
;
}
VOID
(
,
,
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
=
;
=
;
IF
(
)
{
=
;
(
,
(
)
)
;
}
IF
(
)
{
=
(
)
;
=
;
}
=
;
}
VOID
(
,
,
)
{
IF
(
)
{
=
;
;
}
ELSE
{
=
;
;
}
IF
(
(
)
)
=
;
}
VOID
(
)
{
IF
(
)
=
;
IF
(
(
)
)
{
=
;
=
;
}
=
;
(
,
)
;
=
;
(
)
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
,
)
{
IF
(
(
,
)
)
RETURN
;
(
,
,
)
;
(
,
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
)
{
(
,
,
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
(
,
,
)
;
}
VOID
(
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
}
(
,
)
;
}
VOID
(
,
)
{
IF
(
(
)
(
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
,
INT
,
)
{
=
;
(
,
,
)
;
}
VOID
(
)
{
,
,
;
FLOAT
;
FLOAT
;
FLOAT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
=
=
=
;
(
,
,
,
)
;
(
)
;
=
(
)
;
IF
(
)
=
(
(
,
)
)
;
ELSE
=
(
(
,
)
)
;
=
(
(
,
)
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
{
(
)
;
=
;
}
=
;
(
)
;
}
VOID
(
,
,
)
{
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
=
;
}
__E__O__F__
(
,
)
;
VOID
(
,
)
;
VOID
(
,
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
,
,
,
,
}
;
=
{
,
,
,
,
}
;
=
{
,
,
,
,
}
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
,
)
;
STATIC
INT
;
(
INT
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
CHAR
)
{
INT
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
INT
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
VOID
(
)
{
IF
(
)
{
;
INT
;
INT
;
=
;
FOR
(
=
,
=
;
;
=
,
)
;
=
(
)
;
FOR
(
=
,
=
;
;
=
,
)
;
}
;
=
;
(
)
;
=
;
}
VOID
(
,
FLOAT
)
{
;
;
=
;
=
;
=
;
(
)
;
}
(
,
)
{
INT
;
=
(
)
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
(
)
)
RETURN
;
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
)
;
IF
(
(
(
INT
)
)
(
(
)
(
)
)
)
{
IF
(
(
)
(
)
)
=
(
)
;
(
,
)
;
}
}
RETURN
;
}
VOID
(
,
)
{
(
,
)
;
(
)
;
(
)
;
}
(
,
)
{
IF
(
)
;
IF
(
)
=
;
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
(
,
)
{
;
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
(
,
)
{
;
INT
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
(
,
)
{
;
INT
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
}
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
VOID
(
,
)
{
INT
;
(
)
;
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
IF
(
)
;
ELSE
=
;
(
,
,
(
)
,
,
,
)
;
}
VOID
(
,
)
{
(
)
;
(
)
;
IF
(
)
;
ELSE
=
;
}
VOID
(
,
)
{
(
)
;
(
)
;
IF
(
)
;
ELSE
=
;
}
VOID
(
,
)
{
(
)
;
(
)
;
IF
(
)
;
ELSE
=
;
(
,
,
(
)
,
,
,
)
;
}
VOID
(
,
)
{
(
)
;
(
)
;
;
}
(
,
)
{
IF
(
)
{
IF
(
(
,
)
)
{
IF
(
(
(
)
)
)
RETURN
;
(
)
;
(
(
)
)
;
}
ELSE
{
IF
(
(
)
)
RETURN
;
(
)
=
;
}
RETURN
;
}
(
)
;
RETURN
;
}
(
,
,
INT
)
{
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
;
IF
(
)
=
;
RETURN
;
}
(
,
)
{
INT
;
INT
;
;
=
(
)
;
IF
(
(
)
(
(
INT
)
)
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
(
)
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
)
{
IF
(
(
(
)
)
)
=
;
}
IF
(
(
(
)
)
(
)
)
(
,
)
;
RETURN
;
}
VOID
(
,
)
{
;
INT
;
=
(
)
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
,
,
)
;
(
)
;
RETURN
;
}
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
;
RETURN
;
}
IF
(
(
)
(
)
)
(
,
)
;
ELSE
(
)
;
}
(
,
)
{
IF
(
(
)
)
IF
(
)
RETURN
;
;
IF
(
(
)
)
{
IF
(
)
=
;
}
IF
(
)
{
=
;
=
;
=
;
;
;
=
;
}
ELSE
{
IF
(
(
)
(
)
)
(
,
)
;
}
RETURN
;
}
INT
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
INT
;
;
;
INT
;
FLOAT
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
;
}
ELSE
IF
(
)
{
(
)
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
=
;
IF
(
)
=
;
=
;
(
)
=
;
}
ELSE
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
}
}
IF
(
(
)
(
)
)
(
,
)
;
RETURN
;
}
INT
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
)
{
INT
;
IF
(
)
{
;
(
,
,
(
)
,
,
,
)
;
}
ELSE
{
=
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
;
(
,
,
(
)
,
,
,
)
;
}
}
(
,
)
{
INT
;
=
(
)
;
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
)
;
IF
(
)
(
,
)
;
}
RETURN
;
}
VOID
(
,
)
{
IF
(
(
)
(
(
)
)
)
(
,
)
;
(
,
)
;
}
VOID
(
,
,
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
{
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
=
=
(
)
;
IF
(
)
{
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
}
}
IF
(
(
)
)
{
(
,
)
;
;
}
IF
(
)
RETURN
;
IF
(
(
(
)
(
)
)
(
(
)
)
)
{
IF
(
)
;
ELSE
(
)
;
}
}
STATIC
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
(
,
,
,
)
;
}
STATIC
VOID
(
)
{
=
;
IF
(
)
{
=
;
=
;
}
}
(
,
)
{
;
,
;
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
=
(
,
,
,
,
,
)
;
(
,
)
;
}
ELSE
{
(
,
,
,
)
;
(
,
)
;
}
(
,
,
)
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
VOID
(
,
,
)
{
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
)
;
}
VOID
(
)
{
;
;
FLOAT
;
=
(
,
,
)
;
(
,
)
;
=
(
,
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
;
=
;
=
;
=
(
,
,
)
;
(
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
(
,
)
;
IF
(
)
{
;
=
;
=
;
;
=
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
;
;
}
IF
(
)
{
;
=
;
=
;
}
(
)
;
}
VOID
(
)
{
CHAR
,
;
CHAR
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
)
;
}
=
;
IF
(
)
RETURN
;
WHILE
(
)
{
=
;
WHILE
(
)
;
=
;
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
IF
(
)
;
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
}
}
VOID
(
,
)
{
(
)
;
IF
(
)
{
IF
(
(
,
)
)
{
=
;
(
,
,
(
)
)
;
}
}
IF
(
)
{
IF
(
(
INT
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
INT
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
INT
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
INT
)
)
{
IF
(
(
)
(
(
,
)
)
)
{
(
)
;
RETURN
;
}
}
}
IF
(
(
(
,
)
)
)
{
(
(
)
)
;
;
}
IF
(
(
)
(
)
)
{
=
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
(
)
;
}
=
{
{
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
}
}
;
VOID
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
(
)
)
;
(
)
;
}
VOID
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
(
)
)
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
(
)
)
;
(
)
;
}
VOID
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
(
)
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
=
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
(
,
)
;
}
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
}
__E__O__F__
;
;
;
;
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
VOID
(
CHAR
,
CHAR
,
CHAR
)
;
VOID
(
,
)
;
(
,
CHAR
)
;
VOID
(
,
CHAR
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
CHAR
,
)
;
VOID
(
CHAR
)
;
VOID
(
CHAR
)
;
VOID
(
CHAR
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
RETURN
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
)
;
}
}
(
CHAR
)
{
;
=
(
)
;
=
;
(
,
(
)
,
,
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
;
CHAR
,
,
;
STATIC
CONST
CHAR
=
;
IF
(
(
INT
)
)
{
(
(
)
)
;
RETURN
;
}
IF
(
)
{
=
(
)
;
=
;
=
(
,
)
;
WHILE
(
)
{
IF
(
(
,
)
)
{
=
(
,
)
;
IF
(
)
{
IF
(
)
(
(
)
)
;
ELSE
(
(
)
)
;
}
ELSE
(
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
=
(
,
)
;
}
(
)
;
}
IF
(
)
(
(
)
)
;
ELSE
{
=
(
,
(
)
,
)
;
IF
(
)
{
(
(
)
)
;
RETURN
;
}
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
(
,
)
;
(
)
;
RETURN
;
}
}
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
)
;
(
)
;
RETURN
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
;
CHAR
;
(
,
(
)
,
,
)
;
(
)
;
=
;
=
;
=
;
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
(
,
)
;
IF
(
(
)
(
)
)
{
=
;
IF
(
(
(
)
)
(
)
)
{
(
)
;
}
}
IF
(
)
{
(
)
;
CONTINUE
;
}
(
)
;
}
(
)
;
(
)
;
}
__E__O__F__
VOID
(
,
,
)
{
;
(
,
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
INT
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
VOID
(
)
{
;
=
;
IF
(
)
{
=
;
=
(
)
;
}
}
VOID
(
,
,
,
)
{
,
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
(
,
)
;
IF
(
)
{
;
=
;
=
;
}
}
}
VOID
(
,
,
,
INT
,
)
{
(
)
;
}
VOID
(
,
CHAR
,
INT
,
INT
)
{
;
;
;
;
FLOAT
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
=
;
;
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
)
;
(
,
,
,
)
;
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
(
)
;
}
VOID
(
,
CHAR
,
INT
,
INT
)
{
;
FLOAT
;
=
;
=
;
(
)
;
(
)
;
=
;
(
,
)
;
=
;
;
;
=
;
;
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
)
;
(
,
,
,
)
;
(
)
;
=
(
)
;
=
;
=
(
)
;
(
)
;
}
VOID
(
,
INT
)
{
;
CHAR
;
IF
(
(
)
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
;
=
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
;
=
;
(
,
)
;
(
,
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
(
)
;
}
VOID
(
,
CHAR
,
FLOAT
,
)
{
;
;
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
,
,
,
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
CHAR
;
=
;
=
;
(
,
)
;
=
;
}
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
;
;
(
,
)
;
=
(
)
;
=
;
}
=
=
;
IF
(
)
{
=
;
(
)
;
RETURN
;
}
IF
(
)
{
=
;
(
)
;
}
ELSE
{
(
,
,
)
;
=
(
)
;
}
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
;
(
)
;
}
VOID
(
,
,
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
=
(
)
;
IF
(
)
{
(
,
,
(
)
,
)
;
=
;
}
=
;
}
ELSE
IF
(
(
)
(
(
)
)
)
{
=
;
;
(
)
;
}
IF
(
)
{
=
;
=
;
=
;
;
}
IF
(
)
{
CHAR
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
)
;
=
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
(
)
;
}
;
VOID
(
)
{
=
(
)
;
=
;
}
VOID
(
)
{
(
)
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
(
)
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
(
)
;
}
;
VOID
(
)
{
(
,
)
;
(
,
)
;
}
;
STATIC
VOID
(
,
,
)
{
IF
(
)
{
(
,
)
;
;
}
ELSE
{
(
,
)
;
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
}
VOID
(
,
,
)
{
IF
(
)
{
=
;
;
(
)
;
}
ELSE
{
=
;
;
}
(
)
;
IF
(
(
)
)
=
;
}
VOID
(
)
{
=
;
(
,
)
;
IF
(
)
;
IF
(
)
;
IF
(
(
)
)
{
=
;
(
)
;
RETURN
;
}
IF
(
(
)
)
{
;
}
IF
(
)
{
IF
(
(
)
)
{
(
)
;
;
}
}
=
;
IF
(
)
{
=
;
}
ELSE
{
=
;
;
}
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
,
)
{
=
;
;
=
;
(
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
;
;
;
;
;
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
;
}
IF
(
)
;
IF
(
)
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
;
;
;
INT
;
INT
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
=
;
IF
(
)
(
,
,
,
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
IF
(
)
=
;
WHILE
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
}
=
;
IF
(
)
=
;
WHILE
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
,
,
)
{
(
,
,
,
,
)
;
}
VOID
(
,
,
)
{
=
;
;
=
;
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
;
=
;
=
;
}
ELSE
{
=
;
IF
(
)
=
;
}
IF
(
)
;
IF
(
)
;
IF
(
)
{
IF
(
)
=
;
=
;
=
;
}
(
)
;
}
VOID
(
,
,
,
)
{
FLOAT
;
;
IF
(
(
)
(
)
)
RETURN
;
=
(
FLOAT
)
(
FLOAT
)
;
(
,
,
)
;
(
,
(
)
,
)
;
}
VOID
(
)
{
;
FLOAT
;
;
(
,
,
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
=
(
FLOAT
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
FLOAT
)
;
(
,
)
;
(
,
,
,
)
;
(
,
)
;
;
(
,
,
,
)
;
(
,
)
;
;
(
,
,
,
)
;
(
,
)
;
;
;
(
,
,
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
=
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
,
,
)
{
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
}
VOID
(
,
,
)
{
=
;
=
;
(
,
,
(
)
,
,
,
)
;
}
VOID
(
)
{
=
;
;
}
VOID
(
)
{
=
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
(
)
;
=
;
=
;
}
VOID
(
)
{
=
(
)
;
=
;
}
VOID
(
)
{
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
=
;
=
;
}
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
RETURN
;
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
;
=
;
;
(
)
;
}
EXTERN
VOID
(
,
,
)
;
EXTERN
VOID
(
)
;
VOID
(
,
,
)
{
;
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
=
=
=
;
(
)
;
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
(
)
;
}
VOID
(
,
,
,
)
{
(
,
)
;
=
;
(
,
,
,
,
,
)
;
(
)
;
}
VOID
(
)
{
;
FLOAT
;
=
;
=
;
IF
(
)
=
;
(
,
,
)
;
=
;
=
;
(
,
)
;
=
;
}
VOID
(
,
,
)
{
;
=
;
;
;
=
;
=
;
=
;
=
;
=
;
=
(
,
(
)
,
)
;
(
,
,
)
;
=
;
(
,
)
;
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
=
;
=
;
;
(
)
;
}
EXTERN
VOID
(
,
,
)
;
EXTERN
VOID
(
)
;
VOID
(
,
,
)
{
;
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
=
=
=
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
(
)
;
}
VOID
(
)
{
=
;
=
;
=
(
)
;
(
)
;
}
VOID
(
)
{
=
;
=
;
=
(
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
;
=
;
=
;
=
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
;
=
;
=
;
=
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
;
=
;
=
;
=
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
VOID
(
)
{
=
;
(
,
)
;
=
;
=
;
(
)
;
RETURN
;
}
VOID
(
,
,
)
{
;
INT
,
;
CHAR
;
=
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
{
=
;
CONTINUE
;
}
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
}
VOID
(
)
{
IF
(
)
=
;
=
;
}
STATIC
VOID
(
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
}
STATIC
VOID
(
)
{
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
,
,
)
;
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
(
,
,
,
,
(
(
)
)
,
)
;
IF
(
)
=
;
IF
(
)
=
;
RETURN
;
}
}
VOID
(
)
{
IF
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
(
)
;
;
}
ELSE
IF
(
)
{
(
)
;
;
}
ELSE
{
STRUCT
;
;
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
}
=
;
(
,
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
IF
(
)
{
CHAR
;
CHAR
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
}
IF
(
(
)
)
RETURN
;
(
)
;
IF
(
)
RETURN
;
}
=
;
}
VOID
(
,
,
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
=
;
;
(
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
,
,
,
)
{
;
INT
;
IF
(
)
RETURN
;
=
(
,
(
)
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
)
;
(
,
)
;
;
(
)
;
=
;
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
__E__O__F__
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
FLOAT
,
INT
)
{
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
;
=
;
}
STATIC
VOID
(
)
{
IF
(
)
RETURN
;
;
=
(
)
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
=
(
)
;
}
VOID
(
,
FLOAT
)
{
=
;
}
VOID
(
)
{
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
(
,
)
;
=
;
=
;
=
;
}
}
VOID
(
)
{
;
INT
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
)
)
{
=
;
=
;
RETURN
;
}
=
;
=
;
;
=
(
)
;
IF
(
(
)
)
RETURN
;
=
;
;
=
(
)
;
IF
(
)
=
;
}
VOID
(
)
{
INT
;
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
=
;
(
,
,
,
,
,
,
,
,
,
)
;
=
;
}
}
}
ELSE
{
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
=
;
(
,
,
,
,
,
,
,
,
,
)
;
=
;
}
}
}
}
IF
(
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
;
}
RETURN
;
}
IF
(
(
)
(
)
)
{
IF
(
)
{
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
}
IF
(
(
)
(
)
)
{
IF
(
)
{
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
}
IF
(
(
)
)
{
IF
(
(
)
)
{
IF
(
)
IF
(
(
)
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
}
;
=
;
}
}
VOID
(
)
{
;
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
IF
(
)
{
;
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
;
}
ELSE
IF
(
)
{
;
;
}
}
}
VOID
(
)
{
;
INT
;
=
;
=
;
IF
(
(
)
(
)
(
)
)
{
=
;
=
;
}
ELSE
{
IF
(
)
{
IF
(
)
{
(
)
;
=
;
IF
(
)
RETURN
;
}
}
IF
(
)
{
;
=
;
}
ELSE
{
IF
(
(
)
)
{
;
IF
(
)
=
;
}
}
}
=
;
IF
(
)
IF
(
(
)
)
(
,
)
;
ELSE
(
,
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
(
)
;
IF
(
)
{
=
;
(
)
;
}
(
)
;
(
)
;
(
)
;
}
VOID
(
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
=
;
(
)
;
}
VOID
(
)
;
VOID
(
)
{
;
(
)
;
=
;
=
;
;
=
;
(
)
;
(
)
;
IF
(
(
)
(
)
)
{
(
)
;
}
ELSE
{
=
;
}
}
VOID
(
,
,
)
{
=
;
=
;
IF
(
)
=
;
=
;
}
VOID
(
)
{
=
;
=
;
;
=
;
=
;
}
VOID
(
)
{
(
)
;
;
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
=
;
IF
(
)
RETURN
;
(
,
)
;
}
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
;
;
}
IF
(
(
)
)
;
=
;
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
IF
(
)
=
;
(
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
,
,
(
)
,
)
;
}
IF
(
)
=
(
(
)
(
)
)
;
RETURN
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
;
;
;
=
;
=
;
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
,
)
)
{
=
;
=
;
}
ELSE
{
=
;
}
}
IF
(
)
(
,
,
(
)
)
;
IF
(
)
=
;
}
IF
(
)
{
;
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
,
)
)
{
(
,
,
(
INT
)
,
(
INT
)
,
(
INT
)
,
,
,
(
INT
)
,
(
INT
)
,
(
INT
)
)
;
}
}
}
IF
(
)
{
=
=
(
)
;
IF
(
)
{
(
,
,
,
(
)
)
;
=
;
=
;
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
,
,
)
;
=
=
(
)
;
(
)
;
=
;
}
ELSE
{
=
=
;
=
;
(
)
;
}
}
ELSE
{
=
;
(
)
;
}
=
;
=
;
}
VOID
(
)
{
IF
(
(
)
)
{
(
)
;
IF
(
)
IF
(
(
,
,
)
)
(
,
,
(
)
)
;
}
IF
(
)
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
,
,
)
)
(
,
,
(
)
)
;
IF
(
)
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
;
=
;
(
)
;
}
__E__O__F__
(
)
{
;
INT
;
IF
(
)
=
;
ELSE
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
}
(
)
{
FLOAT
;
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
(
)
;
RETURN
;
}
VOID
(
,
)
{
;
=
;
IF
(
)
(
,
,
,
)
;
IF
(
)
(
,
,
,
)
;
}
INT
(
,
,
,
FLOAT
)
{
FLOAT
;
FLOAT
;
INT
,
;
=
;
IF
(
)
;
IF
(
)
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
}
RETURN
;
}
INT
(
,
FLOAT
,
INT
)
{
;
INT
,
;
;
FLOAT
;
INT
;
;
,
,
;
INT
,
;
;
;
FLOAT
;
INT
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
=
;
}
IF
(
)
BREAK
;
=
;
IF
(
)
{
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
;
}
(
,
)
;
IF
(
)
BREAK
;
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
FOR
(
=
;
;
)
IF
(
(
)
(
,
)
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
{
(
,
)
;
}
ELSE
{
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
RETURN
;
}
VOID
(
)
{
;
}
(
,
)
{
;
;
;
INT
;
(
,
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
(
,
,
,
,
,
)
;
(
,
)
;
(
)
;
IF
(
)
{
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
GOTO
;
}
}
IF
(
)
(
)
;
RETURN
;
}
TYPEDEF
STRUCT
{
;
;
;
FLOAT
;
}
;
,
;
;
(
,
,
)
{
INT
,
;
,
;
,
;
;
,
,
,
,
,
;
FOR
(
=
;
;
)
{
FLOAT
;
=
;
IF
(
)
;
ELSE
;
=
(
INT
)
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
(
,
,
)
;
(
,
,
,
)
;
=
;
(
,
)
;
(
,
)
;
IF
(
)
=
;
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
}
IF
(
(
)
(
)
)
{
=
;
(
,
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
)
{
;
}
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
(
,
,
)
;
=
(
)
;
IF
(
)
{
;
CONTINUE
;
}
}
=
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
IF
(
)
{
=
;
}
(
)
;
}
RETURN
;
}
FOR
(
=
;
;
)
(
)
;
RETURN
;
}
VOID
(
)
{
,
;
,
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
BREAK
;
}
}
IF
(
)
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
=
)
{
IF
(
)
;
}
IF
(
)
(
,
)
;
IF
(
)
GOTO
;
}
ELSE
{
FOR
(
=
;
;
=
)
{
(
)
;
}
}
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
IF
(
(
)
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
)
{
;
;
FLOAT
;
;
;
;
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
IF
(
)
IF
(
)
=
;
IF
(
)
RETURN
;
(
,
)
;
(
)
;
IF
(
)
(
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
IF
(
)
{
IF
(
)
{
=
;
=
;
(
,
)
;
(
,
)
;
}
}
}
=
(
)
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
=
)
{
(
,
)
;
(
)
;
}
}
VOID
(
)
{
INT
;
FLOAT
;
(
,
,
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
{
;
IF
(
)
=
;
}
}
}
VOID
(
)
{
;
=
;
FLOAT
;
FLOAT
,
,
;
FLOAT
;
;
INT
;
IF
(
)
(
)
;
=
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
)
;
IF
(
)
IF
(
(
)
)
IF
(
(
(
)
(
)
)
)
{
IF
(
)
=
;
IF
(
)
(
)
;
}
IF
(
(
)
(
)
)
{
=
(
)
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
;
;
}
IF
(
(
)
(
)
)
{
=
(
)
;
=
;
=
(
)
;
IF
(
)
=
;
;
;
}
IF
(
)
{
IF
(
(
)
(
(
)
)
)
IF
(
(
(
)
)
)
{
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
IF
(
)
=
;
;
;
;
}
}
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
)
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
IF
(
)
IF
(
)
(
,
,
(
)
,
,
,
)
;
}
(
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
SWITCH
(
(
INT
)
)
{
CASE
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
,
(
INT
)
)
;
}
}
__E__O__F__
(
)
{
,
}
;
=
{
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
(
)
,
,
}
,
{
,
,
,
}
}
;
=
{
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
,
}
}
;
=
{
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
(
)
,
}
,
{
,
,
}
}
;
VOID
(
VOID
)
{
(
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
)
;
(
,
(
)
,
)
;
(
,
(
)
,
)
;
=
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
(
(
)
,
)
;
=
;
}
VOID
(
,
,
)
{
VOID
;
INT
;
INT
;
IF
(
)
RETURN
;
=
(
VOID
)
(
)
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
BREAK
;
CASE
CASE
IF
(
(
CHAR
)
)
=
(
(
CHAR
)
)
;
ELSE
=
;
(
INT
)
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
INT
)
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
INT
)
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
INT
)
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
(
)
(
(
)
)
;
(
INT
)
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
=
(
)
(
)
;
(
INT
)
=
;
BREAK
;
DEFAULT
(
)
;
}
}
VOID
(
,
,
)
{
INT
;
VOID
;
IF
(
)
RETURN
;
=
(
VOID
)
(
)
;
SWITCH
(
)
{
CASE
IF
(
(
CHAR
)
)
{
=
(
(
CHAR
)
)
;
(
(
CHAR
)
,
,
,
)
;
}
BREAK
;
}
}
VOID
(
,
,
)
{
VOID
;
INT
;
INT
;
IF
(
)
RETURN
;
=
(
VOID
)
(
)
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
CHAR
)
=
;
ELSE
{
(
CHAR
)
=
(
,
)
;
(
(
CHAR
)
,
,
,
)
;
}
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
)
=
;
ELSE
(
)
=
(
(
)
)
;
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
)
=
;
ELSE
(
)
=
(
)
;
BREAK
;
DEFAULT
(
)
;
}
}
VOID
(
,
)
{
;
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
,
)
{
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
CHAR
,
)
{
;
INT
;
CHAR
;
IF
(
)
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
(
)
)
;
(
,
)
;
(
,
(
)
,
,
)
;
=
;
(
,
(
)
,
,
)
;
=
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
;
INT
;
CHAR
;
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
(
)
,
,
)
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
}
=
(
(
)
,
)
;
=
;
(
,
(
)
,
,
)
;
=
(
(
)
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
}
VOID
(
,
)
{
;
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
)
{
;
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
,
)
{
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
)
{
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
}
}
VOID
(
CHAR
)
{
INT
;
;
;
VOID
;
=
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
(
)
,
,
)
;
=
(
VOID
)
;
(
,
(
)
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
(
)
,
,
)
;
(
,
)
;
}
=
;
(
,
(
)
,
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
INT
;
;
INT
;
VOID
;
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
)
;
(
,
,
(
)
)
;
=
;
(
,
(
)
,
,
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
}
(
,
(
)
,
,
)
;
IF
(
(
VOID
)
)
{
(
)
;
(
)
;
}
(
,
(
(
)
)
(
(
)
)
)
;
(
)
;
WHILE
(
)
{
IF
(
(
,
(
)
,
,
)
)
{
(
)
;
(
)
;
}
IF
(
)
BREAK
;
IF
(
)
=
;
=
;
(
,
)
;
(
,
,
(
)
)
;
(
)
;
}
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
IF
(
(
,
)
)
=
;
}
}
__E__O__F__
TYPEDEF
STRUCT
{
CHAR
;
VOID
(
)
(
)
;
}
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
VOID
(
)
{
;
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
}
(
,
)
;
}
CHAR
(
CHAR
)
{
CHAR
,
;
INT
,
;
=
(
)
;
=
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
}
RETURN
;
}
VOID
(
CHAR
,
CHAR
,
)
{
;
;
FLOAT
;
;
FOR
(
=
;
;
)
{
IF
(
(
)
(
,
)
)
{
IF
(
)
=
(
)
;
ELSE
=
(
)
;
SWITCH
(
)
{
CASE
(
CHAR
)
(
)
=
(
)
;
BREAK
;
CASE
(
,
,
,
,
)
;
(
(
FLOAT
)
(
)
)
=
;
(
(
FLOAT
)
(
)
)
=
;
(
(
FLOAT
)
(
)
)
=
;
BREAK
;
CASE
(
INT
)
(
)
=
(
)
;
BREAK
;
CASE
(
FLOAT
)
(
)
=
(
)
;
BREAK
;
CASE
=
(
)
;
(
(
FLOAT
)
(
)
)
=
;
(
(
FLOAT
)
(
)
)
=
;
(
(
FLOAT
)
(
)
)
=
;
BREAK
;
CASE
BREAK
;
}
RETURN
;
}
}
(
,
)
;
}
CHAR
(
CHAR
,
)
{
;
CHAR
;
CHAR
;
=
;
(
,
,
(
)
)
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
)
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
IF
(
)
CONTINUE
;
(
,
,
)
;
}
IF
(
)
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
VOID
)
{
,
,
;
INT
,
;
INT
,
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
=
;
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
;
=
;
=
;
=
;
;
}
}
}
(
,
,
)
;
}
VOID
(
CHAR
,
CHAR
,
CHAR
)
{
;
INT
;
CHAR
;
INT
;
FLOAT
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
(
,
(
,
)
)
;
(
)
;
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
=
;
=
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
,
)
;
IF
(
)
=
;
ELSE
=
(
)
;
=
(
,
)
;
IF
(
(
,
)
(
,
)
(
,
)
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
;
CONTINUE
;
}
}
ELSE
{
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
(
(
(
)
(
)
)
(
)
)
)
{
(
)
;
;
CONTINUE
;
}
}
(
)
;
}
(
)
;
}
(
,
)
;
=
;
=
(
)
;
WHILE
(
)
{
IF
(
)
(
,
)
;
,
;
}
(
)
;
(
)
;
}
IF
CHAR
=
;
CHAR
=
;
VOID
(
)
{
=
;
=
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
(
)
)
;
}
ELSE
(
,
,
(
)
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
,
(
,
)
)
;
(
,
(
,
,
,
)
)
;
(
,
(
,
)
)
;
(
,
(
,
(
INT
)
(
)
)
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
)
;
=
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
(
)
;
(
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
VOID
(
VOID
)
{
(
,
,
)
;
}
TYPEDEF
STRUCT
{
UNSIGNED
;
UNSIGNED
;
}
;
;
INT
;
STATIC
(
CHAR
,
)
{
CHAR
;
INT
,
;
;
;
FOR
(
=
;
;
)
{
=
;
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
=
;
WHILE
(
)
{
=
;
}
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
BREAK
;
;
}
=
(
UNSIGNED
)
;
=
(
UNSIGNED
)
;
RETURN
;
}
(
CHAR
)
{
INT
;
UNSIGNED
;
;
CHAR
;
=
;
=
;
WHILE
(
)
{
=
;
WHILE
(
)
{
=
(
)
;
;
}
IF
(
)
BREAK
;
,
;
}
=
(
UNSIGNED
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
RETURN
(
INT
)
;
RETURN
(
INT
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
;
}
IF
(
(
(
)
,
)
)
=
;
}
VOID
(
VOID
)
{
;
INT
,
;
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
(
)
,
)
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
{
FOR
(
=
;
;
)
=
;
;
(
,
,
)
;
RETURN
;
}
(
,
,
,
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
UNSIGNED
)
=
;
(
,
,
,
,
,
,
)
;
}
}
VOID
(
VOID
)
{
;
CHAR
;
;
INT
;
;
=
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
(
,
,
(
INT
)
)
;
FOR
(
=
;
;
)
{
(
UNSIGNED
)
=
;
(
,
,
,
,
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
(
,
,
,
)
;
}
__E__O__F__
VOID
(
,
,
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
)
{
=
;
}
VOID
(
,
,
)
{
INT
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
)
;
}
}
VOID
(
)
{
CHAR
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
(
,
(
)
,
,
)
;
ELSE
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
=
;
(
)
;
}
VOID
(
,
,
)
{
IF
(
)
(
,
,
(
)
)
;
ELSE
(
,
,
(
)
)
;
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
=
;
}
VOID
(
,
,
)
{
(
,
,
,
,
,
)
;
;
(
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
=
;
=
(
)
;
=
;
;
IF
(
(
,
)
)
=
;
}
VOID
(
,
,
)
{
(
,
,
,
,
,
)
;
;
IF
(
)
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
=
;
=
(
)
;
=
;
;
}
VOID
(
)
{
FLOAT
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
,
,
,
)
;
=
;
=
;
(
,
)
;
=
;
}
VOID
(
,
,
)
{
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
,
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
}
IF
(
(
(
INT
)
)
)
{
(
,
,
,
,
,
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
,
)
;
}
IF
(
(
,
)
)
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
(
(
,
)
)
(
(
,
)
)
)
=
;
=
;
=
;
}
VOID
(
,
,
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
(
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
(
,
)
;
IF
(
)
=
;
=
;
}
VOID
(
)
;
VOID
(
,
,
)
{
;
=
(
)
;
=
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
}
VOID
(
)
{
=
;
=
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
}
}
VOID
(
,
,
)
{
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
(
,
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
VOID
(
,
,
)
{
;
(
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
IF
(
(
)
)
{
(
,
)
;
(
)
;
}
}
VOID
(
)
{
IF
(
)
=
;
=
;
=
;
=
;
}
VOID
(
)
{
;
;
;
;
;
;
INT
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
IF
(
(
,
)
)
;
}
=
;
(
,
)
;
(
,
,
,
)
;
WHILE
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
BREAK
;
IF
(
(
)
(
)
)
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
{
IF
(
)
{
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
}
=
;
(
,
)
;
}
(
,
)
;
=
;
}
VOID
(
)
{
IF
(
)
=
;
;
;
(
)
;
}
VOID
(
)
{
;
;
=
;
}
VOID
(
,
,
)
{
=
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
)
{
;
=
;
=
;
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
IF
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
(
,
,
(
)
,
)
;
=
;
}
ELSE
{
(
,
)
;
}
}
=
;
=
;
IF
(
)
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
CHAR
;
=
(
)
;
=
;
(
,
)
;
IF
(
(
)
)
{
=
;
}
ELSE
IF
(
)
{
CHAR
;
=
;
=
;
=
;
;
}
}
VOID
(
,
,
)
{
IF
(
)
{
;
=
;
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
BREAK
;
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
(
,
,
,
(
)
)
;
}
ELSE
{
=
;
}
}
IF
(
)
{
(
,
,
,
(
)
)
;
(
)
;
RETURN
;
}
}
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
)
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
;
=
;
=
;
=
;
=
;
=
(
)
(
)
;
}
VOID
(
)
{
INT
;
;
IF
(
)
{
(
,
,
,
,
,
,
)
;
=
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
(
)
;
(
)
;
=
(
)
;
}
IF
(
)
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
(
,
,
(
)
)
;
IF
(
)
=
;
IF
(
)
=
;
;
=
;
=
;
=
(
)
;
}
__E__O__F__
VOID
(
)
{
IF
(
(
,
)
)
(
,
)
;
=
;
=
;
(
,
)
;
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
}
VOID
(
,
,
)
{
=
;
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
{
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
ELSE
RETURN
;
IF
(
(
,
)
)
{
;
(
,
,
,
)
;
IF
(
(
,
)
)
RETURN
;
}
=
;
(
)
;
}
VOID
(
,
,
)
{
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
IF
(
)
=
;
=
;
=
;
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
(
,
)
)
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
;
(
,
,
,
)
;
;
;
(
,
,
(
)
)
;
}
=
;
(
)
;
}
VOID
(
,
,
)
{
(
,
)
;
}
VOID
(
)
{
=
;
}
VOID
(
,
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
(
,
,
)
;
(
,
,
(
)
,
,
,
)
;
RETURN
;
}
(
,
,
(
)
,
,
,
)
;
IF
(
)
{
INT
;
;
IF
(
(
,
)
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
)
BREAK
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
{
;
(
)
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
}
}
}
ELSE
{
;
}
(
,
)
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
,
(
)
)
;
RETURN
;
}
IF
(
)
{
(
,
,
(
)
)
;
RETURN
;
}
(
)
;
(
)
;
=
;
}
VOID
(
,
,
)
{
IF
(
)
RETURN
;
;
IF
(
)
{
IF
(
(
)
)
{
(
,
,
)
;
(
,
,
(
)
,
,
,
)
;
}
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
(
,
,
(
)
,
,
,
)
;
}
=
;
(
)
;
}
VOID
(
)
{
=
;
IF
(
)
=
;
=
;
}
VOID
(
)
{
IF
(
)
=
;
(
,
)
;
}
STATIC
INT
;
VOID
(
,
,
,
)
{
IF
(
(
,
)
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
IF
(
)
{
(
,
)
;
IF
(
)
{
=
;
(
,
,
,
,
,
)
;
}
}
}
IF
(
)
(
)
;
}
VOID
(
)
{
(
)
;
=
(
)
;
=
;
IF
(
)
=
;
(
)
;
}
VOID
(
,
,
)
{
IF
(
)
=
;
ELSE
=
;
(
)
;
IF
(
(
)
)
=
;
}
VOID
(
,
,
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
{
IF
(
(
)
)
(
,
,
,
,
,
)
;
}
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
(
)
;
=
(
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
(
)
;
}
VOID
(
,
,
,
)
{
=
;
}
VOID
(
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
=
;
}
VOID
(
,
,
,
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
=
;
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
=
;
=
;
}
__E__O__F__
VOID
(
)
{
WHILE
(
)
;
WHILE
(
)
;
WHILE
(
)
;
WHILE
(
)
;
}
FLOAT
(
FLOAT
)
{
;
IF
(
)
;
ELSE
;
RETURN
(
INT
)
;
}
VOID
(
,
)
{
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
}
VOID
(
)
{
,
,
;
;
INT
;
INT
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
(
,
,
,
,
,
,
)
;
(
,
,
,
(
)
,
,
,
)
;
}
VOID
(
)
{
;
;
;
(
,
)
;
(
)
;
(
)
;
IF
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
(
)
(
)
)
{
FLOAT
,
;
=
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
=
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
IF
(
(
)
(
)
)
=
;
ELSE
=
;
}
(
,
,
)
;
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
=
;
FOR
(
=
;
;
=
)
=
;
IF
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
;
;
=
;
=
;
=
;
(
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
IF
(
)
{
(
)
;
;
}
}
}
VOID
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
}
ELSE
{
=
(
)
;
(
,
,
)
;
(
)
;
}
=
;
=
;
(
)
;
}
VOID
(
)
{
=
;
=
;
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
=
;
=
;
(
,
)
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
)
;
VOID
(
)
;
VOID
(
,
,
)
;
VOID
(
,
,
,
INT
,
)
{
;
=
;
FOR
(
=
;
;
=
)
;
=
;
=
;
;
=
;
=
;
(
,
,
,
)
;
}
(
)
;
VOID
(
)
{
;
;
FLOAT
;
=
;
IF
(
(
)
)
=
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
=
;
;
}
ELSE
{
IF
(
(
,
)
)
{
IF
(
)
{
=
;
;
}
}
ELSE
{
;
RETURN
;
}
}
(
,
)
;
;
(
,
,
)
;
(
,
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
(
)
)
RETURN
;
=
;
;
}
VOID
(
)
{
;
;
=
;
=
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
(
)
;
(
,
,
)
;
(
,
)
;
(
)
;
=
;
=
;
FOR
(
=
;
;
=
)
;
=
;
=
;
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
;
;
;
;
=
;
=
;
=
;
(
,
)
;
;
IF
(
)
{
=
(
)
;
IF
(
)
(
,
,
(
)
,
)
;
}
=
;
=
;
(
)
;
}
__E__O__F__
VOID
(
,
,
,
,
)
{
=
;
=
;
=
;
}
(
,
INT
,
CHAR
)
{
CHAR
;
IF
(
)
=
;
ELSE
;
FOR
(
;
;
)
{
IF
(
)
CONTINUE
;
=
(
CHAR
)
(
(
)
)
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
(
,
,
FLOAT
)
{
;
INT
;
IF
(
)
=
;
ELSE
;
FOR
(
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
(
(
)
)
;
IF
(
(
)
)
CONTINUE
;
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
=
;
INT
=
;
;
IF
(
)
{
(
)
;
RETURN
;
}
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
BREAK
;
=
;
IF
(
)
BREAK
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
RETURN
(
)
;
}
VOID
(
)
{
(
,
)
;
(
)
;
}
VOID
(
,
)
{
;
IF
(
)
{
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
(
)
;
=
;
=
;
=
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
,
,
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
}
IF
(
)
{
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
}
IF
(
)
{
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
(
,
)
(
(
,
)
(
,
)
)
)
CONTINUE
;
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
)
(
,
,
)
;
}
IF
(
)
{
(
)
;
RETURN
;
}
}
}
}
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
STATIC
INT
;
STATIC
;
FLOAT
;
=
;
=
(
)
;
=
;
=
;
=
;
RETURN
;
}
CHAR
(
)
{
STATIC
INT
;
STATIC
CHAR
;
CHAR
;
=
;
=
(
)
;
(
,
,
,
(
INT
)
,
(
INT
)
,
(
INT
)
)
;
RETURN
;
}
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
VOID
(
,
)
{
IF
(
(
,
)
)
{
(
,
)
;
}
ELSE
IF
(
(
,
)
)
{
(
,
)
;
}
ELSE
{
(
,
,
,
)
;
}
(
)
;
}
FLOAT
(
)
{
FLOAT
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
RETURN
;
}
VOID
(
,
)
{
FLOAT
;
FLOAT
,
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
(
INT
)
(
(
,
)
)
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
;
=
(
)
;
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
=
;
=
;
=
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
(
(
)
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
)
{
=
;
=
;
=
;
=
;
}
(
VOID
)
{
INT
;
;
=
(
INT
)
;
FOR
(
=
;
;
,
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
IF
(
)
(
)
;
;
(
)
;
RETURN
;
}
VOID
(
)
{
(
)
;
IF
(
(
)
(
)
)
{
RETURN
;
}
(
,
,
(
)
)
;
=
;
=
;
=
;
}
VOID
(
)
{
INT
,
;
,
;
IF
(
(
(
)
)
(
)
)
RETURN
;
=
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
,
)
;
}
}
VOID
(
)
{
INT
,
;
,
;
=
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
,
,
,
)
;
IF
(
)
BREAK
;
}
}
(
)
{
;
WHILE
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
BREAK
;
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
RETURN
;
}
__E__O__F__
STATIC
VOID
(
,
,
,
INT
)
{
;
;
;
FLOAT
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
(
,
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
(
,
)
)
{
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
}
}
(
,
,
INT
,
INT
)
{
;
,
,
;
;
;
FLOAT
;
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
(
,
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
)
=
;
}
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
RETURN
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
,
)
;
IF
(
)
=
;
RETURN
;
}
STATIC
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
;
;
,
,
;
;
FLOAT
;
FLOAT
;
;
=
;
INT
=
;
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
{
(
,
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
(
)
)
{
=
;
(
,
)
;
;
}
=
(
,
,
,
,
,
)
;
IF
(
)
{
INT
;
=
;
(
,
)
;
IF
(
(
,
)
)
{
IF
(
)
{
IF
(
(
,
)
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
(
,
,
)
;
(
,
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
=
(
,
,
,
,
,
)
;
}
}
IF
(
(
(
)
(
)
)
)
{
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
(
,
,
)
;
}
}
}
}
IF
(
)
{
;
(
,
,
)
;
(
)
;
(
,
,
,
)
;
IF
(
(
)
)
(
,
)
;
ELSE
=
(
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
(
,
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
)
;
}
(
)
;
}
VOID
(
,
,
,
INT
,
INT
,
INT
,
)
{
;
;
(
)
;
=
(
)
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
}
STATIC
VOID
(
)
{
;
INT
;
IF
(
)
(
,
,
)
;
IF
(
)
{
FLOAT
;
;
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
(
INT
)
,
(
INT
)
,
,
)
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
)
;
(
,
,
,
)
;
(
)
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
}
ELSE
{
IF
(
)
(
)
;
ELSE
(
)
;
}
(
)
;
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
}
ELSE
{
(
,
,
(
)
,
,
,
)
;
}
RETURN
;
}
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
INT
,
FLOAT
,
FLOAT
)
{
;
;
,
,
;
(
,
)
;
(
,
,
,
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
INT
,
FLOAT
,
FLOAT
,
)
{
;
;
,
,
;
(
,
)
;
(
,
,
,
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
IF
(
)
(
)
;
ELSE
{
(
,
,
(
)
,
,
,
)
;
(
)
;
}
}
VOID
(
,
,
,
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
(
,
,
)
;
(
,
,
,
)
;
IF
(
)
{
(
,
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
IF
(
)
{
IF
(
(
)
(
(
)
)
)
{
=
(
)
;
WHILE
(
)
(
,
,
,
)
;
}
}
}
(
,
,
,
,
,
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
,
,
,
INT
,
INT
,
FLOAT
,
INT
)
{
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
IF
(
)
(
,
,
,
)
;
(
)
;
}
VOID
(
,
,
,
INT
,
INT
)
{
;
;
;
;
INT
;
;
(
,
,
,
)
;
(
,
)
;
=
;
=
;
=
;
WHILE
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
{
(
)
;
=
;
}
ELSE
{
IF
(
(
)
(
)
)
=
;
ELSE
=
;
IF
(
(
)
(
)
)
(
,
,
,
,
,
,
,
,
,
)
;
}
(
,
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
IF
(
)
(
,
,
)
;
}
VOID
(
)
{
;
FLOAT
;
;
FLOAT
;
IF
(
)
{
=
;
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
,
,
,
,
(
INT
)
,
,
,
)
;
}
}
=
;
;
IF
(
)
=
;
}
VOID
(
,
,
,
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
,
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
(
)
,
,
,
)
;
=
;
=
;
(
,
,
,
)
;
(
)
;
=
(
)
;
=
;
=
;
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
)
{
;
;
;
;
;
;
INT
;
;
IF
(
)
=
;
ELSE
=
;
=
;
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
(
(
,
)
)
)
CONTINUE
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
=
;
(
,
)
;
(
,
,
,
)
;
WHILE
(
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
BREAK
;
IF
(
(
)
(
)
(
)
)
(
,
,
,
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
BREAK
;
}
=
;
(
,
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
=
;
}
VOID
(
,
,
,
INT
,
INT
,
FLOAT
)
{
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
(
,
,
,
)
;
(
)
;
}
__E__O__F__
CHAR
=
{
,
,
,
,
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
IF
(
)
=
(
(
)
(
)
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
)
(
)
)
{
IF
(
)
(
)
;
ELSE
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
}
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
CHAR
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
INT
;
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
(
)
(
(
)
)
)
{
;
CHAR
;
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
=
;
ELSE
=
;
=
(
)
;
(
,
,
,
,
(
)
)
;
RETURN
;
}
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
,
;
,
;
(
,
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
IF
(
)
{
(
,
,
,
)
;
;
}
ELSE
{
(
,
)
;
(
)
;
}
(
,
,
)
;
(
)
;
}
ELSE
{
(
,
,
,
)
;
}
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
(
)
;
IF
(
)
;
ELSE
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
INT
;
=
;
=
(
(
)
)
;
=
;
}
VOID
(
,
,
)
{
;
=
=
(
)
;
IF
(
(
)
(
(
,
)
)
)
{
(
,
,
,
(
)
)
;
=
;
=
;
(
)
;
RETURN
;
}
(
,
,
)
;
=
=
(
)
;
(
)
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
(
)
;
=
;
=
;
(
)
;
=
;
}
VOID
(
,
,
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
=
;
IF
(
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
,
,
(
)
,
)
;
}
}
IF
(
)
{
=
;
=
;
IF
(
)
{
=
;
=
;
(
,
,
(
)
,
,
,
)
;
}
}
IF
(
)
{
}
ELSE
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
IF
(
)
;
IF
(
)
{
;
(
)
;
}
ELSE
{
(
)
;
}
}
}
IF
(
(
)
(
)
)
{
CHAR
;
=
;
=
;
(
,
)
;
=
;
}
=
(
)
;
IF
(
)
=
;
IF
(
)
{
=
;
(
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
=
(
)
;
}
}
VOID
(
)
{
IF
(
)
(
,
,
(
)
)
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
IF
(
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
=
;
}
(
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
STATIC
=
{
,
,
}
;
(
,
,
(
(
(
)
)
)
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
;
(
,
,
,
)
;
(
,
,
(
(
(
)
)
)
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
(
)
)
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
)
(
(
)
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
}
__E__O__F__
VOID
(
)
;
(
,
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
{
IF
(
(
)
)
(
,
,
,
,
,
)
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
,
,
INT
,
)
;
VOID
(
)
{
,
;
;
;
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
,
,
;
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
,
,
;
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
(
)
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
;
FLOAT
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
=
;
}
ELSE
{
IF
(
(
)
)
=
;
ELSE
=
;
}
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
(
,
)
)
IF
(
(
)
)
=
;
ELSE
=
;
ELSE
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
(
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
INT
;
=
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
;
=
;
}
(
)
{
,
;
;
FLOAT
;
;
;
INT
;
FLOAT
;
IF
(
)
{
(
,
)
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
{
RETURN
;
}
IF
(
(
)
)
{
=
;
=
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
RETURN
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
VOID
(
,
,
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
(
)
;
=
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
(
)
;
}
__E__O__F__
EXTERN
(
)
;
(
,
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
{
FLOAT
;
=
(
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
,
)
)
IF
(
(
)
)
=
;
ELSE
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
IF
(
(
)
)
RETURN
;
IF
(
(
)
(
)
)
IF
(
(
)
)
RETURN
;
IF
(
(
)
(
)
)
IF
(
(
)
)
RETURN
;
IF
(
(
)
(
)
)
IF
(
(
)
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
IF
(
(
)
)
{
(
,
,
,
,
,
)
;
=
;
}
}
}
;
VOID
(
)
{
,
;
;
;
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
,
,
;
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
,
,
;
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
(
)
;
(
)
;
}
;
VOID
(
)
{
;
FLOAT
;
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
{
(
,
,
,
,
,
)
;
=
(
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
VOID
(
)
{
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
(
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
}
(
)
{
,
;
;
FLOAT
;
;
;
INT
;
FLOAT
;
IF
(
)
{
(
,
)
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
{
RETURN
;
}
IF
(
(
)
)
{
=
;
=
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
RETURN
;
}
VOID
(
VOID
)
;
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
(
,
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
{
FLOAT
;
=
(
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
,
;
;
;
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
)
;
;
}
;
VOID
(
)
{
;
;
,
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
;
;
,
;
INT
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
;
(
,
,
)
;
(
,
)
;
=
;
}
ELSE
{
=
;
}
IF
(
)
=
(
)
;
ELSE
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
IF
(
)
IF
(
(
)
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
IF
(
)
IF
(
(
)
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
IF
(
(
)
)
{
(
,
,
,
,
,
)
;
=
;
}
}
}
;
VOID
(
,
)
{
=
;
}
;
VOID
(
)
{
;
FLOAT
;
FLOAT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
=
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
(
)
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
;
INT
;
=
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
=
(
)
;
(
,
)
;
(
,
)
;
;
(
)
;
=
;
}
(
)
{
,
;
;
FLOAT
;
;
;
INT
;
FLOAT
;
IF
(
)
{
(
,
)
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
{
RETURN
;
}
IF
(
(
)
)
{
=
;
=
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
VOID
(
)
{
;
;
(
)
;
=
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
)
;
(
)
;
(
,
,
,
)
;
=
;
=
;
}
VOID
(
)
{
;
=
(
)
;
=
;
=
;
=
;
(
,
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
;
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
,
,
,
,
)
;
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
RETURN
;
;
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
;
ELSE
;
}
VOID
(
)
{
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
=
;
=
;
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
(
,
,
,
)
;
IF
(
(
,
,
(
(
(
)
)
)
,
)
)
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
(
,
,
,
)
;
IF
(
(
,
,
(
(
(
)
)
)
,
)
)
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
;
=
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
(
,
,
,
)
;
IF
(
(
,
,
(
(
(
)
)
)
,
)
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
IF
(
)
{
;
=
;
}
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
FLOAT
;
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
INT
;
=
;
=
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
(
,
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
{
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
}
ELSE
{
=
;
}
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
FLOAT
;
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
=
(
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
(
,
,
,
,
,
)
;
}
ELSE
{
=
;
(
,
,
,
,
,
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
;
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
;
ELSE
;
}
VOID
(
)
{
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
=
;
=
;
}
VOID
(
)
{
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
(
(
(
)
)
)
,
)
;
}
VOID
(
)
{
,
;
;
;
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
{
IF
(
(
,
)
)
IF
(
(
,
)
)
IF
(
(
)
)
{
=
;
RETURN
;
}
}
=
;
}
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
{
IF
(
(
,
)
)
IF
(
(
)
)
{
=
;
RETURN
;
}
ELSE
{
=
;
RETURN
;
}
}
=
;
}
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
;
=
{
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
INT
;
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
=
(
(
)
)
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
;
VOID
(
,
,
,
INT
,
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
{
;
,
;
;
;
INT
;
IF
(
(
)
(
)
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
,
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
STATIC
=
{
,
,
}
;
(
,
,
,
,
,
)
;
(
,
,
(
)
,
)
;
}
VOID
(
)
{
,
;
;
;
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
,
,
,
,
(
)
,
,
,
)
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
INT
;
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
=
(
(
)
)
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
(
,
,
,
,
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
(
)
)
=
;
ELSE
=
;
=
;
(
)
;
}
__E__O__F__
(
,
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
INT
)
{
;
,
;
;
;
INT
;
IF
(
(
)
(
)
(
)
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
,
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
(
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
(
,
)
)
IF
(
(
)
)
=
;
ELSE
=
;
ELSE
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
INT
;
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
VOID
(
,
,
,
INT
,
)
{
(
,
,
,
,
,
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
(
)
)
{
=
;
=
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
;
(
,
,
,
)
;
IF
(
(
,
,
(
(
(
)
)
)
,
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
;
;
,
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
FLOAT
;
;
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
RETURN
;
(
,
,
,
,
,
)
;
(
,
)
;
;
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
{
IF
(
(
)
(
)
)
=
;
RETURN
;
}
=
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
(
,
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
;
IF
(
)
{
IF
(
(
)
)
(
)
;
}
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
;
ELSE
;
}
VOID
(
)
{
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
=
;
=
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
,
;
;
;
INT
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
;
,
;
;
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
,
)
)
{
=
;
}
ELSE
{
IF
(
(
)
)
=
;
ELSE
=
;
}
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
IF
(
(
,
)
)
IF
(
(
)
)
{
=
;
RETURN
;
}
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
(
,
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
,
,
INT
,
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
IF
(
(
,
)
)
IF
(
(
)
)
{
=
;
RETURN
;
}
=
;
}
VOID
(
)
{
;
,
;
;
;
INT
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
,
,
,
,
,
,
)
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
(
)
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
VOID
(
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
INT
;
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
=
;
(
,
,
,
,
,
)
;
}
ELSE
{
=
;
(
,
,
,
,
,
)
;
}
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
)
{
,
;
,
;
;
INT
;
IF
(
)
{
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
(
,
,
,
)
;
;
(
,
,
)
;
(
)
;
}
ELSE
{
(
,
,
,
)
;
}
}
ELSE
{
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
}
(
,
,
,
,
,
,
,
)
;
}
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
(
)
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
(
,
,
,
,
,
)
;
}
ELSE
IF
(
)
{
=
;
(
,
,
,
,
,
)
;
}
ELSE
{
=
;
(
,
,
,
,
,
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
;
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
;
ELSE
;
}
VOID
(
)
{
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
=
;
=
;
}
VOID
(
)
{
INT
;
(
,
,
,
,
,
)
;
=
(
(
)
)
;
=
;
}
VOID
(
)
{
(
)
;
IF
(
)
;
ELSE
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
(
,
,
,
)
;
IF
(
(
,
,
(
(
(
)
)
)
,
)
)
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
,
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
(
)
,
,
,
)
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
INT
,
;
IF
(
)
RETURN
;
=
;
=
(
(
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
(
(
,
,
)
)
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
;
}
ELSE
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
)
=
;
}
VOID
(
)
{
IF
(
)
{
=
;
;
}
ELSE
IF
(
(
)
(
)
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
{
;
}
ELSE
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
}
;
=
;
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
(
(
,
(
(
)
)
)
)
,
,
,
)
;
=
;
=
;
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
=
;
ELSE
=
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
(
)
;
IF
(
)
;
=
;
=
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
;
(
)
;
}
ELSE
{
(
)
;
=
(
)
;
}
}
__E__O__F__
(
,
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
(
)
{
=
;
=
;
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
)
{
=
;
CONTINUE
;
}
IF
(
)
CONTINUE
;
=
;
}
RETURN
;
}
VOID
(
)
{
;
(
,
,
,
,
,
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
;
(
)
;
}
}
VOID
(
)
{
;
(
,
,
,
,
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
;
(
)
;
}
}
}
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
)
)
{
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
;
(
)
;
RETURN
;
}
}
IF
(
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
;
(
,
,
,
,
,
)
;
}
ELSE
{
=
;
(
,
,
,
,
,
)
;
}
}
VOID
(
)
{
;
,
;
;
;
INT
;
IF
(
(
)
(
)
)
=
;
ELSE
IF
(
(
)
(
)
(
)
(
)
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
,
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
(
)
(
)
)
=
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
;
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
;
ELSE
;
}
VOID
(
)
{
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
=
;
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
,
)
)
IF
(
(
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
;
STATIC
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
)
{
,
,
,
,
;
;
,
;
FLOAT
;
IF
(
)
RETURN
;
(
,
,
,
)
;
(
,
)
;
(
,
,
,
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
;
IF
(
(
)
)
RETURN
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
,
,
,
,
)
;
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
IF
(
)
{
=
;
(
)
;
}
;
IF
(
)
{
=
;
(
)
;
}
}
ELSE
{
IF
(
)
(
,
,
,
,
,
)
;
}
(
,
,
,
)
;
(
,
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
INT
,
;
(
)
{
,
,
,
;
;
INT
,
;
FLOAT
,
;
(
,
,
)
;
(
,
,
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
GOTO
;
}
;
RETURN
;
;
=
;
=
=
(
)
;
=
=
(
)
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
=
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
=
;
=
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
}
;
RETURN
;
}
(
,
,
)
{
FLOAT
;
,
,
;
;
INT
;
FLOAT
;
;
INT
;
(
,
)
;
(
,
,
)
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
=
;
IF
(
)
{
IF
(
)
;
IF
(
(
(
)
(
)
)
)
IF
(
)
;
}
ELSE
{
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
;
}
}
=
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
IF
(
)
RETURN
;
}
}
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
IF
(
(
)
)
RETURN
;
}
}
IF
(
)
{
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
RETURN
;
}
IF
(
)
BREAK
;
}
RETURN
;
}
IF
(
(
)
)
=
;
ELSE
=
;
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
=
;
RETURN
;
}
RETURN
;
}
(
,
)
;
IF
(
(
)
)
{
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
}
RETURN
;
}
(
,
)
;
RETURN
;
}
IF
(
)
{
;
}
=
;
=
;
IF
(
)
{
(
)
;
(
)
;
}
RETURN
;
}
VOID
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
=
(
)
;
=
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
=
(
)
;
}
(
,
FLOAT
,
FLOAT
)
{
,
;
FLOAT
;
=
;
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
(
,
)
;
IF
(
(
,
,
)
)
{
=
;
IF
(
)
{
(
,
)
;
}
(
)
;
(
)
;
RETURN
;
}
(
)
;
(
)
;
RETURN
;
}
VOID
(
)
{
;
}
VOID
(
,
,
FLOAT
)
{
FLOAT
,
;
FLOAT
;
FLOAT
,
,
;
IF
(
)
RETURN
;
=
(
(
INT
)
(
)
)
;
=
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
(
(
)
)
)
(
)
(
)
)
{
=
;
=
;
=
;
}
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
}
ELSE
{
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
(
)
)
(
)
;
}
(
,
,
FLOAT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
,
FLOAT
)
{
;
=
;
IF
(
(
(
)
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
(
)
)
(
,
,
)
)
{
IF
(
)
(
,
,
)
;
}
}
(
,
FLOAT
,
FLOAT
)
{
;
IF
(
(
(
)
)
)
RETURN
;
=
;
=
(
)
;
=
(
)
;
=
;
RETURN
(
,
,
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
{
INT
;
=
(
(
)
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
(
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
(
,
,
,
,
,
)
;
}
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
;
(
,
,
,
)
;
IF
(
(
,
,
(
(
(
)
)
)
,
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
(
,
,
,
)
;
IF
(
(
,
,
(
(
(
)
)
)
,
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
(
)
(
(
)
)
)
(
(
,
)
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
,
,
,
)
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
{
;
;
INT
;
(
,
)
;
(
)
;
(
,
,
,
)
;
=
(
)
;
(
,
,
,
,
,
,
,
,
,
)
;
}
}
IF
(
(
)
)
{
IF
(
)
{
=
;
=
;
}
RETURN
;
}
=
;
}
VOID
(
)
{
;
(
,
,
,
,
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
=
;
=
;
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
(
)
{
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
(
)
{
;
FLOAT
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
RETURN
;
}
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
;
RETURN
;
}
IF
(
(
)
)
{
=
;
RETURN
;
}
RETURN
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
FLOAT
;
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
(
)
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
=
;
}
STATIC
(
,
)
{
,
;
(
,
,
)
;
IF
(
(
)
)
RETURN
;
(
,
)
;
IF
(
)
;
IF
(
(
)
)
RETURN
;
RETURN
;
}
VOID
(
)
{
,
,
,
,
,
;
;
INT
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
IF
(
(
,
)
)
{
=
;
IF
(
(
,
)
)
{
=
;
IF
(
(
,
)
)
RETURN
;
}
}
(
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
,
,
,
,
)
;
}
ELSE
{
IF
(
)
(
,
,
,
,
,
)
;
=
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
{
IF
(
(
)
)
(
,
,
,
,
,
)
;
}
VOID
(
)
{
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
)
(
(
)
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
(
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
VOID
(
)
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
}
ELSE
{
=
;
}
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
FLOAT
;
INT
;
IF
(
(
)
)
;
IF
(
)
{
IF
(
(
)
(
(
)
(
)
(
)
)
)
=
;
RETURN
;
}
=
;
=
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
STATIC
INT
=
{
,
,
,
,
,
,
,
}
;
STATIC
INT
=
{
,
,
,
,
,
,
,
}
;
STATIC
INT
=
{
,
,
,
,
,
,
,
}
;
VOID
(
,
INT
)
{
;
,
,
;
;
;
;
FLOAT
,
;
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
;
(
,
,
)
;
(
,
)
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
}
IF
(
)
{
(
,
,
,
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
IF
(
(
)
)
=
(
(
)
)
;
(
,
,
,
,
,
,
,
)
;
IF
(
)
;
ELSE
;
}
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
(
)
(
(
)
)
)
(
(
,
)
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
(
)
(
(
)
)
)
(
(
,
)
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
(
)
(
(
)
)
)
(
(
,
)
)
)
=
;
ELSE
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
(
)
(
(
)
)
)
(
(
,
)
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
RETURN
;
;
;
=
;
=
;
(
)
;
}
VOID
(
)
{
;
;
=
;
(
)
;
}
VOID
(
)
{
(
)
;
(
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
(
)
(
(
)
)
)
(
(
,
)
)
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
ELSE
{
=
;
}
}
VOID
(
,
)
{
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
IF
(
(
)
(
(
,
)
)
)
{
IF
(
(
)
)
=
;
}
}
VOID
(
)
{
IF
(
)
;
ELSE
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
)
{
FLOAT
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
=
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
;
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
IF
(
(
(
)
)
)
{
=
;
RETURN
;
}
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
;
=
;
=
;
}
__E__O__F__
(
,
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
)
;
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
(
,
)
)
IF
(
(
)
)
=
;
ELSE
=
;
ELSE
=
;
}
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
=
;
IF
(
)
RETURN
;
IF
(
)
IF
(
(
)
)
RETURN
;
IF
(
)
IF
(
(
)
(
)
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
,
,
)
;
=
;
}
}
;
VOID
(
)
{
,
;
;
;
;
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
;
;
,
;
INT
;
=
(
)
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
)
;
}
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
;
FLOAT
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
=
;
}
ELSE
{
IF
(
(
)
)
=
;
ELSE
=
;
}
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
VOID
(
)
{
;
INT
;
=
;
(
,
)
;
(
(
)
)
;
SWITCH
(
)
{
CASE
;
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
;
BREAK
;
CASE
=
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
}
VOID
(
,
,
,
INT
,
)
{
(
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
}
__E__O__F__
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
,
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
=
;
}
VOID
(
)
;
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
;
ELSE
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
}
ELSE
{
=
;
}
}
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
FLOAT
,
INT
)
{
IF
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
IF
(
(
)
)
RETURN
;
IF
(
)
{
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
}
=
;
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
;
VOID
(
)
{
,
;
;
;
;
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
,
,
,
,
,
,
)
;
}
VOID
(
)
{
(
,
,
,
,
,
)
;
}
VOID
(
)
{
,
;
;
;
;
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
}
VOID
(
)
{
;
;
;
,
;
INT
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
;
(
,
,
)
;
(
,
)
;
=
;
}
ELSE
{
=
;
}
IF
(
)
=
(
)
;
ELSE
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
IF
(
(
,
)
)
IF
(
)
IF
(
(
)
)
{
=
;
RETURN
;
}
=
;
}
VOID
(
)
{
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
{
IF
(
)
IF
(
)
IF
(
(
,
)
)
IF
(
(
)
)
{
=
;
RETURN
;
}
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
;
FLOAT
;
FLOAT
;
IF
(
)
{
=
;
;
RETURN
;
}
(
,
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
=
;
}
}
VOID
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
=
;
;
=
;
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
,
)
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
IF
(
(
,
)
)
=
;
}
__E__O__F__
VOID
(
,
CHAR
)
;
VOID
(
)
;
STATIC
VOID
(
)
{
;
;
=
;
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
RETURN
;
IF
(
)
CONTINUE
;
(
,
,
)
;
IF
(
(
)
)
{
IF
(
(
)
(
,
)
)
{
=
;
}
RETURN
;
}
}
}
STATIC
VOID
(
)
{
;
IF
(
(
,
)
)
{
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
{
=
;
=
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
(
(
,
)
)
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
}
VOID
(
,
,
FLOAT
,
INT
)
{
}
(
)
{
CHAR
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
CHAR
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
,
)
{
INT
;
CHAR
;
CHAR
;
;
IF
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
}
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
CASE
IF
(
(
)
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
=
;
BREAK
;
CASE
IF
(
(
)
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
IF
(
(
)
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
=
;
BREAK
;
}
}
IF
(
)
{
(
,
,
,
)
;
IF
(
)
;
=
;
RETURN
;
}
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
IF
(
)
{
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
)
;
ELSE
;
}
RETURN
;
}
}
}
(
,
,
)
;
IF
(
)
;
}
VOID
(
,
,
,
)
;
VOID
(
)
{
;
;
;
FLOAT
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
IF
(
(
(
,
)
)
)
=
;
IF
(
(
(
INT
)
(
)
)
)
=
;
ELSE
=
(
(
)
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
=
(
,
)
;
;
=
;
}
IF
(
)
{
;
=
(
,
(
)
)
;
;
;
=
;
=
(
)
;
=
;
}
}
VOID
(
,
,
)
{
;
IF
(
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
}
ELSE
{
=
;
RETURN
;
}
IF
(
)
=
(
,
)
;
ELSE
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
IF
(
)
;
}
VOID
(
,
,
,
INT
,
)
{
INT
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
(
,
,
)
;
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
=
;
}
}
=
;
=
;
=
;
=
;
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
)
;
=
;
}
ELSE
{
IF
(
)
{
STATIC
INT
;
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
(
,
,
(
(
,
(
(
)
)
)
)
,
,
,
)
;
}
}
=
;
(
)
;
}
VOID
(
)
{
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
(
,
,
(
)
)
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
(
(
)
)
;
IF
(
)
=
;
}
}
VOID
(
)
{
=
;
=
;
;
IF
(
)
=
;
}
FLOAT
(
)
{
;
FLOAT
;
;
INT
;
FLOAT
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
=
(
)
;
IF
(
)
=
;
}
RETURN
;
}
(
VOID
)
{
,
,
;
INT
=
;
INT
;
FLOAT
,
,
;
=
;
=
=
;
=
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
;
IF
(
)
{
=
=
;
}
ELSE
;
=
(
)
;
=
;
DO
{
=
(
,
(
)
,
)
;
IF
(
)
;
}
WHILE
(
)
;
RETURN
;
}
(
VOID
)
{
;
FLOAT
,
;
;
=
;
=
;
=
;
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
RETURN
;
}
=
(
,
(
)
,
)
;
RETURN
;
}
(
VOID
)
{
IF
(
(
INT
)
(
)
)
RETURN
(
)
;
ELSE
RETURN
(
)
;
}
(
)
{
INT
;
=
;
CHAR
;
=
;
IF
(
)
RETURN
;
=
;
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
IF
(
(
,
)
)
{
;
IF
(
)
RETURN
;
}
}
RETURN
;
}
VOID
(
,
,
)
{
=
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
IF
(
)
{
WHILE
(
(
=
(
,
(
)
,
)
)
)
{
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
{
IF
(
)
{
=
(
,
(
)
,
)
;
}
IF
(
)
(
,
)
;
}
}
(
,
)
;
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
}
VOID
(
,
,
,
INT
,
)
{
INT
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
;
(
,
)
;
=
;
}
}
VOID
(
)
{
;
=
(
INT
)
;
=
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
(
)
;
;
(
)
;
=
;
=
;
=
;
=
;
RETURN
;
}
(
)
;
}
VOID
(
)
{
INT
,
;
IF
(
)
{
CHAR
=
(
,
)
;
IF
(
(
,
)
(
,
)
)
{
(
,
,
)
;
=
;
(
)
;
(
)
;
(
,
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
)
IF
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
(
)
;
(
)
;
(
,
)
;
RETURN
;
}
}
ELSE
{
CHAR
=
(
,
)
;
IF
(
(
,
)
(
,
)
)
{
(
,
,
)
;
=
;
(
)
;
(
)
;
(
,
)
;
RETURN
;
}
}
=
=
;
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
;
}
=
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
VOID
(
)
{
=
{
,
,
}
;
=
{
,
,
}
;
INT
;
,
;
;
INT
;
;
;
(
,
,
)
;
=
;
=
;
IF
(
)
{
CHAR
;
=
;
(
,
,
(
)
)
;
(
)
;
(
,
)
;
}
ELSE
IF
(
)
{
CHAR
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
(
,
)
;
IF
(
)
=
;
}
ELSE
{
(
,
,
(
)
)
;
}
=
;
(
,
,
(
)
)
;
=
;
IF
(
)
(
)
;
=
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
IF
(
(
(
INT
)
)
)
{
=
;
}
ELSE
{
=
(
(
,
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
;
(
,
)
;
FOR
(
=
;
;
)
=
(
)
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
;
=
;
(
)
;
RETURN
;
}
ELSE
=
;
IF
(
(
)
)
{
}
(
)
;
=
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
)
{
INT
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
(
)
;
=
;
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
}
}
(
)
;
}
VOID
(
,
CHAR
)
{
CHAR
;
INT
;
IF
(
(
)
)
{
(
,
)
;
}
=
(
,
)
;
(
,
,
(
)
)
;
=
(
,
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
=
(
,
)
;
=
;
(
,
(
,
,
)
)
;
IF
(
(
(
INT
)
)
)
{
=
;
}
ELSE
{
=
(
(
,
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
}
(
,
,
(
)
)
;
}
(
,
CHAR
)
{
CHAR
;
=
(
,
)
;
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
=
(
,
)
;
IF
(
(
,
)
)
{
INT
,
;
IF
(
(
,
)
(
,
)
)
{
(
,
,
)
;
RETURN
;
}
FOR
(
=
=
;
;
)
IF
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
}
ELSE
{
=
(
,
)
;
IF
(
(
,
)
(
,
)
)
{
(
,
,
)
;
RETURN
;
}
}
=
(
)
;
IF
(
)
{
(
)
;
IF
(
)
(
)
;
}
(
,
)
;
IF
(
)
(
,
)
;
=
;
RETURN
;
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
}
;
(
,
,
,
)
{
IF
(
)
RETURN
(
,
,
,
,
,
)
;
ELSE
RETURN
(
,
,
,
,
,
)
;
}
UNSIGNED
(
VOID
,
INT
)
{
INT
,
;
=
;
FOR
(
=
;
;
)
(
(
)
)
;
RETURN
;
}
VOID
(
)
{
UNSIGNED
,
;
=
(
,
(
)
)
;
=
(
,
(
)
)
;
(
,
,
,
)
;
}
VOID
(
,
)
{
;
;
INT
,
;
;
=
;
=
;
IF
(
)
{
=
;
IF
(
(
)
)
=
;
RETURN
;
}
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
(
,
,
(
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
IF
(
(
,
,
(
)
)
)
{
=
;
}
=
;
=
;
=
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
{
(
,
,
(
)
,
,
,
)
;
(
,
,
)
;
}
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
,
)
;
}
}
=
;
=
;
;
=
;
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
{
=
;
;
}
ELSE
(
)
;
}
ELSE
IF
(
)
{
=
;
(
)
;
}
}
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
{
;
IF
(
)
(
)
;
ELSE
(
)
;
}
}
ELSE
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
)
;
}
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
ELSE
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
(
(
(
INT
)
)
)
)
{
(
)
;
=
;
}
}
RETURN
;
}
IF
(
)
IF
(
(
,
(
)
)
)
(
)
;
=
;
}
__E__O__F__
VOID
(
)
{
IF
(
)
=
;
(
,
)
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
}
VOID
(
)
{
INT
,
;
,
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
)
;
}
=
;
=
;
IF
(
(
,
)
)
{
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
}
}
}
ELSE
{
IF
(
)
{
=
;
RETURN
;
}
}
=
;
=
(
,
(
)
,
)
;
IF
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
=
(
,
(
)
,
)
;
}
ELSE
{
=
(
)
;
WHILE
(
)
{
=
(
,
(
)
,
)
;
IF
(
)
=
(
,
(
)
,
)
;
}
}
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
)
;
}
}
VOID
(
,
)
{
CHAR
;
CHAR
;
INT
;
INT
,
,
;
INT
;
INT
;
INT
,
;
INT
;
INT
,
;
;
;
CHAR
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
;
}
=
;
=
(
)
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
,
(
)
,
,
,
,
)
;
=
(
)
;
IF
(
)
BREAK
;
(
,
)
;
;
}
(
,
(
)
,
,
,
,
,
,
,
(
)
)
;
=
(
)
;
IF
(
)
BREAK
;
(
,
)
;
;
}
(
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
(
,
)
;
}
VOID
(
)
{
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
=
;
(
)
;
}
VOID
(
)
{
CHAR
;
CHAR
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
(
)
,
,
,
,
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
IF
(
(
)
)
{
=
;
RETURN
;
}
=
;
=
;
(
)
;
}
VOID
(
)
{
;
INT
,
;
INT
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
(
)
;
=
;
}
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
IF
(
)
{
;
(
,
,
(
)
,
,
,
)
;
=
;
;
}
}
=
(
)
;
IF
(
(
(
)
)
)
{
=
(
)
;
=
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
IF
(
)
=
;
ELSE
=
(
)
;
=
;
=
;
IF
(
)
{
IF
(
)
;
IF
(
)
;
}
ELSE
{
IF
(
)
;
IF
(
)
;
}
=
;
IF
(
(
)
)
=
(
)
;
ELSE
IF
(
(
)
)
=
(
)
;
ELSE
=
;
=
;
}
VOID
(
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
,
(
)
)
;
(
)
;
}
}
VOID
(
)
{
=
;
IF
(
)
(
)
;
=
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
}
__E__O__F__
;
INT
;
=
;
(
)
(
(
(
)
)
(
)
)
(
)
(
(
(
)
)
(
)
)
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
=
;
=
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
(
,
)
;
=
;
(
,
(
)
,
)
;
=
(
)
;
=
(
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
}
(
)
{
INT
;
INT
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
)
{
IF
(
)
=
(
)
;
ELSE
BREAK
;
}
IF
(
(
,
)
)
{
RETURN
;
}
IF
(
(
,
(
)
)
)
{
RETURN
(
)
;
}
RETURN
;
}
(
)
{
INT
;
INT
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
)
{
IF
(
)
=
(
)
;
ELSE
BREAK
;
}
RETURN
;
}
(
VOID
)
{
RETURN
(
)
;
}
__E__O__F__
STATIC
;
STATIC
;
STATIC
,
,
;
FLOAT
;
FLOAT
;
INT
;
FLOAT
;
FLOAT
(
,
)
{
FLOAT
;
FLOAT
;
FLOAT
;
=
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
VOID
(
)
{
;
FLOAT
;
FLOAT
,
,
;
;
INT
,
;
STATIC
=
{
,
,
}
;
STATIC
=
{
,
,
}
;
STATIC
=
{
,
,
}
;
=
;
=
;
IF
(
)
;
IF
(
(
)
(
)
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
STATIC
INT
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
)
;
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
}
}
=
;
IF
(
)
=
;
IF
(
(
)
(
)
(
)
)
{
=
(
(
)
)
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
(
(
,
,
)
)
,
,
,
)
;
}
IF
(
)
=
;
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
IF
(
)
(
,
(
FLOAT
)
,
,
)
;
IF
(
)
(
,
(
FLOAT
)
,
,
)
;
IF
(
)
(
,
(
FLOAT
)
,
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
(
)
;
=
(
,
)
;
=
;
=
(
,
)
;
=
;
=
;
}
=
;
=
;
=
;
=
;
}
VOID
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
;
=
;
IF
(
)
{
(
)
;
=
;
=
;
=
;
}
ELSE
{
(
,
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
;
;
=
(
)
;
IF
(
)
=
;
;
=
(
,
)
;
;
=
(
,
)
;
;
=
;
IF
(
)
;
;
=
;
IF
(
)
;
IF
(
)
=
;
;
}
(
)
;
;
=
(
)
;
IF
(
)
=
;
;
=
;
IF
(
)
=
;
;
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
(
,
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
;
;
}
(
)
;
FOR
(
=
;
;
)
{
(
)
;
;
(
)
;
}
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
,
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
)
{
INT
;
;
INT
;
=
=
=
=
;
(
,
,
)
;
=
(
)
;
IF
(
(
)
)
;
ELSE
;
IF
(
(
)
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
)
;
}
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
;
IF
(
)
=
;
;
IF
(
)
=
;
}
VOID
(
)
{
FLOAT
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
(
)
(
)
)
{
=
;
}
ELSE
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
)
RETURN
;
IF
(
)
;
IF
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
=
;
IF
(
)
=
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
=
;
=
(
)
;
IF
(
)
=
;
(
,
,
,
)
;
IF
(
(
(
INT
)
)
)
(
,
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
=
;
RETURN
;
}
}
VOID
(
VOID
)
{
;
;
INT
,
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
,
,
)
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
)
(
,
,
(
)
,
,
,
)
;
;
=
;
}
IF
(
)
{
(
,
,
)
;
(
,
,
(
)
,
,
,
)
;
;
}
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
}
IF
(
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
}
}
IF
(
)
{
IF
(
)
{
=
;
IF
(
(
(
INT
)
(
)
)
)
{
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
;
(
,
,
)
;
}
}
IF
(
)
{
IF
(
)
{
=
;
;
IF
(
)
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
ELSE
IF
(
(
)
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
=
;
(
,
,
,
,
,
,
,
,
,
)
;
}
}
}
ELSE
{
=
;
=
;
}
IF
(
(
(
)
)
)
{
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
(
,
,
(
)
,
,
,
)
;
ELSE
(
,
,
(
)
,
,
,
)
;
=
;
}
IF
(
)
(
,
,
,
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
,
,
,
)
;
}
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
,
)
;
}
}
}
}
VOID
(
)
{
INT
;
INT
;
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
IF
(
)
{
;
}
ELSE
IF
(
)
{
;
;
}
}
IF
(
)
{
=
;
IF
(
(
)
)
;
}
IF
(
)
{
=
;
IF
(
(
)
)
;
}
IF
(
)
{
;
(
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
INT
)
(
)
)
=
;
}
}
VOID
(
)
{
CHAR
;
IF
(
)
{
=
;
=
;
}
IF
(
(
)
)
{
;
(
,
,
(
)
,
,
,
)
;
}
IF
(
)
=
;
ELSE
=
;
IF
(
(
(
)
)
)
=
;
ELSE
IF
(
(
,
)
)
=
(
)
;
ELSE
IF
(
(
,
)
)
=
(
)
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
VOID
(
)
{
;
,
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
{
IF
(
)
{
;
RETURN
;
}
}
ELSE
IF
(
)
{
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
RETURN
;
}
=
;
=
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
}
VOID
(
)
{
FLOAT
;
INT
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
(
)
;
RETURN
;
}
(
,
,
,
)
;
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
=
;
=
(
,
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
=
(
)
;
IF
(
)
;
=
(
INT
)
;
=
(
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
}
__E__O__F__
STATIC
;
STATIC
;
VOID
(
,
)
;
STATIC
VOID
(
,
,
,
,
,
)
{
;
(
,
)
;
IF
(
)
;
ELSE
IF
(
)
=
;
(
,
,
,
,
)
;
}
VOID
(
,
,
INT
)
{
;
IF
(
)
{
IF
(
)
{
;
RETURN
;
}
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
}
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
(
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
)
;
}
(
,
)
{
INT
;
;
=
(
)
;
IF
(
(
(
(
INT
)
(
)
)
)
)
{
IF
(
(
(
)
)
)
RETURN
;
}
;
IF
(
(
)
)
{
=
(
)
;
IF
(
(
INT
)
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
(
)
)
{
IF
(
)
{
IF
(
(
INT
)
(
)
)
;
ELSE
(
,
)
;
}
IF
(
)
;
}
}
IF
(
(
)
(
(
)
)
)
=
;
RETURN
;
}
VOID
(
)
{
INT
;
IF
(
)
{
=
;
=
;
(
,
)
;
=
;
}
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
=
(
(
)
)
;
ELSE
=
;
=
(
)
;
}
IF
(
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
VOID
(
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
RETURN
;
}
=
(
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
;
(
)
;
}
}
VOID
(
,
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
}
=
;
}
VOID
(
,
)
{
INT
;
IF
(
(
INT
)
(
)
)
RETURN
;
=
(
)
;
IF
(
(
(
)
(
)
)
(
)
)
{
(
,
,
)
;
RETURN
;
}
(
,
)
;
;
}
(
)
(
)
(
)
VOID
(
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
,
VOID
(
)
(
)
)
{
INT
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
(
)
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
=
;
=
;
RETURN
;
}
;
RETURN
;
}
IF
(
(
)
(
)
)
{
=
;
=
;
IF
(
(
)
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
)
)
{
;
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
}
}
ELSE
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
}
}
;
RETURN
;
}
}
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
(
,
,
(
)
,
,
,
)
;
(
)
;
BREAK
;
}
}
IF
(
)
;
IF
(
)
=
;
}
}
VOID
(
,
)
{
;
,
;
;
INT
=
;
FLOAT
;
INT
;
FLOAT
;
=
;
IF
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
=
;
=
(
)
(
(
)
)
;
(
,
,
,
,
,
,
,
)
;
IF
(
(
(
INT
)
)
)
;
=
;
IF
(
)
{
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
}
VOID
(
)
{
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
)
)
{
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
}
RETURN
;
}
IF
(
(
)
(
)
(
)
(
)
)
{
IF
(
(
)
)
RETURN
;
}
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
)
{
IF
(
)
{
=
;
=
(
)
;
}
IF
(
)
{
=
;
(
,
)
;
=
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
RETURN
;
}
}
}
IF
(
)
{
=
;
(
,
)
;
}
IF
(
(
)
(
)
)
RETURN
;
;
IF
(
)
{
=
;
=
;
}
}
}
VOID
(
)
{
;
,
;
;
INT
=
;
FLOAT
;
=
;
IF
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
,
;
,
;
INT
;
FLOAT
;
INT
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
IF
(
)
{
;
;
}
(
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
,
,
INT
,
,
INT
)
{
,
;
;
;
IF
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
)
;
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
FLOAT
;
;
INT
;
INT
;
=
(
)
;
IF
(
(
)
)
{
;
}
ELSE
{
IF
(
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
(
)
(
)
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
)
;
IF
(
(
(
INT
)
)
)
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
;
IF
(
)
=
;
}
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
}
VOID
(
)
{
STATIC
INT
=
{
}
;
STATIC
INT
=
{
,
,
,
,
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
INT
;
;
,
;
;
INT
=
;
INT
=
;
;
IF
(
(
)
)
{
=
;
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
RETURN
;
}
IF
(
)
{
;
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
IF
(
)
{
;
IF
(
)
=
;
}
(
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
=
;
IF
(
)
{
=
(
INT
)
(
(
)
)
;
=
;
}
ELSE
{
=
(
INT
)
(
(
)
)
;
=
;
}
}
VOID
(
)
{
STATIC
INT
=
{
,
,
}
;
STATIC
INT
=
{
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
INT
;
INT
;
;
,
,
;
FLOAT
,
;
;
INT
;
INT
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
(
,
,
(
)
,
,
,
)
;
IF
(
(
)
(
)
)
{
=
;
=
;
RETURN
;
}
ELSE
IF
(
(
)
(
)
)
{
=
;
}
ELSE
{
;
}
IF
(
)
{
=
;
(
,
,
(
)
,
,
,
)
;
}
ELSE
{
=
(
)
;
}
=
;
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
=
(
)
;
=
;
}
IF
(
)
=
;
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
IF
(
)
=
;
IF
(
)
{
IF
(
)
{
(
,
,
(
)
,
,
,
)
;
=
;
}
(
)
;
RETURN
;
}
IF
(
)
{
;
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
(
,
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
)
;
}
(
)
;
(
)
;
(
(
)
)
;
(
,
)
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
,
}
;
STATIC
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
;
,
;
;
INT
=
;
INT
=
;
IF
(
)
{
;
RETURN
;
}
(
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
IF
(
)
{
;
;
}
IF
(
)
(
,
,
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
;
,
;
;
;
INT
=
;
INT
=
;
(
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
IF
(
)
{
;
;
}
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
;
,
;
;
INT
;
INT
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
;
;
}
(
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
}
;
STATIC
INT
=
{
,
}
;
(
,
,
,
,
,
,
,
)
;
}
VOID
(
)
{
,
;
,
;
INT
;
FLOAT
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
;
(
,
,
)
;
RETURN
;
}
IF
(
)
{
;
RETURN
;
}
IF
(
)
;
(
,
,
,
)
;
(
,
,
)
;
=
;
=
(
)
;
=
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
;
(
,
,
)
;
IF
(
(
(
INT
)
)
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
,
,
,
}
;
STATIC
INT
=
{
,
,
}
;
(
,
,
,
,
,
,
,
)
;
}
__E__O__F__
(
)
(
)
=
{
,
,
}
;
(
,
)
VOID
(
,
CONST
,
CONST
,
FLOAT
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
INT
;
,
,
;
=
;
=
;
=
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
=
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
}
}
(
,
)
VOID
(
,
,
,
)
{
FLOAT
;
STATIC
FLOAT
,
,
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
;
}
}
VOID
(
,
CONST
,
CONST
)
{
FLOAT
;
;
FLOAT
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
CONST
)
{
INT
;
INT
;
FLOAT
=
;
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
)
{
=
;
=
(
)
;
}
}
=
=
=
;
=
;
(
,
,
)
;
(
)
;
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
FLOAT
(
FLOAT
)
{
IF
(
)
RETURN
;
RETURN
;
INT
=
(
INT
)
;
;
RETURN
(
FLOAT
)
;
}
(
)
(
)
LONG
(
FLOAT
)
{
STATIC
INT
;
,
}
(
DEFAULT
)
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
IF
(
)
;
IF
(
)
;
RETURN
(
)
;
}
FLOAT
(
FLOAT
)
{
IF
(
)
(
INT
)
(
)
;
ELSE
(
(
INT
)
(
)
)
;
=
(
)
(
(
INT
)
(
(
)
)
)
;
RETURN
;
}
INT
;
;
INT
(
,
,
STRUCT
)
{
INT
;
FLOAT
,
;
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
IF
(
)
;
RETURN
;
}
INT
(
,
,
STRUCT
)
{
FLOAT
,
;
INT
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
=
=
;
(
)
;
BREAK
;
}
=
;
IF
(
)
=
;
IF
(
)
;
(
)
;
RETURN
;
}
(
)
(
)
INT
(
,
,
STRUCT
)
{
STATIC
INT
;
STATIC
INT
;
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
,
(
)
,
,
,
,
,
,
,
,
INT
}
}
(
DEFAULT
)
VOID
(
,
)
{
=
=
=
;
=
=
=
;
}
VOID
(
,
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
INT
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
FLOAT
,
;
=
;
=
(
)
;
IF
(
)
{
=
;
;
;
;
}
RETURN
;
}
(
,
)
{
FLOAT
,
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
RETURN
;
}
VOID
(
,
FLOAT
,
,
)
{
=
;
=
;
=
;
}
(
,
)
{
RETURN
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
DOUBLE
(
DOUBLE
)
;
(
)
{
INT
;
FLOAT
;
=
;
FOR
(
=
;
;
)
;
=
(
)
;
RETURN
;
}
VOID
(
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
INT
(
INT
)
{
INT
=
;
WHILE
(
)
;
RETURN
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
;
WHILE
(
)
{
IF
(
)
=
;
;
}
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
WHILE
(
)
=
;
=
;
}
CHAR
(
CHAR
)
{
STATIC
CHAR
;
INT
;
WHILE
(
)
;
IF
(
)
RETURN
;
;
FOR
(
=
;
;
,
)
=
;
=
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
,
;
=
(
)
;
WHILE
(
)
;
FOR
(
=
;
;
)
;
IF
(
)
=
;
ELSE
{
;
(
,
,
)
;
=
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
)
;
(
,
,
)
;
=
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
)
{
IF
(
)
RETURN
;
;
}
(
,
)
;
}
;
SHORT
(
)
(
SHORT
)
;
SHORT
(
)
(
SHORT
)
;
INT
(
)
(
INT
)
;
INT
(
)
(
INT
)
;
FLOAT
(
)
(
FLOAT
)
;
FLOAT
(
)
(
FLOAT
)
;
SHORT
(
SHORT
)
{
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
RETURN
(
)
;
}
INT
(
INT
)
{
RETURN
(
)
;
}
INT
(
INT
)
{
RETURN
(
)
;
}
FLOAT
(
FLOAT
)
{
RETURN
(
)
;
}
FLOAT
(
FLOAT
)
{
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
,
;
=
;
=
(
)
;
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
RETURN
;
}
INT
(
INT
)
{
,
,
,
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
(
(
INT
)
)
(
(
INT
)
)
(
(
INT
)
)
;
}
INT
(
INT
)
{
RETURN
;
}
FLOAT
(
FLOAT
)
{
UNION
{
FLOAT
;
;
}
,
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
FLOAT
(
FLOAT
)
{
RETURN
;
}
VOID
(
VOID
)
{
=
{
,
}
;
IF
(
(
SHORT
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
CHAR
(
CHAR
,
)
{
;
STATIC
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
CHAR
;
CHAR
(
CHAR
)
{
INT
;
INT
;
CHAR
;
=
;
=
;
=
;
IF
(
)
{
=
;
RETURN
;
}
WHILE
(
(
=
)
)
{
IF
(
)
{
=
;
RETURN
;
}
;
}
IF
(
)
{
WHILE
(
)
;
GOTO
;
}
IF
(
)
{
;
WHILE
(
)
{
=
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
;
}
}
}
DO
{
IF
(
)
{
=
;
;
}
;
=
;
}
WHILE
(
)
;
IF
(
)
{
=
;
}
=
;
=
;
RETURN
;
}
INT
;
VOID
(
,
INT
)
{
INT
;
FOR
(
=
;
;
)
;
}
INT
(
CHAR
,
CHAR
)
{
(
)
RETURN
(
,
)
;
RETURN
(
,
)
;
}
INT
(
CHAR
,
CHAR
,
INT
)
{
INT
,
;
DO
{
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
}
}
WHILE
(
)
;
RETURN
;
}
INT
(
CHAR
,
CHAR
)
{
RETURN
(
,
,
)
;
}
VOID
(
CHAR
,
INT
,
CHAR
,
)
{
INT
;
;
CHAR
;
(
,
)
;
=
(
,
,
)
;
(
)
;
IF
(
)
(
,
,
)
;
(
,
,
)
;
}
CHAR
(
CHAR
,
CHAR
)
{
CHAR
;
STATIC
CHAR
;
STATIC
INT
;
CHAR
;
;
IF
(
)
;
WHILE
(
)
{
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
IF
(
(
,
)
)
{
RETURN
;
}
WHILE
(
)
{
=
;
IF
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
IF
(
)
RETURN
;
}
}
(
CHAR
)
{
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
,
CHAR
)
{
CHAR
,
;
INT
;
INT
=
;
IF
(
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
IF
(
(
)
)
RETURN
;
(
,
(
)
,
,
,
)
;
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
WHILE
(
)
{
=
;
;
IF
(
)
=
;
}
=
;
}
__E__O__F__
VOID
(
INT
,
)
{
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
}
__E__O__F__
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
(
)
INT
;
STATIC
INT
;
STATIC
=
;
STATIC
=
;
STRUCT
{
INT
;
INT
;
}
;
INT
=
;
INT
=
;
STATIC
INT
,
;
STATIC
INT
,
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
INT
=
;
INT
;
INT
;
TYPEDEF
UNSIGNED
SHORT
;
STATIC
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
,
;
STATIC
INT
,
;
STATIC
FLOAT
;
STATIC
INT
,
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
INT
(
)
;
INT
(
)
;
STATIC
VOID
(
INT
)
{
(
,
,
)
;
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
STRUCT
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
}
INT
(
INT
,
INT
,
INT
,
)
{
INT
,
;
;
(
,
)
;
(
,
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
)
;
(
)
;
=
;
=
;
IF
(
(
)
)
{
RETURN
;
}
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
,
)
;
IF
(
)
RETURN
;
(
,
)
;
(
)
;
(
)
;
=
;
}
INT
(
VOID
,
VOID
)
{
(
)
;
RETURN
;
}
VOID
(
FLOAT
)
{
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
VOID
(
)
{
}
STATIC
(
,
)
{
;
;
;
;
;
=
(
,
,
,
,
)
;
=
;
=
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
(
)
{
INT
,
;
;
INT
;
INT
;
(
,
)
;
(
(
)
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
(
)
)
;
ELSE
(
)
;
}
ELSE
(
,
,
(
)
)
;
(
)
;
(
,
)
;
=
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
;
}
ELSE
{
INT
;
=
(
)
;
=
(
(
,
)
)
;
=
;
}
=
(
,
(
)
,
)
;
IF
(
)
{
(
,
)
;
=
(
,
(
)
,
)
;
IF
(
)
(
)
;
}
(
,
,
(
INT
)
(
)
)
;
IF
(
)
{
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
)
;
}
=
;
{
INT
=
;
;
;
=
(
,
)
;
=
(
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
)
;
}
IF
(
)
{
IF
(
)
{
=
(
,
,
,
)
;
(
,
,
)
;
}
}
(
,
,
(
,
)
)
;
{
;
INT
=
;
=
;
=
(
,
,
,
)
;
}
IF
(
)
{
;
;
;
;
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
=
;
=
;
(
,
,
,
,
,
,
(
UNSIGNED
CHAR
)
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
}
}
(
,
)
;
{
;
DO
{
(
,
)
;
IF
(
)
=
;
}
WHILE
(
)
;
}
=
(
,
,
,
)
;
IF
(
(
,
,
)
)
(
)
;
IF
(
(
)
)
{
CHAR
;
=
;
=
(
CHAR
)
(
)
;
IF
(
)
{
CHAR
=
;
WHILE
(
(
)
)
;
IF
(
)
=
;
IF
(
(
(
,
)
)
)
=
;
}
}
IF
(
)
{
=
(
)
;
(
)
;
}
ELSE
(
)
;
=
;
=
;
RETURN
;
}
INT
(
)
{
INT
;
CHAR
;
;
=
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
UNSIGNED
CHAR
)
;
IF
(
)
=
;
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
;
INT
;
(
,
)
;
SWITCH
(
)
{
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
IF
(
)
{
(
(
INT
)
(
INT
)
(
)
)
;
(
(
INT
)
(
INT
)
(
)
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
(
)
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
=
(
(
INT
)
(
INT
)
)
;
=
(
(
INT
)
(
INT
)
)
;
=
;
=
;
}
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
DEFAULT
IF
(
)
=
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
}
}
;
VOID
(
)
{
=
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
(
)
;
WHILE
(
)
{
(
,
)
;
=
(
)
;
}
}
}
VOID
(
VOID
)
{
}
STATIC
VOID
(
VOID
)
{
=
;
}
STATIC
VOID
(
VOID
)
{
=
;
}
STATIC
VOID
(
VOID
)
{
=
;
(
)
;
}
VOID
(
)
{
INT
;
INT
;
(
,
)
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
=
;
=
;
}
VOID
(
VOID
)
{
=
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
}
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
IF
(
)
RETURN
;
;
;
IF
(
(
)
(
)
)
;
ELSE
;
IF
(
(
)
(
)
)
{
;
}
ELSE
{
;
}
=
=
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
STATIC
=
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
(
)
(
,
CONST
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
)
;
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
(
)
(
VOID
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
CONST
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
,
CONST
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
CONST
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
(
)
(
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
INT
,
CONST
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
(
)
(
,
CONST
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
CONST
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
,
)
{
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
(
,
CONST
,
)
{
(
,
)
;
RETURN
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
CONST
)
{
(
,
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
,
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
,
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
(
)
(
,
)
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
(
VOID
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
CONST
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
VOID
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
VOID
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
CONST
CHAR
)
{
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
{
STRUCT
;
;
CHAR
;
(
)
;
=
(
)
;
(
)
;
(
,
,
(
)
)
;
=
(
,
)
;
(
,
,
(
)
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
(
,
)
;
}
__E__O__F__
;
INT
;
INT
;
VOID
(
INT
)
{
=
(
INT
)
;
=
;
=
(
)
;
IF
(
)
(
,
,
)
;
(
(
INT
)
)
=
;
RETURN
(
INT
)
;
}
VOID
(
INT
)
{
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
INT
)
;
;
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
;
IF
(
)
{
=
(
(
)
)
(
INT
)
;
(
)
;
}
}
INT
;
INT
(
VOID
)
{
STRUCT
;
STRUCT
;
STATIC
INT
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
;
RETURN
;
}
VOID
(
CHAR
)
{
(
,
)
;
}
CHAR
(
CHAR
)
{
CHAR
=
;
WHILE
(
)
{
=
(
)
;
;
}
RETURN
;
}
STATIC
CHAR
;
STATIC
CHAR
;
STATIC
CHAR
;
STATIC
;
STATIC
(
CHAR
,
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
CHAR
;
IF
(
(
,
)
(
,
)
)
RETURN
;
(
,
,
,
)
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
CHAR
;
IF
(
)
(
)
;
(
,
)
;
IF
(
(
=
(
,
)
)
)
{
=
;
(
,
)
;
}
ELSE
(
,
)
;
IF
(
(
,
)
)
(
,
)
;
IF
(
(
=
(
)
)
)
RETURN
;
WHILE
(
(
=
(
)
)
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
}
}
RETURN
;
}
CHAR
(
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
IF
(
)
RETURN
;
WHILE
(
(
=
(
)
)
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
}
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
}
__E__O__F__
(
)
(
)
(
(
INT
)
(
(
)
(
)
)
)
;
;
;
SHORT
INT
;
=
;
LONG
LONG
;
DOUBLE
;
LONG
LONG
=
;
(
VOID
)
{
=
;
;
=
(
,
,
)
;
IF
(
(
INT
)
)
=
;
ELSE
=
;
IF
(
)
{
(
,
)
;
=
;
(
,
)
;
}
=
(
,
,
)
;
SWITCH
(
(
INT
)
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
;
(
,
(
INT
)
,
(
INT
)
(
)
)
;
}
=
(
,
,
)
;
=
(
INT
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
}
=
;
=
;
=
;
=
(
)
;
(
(
)
,
,
)
;
IF
(
)
(
,
)
;
=
;
=
(
)
(
)
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
(
)
;
RETURN
;
}
INT
(
VOID
)
{
LONG
LONG
,
;
IF
(
)
RETURN
(
)
;
(
,
,
)
;
(
(
UNSIGNED
LONG
LONG
)
)
;
(
LONG
LONG
)
(
(
)
)
;
;
RETURN
(
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
,
=
;
RETURN
;
}
EXTERN
INT
;
VOID
(
VOID
)
{
INT
,
,
;
INT
,
;
UNSIGNED
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
(
INT
)
(
)
)
{
(
,
)
;
}
IF
(
)
=
;
=
;
IF
(
)
{
INT
=
(
)
(
)
;
(
,
,
)
;
=
;
;
}
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
}
__E__O__F__
;
UNSIGNED
;
;
=
;
VOID
(
CHAR
)
{
IF
(
)
RETURN
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
UNSIGNED
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
RETURN
;
FOR
(
=
(
UNSIGNED
CHAR
)
;
;
)
{
;
IF
(
(
)
)
(
,
)
;
ELSE
(
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
(
,
,
)
)
;
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
,
(
,
,
)
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
INT
(
CHAR
)
{
STRUCT
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
(
,
)
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
;
STRUCT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
,
)
;
=
;
=
;
IF
(
(
,
,
,
,
)
(
,
)
)
RETURN
;
=
(
,
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
RETURN
;
}
STATIC
VOID
;
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
}
VOID
(
VOID
)
{
VOID
(
)
(
VOID
)
;
CHAR
;
CHAR
;
CHAR
;
CONST
CHAR
=
;
(
(
)
,
(
)
)
;
(
(
)
)
;
IF
(
)
(
,
)
;
(
,
(
)
)
;
(
,
)
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
RETURN
;
(
,
,
,
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
BREAK
;
}
}
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
(
)
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
(
)
;
}
CHAR
(
VOID
)
{
RETURN
;
}
INT
(
INT
,
CHAR
)
{
INT
,
,
;
=
(
)
;
(
(
)
)
;
(
,
)
;
=
(
,
,
)
;
IF
(
)
{
}
=
(
)
;
WHILE
(
)
{
DO
{
=
(
)
;
=
;
}
WHILE
(
)
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
;
STRUCT
;
CHAR
;
STRUCT
;
=
;
STATIC
=
;
IF
(
)
RETURN
;
(
)
;
=
;
RETURN
;
IF
(
(
=
(
,
)
)
)
(
,
)
;
WHILE
(
(
=
(
)
)
)
{
IF
(
(
,
)
)
{
=
;
(
,
,
,
)
;
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
(
,
,
,
)
;
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
(
,
,
,
)
;
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
}
}
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
EXTERN
VOID
(
VOID
)
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
STATIC
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
)
)
{
FLOAT
=
(
(
)
)
;
(
,
)
;
}
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
FLOAT
;
=
;
=
;
=
;
=
(
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
}
IF
(
(
,
)
)
{
IF
(
)
{
=
;
IF
(
(
,
)
)
{
CHAR
;
FLOAT
;
=
;
=
(
(
)
)
;
(
,
(
)
,
,
)
;
(
)
;
=
;
}
}
}
(
)
;
}
VOID
(
VOID
)
{
STATIC
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
}
;
INT
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
=
;
=
;
IF
(
)
=
(
,
,
)
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
=
=
;
}
ELSE
IF
(
(
,
)
)
{
=
;
=
;
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
=
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
)
;
(
)
;
;
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
}
CONST
CHAR
(
INT
)
{
EXTERN
VOID
(
VOID
)
;
=
;
STATIC
CONST
CHAR
=
;
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
CASE
;
(
,
)
;
BREAK
;
CASE
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
RETURN
;
}
__E__O__F__
;
(
)
;
;
;
;
;
;
;
VOID
;
=
;
(
(
)
(
)
)
VOID
(
INT
,
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
STATIC
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
STATIC
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
=
;
}
TYPEDEF
STRUCT
{
CONST
CHAR
;
INT
,
;
INT
;
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
(
INT
,
INT
,
INT
)
{
IF
(
)
RETURN
;
=
;
=
;
RETURN
;
}
VOID
(
INT
,
INT
)
{
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
}
(
CHAR
)
{
;
;
CHAR
;
STRUCT
;
EXTERN
;
;
CHAR
;
CHAR
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
(
)
;
}
(
,
(
)
)
;
(
,
)
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
RETURN
;
(
,
,
,
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
BREAK
;
}
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
=
(
VOID
)
(
,
)
)
)
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
)
;
(
,
,
)
;
}
=
;
=
;
=
;
=
;
IF
(
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
)
(
)
;
{
VOID
(
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
IF
(
(
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
(
)
,
(
)
)
;
(
(
)
)
;
IF
(
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
)
(
)
;
{
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
=
;
=
;
=
;
}
(
)
;
(
)
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
;
IF
(
)
{
(
)
;
}
WHILE
(
)
{
=
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
(
)
)
{
IF
(
(
,
)
)
{
(
)
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
IF
(
(
)
)
(
,
)
;
}
ELSE
(
,
)
;
}
(
,
)
;
IF
(
)
{
(
)
;
}
}
=
;
}
}
VOID
(
VOID
)
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
(
)
;
}
}
;
VOID
(
VOID
)
{
=
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
}
VOID
(
INT
,
)
{
(
,
,
(
)
)
;
}
__E__O__F__
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
FLOAT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
=
;
;
;
;
VOID
(
VOID
)
;
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
}
STATIC
INT
(
VOID
)
{
STRUCT
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
VOID
(
INT
,
)
{
STRUCT
;
STRUCT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
}
=
;
=
;
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
(
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
(
,
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
STRUCT
;
STATIC
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
(
)
;
}
ELSE
{
(
,
)
;
=
;
(
)
;
}
}
IF
(
(
)
)
{
=
(
)
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
(
,
)
;
}
}
}
INT
(
VOID
)
{
INT
;
;
EXTERN
;
=
(
,
,
)
;
IF
(
)
RETURN
;
=
(
,
,
)
;
IF
(
)
RETURN
;
=
(
,
,
)
;
=
(
,
,
)
;
(
)
;
=
(
,
)
;
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
=
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
=
;
}
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
=
;
}
__E__O__F__
STATIC
INT
(
CHAR
,
CHAR
)
{
REGISTER
CHAR
=
,
=
;
REGISTER
CHAR
,
;
WHILE
(
(
=
)
)
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
WHILE
(
)
{
IF
(
(
)
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
}
}
STATIC
INT
(
CHAR
)
{
REGISTER
CHAR
=
;
REGISTER
CHAR
;
INT
=
;
WHILE
(
(
=
)
)
SWITCH
(
)
{
CASE
CASE
RETURN
;
CASE
;
CONTINUE
;
CASE
IF
(
)
RETURN
;
CONTINUE
;
CASE
IF
(
)
RETURN
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
)
{
REGISTER
CHAR
=
,
=
;
REGISTER
CHAR
;
WHILE
(
(
=
)
)
SWITCH
(
)
{
CASE
IF
(
)
RETURN
;
ELSE
;
BREAK
;
CASE
IF
(
)
RETURN
;
BREAK
;
CASE
RETURN
(
,
)
;
CASE
{
REGISTER
CHAR
=
;
INT
;
IF
(
)
RETURN
(
)
;
=
(
(
)
(
)
)
;
IF
(
)
;
=
;
WHILE
(
)
{
REGISTER
CHAR
=
,
=
;
IF
(
)
{
=
;
=
;
}
IF
(
)
RETURN
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
}
IF
(
)
GOTO
;
IF
(
)
BREAK
;
}
IF
(
)
RETURN
;
BREAK
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
ELSE
IF
(
)
;
}
IF
(
)
RETURN
;
BREAK
;
}
DEFAULT
IF
(
)
RETURN
;
}
RETURN
;
}
__E__O__F__
STATIC
(
INT
,
INT
)
;
(
VOID
)
;
EXTERN
;
EXTERN
;
STATIC
=
;
STATIC
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
STATIC
INT
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
(
)
)
{
=
;
=
;
RETURN
;
}
=
;
=
;
RETURN
;
}
STATIC
VOID
(
INT
)
{
(
,
)
;
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
INT
(
INT
,
INT
,
INT
,
)
{
INT
,
;
;
(
,
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
,
(
,
)
,
,
)
;
IF
(
)
RETURN
;
=
;
=
;
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
INT
(
VOID
,
VOID
)
{
(
)
;
RETURN
;
}
VOID
(
FLOAT
)
{
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
)
{
}
EXTERN
VOID
(
)
;
VOID
(
,
,
,
,
,
CONST
)
{
;
;
INT
;
FOR
(
=
(
)
,
=
;
;
)
{
=
;
=
;
=
;
=
;
}
(
(
)
)
;
}
__E__O__F__
;
;
VOID
(
VOID
)
{
=
(
,
,
)
;
=
(
,
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
)
{
}
VOID
(
)
{
}
__E__O__F__
;
TYPEDEF
STRUCT
{
;
INT
;
}
;
TYPEDEF
STRUCT
{
;
INT
,
;
}
;
;
INT
;
INT
;
INT
(
CHAR
,
INT
)
;
CHAR
(
VOID
)
;
VOID
(
,
STRUCT
)
{
(
,
,
(
)
)
;
IF
(
)
{
=
;
=
;
(
INT
)
=
;
}
ELSE
IF
(
)
{
=
;
(
INT
)
=
(
INT
)
;
=
;
}
}
VOID
(
STRUCT
,
)
{
(
INT
)
=
(
INT
)
;
=
;
=
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
,
,
)
)
)
RETURN
;
RETURN
;
}
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
(
)
,
,
,
,
,
,
(
)
)
;
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
(
)
,
,
,
,
,
)
;
RETURN
;
}
(
CHAR
,
STRUCT
)
{
STRUCT
;
CHAR
;
CHAR
;
(
,
,
(
)
)
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
(
(
STRUCT
)
)
=
(
(
SHORT
)
(
)
)
;
}
IF
(
)
{
(
INT
)
(
(
STRUCT
)
)
=
(
)
;
}
ELSE
{
IF
(
(
=
(
)
)
)
RETURN
;
(
INT
)
(
(
STRUCT
)
)
=
(
INT
)
;
}
RETURN
;
}
(
CHAR
,
)
{
STRUCT
;
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
IF
(
(
,
(
STRUCT
)
)
)
RETURN
;
(
,
)
;
RETURN
;
}
(
)
{
RETURN
(
,
)
;
}
(
,
,
)
{
INT
;
;
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
(
)
;
;
(
,
,
)
;
=
;
=
;
RETURN
;
}
VOID
(
,
INT
,
VOID
,
)
{
INT
;
;
=
;
=
(
)
;
;
(
,
,
)
;
=
;
}
(
,
,
)
{
INT
;
STRUCT
;
INT
;
INT
;
INT
;
INT
;
IF
(
(
,
,
)
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
CONTINUE
;
=
(
)
;
=
(
,
,
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
=
;
IF
(
)
CONTINUE
;
(
,
(
)
)
;
CONTINUE
;
}
IF
(
)
{
(
,
(
)
)
;
CONTINUE
;
}
=
;
(
,
)
;
RETURN
;
}
RETURN
;
}
VOID
(
,
INT
,
VOID
,
)
{
INT
;
STRUCT
;
INT
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
(
,
)
;
(
,
)
;
=
(
,
,
,
,
(
STRUCT
)
,
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
}
}
VOID
(
VOID
)
{
,
;
=
(
,
(
,
)
,
)
;
=
(
,
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
=
(
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
)
{
INT
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
}
}
ELSE
{
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
}
INT
(
CHAR
,
INT
)
{
INT
;
STRUCT
;
=
;
INT
=
;
IF
(
(
=
(
,
,
)
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
,
,
(
CHAR
)
,
(
)
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
=
;
ELSE
(
,
(
STRUCT
)
)
;
IF
(
)
=
;
ELSE
=
(
(
SHORT
)
)
;
=
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
}
CHAR
(
VOID
)
{
INT
;
=
;
RETURN
(
)
;
}
VOID
(
INT
)
{
STRUCT
;
;
EXTERN
;
EXTERN
;
IF
(
(
)
)
RETURN
;
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
=
(
)
;
(
,
,
,
,
)
;
}
__E__O__F__
STATIC
=
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
(
)
(
,
CONST
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
)
;
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
(
)
(
VOID
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
CONST
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
,
CONST
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
CONST
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
(
)
(
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
INT
,
INT
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
INT
,
CONST
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
(
)
(
,
CONST
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
CONST
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
,
)
{
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
(
,
CONST
,
)
{
(
,
)
;
RETURN
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
CONST
)
{
(
,
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
,
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
,
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
(
)
(
,
)
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
(
VOID
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
CONST
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
VOID
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
VOID
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
CONST
CHAR
)
{
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
{
STRUCT
;
;
CHAR
;
(
)
;
=
(
)
;
(
)
;
(
,
,
(
)
)
;
=
(
,
)
;
(
,
,
(
)
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
(
,
)
;
}
__E__O__F__
;
INT
;
INT
;
VOID
(
INT
)
{
=
(
INT
)
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
(
,
)
;
(
(
INT
)
)
=
;
RETURN
(
INT
)
;
}
VOID
(
INT
)
{
;
=
(
)
;
IF
(
)
(
)
;
=
(
INT
)
;
;
RETURN
;
}
INT
(
VOID
)
{
;
=
(
,
,
(
INT
)
,
)
;
IF
(
)
(
,
)
;
(
(
INT
)
)
=
(
INT
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
IF
(
)
{
=
(
(
)
)
(
INT
)
;
IF
(
(
,
(
(
INT
)
)
)
)
(
,
)
;
}
}
INT
;
INT
(
VOID
)
{
STRUCT
;
STRUCT
;
STATIC
INT
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
;
RETURN
;
}
VOID
(
CHAR
)
{
(
,
)
;
}
CHAR
(
CHAR
)
{
WHILE
(
)
{
=
(
)
;
;
}
}
STATIC
CHAR
;
STATIC
CHAR
;
STATIC
CHAR
;
STATIC
;
STATIC
(
CHAR
,
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
CHAR
;
IF
(
(
,
)
(
,
)
)
RETURN
;
(
,
,
,
)
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
CHAR
;
IF
(
)
(
)
;
(
,
)
;
IF
(
(
=
(
,
)
)
)
{
=
;
(
,
)
;
}
ELSE
(
,
)
;
IF
(
(
,
)
)
(
,
)
;
IF
(
(
=
(
)
)
)
RETURN
;
WHILE
(
(
=
(
)
)
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
}
}
RETURN
;
}
CHAR
(
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
IF
(
)
RETURN
;
WHILE
(
(
=
(
)
)
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
}
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
}
__E__O__F__
STATIC
UNSIGNED
CHAR
;
;
STATIC
VOID
(
INT
,
INT
)
{
INT
;
=
;
(
,
)
;
}
VOID
(
)
{
INT
;
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
;
}
STATIC
=
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
FLOAT
,
;
STATIC
FLOAT
,
;
STATIC
INT
,
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
=
;
}
STATIC
VOID
(
VOID
)
{
=
;
}
STATIC
VOID
(
VOID
)
{
=
;
(
)
;
}
STATIC
VOID
(
INT
,
INT
,
INT
)
{
=
;
;
;
}
VOID
(
)
{
INT
;
INT
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
(
)
;
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
(
,
,
(
INT
)
)
)
{
(
,
)
;
=
;
}
ELSE
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
IF
(
)
RETURN
;
=
=
;
;
;
IF
(
(
)
(
)
)
;
ELSE
;
IF
(
(
)
(
)
)
{
;
}
ELSE
{
;
}
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
INT
,
,
,
,
;
;
CHAR
;
VOID
(
VOID
)
;
INT
;
;
INT
;
VOID
(
VOID
)
{
INT
;
=
(
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
(
,
(
)
,
(
)
)
;
ELSE
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
FOR
(
=
;
;
)
IF
(
)
(
,
,
,
)
;
}
INT
(
VOID
,
VOID
)
{
(
)
;
(
)
;
RETURN
;
}
INT
(
INT
,
INT
)
{
INT
;
INT
,
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
RETURN
;
RETURN
;
}
STATIC
(
)
{
INT
,
,
;
(
)
;
=
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
(
)
;
=
=
(
CHAR
)
(
)
;
IF
(
)
(
)
;
(
)
;
=
(
)
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
(
)
;
ELSE
{
INT
=
;
INT
;
FOR
(
=
;
;
)
{
(
)
;
(
,
,
(
(
)
(
)
)
)
;
}
}
}
(
INT
,
INT
,
INT
,
)
{
=
;
(
,
,
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
)
;
IF
(
(
)
)
{
RETURN
;
}
(
(
CONST
UNSIGNED
CHAR
)
)
;
RETURN
;
}
VOID
(
CONST
UNSIGNED
CHAR
)
{
STATIC
INT
;
CONST
UNSIGNED
CHAR
;
INT
;
INT
;
IF
(
)
=
(
CONST
UNSIGNED
CHAR
)
;
IF
(
(
)
)
{
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
=
;
=
;
}
IF
(
(
)
)
(
,
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
(
)
;
}
VOID
(
)
{
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
(
)
STATIC
INT
;
STATIC
=
;
STATIC
=
;
INT
(
)
;
INT
(
)
;
INT
;
STATIC
=
{
,
}
;
STATIC
;
STRUCT
{
INT
;
INT
;
}
;
INT
=
;
INT
=
;
INT
=
;
INT
;
INT
;
TYPEDEF
UNSIGNED
SHORT
;
STATIC
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
,
;
STATIC
INT
,
;
STATIC
INT
,
;
STATIC
FLOAT
;
STATIC
INT
,
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
=
;
}
STATIC
VOID
(
VOID
)
{
=
;
}
STATIC
VOID
(
VOID
)
{
=
;
(
)
;
}
VOID
(
)
{
INT
;
INT
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
=
;
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
}
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
IF
(
)
RETURN
;
;
;
IF
(
(
)
(
)
)
;
ELSE
;
IF
(
(
)
(
)
)
{
;
}
ELSE
{
;
}
=
=
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
STATIC
;
STATIC
INT
=
;
STATIC
LONG
,
,
;
STATIC
UNSIGNED
LONG
,
,
;
VOID
(
)
{
UNSIGNED
INT
;
=
;
=
;
=
;
FOR
(
=
,
=
;
;
=
)
;
FOR
(
=
,
=
;
;
=
)
;
FOR
(
=
,
=
;
;
=
)
;
=
;
}
(
INT
,
INT
,
INT
)
{
;
IF
(
)
(
)
;
=
;
IF
(
)
{
=
(
(
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
RETURN
;
}
VOID
(
,
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
FOR
(
=
;
(
)
;
)
{
=
;
=
(
)
;
FOR
(
=
(
)
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
}
STATIC
(
,
)
{
;
;
;
;
;
=
(
,
,
,
,
)
;
=
;
=
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
IF
(
)
{
(
)
;
(
)
;
}
=
;
IF
(
)
=
;
=
(
(
)
)
;
=
(
,
,
,
,
,
(
)
,
,
,
,
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
=
(
)
;
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
}
=
(
,
,
,
,
,
,
,
)
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
(
)
,
,
)
;
IF
(
)
(
)
;
=
(
VOID
)
(
,
,
)
;
(
,
,
,
(
LONG
)
)
;
=
;
IF
(
(
,
)
)
(
)
;
(
,
)
;
(
,
,
)
;
}
}
VOID
(
INT
)
{
(
)
;
(
)
;
(
,
)
;
}
INT
(
)
{
INT
;
CHAR
;
;
=
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
UNSIGNED
CHAR
)
;
IF
(
)
=
;
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
;
INT
;
(
,
)
;
SWITCH
(
)
{
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
IF
(
)
{
(
(
INT
)
(
INT
)
(
)
)
;
(
(
INT
)
(
INT
)
(
)
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
(
)
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
=
(
(
INT
)
(
INT
)
)
;
=
(
(
INT
)
(
INT
)
)
;
=
;
=
;
}
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
DEFAULT
IF
(
)
=
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
}
}
INT
(
VOID
,
VOID
)
{
=
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
(
)
)
;
ELSE
(
)
;
}
{
STRUCT
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
}
RETURN
;
}
STATIC
(
)
{
INT
,
;
;
INT
;
INT
;
(
(
)
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
=
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
;
}
ELSE
{
INT
;
=
(
)
;
=
(
(
,
)
)
;
=
;
}
=
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
(
INT
)
(
)
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
IF
(
)
{
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
)
;
}
=
;
{
INT
=
;
;
;
=
(
,
(
,
)
,
,
)
;
=
;
=
;
=
;
=
(
,
(
,
)
,
,
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
)
;
}
IF
(
)
{
IF
(
)
{
=
(
,
,
,
)
;
(
,
,
)
;
}
}
(
,
,
(
,
)
)
;
{
;
INT
=
;
=
;
=
(
,
,
,
)
;
}
(
,
)
;
{
;
DO
{
(
,
)
;
IF
(
)
=
;
}
WHILE
(
)
;
}
IF
(
(
)
)
{
CHAR
;
=
;
=
(
CHAR
)
(
)
;
IF
(
)
{
CHAR
=
;
WHILE
(
(
)
)
;
IF
(
)
=
;
IF
(
(
(
,
)
)
)
=
;
}
}
IF
(
)
{
=
(
)
;
(
)
;
}
ELSE
(
)
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
=
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
,
,
,
)
;
IF
(
(
,
,
,
,
,
,
,
,
,
,
)
)
(
)
;
=
;
WHILE
(
)
(
)
;
=
;
=
;
(
,
)
;
}
ELSE
{
IF
(
)
(
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
,
)
;
(
,
)
;
}
}
(
INT
,
INT
,
INT
,
)
{
=
;
(
,
,
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
)
;
IF
(
(
)
)
{
RETURN
;
}
(
(
CONST
UNSIGNED
CHAR
)
)
;
RETURN
;
}
VOID
(
CONST
UNSIGNED
CHAR
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
)
=
(
CONST
UNSIGNED
CHAR
)
;
FOR
(
=
;
;
)
=
(
,
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
}
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
=
;
}
}
ELSE
IF
(
)
{
(
)
;
(
)
;
=
;
}
(
,
)
;
(
)
;
=
;
}
VOID
(
)
{
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
;
VOID
(
)
{
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
(
)
;
WHILE
(
)
{
(
,
)
;
=
(
)
;
}
}
}
VOID
(
VOID
)
{
}
__E__O__F__
INT
;
INT
;
;
;
;
;
STATIC
INT
=
{
,
,
,
}
;
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
CHAR
;
STRUCT
;
INT
;
EXTERN
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
}
IF
(
)
{
(
)
;
=
(
,
)
;
(
(
)
)
;
IF
(
)
{
(
)
;
(
,
)
;
RETURN
;
}
}
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
(
INT
)
;
IF
(
)
{
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
INT
)
;
IF
(
)
{
FOR
(
=
;
(
)
;
)
IF
(
(
,
,
)
)
BREAK
;
=
;
}
=
(
INT
)
;
IF
(
)
=
;
=
(
)
;
=
;
IF
(
)
=
(
UNSIGNED
CHAR
)
(
,
,
,
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
=
;
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
IF
(
)
{
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
ELSE
IF
(
)
{
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
ELSE
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
INT
(
VOID
)
{
STRUCT
;
IF
(
)
RETURN
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
=
;
RETURN
;
}
=
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
;
UNSIGNED
;
;
=
;
VOID
(
CHAR
)
{
IF
(
)
RETURN
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
UNSIGNED
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
RETURN
;
FOR
(
=
(
UNSIGNED
CHAR
)
;
;
)
{
;
IF
(
(
)
)
(
,
)
;
ELSE
(
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
(
,
,
)
)
;
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
,
(
,
,
)
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
INT
(
CHAR
)
{
STRUCT
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
(
,
)
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
;
STRUCT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
,
)
;
=
;
=
;
IF
(
(
,
,
,
,
)
(
,
)
)
RETURN
;
=
(
,
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
RETURN
;
}
STATIC
VOID
;
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
}
VOID
(
VOID
)
{
VOID
(
)
(
VOID
)
;
CHAR
;
CHAR
;
CHAR
;
CONST
CHAR
=
;
CONST
CHAR
=
;
(
(
)
,
(
)
)
;
(
(
)
)
;
IF
(
)
(
,
)
;
(
,
(
)
)
;
(
,
)
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
RETURN
;
(
,
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
BREAK
;
}
}
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
(
)
;
}
CHAR
(
VOID
)
{
RETURN
;
}
INT
(
INT
,
CHAR
)
{
INT
,
,
;
=
(
)
;
(
(
)
)
;
(
,
)
;
(
,
,
(
,
,
)
)
;
=
(
,
,
)
;
IF
(
)
{
(
,
,
(
,
,
)
)
;
}
=
(
)
;
WHILE
(
)
{
DO
{
=
(
)
;
=
;
}
WHILE
(
)
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
;
STRUCT
;
CHAR
;
STRUCT
;
=
;
STATIC
=
;
IF
(
)
RETURN
;
IF
(
(
=
(
,
)
)
)
(
,
)
;
WHILE
(
(
=
(
)
)
)
{
IF
(
(
,
)
)
{
=
;
(
,
,
,
)
;
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
(
,
,
,
)
;
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
(
,
,
,
)
;
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
}
}
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
EXTERN
VOID
(
VOID
)
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
STATIC
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
)
(
,
)
)
{
FLOAT
=
(
(
)
)
;
(
,
)
;
}
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
FLOAT
;
=
;
=
;
=
;
=
(
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
}
IF
(
(
,
)
)
{
IF
(
)
{
=
;
IF
(
(
,
)
)
{
CHAR
;
FLOAT
;
=
;
=
(
(
)
)
;
(
,
(
)
,
,
)
;
(
)
;
=
;
}
}
}
(
)
;
}
VOID
(
VOID
)
{
STATIC
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
}
;
INT
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
=
;
=
;
IF
(
)
=
(
,
,
)
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
=
=
;
}
ELSE
IF
(
(
,
)
)
{
=
;
=
=
;
}
ELSE
IF
(
(
,
)
)
{
=
;
=
;
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
=
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
)
;
(
)
;
;
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
}
CONST
CHAR
(
INT
)
{
EXTERN
VOID
(
VOID
)
;
=
;
STATIC
CONST
CHAR
=
;
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
CASE
;
(
,
)
;
BREAK
;
CASE
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
RETURN
;
}
__E__O__F__
;
;
;
;
;
;
;
VOID
;
=
;
(
(
)
(
)
)
VOID
(
INT
,
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
STATIC
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
STATIC
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
=
;
}
TYPEDEF
STRUCT
{
CONST
CHAR
;
INT
,
;
INT
;
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
(
INT
,
INT
,
INT
)
{
IF
(
)
RETURN
;
=
;
=
;
RETURN
;
}
VOID
(
INT
,
INT
)
{
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
}
(
CHAR
)
{
;
;
CHAR
;
STRUCT
;
EXTERN
;
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
(
)
;
}
(
,
)
;
(
)
;
IF
(
(
=
(
,
)
)
)
{
(
,
)
;
RETURN
;
}
(
,
(
)
,
)
;
(
)
;
IF
(
(
)
)
(
)
=
;
(
,
)
;
(
,
)
;
IF
(
(
,
)
)
{
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
}
ELSE
{
(
(
)
,
(
)
)
;
(
(
)
)
;
}
IF
(
(
=
(
,
)
)
)
{
(
,
,
(
)
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
=
(
VOID
)
(
,
)
)
)
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
)
;
(
,
,
)
;
}
=
;
=
;
=
;
=
;
IF
(
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
)
(
)
;
(
)
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
=
(
,
)
)
(
=
(
,
)
)
(
=
(
,
)
)
)
(
)
;
{
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
=
;
=
;
=
;
}
(
)
;
(
(
)
,
(
)
)
;
(
(
)
)
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
;
IF
(
)
{
(
)
;
}
WHILE
(
)
{
=
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
(
)
)
{
IF
(
(
,
)
(
,
)
)
{
(
)
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
IF
(
(
)
)
(
,
)
;
}
ELSE
(
,
)
;
}
(
,
)
;
IF
(
)
{
(
)
;
}
}
=
;
}
}
VOID
(
VOID
)
{
IF
(
(
)
)
=
(
,
,
)
;
ELSE
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
(
)
;
}
}
;
VOID
(
VOID
)
{
=
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
}
VOID
(
INT
,
)
{
(
,
,
(
)
)
;
}
__E__O__F__
VOID
(
INT
,
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
INT
)
{
}
VOID
(
CHAR
)
{
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
(
,
)
;
}
VOID
(
FLOAT
,
INT
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
(
,
)
;
}
__E__O__F__
VOID
(
FLOAT
)
{
}
VOID
(
VOID
)
{
}
INT
(
VOID
,
VOID
)
{
}
VOID
(
VOID
)
{
}
INT
(
INT
,
INT
,
INT
,
)
{
}
VOID
(
)
{
}
VOID
(
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
)
{
}
VOID
(
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
(
VOID
)
{
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
VOID
(
FLOAT
)
{
}
VOID
(
VOID
)
{
}
INT
(
VOID
,
VOID
)
{
}
VOID
(
CONST
UNSIGNED
CHAR
)
{
}
VOID
(
VOID
)
{
}
(
INT
,
INT
,
INT
,
)
{
}
VOID
(
)
{
}
__E__O__F__
INT
;
UNSIGNED
;
VOID
(
CHAR
)
{
}
VOID
(
CHAR
,
)
{
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
RETURN
;
}
CHAR
(
VOID
)
{
RETURN
;
}
VOID
(
CHAR
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
CHAR
(
VOID
)
{
RETURN
;
}
VOID
(
INT
)
{
RETURN
;
}
VOID
(
INT
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
CHAR
)
{
}
CHAR
(
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
RETURN
;
}
CHAR
(
UNSIGNED
,
UNSIGNED
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
INT
,
CHAR
)
{
(
,
)
;
WHILE
(
)
{
(
)
;
}
}
__E__O__F__
;
;
(
)
;
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
)
{
=
;
=
;
}
TYPEDEF
STRUCT
{
CONST
CHAR
;
INT
,
;
INT
;
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
(
(
)
(
)
)
(
INT
,
INT
,
INT
)
{
IF
(
)
RETURN
;
=
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
(
,
)
)
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
CONST
CHAR
(
INT
)
{
RETURN
;
}
__E__O__F__
VOID
(
VOID
)
;
TYPEDEF
STRUCT
{
STRUCT
;
CHAR
;
CHAR
;
}
;
;
;
INT
;
VOID
(
VOID
)
{
=
;
}
;
;
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
VOID
(
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
}
VOID
(
CHAR
)
{
CHAR
;
INT
;
=
;
IF
(
)
{
=
(
)
;
(
,
,
)
;
(
)
;
}
ELSE
=
;
(
)
;
IF
(
)
{
(
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
(
,
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
=
;
}
VOID
(
INT
,
CHAR
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
CHAR
;
INT
;
=
;
WHILE
(
)
{
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
IF
(
(
)
)
BREAK
;
IF
(
)
BREAK
;
}
(
,
,
)
;
=
;
IF
(
)
=
;
ELSE
{
;
;
(
,
,
)
;
}
(
)
;
IF
(
)
{
=
;
BREAK
;
}
}
}
VOID
(
)
{
INT
;
CHAR
;
FOR
(
=
;
(
)
;
)
{
=
(
)
;
IF
(
(
,
)
)
CONTINUE
;
(
(
,
(
)
,
(
)
)
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
;
}
}
(
VOID
)
{
INT
,
;
INT
;
CHAR
,
,
;
INT
;
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
(
(
)
)
;
}
IF
(
)
RETURN
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
IF
(
)
(
,
)
;
}
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
FOR
(
=
;
(
)
(
)
(
)
;
)
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
}
}
=
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
,
;
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
(
)
,
(
VOID
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
(
)
)
;
=
(
)
;
(
,
,
)
;
=
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
(
)
;
)
(
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
;
CHAR
;
INT
,
;
CHAR
;
IF
(
(
)
)
{
(
)
;
FOR
(
=
;
;
=
)
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
)
;
BREAK
;
}
}
IF
(
)
{
=
(
(
)
)
;
=
;
=
;
}
(
,
)
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
IF
(
(
)
)
(
,
)
;
}
(
,
)
;
=
(
)
;
}
TYPEDEF
STRUCT
{
STRUCT
;
CHAR
;
;
}
;
STATIC
INT
;
STATIC
CHAR
;
STATIC
CHAR
=
;
STATIC
CHAR
;
STATIC
;
INT
(
VOID
)
{
RETURN
;
}
CHAR
(
INT
)
{
IF
(
(
UNSIGNED
)
)
RETURN
;
RETURN
;
}
CHAR
(
VOID
)
{
RETURN
;
}
CHAR
(
CHAR
)
{
INT
,
,
,
;
;
CHAR
;
STATIC
CHAR
;
CHAR
;
CHAR
,
;
=
;
=
;
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
=
(
)
;
IF
(
)
CONTINUE
;
=
(
)
;
=
(
)
;
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
CHAR
,
)
{
INT
;
CHAR
;
FOR
(
=
;
;
)
(
)
;
=
;
=
;
IF
(
)
=
(
)
;
IF
(
)
RETURN
;
WHILE
(
)
{
WHILE
(
)
{
;
}
IF
(
)
{
;
BREAK
;
}
IF
(
)
RETURN
;
IF
(
)
{
INT
;
(
,
)
;
=
(
)
;
FOR
(
;
;
)
IF
(
)
=
;
ELSE
BREAK
;
}
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
;
}
}
}
VOID
(
CHAR
,
)
{
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
=
(
(
)
)
;
=
;
=
;
=
;
=
;
}
VOID
(
CHAR
)
{
,
;
=
;
WHILE
(
)
{
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
=
;
}
}
(
CHAR
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
CHAR
(
CHAR
)
{
;
INT
;
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
,
)
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
)
{
;
;
(
,
)
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
IF
(
)
{
(
(
,
)
)
;
}
ELSE
(
)
;
RETURN
;
}
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
RETURN
;
}
}
IF
(
(
)
)
RETURN
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
=
;
FOR
(
=
;
;
=
,
)
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
;
INT
;
}
;
TYPEDEF
STRUCT
{
;
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
INT
;
}
;
INT
;
CHAR
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
=
;
;
INT
,
;
INT
;
UNSIGNED
SHORT
;
INT
;
;
INT
;
;
INT
;
;
=
(
)
;
INT
;
CHAR
;
INT
=
;
;
INT
;
;
INT
=
;
;
INT
;
;
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
INT
;
INT
,
;
;
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
INT
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
INT
;
;
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
(
,
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
=
(
)
;
=
(
)
;
=
;
}
}
VOID
(
)
{
INT
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
=
(
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
}
}
VOID
(
)
{
INT
;
;
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
;
=
;
}
}
VOID
(
)
{
INT
;
;
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
INT
;
=
;
IF
(
)
(
,
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
=
;
IF
(
)
(
,
)
;
(
,
,
)
;
}
(
CHAR
,
,
UNSIGNED
)
{
UNSIGNED
;
INT
;
;
INT
;
STATIC
UNSIGNED
;
=
(
,
,
)
;
IF
(
(
,
)
(
(
)
)
)
{
=
;
IF
(
)
{
(
,
,
(
)
)
;
(
)
;
}
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
RETURN
;
}
=
(
,
(
VOID
)
)
;
IF
(
)
(
,
,
)
;
=
(
(
,
)
)
;
=
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
IF
(
)
(
,
,
,
,
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
(
)
)
;
(
)
;
(
,
)
;
RETURN
;
}
(
CHAR
)
{
INT
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
CHAR
(
VOID
)
{
RETURN
;
}
INT
(
INT
)
{
IF
(
)
(
,
)
;
RETURN
;
}
INT
(
INT
)
{
IF
(
)
(
,
)
;
RETURN
;
}
INT
(
INT
)
{
IF
(
)
(
,
)
;
RETURN
;
}
;
INT
;
;
;
VOID
(
VOID
)
{
INT
;
INT
;
;
;
;
=
;
=
;
IF
(
)
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
(
)
;
=
;
(
)
;
=
;
}
}
INT
(
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
INT
(
,
INT
)
{
FLOAT
;
;
;
WHILE
(
)
{
=
;
=
;
IF
(
)
=
;
ELSE
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
;
RETURN
;
}
INT
(
)
{
IF
(
)
RETURN
;
RETURN
(
,
)
;
}
INT
,
;
INT
;
FLOAT
,
;
INT
;
VOID
(
INT
)
{
;
;
INT
;
WHILE
(
)
{
IF
(
)
{
IF
(
)
{
RETURN
;
}
=
;
RETURN
;
}
=
;
=
;
=
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
IF
(
)
=
;
(
)
;
=
;
}
}
}
INT
(
,
,
INT
,
INT
,
INT
,
INT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
=
;
RETURN
;
}
INT
(
,
,
INT
,
INT
,
INT
)
{
RETURN
(
,
,
,
,
,
)
;
}
INT
(
,
INT
)
{
INT
;
IF
(
)
RETURN
;
=
(
,
)
;
RETURN
;
}
INT
(
,
INT
,
,
)
{
;
;
,
,
;
INT
;
(
,
,
)
;
IF
(
(
)
)
{
(
,
,
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
=
(
,
)
;
RETURN
;
}
(
)
,
;
,
;
;
;
INT
;
;
VOID
(
,
,
,
,
,
)
{
INT
,
;
,
;
FLOAT
;
FLOAT
,
;
;
FLOAT
,
;
,
;
FLOAT
;
,
;
=
;
=
;
=
;
IF
(
)
RETURN
;
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
}
=
(
,
)
;
=
;
}
ELSE
{
=
;
}
=
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
(
)
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
}
ELSE
{
=
(
)
(
)
;
IF
(
)
=
;
}
}
IF
(
)
{
=
;
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
=
;
=
;
=
(
)
;
=
;
}
}
}
VOID
(
,
,
,
,
)
{
INT
,
;
;
FLOAT
;
;
FLOAT
;
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
}
=
(
,
)
;
=
;
=
(
,
)
;
IF
(
)
RETURN
;
}
=
=
;
=
;
=
;
}
VOID
(
INT
)
{
INT
;
INT
;
;
;
=
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
(
)
)
CONTINUE
;
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
}
VOID
(
INT
)
{
INT
;
INT
;
;
;
=
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
(
)
)
CONTINUE
;
(
,
,
,
,
)
;
IF
(
)
RETURN
;
}
}
VOID
(
INT
,
FLOAT
,
FLOAT
,
,
)
{
;
;
FLOAT
,
,
;
FLOAT
,
;
FLOAT
;
INT
;
;
INT
;
FLOAT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
(
)
(
)
(
)
;
}
(
,
,
,
,
)
;
(
,
,
,
,
)
;
RETURN
;
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
=
(
)
;
=
;
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
,
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
,
,
,
)
;
}
(
,
,
,
,
INT
,
INT
)
{
INT
;
;
;
(
,
,
(
)
)
;
=
;
=
(
)
;
IF
(
)
RETURN
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
INT
;
INT
,
;
,
;
INT
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
;
;
}
=
(
,
,
,
,
,
)
;
FOR
(
=
;
;
)
{
(
)
;
IF
(
)
BREAK
;
}
(
,
)
;
RETURN
;
}
IF
(
)
{
=
;
(
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
}
(
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
FOR
(
=
;
;
)
=
(
)
;
}
RETURN
;
}
(
,
)
(
,
,
,
,
INT
,
INT
,
,
)
{
;
,
;
;
,
,
;
;
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
)
)
=
;
ELSE
=
;
IF
(
)
{
(
,
,
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
;
}
(
,
)
VOID
(
,
)
{
INT
;
;
INT
;
=
(
)
;
=
;
IF
(
)
{
WHILE
(
)
{
=
;
;
}
RETURN
;
}
DO
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
;
IF
(
(
)
)
{
=
(
)
;
(
)
;
}
WHILE
(
)
{
=
;
;
}
}
WHILE
(
)
;
}
;
;
(
INT
)
{
IF
(
)
(
,
,
(
)
)
;
ELSE
(
,
)
;
RETURN
;
}
(
INT
)
{
IF
(
)
(
,
,
(
)
)
;
ELSE
(
,
)
;
RETURN
;
}
VOID
(
,
INT
)
{
INT
;
;
IF
(
)
{
IF
(
)
RETURN
;
(
,
)
;
}
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
INT
;
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
;
(
,
)
;
}
}
VOID
(
INT
,
)
{
IF
(
)
(
,
)
;
=
;
(
)
;
}
(
INT
,
INT
)
{
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
,
INT
)
{
INT
;
INT
;
INT
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
}
}
RETURN
;
}
VOID
(
)
{
(
,
(
)
,
,
)
;
}
VOID
(
)
{
(
,
(
)
,
)
;
(
)
;
}
(
INT
,
)
{
INT
;
INT
;
;
IF
(
)
{
=
;
=
;
IF
(
)
RETURN
;
IF
(
(
(
)
)
)
RETURN
;
RETURN
;
}
=
;
IF
(
(
,
)
)
RETURN
;
RETURN
(
,
)
;
}
__E__O__F__
INT
;
CHAR
;
INT
;
;
;
;
;
;
;
;
;
;
;
;
INT
;
INT
;
INT
;
INT
;
INT
;
STATIC
INT
;
STATIC
CHAR
;
STATIC
INT
;
STATIC
VOID
(
)
(
INT
,
CHAR
)
;
VOID
(
INT
,
CHAR
,
INT
,
VOID
(
)
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
,
)
;
=
;
=
;
=
;
=
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
{
IF
(
(
(
)
(
)
)
(
)
)
{
(
,
)
;
=
;
}
(
,
)
;
RETURN
;
}
(
)
;
(
)
;
IF
(
)
{
CHAR
;
IF
(
)
{
(
,
(
)
,
,
(
)
)
;
=
(
,
)
;
}
IF
(
)
(
,
,
)
;
IF
(
)
(
)
;
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
INT
,
CHAR
,
)
{
;
STATIC
CHAR
;
STATIC
;
IF
(
)
(
,
)
;
=
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
(
(
,
)
,
)
;
(
)
;
=
;
(
,
)
;
}
ELSE
{
(
(
,
)
,
)
;
(
)
;
}
IF
(
)
{
(
)
;
=
;
}
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
}
(
)
;
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
)
{
=
;
}
=
{
}
;
VOID
(
,
INT
)
{
;
IF
(
)
(
,
)
;
=
(
,
)
;
=
;
}
VOID
(
,
INT
)
{
;
IF
(
)
(
,
)
;
=
(
,
)
;
=
;
}
VOID
(
,
INT
)
{
;
IF
(
(
(
SHORT
)
)
(
SHORT
)
)
(
,
)
;
=
(
,
)
;
=
;
=
;
}
VOID
(
,
INT
)
{
;
=
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
,
FLOAT
)
{
UNION
{
FLOAT
;
INT
;
}
;
=
;
=
(
)
;
(
,
,
)
;
}
VOID
(
,
CHAR
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
)
)
;
}
VOID
(
,
FLOAT
)
{
(
,
(
INT
)
(
)
)
;
}
VOID
(
,
)
{
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
}
VOID
(
,
FLOAT
)
{
(
,
(
INT
)
(
)
)
;
}
VOID
(
,
FLOAT
)
{
(
,
(
)
)
;
}
VOID
(
,
,
)
{
INT
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
,
)
{
INT
,
;
FLOAT
,
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
}
(
,
)
;
}
VOID
(
,
)
{
INT
;
=
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
VOID
(
,
,
,
,
)
{
INT
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
{
IF
(
(
UNSIGNED
)
)
;
ELSE
IF
(
(
UNSIGNED
)
)
;
ELSE
(
)
;
}
IF
(
)
{
IF
(
)
;
ELSE
;
}
IF
(
)
{
IF
(
)
;
ELSE
IF
(
)
;
ELSE
;
}
IF
(
)
{
IF
(
)
;
ELSE
IF
(
)
;
ELSE
;
}
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
(
,
)
;
IF
(
)
{
(
,
(
)
)
;
(
,
(
)
)
;
(
,
(
)
)
;
}
ELSE
IF
(
)
{
(
,
(
)
)
;
(
,
(
)
)
;
}
ELSE
IF
(
)
{
(
,
(
)
)
;
}
IF
(
)
(
,
)
;
ELSE
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
IF
(
(
(
)
)
(
)
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
IF
(
(
(
)
)
(
)
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
)
{
=
;
}
INT
(
)
{
INT
;
IF
(
)
=
;
ELSE
=
(
SIGNED
CHAR
)
;
;
RETURN
;
}
INT
(
)
{
INT
;
IF
(
)
=
;
ELSE
=
(
UNSIGNED
CHAR
)
;
;
RETURN
;
}
INT
(
)
{
INT
;
IF
(
)
=
;
ELSE
=
(
SHORT
)
(
(
)
)
;
;
RETURN
;
}
INT
(
)
{
INT
;
IF
(
)
=
;
ELSE
=
(
)
(
)
(
)
;
;
RETURN
;
}
FLOAT
(
)
{
UNION
{
;
FLOAT
;
INT
;
}
;
IF
(
)
=
;
ELSE
{
=
;
=
;
=
;
=
;
}
;
=
(
)
;
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
INT
,
;
=
;
DO
{
=
(
)
;
IF
(
)
BREAK
;
=
;
;
}
WHILE
(
(
)
)
;
=
;
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
INT
,
;
=
;
DO
{
=
(
)
;
IF
(
)
BREAK
;
=
;
;
}
WHILE
(
(
)
)
;
=
;
RETURN
;
}
FLOAT
(
)
{
RETURN
(
)
(
)
;
}
VOID
(
,
)
{
=
(
)
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
}
FLOAT
(
)
{
RETURN
(
)
(
)
;
}
FLOAT
(
)
{
RETURN
(
(
)
)
;
}
VOID
(
,
,
)
{
INT
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
,
VOID
,
INT
)
{
INT
;
FOR
(
=
;
;
)
(
(
)
)
=
(
)
;
}
VOID
(
,
,
INT
)
{
(
,
,
(
)
)
;
=
;
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
INT
)
{
VOID
;
IF
(
)
{
IF
(
)
(
,
)
;
IF
(
)
(
,
,
)
;
(
)
;
(
)
;
=
;
}
=
;
;
RETURN
;
}
VOID
(
,
VOID
,
INT
)
{
(
(
,
)
,
,
)
;
}
VOID
(
,
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
{
IF
(
)
(
(
)
(
,
)
,
,
)
;
ELSE
(
(
)
(
,
)
,
,
)
;
}
ELSE
(
(
)
(
,
)
,
,
)
;
}
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
CHAR
(
INT
)
{
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
IF
(
)
RETURN
;
=
;
}
VOID
(
INT
,
CHAR
)
{
INT
;
IF
(
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
}
VOID
(
CHAR
)
{
IF
(
)
(
,
)
;
=
;
}
INT
(
,
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
(
(
)
)
;
(
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
INT
;
IF
(
)
;
WHILE
(
)
{
=
;
WHILE
(
)
=
;
=
;
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
=
;
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
;
WHILE
(
)
=
;
=
;
IF
(
)
;
(
,
)
;
}
}
TYPEDEF
STRUCT
{
STRUCT
,
;
SHORT
;
SHORT
;
INT
;
}
;
;
INT
,
;
VOID
(
VOID
)
{
;
=
(
(
)
)
;
IF
(
)
(
,
)
;
=
;
=
;
;
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
)
;
}
VOID
(
INT
)
{
,
;
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
(
(
VOID
)
(
)
)
;
}
}
VOID
(
INT
,
INT
)
{
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
(
,
,
)
;
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
INT
)
{
RETURN
(
,
)
;
}
(
,
INT
,
INT
,
INT
)
{
(
)
;
INT
;
;
;
FLOAT
;
;
=
(
)
;
=
(
)
;
=
(
(
)
)
;
IF
(
)
=
;
(
,
,
)
;
=
(
)
;
=
;
=
(
(
)
)
;
=
;
=
(
(
)
)
(
)
;
=
(
)
;
=
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
(
)
)
;
=
(
(
)
)
;
;
=
(
(
,
)
)
;
;
RETURN
;
RETURN
;
}
STATIC
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
(
,
INT
,
INT
)
{
INT
;
;
INT
;
;
UNSIGNED
SHORT
;
IF
(
)
(
)
;
=
(
(
(
)
)
)
;
IF
(
)
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
;
=
(
,
)
;
FOR
(
=
,
=
;
;
)
;
=
(
)
;
RETURN
;
}
FLOAT
(
VOID
)
{
RETURN
(
(
)
)
(
)
;
}
FLOAT
(
VOID
)
{
RETURN
(
(
)
)
(
)
;
}
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
VOID
(
INT
,
CHAR
)
{
CHAR
;
IF
(
(
)
)
(
)
;
=
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
{
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
}
ELSE
{
(
)
;
}
(
)
;
}
VOID
(
INT
)
{
CHAR
;
INT
,
,
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
=
(
,
)
;
IF
(
)
(
,
)
;
}
ELSE
{
IF
(
)
{
(
)
;
=
;
}
}
}
IF
(
)
=
;
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
IF
(
)
{
EXTERN
INT
,
;
EXTERN
INT
;
(
,
,
)
;
=
;
=
;
=
;
}
DO
{
=
(
)
;
IF
(
)
(
(
,
)
)
;
}
WHILE
(
)
;
(
)
;
IF
(
)
=
(
)
;
(
)
;
IF
(
)
=
(
)
;
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
INT
,
,
,
,
;
=
;
=
;
=
;
=
;
=
;
;
;
(
,
,
,
,
,
)
;
}
}
VOID
(
VOID
)
{
}
__E__O__F__
STATIC
UNSIGNED
SHORT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
UNSIGNED
SHORT
)
{
=
;
}
VOID
(
UNSIGNED
SHORT
,
)
{
=
(
)
(
)
;
}
UNSIGNED
SHORT
(
UNSIGNED
SHORT
)
{
RETURN
;
}
UNSIGNED
SHORT
(
,
INT
)
{
UNSIGNED
SHORT
;
(
)
;
WHILE
(
)
=
(
)
(
)
;
RETURN
;
}
__E__O__F__
;
STATIC
(
CHAR
)
{
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
STATIC
(
CHAR
)
{
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
FLOAT
(
CHAR
)
{
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
(
)
;
}
CHAR
(
CHAR
)
{
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
)
{
;
INT
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
(
CHAR
,
CHAR
,
INT
)
{
;
IF
(
(
)
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
=
(
)
;
IF
(
)
{
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
)
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
=
(
(
)
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
RETURN
;
}
(
CHAR
,
CHAR
,
)
{
;
=
(
)
;
IF
(
)
{
RETURN
(
,
,
)
;
}
IF
(
(
)
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
IF
(
)
{
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
IF
(
(
,
)
)
RETURN
;
(
)
;
}
ELSE
{
IF
(
(
,
)
)
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
}
}
RETURN
;
}
}
ELSE
{
IF
(
)
{
(
)
;
=
;
}
}
IF
(
(
,
)
)
RETURN
;
=
;
IF
(
)
=
;
(
)
;
=
(
)
;
=
(
)
;
RETURN
;
}
(
CHAR
,
CHAR
)
{
RETURN
(
,
,
)
;
}
(
CHAR
,
CHAR
)
{
RETURN
(
,
,
)
;
}
(
CHAR
,
CHAR
,
INT
)
{
;
=
(
)
;
IF
(
)
{
RETURN
(
,
,
)
;
}
=
;
IF
(
)
=
;
(
)
;
=
(
)
;
=
(
)
;
=
;
RETURN
;
}
VOID
(
CHAR
,
FLOAT
)
{
CHAR
;
IF
(
(
INT
)
)
(
,
(
)
,
,
(
INT
)
)
;
ELSE
(
,
(
)
,
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
(
)
;
=
;
=
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
}
}
}
(
VOID
)
{
;
=
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
(
,
(
)
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
,
)
)
=
;
ELSE
IF
(
(
(
)
,
)
)
=
;
ELSE
{
(
)
;
RETURN
;
}
(
(
)
,
(
)
,
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
VOID
(
CHAR
)
{
;
CHAR
;
;
=
(
,
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
(
,
(
)
,
,
,
)
;
(
,
,
)
;
}
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
=
;
FOR
(
=
;
;
=
,
)
{
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
(
,
,
)
;
}
(
,
)
;
}
;
CHAR
(
INT
)
{
STATIC
CHAR
;
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
,
)
;
}
RETURN
;
}
CHAR
(
VOID
)
{
RETURN
(
)
;
}
CHAR
(
VOID
)
{
RETURN
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
;
INT
;
;
}
;
CHAR
;
;
;
;
TYPEDEF
STRUCT
{
STRUCT
;
CHAR
;
INT
;
CHAR
;
}
;
;
TYPEDEF
STRUCT
{
CHAR
;
;
STRUCT
;
}
;
;
;
INT
(
)
{
INT
;
INT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
CHAR
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
)
;
=
;
}
}
}
VOID
(
)
{
(
)
;
}
INT
(
INT
)
{
INT
;
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
(
)
;
}
INT
=
;
INT
(
CHAR
,
)
{
;
CHAR
;
;
INT
;
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
,
)
)
{
(
,
(
)
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
(
)
;
}
RETURN
;
}
}
FOR
(
=
;
;
=
)
{
IF
(
)
{
=
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
=
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
(
,
,
)
;
(
,
,
)
;
RETURN
;
}
}
ELSE
{
(
,
(
)
,
,
,
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
)
;
RETURN
(
)
;
}
}
(
,
)
;
=
;
RETURN
;
}
INT
(
CHAR
,
)
{
;
CHAR
;
;
INT
;
=
;
IF
(
(
,
)
(
,
,
)
)
{
(
,
(
)
,
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
)
;
RETURN
(
)
;
}
FOR
(
=
;
;
=
)
IF
(
)
BREAK
;
IF
(
)
{
=
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
=
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
(
,
,
)
;
(
,
,
)
;
RETURN
;
}
(
,
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
;
VOID
(
VOID
,
INT
,
)
{
INT
,
;
INT
;
;
INT
;
=
(
)
;
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
=
;
=
(
,
,
,
)
;
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
ELSE
(
,
)
;
}
IF
(
)
(
,
)
;
;
;
}
}
INT
(
CHAR
,
VOID
)
{
;
;
INT
;
=
;
=
(
,
)
;
IF
(
)
{
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
;
(
,
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
}
(
CHAR
)
{
;
INT
;
;
INT
;
;
;
;
UNSIGNED
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
(
)
,
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
(
,
,
,
)
;
=
(
(
VOID
)
,
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
(
,
)
;
=
(
)
;
=
(
)
;
}
=
(
(
)
)
;
(
,
)
;
=
;
=
;
=
;
(
,
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
;
;
CHAR
;
(
,
)
;
=
(
(
)
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
(
)
,
,
,
)
;
=
(
)
;
IF
(
)
CONTINUE
;
=
(
(
)
)
;
=
;
=
;
=
;
}
}
CHAR
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
=
(
)
;
IF
(
)
(
,
(
)
,
,
,
)
;
ELSE
(
,
(
)
,
,
,
)
;
IF
(
(
,
,
)
)
(
)
;
(
)
;
}
VOID
(
CHAR
)
{
;
IF
(
(
,
)
(
,
)
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
WHILE
(
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
=
;
(
)
;
=
;
}
IF
(
)
(
)
;
(
,
(
)
,
,
,
)
;
IF
(
(
,
)
(
)
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
IF
(
)
(
(
,
,
)
)
;
(
(
,
,
)
)
;
}
}
VOID
(
VOID
)
{
,
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
(
)
)
)
{
(
)
;
IF
(
(
(
)
)
)
{
=
;
(
)
;
(
)
;
RETURN
;
}
=
(
(
)
)
;
RETURN
;
}
=
;
}
=
(
(
)
)
;
=
;
=
;
=
(
(
)
)
;
=
(
)
;
=
(
(
)
)
;
}
CHAR
(
CHAR
,
INT
,
UNSIGNED
,
UNSIGNED
)
{
CHAR
;
INT
=
;
CHAR
=
;
=
(
,
,
)
;
WHILE
(
)
{
IF
(
(
)
)
;
=
(
,
)
;
}
(
)
;
IF
(
)
RETURN
;
;
=
;
=
(
(
CHAR
)
)
;
(
,
,
(
CHAR
)
)
;
=
(
,
,
)
;
=
;
WHILE
(
)
{
IF
(
(
)
)
{
=
(
)
;
(
)
;
;
}
=
(
,
)
;
}
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
=
;
CHAR
;
CHAR
=
;
CHAR
;
INT
;
IF
(
(
)
)
{
(
,
(
)
)
;
}
WHILE
(
(
=
(
)
)
)
{
CHAR
=
;
(
,
(
)
,
,
,
)
;
WHILE
(
)
{
IF
(
)
=
;
;
}
(
,
)
;
(
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
(
,
(
,
)
)
;
ELSE
(
,
)
;
(
)
;
}
(
)
;
}
(
)
;
}
;
}
VOID
(
VOID
)
{
;
;
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
}
(
)
;
FOR
(
=
;
;
=
)
(
,
,
)
;
}
CHAR
(
CHAR
)
{
;
CHAR
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
(
(
,
)
)
;
(
(
,
)
)
;
=
;
=
(
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
TYPEDEF
UNSIGNED
CHAR
;
TYPEDEF
UNSIGNED
SHORT
INT
;
TYPEDEF
UNSIGNED
INT
;
TYPEDEF
UNSIGNED
LONG
INT
;
TYPEDEF
STRUCT
{
;
;
UNSIGNED
CHAR
;
}
;
VOID
(
)
;
VOID
(
,
UNSIGNED
CHAR
,
UNSIGNED
INT
)
;
VOID
(
UNSIGNED
CHAR
,
)
;
STATIC
VOID
(
,
UNSIGNED
CHAR
)
;
STATIC
VOID
(
UNSIGNED
CHAR
,
,
UNSIGNED
INT
)
;
STATIC
VOID
(
,
UNSIGNED
CHAR
,
UNSIGNED
INT
)
;
STATIC
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
(
,
,
)
(
(
(
)
(
)
)
(
(
)
(
)
)
)
(
,
,
)
(
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
)
(
,
,
)
(
(
)
(
)
(
)
)
(
,
)
(
(
(
)
(
)
)
(
(
)
(
(
)
)
)
)
(
,
,
,
,
,
)
{
(
)
(
(
)
,
(
)
,
(
)
)
(
)
;
(
)
=
(
(
)
,
(
)
)
;
}
(
,
,
,
,
,
)
{
(
)
(
(
)
,
(
)
,
(
)
)
(
)
(
)
;
(
)
=
(
(
)
,
(
)
)
;
}
(
,
,
,
,
,
)
{
(
)
(
(
)
,
(
)
,
(
)
)
(
)
(
)
;
(
)
=
(
(
)
,
(
)
)
;
}
VOID
(
)
{
=
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
UNSIGNED
CHAR
,
UNSIGNED
INT
)
{
UNSIGNED
INT
,
,
;
=
(
UNSIGNED
INT
)
(
(
)
)
;
IF
(
(
(
(
)
)
)
(
(
)
)
)
;
(
(
)
)
;
=
;
IF
(
)
{
(
(
)
,
(
)
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
=
;
}
ELSE
=
;
(
(
)
,
(
)
,
)
;
}
VOID
(
UNSIGNED
CHAR
,
)
{
UNSIGNED
CHAR
;
UNSIGNED
INT
,
;
(
,
,
)
;
=
(
UNSIGNED
INT
)
(
(
)
)
;
=
(
)
(
)
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
(
)
,
,
(
)
)
;
}
STATIC
VOID
(
,
UNSIGNED
CHAR
)
{
=
,
=
,
=
,
=
,
;
(
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
;
;
;
;
(
(
)
,
,
(
)
)
;
}
STATIC
VOID
(
UNSIGNED
CHAR
,
,
UNSIGNED
INT
)
{
UNSIGNED
INT
,
;
FOR
(
=
,
=
;
;
,
)
{
=
(
UNSIGNED
CHAR
)
(
)
;
=
(
UNSIGNED
CHAR
)
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
(
(
)
)
;
}
}
STATIC
VOID
(
,
UNSIGNED
CHAR
,
UNSIGNED
INT
)
{
UNSIGNED
INT
,
;
FOR
(
=
,
=
;
;
,
)
=
(
(
)
)
(
(
(
)
)
)
(
(
(
)
)
)
(
(
(
)
)
)
;
}
UNSIGNED
(
VOID
,
INT
)
{
INT
;
UNSIGNED
;
;
(
)
;
(
,
(
UNSIGNED
CHAR
)
,
)
;
(
(
UNSIGNED
CHAR
)
,
)
;
=
;
RETURN
;
}
__E__O__F__
;
;
;
;
;
;
VOID
(
VOID
)
{
INT
;
=
(
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
(
,
)
,
)
;
}
VOID
(
INT
,
,
INT
,
)
{
;
;
(
,
,
(
)
)
;
(
,
)
;
(
,
,
)
;
(
,
,
,
)
;
}
VOID
(
INT
,
,
CHAR
,
)
{
;
STATIC
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
(
)
,
(
)
)
;
}
VOID
(
,
,
,
INT
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
}
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
}
RETURN
;
}
VOID
(
,
INT
,
)
{
;
;
;
UNSIGNED
,
;
IF
(
)
{
=
;
(
,
(
)
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
=
;
;
}
(
,
,
(
)
)
;
=
(
(
)
)
(
)
;
=
(
(
)
)
(
)
;
;
=
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
IF
(
)
(
,
,
)
;
ELSE
(
)
;
(
,
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
)
;
}
}
(
,
)
{
UNSIGNED
,
;
UNSIGNED
,
;
INT
;
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
(
)
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
{
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
)
;
}
IF
(
)
{
IF
(
)
(
,
(
)
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
IF
(
)
(
,
(
)
,
,
)
;
}
IF
(
)
=
;
=
;
=
;
=
;
IF
(
)
{
;
}
=
;
RETURN
;
}
__E__O__F__
TYPEDEF
STRUCT
{
;
;
,
,
;
FLOAT
;
;
;
INT
;
;
;
}
;
;
;
FLOAT
=
;
FLOAT
=
;
FLOAT
=
;
FLOAT
=
;
FLOAT
=
;
FLOAT
=
;
FLOAT
=
;
FLOAT
=
;
FLOAT
=
;
VOID
(
,
,
,
FLOAT
)
{
FLOAT
;
FLOAT
;
INT
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
FLOAT
;
INT
;
;
;
INT
,
;
;
;
FLOAT
;
=
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
=
(
,
,
,
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
BREAK
;
IF
(
)
{
=
;
;
}
;
IF
(
)
{
(
,
)
;
BREAK
;
}
(
,
)
;
;
FLOAT
;
IF
(
)
{
(
,
)
;
(
)
;
=
(
,
)
;
(
,
,
,
)
;
;
;
;
}
ELSE
IF
(
)
{
(
,
)
;
(
)
;
=
(
,
)
;
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
)
;
BREAK
;
}
FOR
(
=
;
;
)
{
(
,
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
{
}
ELSE
{
IF
(
)
{
(
,
)
;
BREAK
;
}
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
{
(
,
)
;
BREAK
;
}
}
IF
(
)
{
(
,
)
;
}
}
VOID
(
VOID
)
{
,
;
,
;
;
FLOAT
,
;
,
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
;
=
(
,
,
,
)
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
;
=
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
}
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
,
)
;
(
,
)
;
=
(
)
(
)
(
)
(
)
;
=
(
)
(
)
(
)
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
RETURN
;
}
=
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
,
,
;
FLOAT
;
FLOAT
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
=
;
IF
(
(
(
)
)
(
)
)
{
=
;
=
;
;
}
IF
(
)
;
=
;
IF
(
)
{
=
;
}
;
=
;
=
;
=
;
}
VOID
(
,
FLOAT
,
FLOAT
)
{
INT
;
FLOAT
,
,
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
}
VOID
(
,
FLOAT
,
FLOAT
)
{
INT
;
FLOAT
,
,
,
=
;
IF
(
)
=
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
}
VOID
(
)
{
;
FLOAT
;
IF
(
(
)
)
{
IF
(
(
)
(
)
)
=
;
ELSE
IF
(
(
)
(
)
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
IF
(
)
{
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
=
;
IF
(
(
)
(
)
)
;
(
,
,
,
)
;
}
IF
(
)
{
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
;
;
FOR
(
=
;
;
)
=
;
IF
(
)
;
ELSE
;
(
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
,
;
;
FLOAT
;
FLOAT
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
IF
(
)
{
(
,
,
)
;
IF
(
)
{
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
{
;
IF
(
)
=
;
}
}
(
)
;
}
ELSE
IF
(
)
{
=
;
(
,
,
)
;
IF
(
)
=
;
ELSE
;
IF
(
)
RETURN
;
(
)
;
}
ELSE
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
(
)
;
}
}
VOID
(
VOID
)
{
;
INT
;
;
INT
;
INT
;
=
;
=
;
=
;
IF
(
)
{
;
=
;
}
ELSE
{
=
(
,
,
,
)
;
=
;
=
;
=
;
IF
(
(
)
)
{
=
;
;
}
ELSE
{
=
;
IF
(
)
{
(
)
;
=
;
}
IF
(
(
)
)
{
;
IF
(
)
{
;
IF
(
)
=
;
ELSE
=
;
}
}
}
IF
(
)
=
;
IF
(
)
{
=
;
;
}
}
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
(
)
;
IF
(
)
=
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
{
RETURN
;
}
IF
(
)
{
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
RETURN
;
;
=
;
;
IF
(
)
=
;
}
VOID
(
VOID
)
{
;
INT
;
;
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
(
,
,
,
)
;
=
(
,
,
,
)
;
IF
(
(
)
(
)
)
=
;
IF
(
)
RETURN
;
(
,
,
,
)
;
;
=
(
)
;
IF
(
(
)
)
RETURN
;
;
=
(
)
;
IF
(
)
RETURN
;
(
,
,
)
;
=
;
;
=
;
}
VOID
(
)
{
FLOAT
,
,
,
,
;
FLOAT
,
,
;
INT
;
;
FLOAT
,
;
;
FLOAT
;
;
;
=
;
=
(
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
=
;
=
;
=
;
;
=
;
IF
(
)
=
;
;
(
,
,
)
;
}
=
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
(
,
,
,
)
;
(
,
)
;
}
ELSE
{
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
RETURN
;
}
=
;
IF
(
)
{
;
}
ELSE
IF
(
(
)
)
{
;
}
ELSE
{
IF
(
)
{
=
;
=
(
,
,
,
)
;
IF
(
)
;
}
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
VOID
(
VOID
)
{
FLOAT
;
IF
(
)
RETURN
;
=
(
)
;
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
(
,
,
)
;
}
}
(
VOID
)
{
;
,
;
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
=
=
;
=
(
,
,
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
,
,
;
SHORT
;
STATIC
INT
=
{
,
,
,
,
,
,
,
}
;
FOR
(
=
;
;
)
=
(
INT
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
}
(
,
)
;
FOR
(
=
;
;
)
{
=
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
;
IF
(
(
)
)
RETURN
;
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
SHORT
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
{
=
;
=
;
=
;
(
,
)
;
RETURN
;
}
}
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
SHORT
;
STATIC
INT
=
{
,
,
}
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
{
=
;
=
;
=
;
(
,
)
;
RETURN
;
}
}
}
}
(
)
;
}
VOID
(
VOID
)
{
SHORT
;
INT
;
IF
(
)
{
=
(
)
;
=
;
=
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
=
(
)
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
(
,
,
,
)
;
}
VOID
(
)
{
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
}
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
{
INT
;
=
;
IF
(
)
=
;
IF
(
)
{
(
)
;
=
;
}
ELSE
;
}
IF
(
)
{
}
ELSE
IF
(
)
{
;
IF
(
)
{
(
)
;
=
;
}
(
)
;
}
ELSE
{
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
{
;
(
,
)
;
IF
(
)
=
;
;
(
,
,
,
)
;
(
)
;
}
}
(
)
;
(
)
;
}
__E__O__F__
;
EXTERN
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
=
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
,
;
FLOAT
,
,
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
(
CHAR
)
{
;
CHAR
;
IF
(
)
{
(
,
(
)
,
,
)
;
=
(
,
)
;
}
ELSE
=
(
,
)
;
RETURN
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
;
=
(
)
;
IF
(
)
{
=
=
;
RETURN
;
}
=
;
=
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
CHAR
)
{
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
(
)
;
IF
(
(
(
)
(
)
)
)
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
IF
(
(
(
)
(
)
)
)
(
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
(
)
;
IF
(
(
(
)
(
)
)
)
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
IF
(
(
(
)
(
)
)
)
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
CHAR
)
{
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
(
)
(
)
)
)
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
(
)
,
)
;
(
,
)
;
(
(
)
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
)
;
IF
(
(
(
)
(
)
)
)
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
UNION
{
UNSIGNED
;
;
}
;
IF
(
(
UNSIGNED
)
)
(
,
)
;
(
)
;
=
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
}
EXTERN
UNSIGNED
;
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
,
INT
,
)
{
UNSIGNED
;
UNSIGNED
CHAR
;
INT
,
,
;
;
INT
,
;
FLOAT
;
INT
;
FLOAT
;
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
IF
(
)
{
UNSIGNED
;
FOR
(
=
;
;
)
{
=
(
INT
)
(
)
;
IF
(
)
BREAK
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
}
}
(
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
UNSIGNED
CHAR
;
FOR
(
=
;
;
)
{
=
(
INT
)
(
)
;
IF
(
)
BREAK
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
}
}
(
,
,
,
,
,
,
,
,
)
;
}
(
,
,
)
;
(
,
,
)
;
IF
(
(
)
(
)
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
IF
(
(
)
(
)
)
(
)
;
}
__E__O__F__
;
INT
;
INT
;
STATIC
;
STATIC
UNSIGNED
CHAR
;
;
UNSIGNED
;
(
,
INT
,
INT
,
,
)
;
(
UNSIGNED
,
INT
,
INT
,
)
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
VOID
(
UNSIGNED
)
{
INT
;
UNSIGNED
CHAR
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
(
,
,
,
,
,
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
}
(
)
;
(
)
;
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
)
{
STATIC
INT
=
{
,
}
;
IF
(
)
{
(
,
,
)
;
=
;
}
}
VOID
(
INT
)
{
EXTERN
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
(
,
)
;
}
VOID
(
,
INT
)
{
(
)
;
IF
(
)
{
IF
(
)
RETURN
;
}
ELSE
{
IF
(
)
RETURN
;
}
(
)
;
}
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
(
(
)
(
)
)
TYPEDEF
STRUCT
{
CHAR
;
INT
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
}
;
(
(
)
(
)
)
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
}
;
(
(
)
(
)
)
VOID
(
CHAR
)
{
INT
;
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
(
)
;
(
,
,
)
;
(
,
,
)
;
}
}
}
VOID
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
}
VOID
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
CONST
CHAR
=
{
,
}
;
(
,
)
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
;
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
(
,
,
,
,
,
)
;
}
(
,
,
)
;
}
INT
;
;
;
INT
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
INT
,
;
INT
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
}
IF
(
)
{
=
;
=
=
;
}
}
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
;
RETURN
;
}
RETURN
;
}
INT
;
VOID
(
VOID
)
{
;
(
)
;
(
,
,
,
,
)
;
=
;
}
VOID
(
CHAR
,
,
,
INT
,
INT
)
{
;
;
INT
,
;
INT
;
INT
,
;
,
;
=
;
=
;
=
(
,
(
VOID
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
(
)
(
)
)
;
=
;
=
;
IF
(
)
{
=
(
)
;
(
,
(
)
,
)
;
}
IF
(
)
=
;
IF
(
)
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
{
=
;
=
;
}
ELSE
=
;
WHILE
(
)
=
;
}
}
IF
(
(
)
)
{
(
,
,
)
;
(
)
;
=
;
}
(
)
;
}
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
CHAR
,
;
}
;
VOID
(
CHAR
,
,
INT
,
INT
)
{
INT
,
,
;
;
INT
,
;
;
;
INT
;
;
;
;
=
;
=
(
,
(
VOID
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
(
SHORT
)
)
)
;
;
=
;
=
;
=
(
(
(
SHORT
)
)
)
;
;
=
;
=
(
(
(
SHORT
)
)
)
;
;
=
(
(
(
SHORT
)
)
)
;
;
=
(
(
(
SHORT
)
)
)
;
;
=
(
(
(
SHORT
)
)
)
;
;
=
;
=
;
IF
(
)
(
,
)
;
IF
(
(
)
)
(
,
)
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
=
;
IF
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
UNSIGNED
CHAR
,
,
,
;
SWITCH
(
)
{
CASE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
}
}
}
}
ELSE
IF
(
)
{
UNSIGNED
CHAR
,
,
,
,
,
,
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
IF
(
)
;
ELSE
GOTO
;
=
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
SWITCH
(
)
{
CASE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
}
;
IF
(
)
{
=
;
IF
(
)
;
ELSE
GOTO
;
=
;
}
}
}
}
;
}
}
(
)
;
}
TYPEDEF
STRUCT
{
SHORT
,
;
}
;
(
)
(
,
,
)
{
IF
(
)
{
=
;
=
(
)
,
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
=
;
}
VOID
(
,
INT
,
INT
)
{
=
;
;
INT
=
,
=
;
INT
=
;
INT
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
IF
(
(
)
)
{
=
;
BREAK
;
}
}
IF
(
(
)
(
)
)
{
RETURN
;
}
=
,
=
;
=
(
)
;
WHILE
(
)
{
INT
=
,
=
;
INT
=
;
=
;
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
=
;
}
}
VOID
(
UNSIGNED
,
INT
,
INT
,
UNSIGNED
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
,
;
UNSIGNED
,
;
UNSIGNED
,
;
,
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
;
}
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
;
}
FOR
(
=
;
;
,
)
{
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
(
)
(
)
)
=
(
)
;
(
(
)
(
)
)
=
(
)
;
(
(
)
(
)
)
=
(
)
;
(
(
)
(
)
)
=
(
)
;
}
}
}
VOID
(
UNSIGNED
,
INT
,
INT
,
)
{
IF
(
)
{
INT
,
;
;
=
(
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
}
}
ELSE
{
INT
,
;
;
=
(
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
}
}
}
VOID
(
,
INT
,
INT
)
{
INT
,
;
;
;
;
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
}
VOID
(
UNSIGNED
CHAR
,
UNSIGNED
CHAR
,
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
{
UNSIGNED
INT
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
(
)
;
=
;
;
}
}
INT
,
;
;
(
UNSIGNED
,
INT
,
INT
,
)
{
INT
;
UNSIGNED
;
UNSIGNED
CHAR
;
INT
,
;
INT
,
;
;
INT
;
=
;
FOR
(
=
;
;
)
;
IF
(
)
;
FOR
(
=
;
;
)
;
IF
(
)
;
IF
(
)
{
(
INT
)
;
(
INT
)
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
IF
(
(
)
)
(
,
)
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
(
,
,
)
;
=
;
}
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
,
,
,
)
;
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
(
,
(
UNSIGNED
CHAR
)
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
GOTO
;
}
(
,
,
)
;
}
ELSE
(
,
,
,
,
,
)
;
(
,
,
,
)
;
IF
(
(
)
)
{
=
;
(
,
(
UNSIGNED
CHAR
)
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
IF
(
)
{
INT
;
=
;
WHILE
(
)
{
(
(
)
,
,
)
;
;
;
IF
(
)
=
;
IF
(
)
=
;
;
IF
(
)
{
=
;
(
,
(
UNSIGNED
CHAR
)
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
}
}
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
RETURN
(
)
;
}
(
,
INT
,
INT
,
,
)
{
UNSIGNED
;
INT
,
;
INT
;
=
;
IF
(
(
)
)
(
,
)
;
IF
(
)
{
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
(
)
)
=
(
(
)
)
;
(
(
)
)
=
(
(
)
)
;
(
(
)
)
=
(
(
)
)
;
}
}
RETURN
(
,
,
,
)
;
}
}
(
CHAR
,
,
INT
,
INT
,
,
INT
)
{
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
BREAK
;
}
IF
(
)
{
IF
(
)
(
,
)
;
;
}
=
;
IF
(
(
)
(
)
)
(
,
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
IF
(
)
(
,
,
)
;
IF
(
)
{
INT
,
;
INT
,
,
;
INT
;
=
(
,
,
,
)
;
IF
(
)
GOTO
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
,
)
(
)
=
;
=
;
=
;
=
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
}
ELSE
{
=
;
=
(
)
;
(
)
;
IF
(
)
=
(
,
,
,
(
)
,
)
;
ELSE
=
(
(
UNSIGNED
)
,
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
,
,
;
;
(
,
(
VOID
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
(
)
,
,
,
,
)
;
(
(
VOID
)
)
;
RETURN
;
}
(
CHAR
,
)
{
;
INT
,
;
,
;
INT
,
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
{
=
;
RETURN
;
}
}
=
;
=
;
IF
(
(
,
)
)
{
(
,
,
,
,
)
;
IF
(
)
RETURN
;
=
(
,
,
,
,
,
)
;
}
ELSE
IF
(
(
,
)
)
{
=
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
,
,
,
)
;
IF
(
)
RETURN
;
=
(
,
,
,
,
,
)
;
}
ELSE
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
RETURN
;
}
STRUCT
(
CHAR
)
{
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
)
;
(
,
,
(
)
)
;
}
}
INT
(
VOID
)
{
INT
;
INT
,
,
;
UNSIGNED
;
,
;
INT
,
;
(
,
,
,
,
)
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
(
)
(
)
(
)
(
)
;
=
(
)
;
}
(
)
;
(
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
FLOAT
=
;
=
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
=
;
(
)
;
IF
(
)
{
(
,
)
;
IF
(
)
(
,
)
;
}
IF
(
(
)
)
{
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
}
ELSE
{
FLOAT
;
=
(
(
)
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
)
;
(
,
,
(
)
)
;
}
}
__E__O__F__
INT
;
VOID
(
)
{
INT
,
;
FLOAT
;
;
FLOAT
;
=
;
(
,
,
)
;
IF
(
(
)
)
{
(
,
,
,
,
)
;
RETURN
;
}
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
=
;
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
=
(
)
(
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
FOR
(
=
;
;
,
)
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
,
INT
,
)
{
;
FLOAT
;
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
,
)
(
,
,
)
;
}
;
;
;
INT
(
,
,
)
{
FLOAT
,
,
;
INT
;
;
;
;
INT
,
,
,
;
INT
;
;
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
(
)
)
RETURN
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
(
)
)
CONTINUE
;
=
;
=
(
,
)
;
=
(
,
)
;
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
;
;
=
;
(
,
)
;
IF
(
)
{
;
(
(
(
)
)
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
(
)
;
(
)
;
(
)
;
(
(
)
)
(
(
)
)
;
}
}
RETURN
;
}
RETURN
(
,
,
)
;
}
VOID
(
,
)
{
;
FLOAT
;
INT
;
;
FLOAT
;
;
FLOAT
;
IF
(
)
{
=
=
=
;
RETURN
;
}
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
=
;
=
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
=
(
)
;
(
)
;
IF
(
)
{
(
,
,
,
)
;
}
}
(
,
,
)
;
}
STATIC
FLOAT
;
VOID
(
)
{
INT
;
INT
,
;
FLOAT
,
,
;
,
;
INT
,
;
INT
;
INT
,
;
;
;
FLOAT
;
FLOAT
,
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
;
=
(
,
)
;
(
)
;
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
;
}
=
(
,
)
;
=
(
,
)
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
;
IF
(
)
=
;
FOR
(
=
,
=
;
;
,
,
)
{
=
(
)
;
IF
(
)
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
}
}
}
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
}
}
VOID
(
,
,
INT
)
{
INT
,
;
INT
,
,
,
,
;
INT
,
,
;
;
FLOAT
;
INT
;
FLOAT
;
;
INT
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
)
;
=
;
IF
(
(
(
)
)
)
(
,
)
;
IF
(
)
{
INT
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
{
=
;
}
GOTO
;
}
FOR
(
=
;
;
)
;
=
;
IF
(
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
=
;
IF
(
)
{
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
}
}
ELSE
{
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
}
}
;
}
}
ELSE
{
INT
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
=
;
IF
(
)
{
FOR
(
=
;
;
,
)
{
;
;
;
}
}
ELSE
{
FOR
(
=
;
;
,
)
{
;
;
;
}
}
;
}
}
IF
(
)
(
)
;
(
)
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
;
IF
(
)
{
FLOAT
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
;
;
}
}
}
ELSE
{
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
;
IF
(
)
{
FLOAT
=
;
=
;
=
;
=
;
=
;
}
SWITCH
(
)
{
CASE
CASE
=
;
=
=
;
BREAK
;
CASE
=
(
(
)
)
;
;
;
;
BREAK
;
CASE
DEFAULT
=
=
=
;
=
;
BREAK
;
}
=
;
=
;
=
;
=
;
;
;
}
}
}
}
__E__O__F__
FLOAT
=
{
}
;
TYPEDEF
FLOAT
;
STATIC
;
;
FLOAT
;
FLOAT
=
;
FLOAT
=
;
VOID
(
INT
,
,
,
,
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
INT
;
IF
(
(
)
)
{
FOR
(
=
;
;
,
,
,
)
{
FLOAT
=
;
=
;
=
;
=
;
}
}
ELSE
{
FOR
(
=
;
;
,
,
,
)
{
=
;
=
;
=
;
}
}
}
VOID
(
,
FLOAT
)
{
FLOAT
;
,
;
,
,
;
INT
;
INT
;
FLOAT
;
FLOAT
;
,
,
;
,
;
INT
;
INT
;
FLOAT
;
=
(
)
(
(
)
)
;
=
=
;
=
(
)
(
(
)
)
;
=
;
=
(
INT
)
(
(
)
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
(
)
;
=
;
(
,
,
)
;
(
,
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
(
,
,
,
,
,
,
,
)
;
IF
(
)
{
FLOAT
;
(
)
;
(
,
,
,
)
;
IF
(
(
)
)
{
(
,
,
,
)
;
}
ELSE
{
(
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
FLOAT
=
;
=
;
=
;
=
;
}
}
IF
(
)
(
,
)
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
(
)
;
}
ELSE
{
(
)
;
}
IF
(
(
)
)
{
DO
{
=
;
;
(
)
;
}
WHILE
(
)
;
}
ELSE
{
DO
{
(
(
(
FLOAT
)
)
,
(
(
FLOAT
)
)
)
;
=
;
;
(
)
;
}
WHILE
(
)
;
}
(
)
;
}
IF
(
)
(
)
;
}
ELSE
{
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
(
)
;
}
ELSE
{
(
)
;
}
IF
(
(
)
)
{
DO
{
=
;
;
(
,
,
,
)
;
(
)
;
}
WHILE
(
)
;
}
ELSE
{
DO
{
(
(
(
FLOAT
)
)
,
(
(
FLOAT
)
)
)
;
=
;
;
=
;
(
,
,
,
)
;
(
)
;
}
WHILE
(
)
;
}
(
)
;
}
}
IF
(
(
)
)
(
)
;
}
EXTERN
;
VOID
(
,
INT
)
{
;
INT
;
;
FLOAT
,
;
INT
;
;
=
;
=
(
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
(
)
;
}
ELSE
(
)
;
DO
{
(
,
,
(
)
)
;
(
)
;
(
)
;
=
;
(
)
;
;
}
WHILE
(
)
;
(
)
;
}
}
STATIC
(
,
)
{
INT
;
,
;
;
;
,
,
,
;
,
;
;
=
(
)
;
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
=
;
}
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
=
;
}
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
}
}
FOR
(
=
;
;
)
{
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
}
(
,
)
;
=
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
}
{
INT
,
,
=
;
FOR
(
=
;
;
)
{
INT
=
;
FOR
(
=
;
;
)
{
FLOAT
=
(
,
)
;
IF
(
(
)
)
{
(
)
;
}
}
;
}
IF
(
)
{
RETURN
;
}
RETURN
;
}
}
VOID
(
)
{
INT
;
;
FLOAT
;
;
;
IF
(
(
)
)
{
IF
(
(
,
)
)
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
}
=
(
)
;
IF
(
(
)
)
{
IF
(
(
)
(
)
(
)
)
{
FOR
(
=
;
;
)
=
;
}
ELSE
IF
(
(
)
)
{
(
)
;
IF
(
)
{
=
;
IF
(
(
)
)
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
}
ELSE
IF
(
)
{
=
;
=
;
}
}
ELSE
IF
(
(
)
)
{
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
IF
(
)
{
=
;
}
}
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
=
;
}
ELSE
{
(
,
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
}
IF
(
)
{
FLOAT
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
}
}
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
=
;
=
;
=
;
}
}
IF
(
)
{
FLOAT
;
FLOAT
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
;
}
}
IF
(
)
{
=
;
=
;
=
;
}
=
(
(
INT
)
(
(
)
)
)
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
(
)
;
;
IF
(
)
(
,
(
)
)
;
IF
(
(
)
(
)
)
{
EXTERN
VOID
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
,
(
FLOAT
)
,
,
)
;
(
)
;
(
)
;
}
(
)
;
=
;
(
)
;
=
;
IF
(
)
=
;
ELSE
{
IF
(
)
=
;
ELSE
{
=
;
IF
(
)
=
;
}
}
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
}
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
=
;
=
;
}
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
=
;
=
;
}
IF
(
)
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
)
;
}
(
)
;
(
)
;
(
,
)
;
(
)
;
IF
(
(
)
(
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
}
IF
(
)
(
,
)
;
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
(
,
,
,
)
;
}
__E__O__F__
;
INT
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
(
,
)
;
;
;
INT
;
;
INT
;
(
,
)
{
;
FLOAT
;
;
IF
(
)
(
,
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
(
,
)
{
STATIC
;
INT
;
;
INT
;
=
(
)
;
=
;
IF
(
)
{
WHILE
(
)
{
=
;
;
}
RETURN
;
}
DO
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
;
WHILE
(
)
{
=
;
;
}
}
WHILE
(
)
;
RETURN
;
}
(
INT
,
)
{
IF
(
)
RETURN
;
RETURN
(
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
=
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
,
)
;
;
}
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
(
CHAR
,
)
{
;
UNSIGNED
;
INT
;
IF
(
)
(
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
,
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
BREAK
;
}
IF
(
)
{
IF
(
)
(
,
)
;
;
}
(
,
)
;
=
(
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
(
,
,
(
)
)
;
RETURN
;
}
=
;
SWITCH
(
(
(
UNSIGNED
)
)
)
{
CASE
=
(
)
;
(
,
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
=
(
)
;
(
)
;
RETURN
;
}
;
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
FLOAT
(
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
(
)
(
)
(
)
;
}
RETURN
(
)
;
}
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
}
}
VOID
(
)
{
;
,
;
INT
,
,
;
CHAR
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
(
,
(
)
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
}
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
=
)
;
}
}
VOID
(
)
{
FLOAT
,
,
;
INT
,
,
;
;
;
INT
,
;
=
=
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
}
}
VOID
(
)
;
VOID
(
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
)
{
;
;
INT
,
,
;
INT
,
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
=
;
(
)
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
(
)
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
}
IF
(
(
(
)
)
)
(
)
;
IF
(
(
)
)
(
)
;
}
(
)
;
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
;
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
(
(
)
)
;
}
}
(
,
)
;
}
VOID
(
)
{
;
;
INT
,
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
;
FOR
(
=
;
;
=
)
;
}
}
}
}
VOID
(
)
{
INT
,
,
;
SHORT
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
,
)
;
=
;
}
}
VOID
(
)
{
INT
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
=
(
)
;
=
(
)
;
=
;
}
}
VOID
(
,
VOID
)
{
INT
;
;
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
)
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
(
,
,
)
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
=
;
=
;
}
}
VOID
(
,
VOID
)
{
INT
,
;
,
;
,
;
,
;
,
;
INT
,
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
)
;
=
(
(
)
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
IF
(
)
(
,
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
FOR
(
=
;
;
)
{
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
(
,
,
(
)
)
;
}
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
FOR
(
=
;
;
)
=
(
)
;
(
(
CHAR
)
,
(
CHAR
)
,
)
;
FOR
(
=
;
;
)
{
=
(
(
CHAR
)
,
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
VOID
)
{
,
;
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
=
(
,
)
;
}
=
;
}
VOID
(
CHAR
)
{
CHAR
;
;
;
=
;
(
,
(
)
,
,
)
;
=
(
,
,
)
;
IF
(
(
,
)
)
(
)
;
=
(
,
)
;
=
;
}
STRUCT
(
CHAR
)
{
;
INT
;
;
;
=
(
,
)
;
IF
(
)
{
=
;
IF
(
)
{
=
(
)
;
FOR
(
=
;
;
)
=
(
,
)
;
}
ELSE
IF
(
)
{
=
(
)
;
FOR
(
=
;
;
)
=
(
(
CHAR
)
,
)
;
=
;
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
=
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
}
}
(
)
;
}
VOID
(
)
{
(
)
;
(
,
,
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
}
}
__E__O__F__
VOID
(
VOID
)
;
;
;
;
FLOAT
,
;
;
;
;
;
;
;
;
INT
;
INT
;
INT
,
;
FLOAT
;
VOID
(
VOID
)
;
;
;
;
;
FLOAT
;
FLOAT
;
;
INT
,
,
,
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
(
,
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
VOID
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
)
{
FLOAT
=
;
;
;
FLOAT
,
;
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
;
=
;
IF
(
)
{
,
,
;
(
,
,
,
)
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
=
;
IF
(
)
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
=
=
=
;
ELSE
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
(
)
,
(
)
,
)
;
(
)
;
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
(
)
,
(
)
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
}
ELSE
{
=
;
IF
(
)
{
(
)
;
CONTINUE
;
}
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
}
}
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
{
(
)
;
}
ELSE
{
=
;
IF
(
)
{
(
)
;
CONTINUE
;
}
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
}
}
(
)
;
}
VOID
(
INT
,
CONST
,
CONST
UNSIGNED
)
{
CONST
;
INT
;
,
;
FLOAT
;
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
,
=
;
;
,
)
{
=
(
)
(
)
(
)
;
IF
(
)
=
;
ELSE
=
;
(
INT
)
=
;
=
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
}
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
INT
;
UNSIGNED
CHAR
;
CONST
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
(
INT
)
=
;
=
;
(
)
;
(
)
;
}
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
}
ELSE
{
(
,
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
}
INT
(
)
{
INT
,
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
(
)
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
(
,
)
;
(
,
,
,
)
;
IF
(
(
)
)
{
=
;
=
;
=
(
,
)
;
=
=
;
IF
(
)
{
;
(
,
)
;
;
=
(
,
)
;
IF
(
(
)
(
)
)
=
;
}
ELSE
{
;
(
,
)
;
;
=
(
,
)
;
IF
(
(
)
(
)
)
=
;
}
}
FOR
(
=
;
;
)
=
;
=
;
=
;
IF
(
)
{
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
}
}
VOID
(
,
,
,
)
{
,
,
,
;
=
(
)
;
=
;
=
;
=
;
(
)
;
(
)
;
(
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
INT
,
,
,
,
,
;
=
(
)
;
=
(
(
)
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
(
,
,
,
)
;
=
(
FLOAT
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
STATIC
INT
;
IF
(
)
(
)
;
;
IF
(
)
{
=
;
=
;
(
)
;
}
ELSE
{
=
;
=
;
(
)
;
}
}
ELSE
{
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
(
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
(
,
)
;
IF
(
)
{
=
;
=
;
}
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
,
,
,
,
,
)
;
}
}
VOID
(
VOID
)
{
(
,
,
,
)
;
(
)
;
(
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
VOID
)
{
;
;
IF
(
)
{
(
,
)
;
(
,
)
;
=
;
}
=
;
=
;
=
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
}
ELSE
{
IF
(
)
{
(
,
)
;
=
;
(
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
RETURN
;
}
ELSE
IF
(
)
{
(
,
)
;
=
;
(
,
)
;
}
IF
(
(
=
(
,
,
,
)
)
)
{
(
,
)
;
RETURN
;
}
}
RETURN
;
}
INT
(
VOID
,
VOID
)
{
CHAR
;
CHAR
;
INT
;
INT
;
EXTERN
FLOAT
;
FOR
(
=
;
;
)
{
;
}
(
,
)
;
(
)
;
(
)
;
IF
(
(
)
)
{
(
)
;
(
,
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
=
;
IF
(
(
)
)
{
(
)
;
(
,
)
;
RETURN
;
}
(
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
IF
(
(
,
)
)
{
IF
(
(
,
)
)
=
;
ELSE
=
;
}
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
=
;
IF
(
(
)
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
IF
(
)
{
(
,
)
;
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
;
}
IF
(
)
(
,
)
;
ELSE
(
,
)
;
IF
(
(
,
)
(
,
)
)
{
(
,
)
;
=
(
VOID
)
(
)
;
=
(
VOID
)
(
)
;
}
ELSE
{
(
,
)
;
}
IF
(
(
,
)
)
{
=
(
(
)
(
INT
)
)
(
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
}
IF
(
(
,
)
)
{
IF
(
)
{
=
(
VOID
(
)
(
,
)
)
(
)
;
=
(
VOID
(
)
(
,
CONST
)
)
(
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
}
IF
(
(
,
)
(
,
)
)
{
IF
(
)
{
(
,
)
;
=
(
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
INT
,
CONST
VOID
)
)
(
)
;
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
}
IF
(
(
,
)
)
{
IF
(
)
{
(
,
)
;
=
(
VOID
)
(
)
;
=
(
VOID
)
(
)
;
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
FLOAT
)
{
=
;
IF
(
)
{
;
=
(
,
,
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
}
IF
(
)
{
=
;
IF
(
(
)
)
{
CHAR
;
FLOAT
;
=
(
(
)
)
;
(
,
(
)
,
,
)
;
(
)
;
(
,
(
)
,
,
)
;
(
)
;
}
}
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
(
,
)
)
(
)
;
ELSE
(
)
;
}
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
(
)
;
(
)
;
}
UNSIGNED
;
VOID
(
CONST
UNSIGNED
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
(
)
;
=
;
}
}
(
)
;
(
,
,
,
)
;
(
)
;
(
,
,
,
)
;
}
VOID
(
)
{
INT
;
FLOAT
,
,
;
;
,
;
,
;
,
;
=
;
=
;
=
;
=
;
=
;
=
;
=
=
;
=
=
;
=
=
;
IF
(
(
)
)
RETURN
;
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
,
(
)
)
;
(
,
,
)
;
(
,
,
)
;
}
(
)
;
(
)
;
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
;
;
;
(
,
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
(
)
;
(
)
;
(
(
)
)
;
(
(
)
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
)
;
STRUCT
(
CHAR
)
;
STRUCT
(
CHAR
)
;
VOID
(
CHAR
,
FLOAT
,
)
;
VOID
(
VOID
)
;
VOID
(
)
;
STRUCT
(
CHAR
)
;
VOID
(
INT
,
INT
,
CHAR
)
;
VOID
(
INT
,
INT
,
INT
)
;
VOID
(
INT
,
INT
,
INT
,
INT
,
CHAR
)
;
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
;
VOID
(
VOID
)
;
(
)
{
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
__E__O__F__
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
}
;
VOID
(
VOID
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
=
(
,
(
)
,
,
,
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
=
(
,
(
)
,
,
,
,
)
;
}
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
CHAR
,
;
}
;
VOID
(
VOID
)
{
;
CHAR
;
CHAR
;
INT
,
,
;
;
(
,
(
)
,
,
(
)
)
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
(
)
,
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
BREAK
;
(
)
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
=
(
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
IF
(
)
{
FLOAT
;
=
;
=
;
=
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
(
)
;
}
}
}
__E__O__F__
STATIC
;
;
INT
;
INT
;
TYPEDEF
STRUCT
{
INT
;
INT
;
;
INT
;
;
}
;
STATIC
;
STATIC
VOID
(
VOID
)
;
STATIC
VOID
(
)
;
STATIC
(
INT
,
INT
,
INT
,
INT
)
;
EXTERN
VOID
(
)
;
EXTERN
VOID
(
,
,
INT
)
;
(
)
{
INT
;
IF
(
)
RETURN
;
=
;
WHILE
(
)
{
=
;
;
}
RETURN
;
}
(
)
{
INT
;
FLOAT
,
;
STATIC
;
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
(
)
;
=
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
}
RETURN
;
}
VOID
(
)
{
INT
;
FLOAT
;
=
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
=
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
;
FLOAT
;
=
;
=
(
(
)
(
INT
)
(
)
)
;
IF
(
)
=
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
(
)
,
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
IF
(
)
RETURN
;
(
)
;
(
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
;
FOR
(
=
;
;
=
)
{
=
;
FOR
(
;
;
=
)
{
FOR
(
=
;
;
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
}
}
}
(
)
;
(
)
;
}
VOID
(
,
FLOAT
,
FLOAT
)
{
IF
(
)
{
FOR
(
;
;
=
)
{
FLOAT
;
INT
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
}
ELSE
{
FOR
(
;
;
=
)
{
FLOAT
;
INT
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
}
}
VOID
(
VOID
)
{
INT
;
,
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
(
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
IF
(
)
{
SWITCH
(
(
)
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
DEFAULT
(
,
)
;
BREAK
;
}
}
ELSE
{
(
,
)
;
}
}
}
IF
(
)
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
;
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
,
)
;
}
}
}
IF
(
)
{
(
)
;
(
)
;
IF
(
)
;
=
;
FOR
(
=
;
;
=
)
{
INT
,
;
;
=
(
)
;
=
(
)
;
IF
(
(
,
,
,
)
)
{
=
;
(
)
;
(
,
,
)
;
}
ELSE
{
;
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
(
)
(
)
,
(
)
(
)
)
;
}
=
;
(
)
;
IF
(
(
,
,
,
)
)
{
(
,
,
,
)
;
}
=
;
(
)
;
(
,
,
)
;
}
}
IF
(
)
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
(
)
(
)
,
(
)
(
)
)
;
}
}
(
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
INT
;
;
=
;
;
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
RETURN
;
}
ELSE
{
(
)
;
(
)
;
}
IF
(
)
(
)
;
ELSE
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
GOTO
;
}
IF
(
(
)
)
{
IF
(
)
{
IF
(
(
(
)
)
)
{
=
;
}
}
}
IF
(
)
{
IF
(
(
)
(
)
)
{
UNSIGNED
;
INT
,
;
=
(
)
;
=
(
)
;
(
,
(
VOID
)
,
)
;
(
)
;
(
)
;
(
,
,
,
,
,
,
,
,
)
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
=
;
=
;
}
}
VOID
(
VOID
)
{
;
FLOAT
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
=
)
{
(
)
;
;
IF
(
)
(
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
(
)
;
(
,
,
,
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
;
=
;
IF
(
)
{
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
;
FOR
(
;
;
=
)
(
)
;
=
;
}
}
ELSE
{
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
(
)
;
}
}
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
FOR
(
;
;
=
)
{
IF
(
)
(
)
;
}
=
;
}
}
(
)
;
}
STATIC
VOID
(
)
{
INT
,
=
;
INT
;
FLOAT
;
=
(
)
;
=
;
UNSIGNED
=
;
;
FOR
(
=
;
;
)
{
IF
(
)
GOTO
;
}
IF
(
(
)
)
{
IF
(
)
{
IF
(
(
(
)
)
)
{
=
;
}
}
}
IF
(
)
{
UNSIGNED
;
INT
,
;
IF
(
(
)
(
)
)
{
=
(
)
;
=
(
)
;
(
,
(
VOID
)
,
)
;
(
)
;
(
,
)
;
=
;
(
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
(
,
(
VOID
)
,
)
;
(
,
)
;
=
;
(
,
,
,
,
,
,
,
,
)
;
}
;
(
,
)
;
(
,
)
;
IF
(
)
{
FLOAT
;
=
(
(
)
(
INT
)
(
)
)
;
IF
(
)
=
;
FOR
(
=
;
;
=
)
{
=
;
(
)
;
FOR
(
=
;
;
,
)
{
(
,
(
)
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
}
}
ELSE
{
FOR
(
=
;
;
=
)
{
=
;
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
}
}
}
ELSE
{
;
(
,
)
;
(
,
)
;
IF
(
)
{
FLOAT
;
=
(
(
)
(
INT
)
(
)
)
;
IF
(
)
=
;
FOR
(
=
;
;
=
)
{
=
;
(
)
;
FOR
(
=
;
;
,
)
{
(
,
(
)
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
}
}
ELSE
{
FOR
(
=
;
;
=
)
{
=
;
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
,
;
;
FLOAT
;
;
;
IF
(
)
{
=
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
}
}
=
;
IF
(
)
{
(
)
;
(
,
,
,
)
;
(
)
;
}
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
IF
(
(
)
)
{
=
;
=
;
}
ELSE
IF
(
(
)
)
{
(
)
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
}
}
}
IF
(
(
)
)
{
IF
(
)
(
)
;
}
ELSE
{
(
)
;
(
,
,
,
)
;
(
)
;
}
}
VOID
(
)
{
,
;
INT
;
;
IF
(
)
RETURN
;
=
;
=
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
ELSE
{
=
;
(
,
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
RETURN
;
(
,
,
)
;
(
,
,
(
)
)
;
(
,
,
)
;
IF
(
)
{
;
,
,
;
(
,
)
;
(
,
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
(
)
;
=
;
=
;
(
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
INT
,
,
;
;
,
;
;
FLOAT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
=
(
)
;
IF
(
)
{
IF
(
(
(
(
)
)
)
)
RETURN
;
}
=
;
=
;
IF
(
)
{
DO
{
(
)
=
;
;
}
WHILE
(
)
;
}
RETURN
;
}
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
,
)
;
BREAK
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
{
(
)
;
}
ELSE
IF
(
(
)
)
{
=
;
=
;
}
ELSE
{
IF
(
(
)
)
{
(
)
;
}
ELSE
{
=
(
)
;
=
;
=
;
}
}
}
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
)
;
(
,
,
(
)
)
;
=
(
INT
)
(
)
;
=
;
=
=
;
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
;
;
INT
,
;
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
RETURN
;
}
=
(
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
=
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
(
(
INT
)
)
(
(
INT
)
)
;
=
;
}
FOR
(
=
,
=
;
;
,
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
(
)
)
)
{
=
(
)
;
DO
{
IF
(
)
BREAK
;
=
;
=
;
}
WHILE
(
)
;
}
}
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
=
(
)
;
DO
{
IF
(
)
BREAK
;
=
;
=
;
}
WHILE
(
)
;
}
}
}
STATIC
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
STATIC
VOID
(
)
{
INT
;
INT
=
;
IF
(
)
{
=
;
}
ELSE
{
=
;
}
(
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
(
,
,
,
,
,
,
,
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
,
)
;
}
}
STATIC
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
INT
,
;
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
}
IF
(
)
{
=
;
=
=
;
}
}
IF
(
)
RETURN
;
FOR
(
=
;
;
)
=
;
RETURN
;
}
VOID
(
)
{
INT
,
,
;
,
;
INT
;
FLOAT
;
FLOAT
,
;
;
;
=
;
=
;
=
;
(
)
;
=
(
(
)
(
)
(
FLOAT
)
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
,
)
;
;
=
(
,
)
;
;
(
,
,
)
;
(
,
)
;
=
;
=
;
=
(
,
)
;
;
;
;
;
=
(
,
)
;
;
;
;
;
=
;
=
;
}
=
;
}
VOID
(
)
{
INT
,
;
;
IF
(
(
)
)
RETURN
;
=
(
)
;
=
(
)
;
IF
(
(
,
,
,
)
)
{
(
)
;
(
)
;
IF
(
(
,
,
,
)
)
{
(
,
,
,
)
;
}
}
=
;
=
;
(
)
;
(
)
;
(
,
,
)
;
}
VOID
(
)
{
STATIC
;
INT
;
UNSIGNED
;
(
,
,
(
)
)
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
=
;
IF
(
)
{
=
;
}
=
;
IF
(
(
)
)
{
=
;
}
ELSE
IF
(
(
)
)
{
=
;
}
ELSE
IF
(
(
)
)
{
=
;
}
ELSE
IF
(
(
)
)
{
=
;
}
ELSE
{
=
;
}
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
__E__O__F__
EXTERN
;
CHAR
;
FLOAT
;
;
;
;
VOID
(
INT
,
FLOAT
,
,
)
{
INT
,
;
FLOAT
;
=
=
=
;
=
=
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
,
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
VOID
(
INT
,
FLOAT
)
{
INT
,
,
;
,
;
FLOAT
;
FLOAT
;
,
;
INT
,
;
FLOAT
;
FLOAT
;
;
FLOAT
,
;
;
FLOAT
,
;
IF
(
)
(
,
,
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
,
)
=
;
=
;
;
(
,
)
;
=
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
)
;
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
)
{
=
(
)
;
FOR
(
=
;
;
)
=
=
(
)
;
;
;
}
}
(
,
)
;
(
,
)
;
RETURN
;
}
=
(
(
)
(
(
)
)
(
FLOAT
)
)
;
=
;
=
;
=
;
(
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
=
(
,
)
;
=
(
,
)
;
;
;
(
,
,
)
;
=
;
=
;
}
(
,
(
)
,
)
;
=
;
=
;
(
,
,
(
)
)
;
}
VOID
(
)
{
;
INT
;
INT
;
INT
;
FLOAT
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
;
}
(
,
)
;
}
FLOAT
=
{
}
;
(
(
)
)
VOID
(
)
{
,
;
FLOAT
;
INT
;
FLOAT
,
,
,
;
FLOAT
;
FLOAT
=
;
IF
(
)
=
(
(
)
(
INT
)
(
)
)
;
ELSE
=
;
FOR
(
=
;
;
=
)
{
=
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
(
(
)
)
)
;
;
(
)
;
=
(
INT
)
(
(
)
)
;
=
(
(
(
)
)
)
;
(
)
;
(
,
)
;
(
)
;
}
(
)
;
}
}
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
;
INT
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
FLOAT
,
;
FLOAT
,
;
VOID
(
INT
,
)
{
INT
,
;
,
;
FLOAT
,
,
;
INT
;
FLOAT
;
;
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
)
;
}
(
)
;
RETURN
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
FOR
(
=
;
;
,
)
{
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
VOID
(
INT
,
,
INT
)
{
FLOAT
;
FLOAT
;
,
;
FLOAT
,
;
FLOAT
;
INT
;
;
INT
;
INT
,
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
=
;
=
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
;
(
,
(
(
)
)
)
;
=
=
;
FOR
(
=
,
=
;
;
,
)
{
SWITCH
(
)
{
CASE
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
;
(
,
)
;
;
BREAK
;
}
IF
(
)
CONTINUE
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
}
;
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
)
{
INT
;
;
;
FOR
(
=
;
;
=
)
{
FOR
(
=
;
;
)
{
(
,
,
)
;
}
(
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
=
;
=
=
;
}
}
VOID
(
FLOAT
,
FLOAT
,
INT
)
{
,
;
INT
,
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
(
,
)
;
(
)
;
}
INT
=
{
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
RETURN
;
}
(
)
;
(
,
,
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
=
;
=
;
}
IF
(
)
CONTINUE
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
(
)
;
(
,
,
)
;
(
,
,
,
)
;
(
)
;
}
CHAR
=
{
,
,
,
,
,
}
;
VOID
(
CHAR
,
FLOAT
,
)
{
INT
;
CHAR
;
(
,
,
(
)
)
;
=
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
;
IF
(
)
(
,
(
)
,
,
,
)
;
ELSE
(
,
(
)
,
,
,
)
;
=
(
,
)
;
IF
(
)
=
;
IF
(
)
{
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
}
__E__O__F__
STATIC
;
VOID
(
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
{
FLOAT
;
=
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
,
,
)
{
FLOAT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
INT
(
,
,
INT
,
INT
,
VOID
(
)
(
,
,
)
)
{
INT
,
,
;
INT
,
;
=
;
=
;
FOR
(
=
;
;
=
,
)
{
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
;
}
IF
(
)
{
=
;
;
}
}
RETURN
;
}
VOID
(
,
,
)
{
INT
,
,
;
UNSIGNED
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
(
)
;
}
}
__E__O__F__
EXTERN
;
INT
;
;
;
;
,
,
;
INT
;
INT
;
FLOAT
;
,
;
;
FLOAT
;
FLOAT
;
FLOAT
;
STATIC
FLOAT
;
STATIC
,
,
;
FLOAT
=
{
}
;
VOID
(
,
FLOAT
)
;
VOID
(
VOID
)
;
VOID
(
,
,
FLOAT
)
;
VOID
(
)
;
VOID
(
INT
,
,
,
)
;
VOID
(
,
FLOAT
)
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
STATIC
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
UNSIGNED
LONG
(
,
FLOAT
)
{
UNSIGNED
LONG
=
,
=
;
INT
;
,
;
,
;
=
,
=
;
FLOAT
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
,
,
)
;
(
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
RETURN
(
)
;
}
FOR
(
=
;
;
)
{
INT
;
,
;
UNSIGNED
LONG
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
FOR
(
=
;
;
)
{
FLOAT
=
(
,
)
;
IF
(
(
)
)
;
}
;
;
}
IF
(
)
{
RETURN
;
}
IF
(
)
{
RETURN
;
}
RETURN
;
}
(
VOID
)
{
UNSIGNED
LONG
=
{
,
}
;
=
(
,
)
;
IF
(
)
{
IF
(
)
RETURN
;
ELSE
IF
(
)
RETURN
;
ELSE
RETURN
(
)
;
}
=
(
,
)
;
IF
(
(
)
)
RETURN
;
ELSE
IF
(
(
)
)
RETURN
;
ELSE
RETURN
(
)
;
}
VOID
(
,
,
FLOAT
)
{
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
TYPEDEF
STRUCT
{
INT
;
;
;
;
}
;
;
VOID
(
VOID
)
{
INT
;
;
;
;
(
(
)
(
)
)
;
;
=
(
)
;
=
(
)
(
(
(
LONG
)
)
(
)
)
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
IF
(
(
)
(
)
)
{
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
{
=
;
=
;
=
;
(
)
;
}
ELSE
{
(
,
,
)
;
}
}
}
ELSE
{
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
{
=
;
=
;
=
;
(
)
;
}
ELSE
{
(
,
,
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
STATIC
FLOAT
;
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
=
;
=
=
;
=
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
INT
,
,
,
)
{
FLOAT
;
FLOAT
;
INT
;
INT
;
FLOAT
=
;
FLOAT
;
STATIC
FLOAT
=
;
STATIC
FLOAT
=
;
,
,
,
,
,
,
;
,
,
;
,
,
;
,
,
;
,
,
;
,
,
;
(
)
;
(
)
,
;
(
)
,
;
(
)
;
(
)
,
;
;
(
)
;
;
(
)
;
;
(
)
;
;
;
;
(
)
,
,
,
,
,
,
,
,
;
;
;
;
;
;
;
(
)
,
;
;
(
)
,
;
;
(
)
;
;
;
;
(
)
,
,
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
;
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
;
(
)
;
;
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
;
(
)
;
;
;
(
)
,
,
,
,
,
(
)
(
)
,
(
)
,
,
,
,
,
,
,
,
,
,
,
,
,
;
;
,
,
;
;
;
;
;
;
(
)
;
;
;
(
)
;
;
;
(
)
;
;
;
;
(
)
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
VOID
(
INT
,
,
,
)
{
INT
;
FOR
(
=
;
;
,
,
,
)
{
INT
;
FLOAT
,
;
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
{
;
;
;
}
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
;
=
(
,
)
;
=
;
IF
(
)
{
(
INT
)
(
)
;
IF
(
)
=
;
}
=
;
IF
(
)
{
;
}
ELSE
{
(
)
;
}
}
}
VOID
(
)
{
FLOAT
;
FLOAT
,
,
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
STATIC
(
VOID
)
{
INT
;
;
IF
(
)
=
;
ELSE
{
=
;
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
=
;
}
=
;
}
IF
(
)
RETURN
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
FLOAT
=
{
,
,
}
;
;
INT
,
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
}
ELSE
{
(
,
)
;
}
IF
(
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
}
IF
(
)
{
FLOAT
;
FLOAT
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
;
}
}
=
(
)
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
=
;
IF
(
)
=
;
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
)
{
INT
=
;
INT
=
;
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
=
;
}
IF
(
(
)
(
)
)
{
(
,
,
,
)
;
=
;
}
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
}
VOID
(
,
FLOAT
)
{
FLOAT
;
,
;
INT
;
=
;
(
,
,
,
)
;
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
EXTERN
VOID
(
)
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
RETURN
;
}
(
)
;
(
)
;
IF
(
(
)
)
{
IF
(
(
)
(
)
)
{
=
;
}
RETURN
;
}
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
;
(
)
;
IF
(
(
)
)
{
INT
;
=
(
)
;
IF
(
)
{
IF
(
(
)
(
)
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
IF
(
(
)
)
=
;
ELSE
IF
(
(
)
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
;
}
(
,
)
;
IF
(
)
=
(
FLOAT
)
(
FLOAT
)
;
ELSE
=
(
FLOAT
)
(
FLOAT
)
;
(
)
;
IF
(
(
)
(
)
)
{
=
;
}
}
__E__O__F__
;
;
;
;
FLOAT
;
INT
;
TYPEDEF
ENUM
{
,
,
}
;
STATIC
;
STATIC
;
STATIC
INT
,
;
STATIC
,
;
STATIC
;
VOID
(
)
{
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
,
,
,
,
,
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
,
,
)
{
,
,
;
INT
,
,
;
FLOAT
,
,
;
,
;
,
,
;
;
INT
;
=
=
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
FOR
(
;
;
=
)
{
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
RETURN
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
=
;
=
;
}
}
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
(
(
)
)
;
IF
(
(
(
(
)
)
)
)
CONTINUE
;
}
=
(
(
)
)
;
(
,
)
;
}
}
ELSE
{
(
,
,
)
;
}
}
}
}
}
VOID
(
,
)
{
INT
,
,
;
;
;
INT
;
;
;
,
;
,
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
CONTINUE
;
=
;
=
;
=
=
;
=
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
}
=
;
}
=
;
IF
(
(
(
)
)
)
(
,
,
)
;
ELSE
(
,
)
;
}
}
VOID
(
,
INT
,
)
{
INT
;
;
;
INT
;
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
(
(
)
)
;
(
,
)
;
}
}
}
INT
;
VOID
(
,
INT
)
{
INT
,
,
,
;
,
;
;
,
;
FLOAT
,
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
,
)
;
;
IF
(
)
RETURN
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
,
)
;
;
IF
(
)
(
)
;
}
}
;
IF
(
)
{
=
(
)
;
IF
(
)
{
IF
(
(
(
(
)
)
)
)
RETURN
;
}
=
;
=
;
IF
(
)
{
DO
{
(
)
=
;
;
}
WHILE
(
)
;
}
=
;
;
}
ELSE
{
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
,
)
;
BREAK
;
}
IF
(
)
=
;
ELSE
=
;
(
,
)
;
=
;
IF
(
)
{
=
;
IF
(
)
{
DO
{
IF
(
(
)
(
)
)
{
(
,
)
;
}
;
}
WHILE
(
)
;
}
ELSE
IF
(
)
{
DO
{
IF
(
(
)
(
)
)
{
(
,
)
;
}
;
}
WHILE
(
)
;
}
;
}
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
(
INT
)
(
)
;
=
;
(
,
)
;
=
;
=
;
(
,
)
;
}
__E__O__F__
;
(
CHAR
)
{
;
CHAR
;
IF
(
)
{
(
,
(
)
,
,
)
;
=
(
,
)
;
}
ELSE
=
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
=
(
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
;
;
INT
;
INT
,
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
)
(
,
,
,
)
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
(
)
;
IF
(
)
{
=
;
;
=
;
}
ELSE
=
;
=
;
WHILE
(
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
;
;
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
;
=
(
)
;
IF
(
)
{
=
=
;
RETURN
;
}
=
;
=
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
)
{
,
;
INT
,
,
;
INT
;
INT
,
;
INT
;
IF
(
(
)
(
)
(
)
)
{
(
,
)
;
}
=
;
IF
(
)
{
=
;
;
=
;
}
ELSE
=
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
IF
(
)
(
,
,
)
;
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
CHAR
)
{
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
,
INT
,
)
{
;
=
;
=
;
=
;
(
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
;
,
;
INT
,
;
INT
;
INT
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
(
)
(
)
(
)
)
RETURN
;
=
;
=
;
IF
(
)
{
;
;
=
;
}
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
,
)
;
;
;
}
}
ELSE
{
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
(
=
)
)
=
;
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
}
;
;
}
}
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
CHAR
)
{
INT
,
;
;
;
;
INT
;
IF
(
)
{
;
=
;
}
IF
(
)
{
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
;
FOR
(
=
;
;
,
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
=
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
;
INT
,
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
;
=
;
}
IF
(
)
{
;
=
;
}
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
,
)
FOR
(
=
;
;
)
=
;
}
VOID
(
VOID
)
{
INT
,
;
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
}
}
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
,
FOR
;
,
,
;
,
,
;
;
;
,
;
INT
;
INT
;
INT
,
;
STATIC
VOID
(
)
(
VOID
)
;
;
;
;
;
FLOAT
;
STATIC
INT
;
FLOAT
;
INT
,
,
,
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
)
;
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
FOR
(
=
;
;
)
{
=
=
;
}
}
VOID
(
,
)
{
;
DO
{
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
GOTO
;
=
;
=
;
=
;
=
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
DO
{
=
;
=
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
,
;
WHILE
(
)
{
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
GOTO
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
RETURN
;
}
}
VOID
(
VOID
)
{
;
INT
;
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
DO
{
=
;
=
;
}
WHILE
(
)
;
}
VOID
(
)
{
;
,
;
INT
;
=
;
IF
(
)
{
=
;
IF
(
)
GOTO
;
IF
(
(
)
)
{
GOTO
;
}
DO
{
=
;
}
WHILE
(
)
;
IF
(
)
{
IF
(
)
GOTO
;
}
GOTO
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
,
)
{
;
INT
;
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
}
=
;
=
;
}
}
VOID
(
)
{
;
,
;
INT
;
FLOAT
,
,
,
,
;
IF
(
)
{
=
;
IF
(
)
{
=
;
IF
(
)
GOTO
;
IF
(
(
)
)
{
=
(
FLOAT
)
(
)
(
)
;
=
;
=
;
=
;
IF
(
)
{
GOTO
;
}
=
;
IF
(
)
{
IF
(
)
{
GOTO
;
}
}
}
DO
{
=
;
}
WHILE
(
)
;
IF
(
)
{
IF
(
)
GOTO
;
=
(
FLOAT
)
(
)
(
)
;
=
;
=
;
=
;
IF
(
)
{
GOTO
;
}
=
;
IF
(
)
{
IF
(
)
{
GOTO
;
}
}
GOTO
;
}
GOTO
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
;
;
=
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
=
;
(
,
)
;
IF
(
)
CONTINUE
;
}
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
=
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
)
;
IF
(
)
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
(
)
;
;
;
=
(
)
(
(
LONG
)
(
)
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
FLOAT
)
;
=
;
IF
(
)
{
(
,
)
;
}
(
)
(
)
;
IF
(
)
{
(
)
;
FOR
(
=
;
;
)
=
;
=
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
=
;
=
(
FLOAT
)
;
=
;
IF
(
)
(
,
)
;
(
)
(
)
;
(
)
;
}
;
;
;
;
;
INT
(
FLOAT
)
{
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
RETURN
;
}
VOID
(
,
INT
)
{
;
;
INT
,
;
FOR
(
=
;
;
=
)
{
=
(
)
;
=
;
=
;
FOR
(
;
;
)
=
;
}
}
VOID
(
)
{
;
FLOAT
;
;
,
;
FLOAT
;
=
;
=
(
FLOAT
)
(
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
IF
(
)
{
IF
(
)
(
(
(
)
(
INT
)
(
)
)
)
;
ELSE
(
(
(
)
(
INT
)
(
)
)
)
;
}
=
(
(
)
)
;
=
(
(
)
)
;
}
VOID
(
)
{
=
;
=
;
=
;
(
,
(
INT
)
)
;
(
)
;
}
VOID
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
(
)
;
}
(
)
;
IF
(
(
)
)
(
)
;
ELSE
(
)
;
(
)
;
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
}
VOID
(
)
{
=
;
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
=
;
=
;
=
;
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
(
)
;
}
ELSE
=
;
=
;
=
(
)
;
{
FLOAT
;
FLOAT
;
IF
(
)
{
(
,
)
;
=
(
,
)
;
}
ELSE
{
(
,
)
;
=
(
,
)
;
}
IF
(
)
=
;
IF
(
)
(
)
;
=
(
)
;
}
=
(
,
)
;
=
(
)
;
=
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
;
=
;
(
,
(
INT
)
)
;
(
)
;
}
}
VOID
(
VOID
)
{
;
(
,
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
;
IF
(
(
(
)
)
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
}
}
ELSE
(
)
;
=
;
(
,
,
)
;
(
)
;
}
__E__O__F__
;
INT
;
VOID
(
VOID
)
{
INT
;
;
INT
;
(
,
)
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
;
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
(
,
,
,
,
)
;
}
(
,
,
)
;
}
VOID
(
CHAR
,
,
,
INT
,
INT
)
{
;
;
INT
,
;
INT
;
INT
,
;
,
;
=
;
=
(
,
(
VOID
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
(
)
(
)
)
;
=
;
=
;
IF
(
)
{
=
(
)
;
(
,
(
)
,
)
;
}
IF
(
)
=
;
IF
(
)
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
{
=
;
=
;
}
ELSE
=
;
WHILE
(
)
=
;
}
}
IF
(
(
)
)
{
(
,
,
)
;
(
)
;
=
;
}
(
)
;
}
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
CHAR
,
;
}
;
VOID
(
CHAR
,
,
INT
,
INT
)
{
INT
,
,
;
;
INT
,
;
;
;
INT
;
;
;
=
;
=
(
,
(
VOID
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
(
(
(
SHORT
)
)
)
;
;
=
(
(
(
SHORT
)
)
)
;
;
=
;
=
(
(
(
SHORT
)
)
)
;
;
=
(
(
(
SHORT
)
)
)
;
;
=
(
(
(
SHORT
)
)
)
;
;
=
(
(
(
SHORT
)
)
)
;
;
=
;
=
;
IF
(
)
(
,
)
;
IF
(
(
)
)
(
,
)
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
=
;
IF
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
UNSIGNED
CHAR
,
,
,
;
SWITCH
(
)
{
CASE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
}
}
}
}
ELSE
IF
(
)
{
UNSIGNED
CHAR
,
,
,
,
,
,
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
IF
(
)
;
ELSE
GOTO
;
=
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
SWITCH
(
)
{
CASE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
}
;
IF
(
)
{
=
;
IF
(
)
;
ELSE
GOTO
;
=
;
}
}
}
}
;
}
}
(
)
;
}
(
VOID
)
{
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
BREAK
;
}
IF
(
)
{
IF
(
)
(
,
)
;
;
}
=
;
RETURN
;
}
(
CHAR
,
,
INT
,
INT
,
)
{
;
INT
,
,
;
=
(
)
;
IF
(
(
)
(
)
)
(
,
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
=
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
;
INT
;
(
,
(
VOID
)
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
(
,
(
)
,
)
;
(
(
VOID
)
)
;
RETURN
;
}
(
CHAR
,
)
{
;
INT
,
;
,
;
INT
,
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
{
=
;
RETURN
;
}
}
=
;
=
;
IF
(
(
,
)
)
{
(
,
,
,
,
)
;
IF
(
)
RETURN
;
=
(
,
,
,
,
)
;
}
ELSE
IF
(
(
,
)
)
{
=
(
)
;
}
ELSE
IF
(
(
,
)
)
RETURN
;
ELSE
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
RETURN
;
}
STRUCT
(
CHAR
)
{
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
(
(
)
,
)
;
CONTINUE
;
}
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
)
;
(
,
,
(
)
)
;
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
)
;
(
,
,
(
)
)
;
}
}
__E__O__F__
INT
;
VOID
(
,
INT
,
)
{
;
FLOAT
;
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
=
;
IF
(
)
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
)
{
INT
;
;
=
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
}
}
;
;
;
INT
(
,
,
)
{
FLOAT
,
,
;
INT
;
;
;
;
INT
,
,
,
;
INT
;
;
;
FLOAT
;
INT
;
FLOAT
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
(
)
)
RETURN
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
(
)
)
CONTINUE
;
=
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
;
;
=
;
(
,
)
;
IF
(
)
{
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
(
,
,
,
)
;
(
(
)
)
(
(
)
)
;
}
}
RETURN
;
}
RETURN
(
,
,
)
;
}
VOID
(
,
)
{
;
FLOAT
;
INT
;
;
FLOAT
;
;
FLOAT
;
IF
(
)
{
=
=
=
;
RETURN
;
}
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
=
;
FOR
(
=
;
;
)
{
=
;
(
,
,
)
;
=
(
)
;
(
)
;
IF
(
)
{
(
,
,
,
)
;
}
}
}
UNSIGNED
;
VOID
(
VOID
)
{
;
INT
;
INT
,
;
FLOAT
,
,
;
,
;
INT
,
;
INT
;
INT
,
;
;
;
INT
;
=
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
=
(
,
)
;
(
)
;
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
;
}
=
(
,
)
;
=
(
,
)
;
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
}
ELSE
{
IF
(
)
(
)
;
IF
(
)
=
;
}
}
}
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
INT
,
;
;
UNSIGNED
;
INT
;
;
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
IF
(
)
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
;
;
}
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
INT
)
;
IF
(
)
=
;
=
(
)
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
}
}
__E__O__F__
;
;
UNSIGNED
;
;
CHAR
;
FLOAT
;
;
;
;
;
;
;
;
VOID
;
;
=
{
,
,
}
;
FLOAT
;
INT
;
FLOAT
=
;
INT
;
INT
;
;
;
INT
;
INT
,
,
;
;
INT
;
,
;
,
;
,
;
;
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
,
,
;
INT
;
FLOAT
;
FLOAT
,
;
;
INT
=
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
INT
,
;
;
FLOAT
,
,
,
,
,
,
,
;
FLOAT
,
,
,
;
VOID
(
VOID
)
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
(
)
FLOAT
,
,
;
FLOAT
,
,
;
FLOAT
,
,
;
,
,
,
;
;
INT
;
;
SHORT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
;
VOID
(
VOID
)
{
INT
,
,
;
;
=
(
)
;
=
=
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
(
)
;
)
FOR
(
=
;
(
)
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
=
;
ELSE
=
;
}
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
}
VOID
(
VOID
)
;
VOID
(
VOID
)
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
(
)
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
(
VOID
,
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
=
=
;
=
=
=
;
=
;
=
;
(
(
LONG
)
,
(
LONG
)
(
LONG
)
)
;
(
)
;
=
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
=
;
=
;
IF
(
)
=
;
IF
(
)
{
=
(
(
)
)
;
=
;
=
;
=
;
;
(
)
;
}
ELSE
{
=
;
}
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
}
ELSE
{
=
(
(
)
)
;
}
}
VOID
(
VOID
)
{
;
;
INT
;
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
RETURN
;
}
=
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
(
)
)
)
{
=
(
)
;
DO
{
IF
(
)
BREAK
;
=
;
=
;
}
WHILE
(
)
;
}
}
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
=
(
)
;
DO
{
IF
(
)
BREAK
;
=
;
=
;
}
WHILE
(
)
;
}
}
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
INT
;
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
CONTINUE
;
}
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
)
;
}
ELSE
{
=
;
IF
(
)
{
(
)
;
CONTINUE
;
}
(
,
)
;
(
,
,
)
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
}
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
)
;
}
ELSE
{
=
;
IF
(
)
{
(
)
;
CONTINUE
;
}
(
,
)
;
(
,
,
)
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
}
}
INT
(
FLOAT
)
{
INT
,
,
;
,
;
FLOAT
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
(
,
)
;
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
)
;
;
IF
(
)
(
)
;
}
RETURN
;
}
(
,
)
{
;
INT
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
=
;
=
(
,
,
(
)
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
}
}
VOID
(
,
,
,
,
)
{
,
;
INT
,
;
,
,
;
IF
(
)
{
(
,
)
;
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
(
,
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
;
,
;
FLOAT
;
;
IF
(
)
RETURN
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
,
,
)
;
(
,
,
)
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
)
;
(
,
,
)
;
=
;
(
)
;
(
)
;
IF
(
)
{
=
;
(
,
)
;
}
ELSE
{
(
,
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
=
;
}
VOID
(
VOID
)
{
(
(
)
(
)
)
;
(
(
)
(
)
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
}
ELSE
{
=
(
)
(
(
(
LONG
)
)
(
)
)
;
}
IF
(
)
{
=
(
)
(
(
(
LONG
)
)
(
)
)
;
=
;
;
(
)
;
}
(
)
;
IF
(
)
{
=
(
)
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
}
VOID
(
VOID
)
{
STATIC
;
,
,
;
INT
,
;
FLOAT
,
;
;
INT
;
=
;
IF
(
)
{
IF
(
)
{
=
;
(
(
CONST
UNSIGNED
CHAR
)
)
;
RETURN
;
}
RETURN
;
}
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
=
;
}
=
;
}
(
(
CONST
UNSIGNED
CHAR
)
)
;
}
VOID
(
VOID
)
{
;
IF
(
(
)
(
)
(
)
)
{
=
;
RETURN
;
}
(
,
)
;
=
;
}
VOID
(
)
{
=
;
IF
(
(
)
)
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
(
)
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
INT
,
INT
)
{
=
;
=
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
(
)
;
(
)
;
(
(
CONST
UNSIGNED
CHAR
)
)
;
}
VOID
(
FLOAT
)
{
EXTERN
VOID
(
VOID
)
;
IF
(
)
{
(
)
;
(
(
CONST
UNSIGNED
CHAR
)
)
;
=
;
}
WHILE
(
)
{
;
IF
(
(
=
(
,
,
,
)
)
)
{
(
,
)
;
=
;
=
;
=
;
}
ELSE
{
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
ELSE
{
(
,
)
;
}
}
}
}
VOID
(
CONST
UNSIGNED
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
(
)
;
}
VOID
(
CONST
UNSIGNED
CHAR
)
{
;
INT
,
,
;
INT
;
=
(
)
;
FOR
(
=
;
;
,
)
{
=
(
INT
)
(
)
;
FOR
(
=
;
;
)
=
;
}
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
(
)
;
}
ELSE
{
(
(
CONST
UNSIGNED
CHAR
)
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
FLOAT
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
VOID
(
)
{
INT
;
;
,
;
,
;
,
;
=
;
=
;
=
;
=
;
=
;
=
;
=
=
;
=
=
;
=
=
;
IF
(
(
)
)
RETURN
;
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
,
(
)
)
;
(
,
,
)
;
(
,
,
)
;
}
FOR
(
=
;
;
)
{
(
,
,
(
)
,
(
)
,
,
)
;
}
}
CHAR
=
{
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
}
;
EXTERN
;
VOID
(
CHAR
,
FLOAT
,
)
{
INT
;
CHAR
;
(
,
,
(
)
)
;
=
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
(
)
,
,
,
)
;
=
(
,
)
;
}
}
VOID
(
VOID
)
{
,
;
INT
;
INT
,
,
;
(
,
,
,
,
)
;
IF
(
)
(
,
)
;
=
;
=
(
)
;
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
;
}
STRUCT
(
CHAR
)
;
(
)
{
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
__E__O__F__
;
;
;
;
INT
;
FLOAT
;
STATIC
FLOAT
=
{
,
,
}
;
EXTERN
INT
;
INT
,
,
,
;
INT
,
,
;
INT
;
SHORT
;
VOID
(
VOID
)
{
EXTERN
VOID
(
VOID
)
;
STATIC
=
;
EXTERN
VOID
(
VOID
)
;
IF
(
)
{
(
(
INT
)
,
(
INT
)
(
INT
)
)
;
(
(
LONG
)
,
(
LONG
)
(
LONG
)
)
;
=
;
}
=
;
(
)
;
(
)
;
}
UNSIGNED
CHAR
;
VOID
(
VOID
)
{
INT
;
=
;
IF
(
)
=
;
=
;
=
;
=
;
IF
(
)
=
;
=
(
INT
)
(
(
FLOAT
)
(
)
)
;
=
(
INT
)
(
(
FLOAT
)
)
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
IF
(
)
{
(
,
,
(
)
)
;
(
,
,
,
,
(
INT
)
)
;
}
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
(
)
;
=
;
(
,
,
,
,
,
,
)
;
=
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
,
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
,
)
;
}
}
(
)
VOID
(
,
)
{
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
(
)
VOID
(
,
)
{
,
,
(
)
(
)
,
(
)
(
)
,
(
)
(
)
,
(
)
(
)
(
)
,
(
)
(
)
,
(
)
(
)
,
(
)
}
VOID
(
,
FLOAT
,
FLOAT
)
{
FLOAT
;
=
(
,
)
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
=
;
;
}
}
VOID
(
)
{
INT
;
=
;
=
(
(
FLOAT
)
)
;
;
=
(
(
FLOAT
)
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
)
(
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
)
(
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
;
=
;
=
;
=
;
=
(
(
FLOAT
)
)
;
=
;
=
(
(
FLOAT
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
{
=
;
(
)
;
}
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
IF
(
(
)
)
{
=
(
,
)
;
=
;
}
IF
(
(
)
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
(
VOID
)
;
=
;
}
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
FOR
(
=
;
(
)
;
)
=
;
=
;
}
VOID
(
VOID
)
{
}
VOID
(
CHAR
,
,
INT
,
INT
,
INT
,
)
{
INT
,
,
;
;
;
;
=
(
)
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
SHORT
)
(
)
)
;
=
(
(
SHORT
)
(
)
)
;
=
(
(
SHORT
)
)
;
=
(
(
SHORT
)
)
;
(
,
,
(
)
)
;
=
;
=
(
(
SHORT
)
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
ELSE
{
=
;
=
;
}
}
;
}
=
;
FOR
(
=
;
;
)
=
;
=
(
)
;
=
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
{
(
(
VOID
)
,
,
,
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
CHAR
;
;
;
(
,
(
)
,
,
(
)
)
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
(
)
,
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
BREAK
;
(
)
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
(
,
,
,
,
,
)
;
(
,
,
)
;
}
__E__O__F__
;
CHAR
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
(
,
)
;
;
;
INT
;
;
INT
;
INT
;
VOID
(
VOID
)
{
INT
;
;
INT
;
=
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
,
)
;
;
}
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
(
CHAR
,
)
{
;
UNSIGNED
;
INT
;
IF
(
)
(
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
,
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
RETURN
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
BREAK
;
}
IF
(
)
{
IF
(
)
(
,
)
;
;
}
(
,
)
;
=
(
,
(
VOID
)
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
(
,
,
(
)
)
;
RETURN
;
}
=
;
SWITCH
(
(
(
UNSIGNED
)
)
)
{
CASE
=
(
)
;
(
,
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
=
(
)
;
(
)
;
RETURN
;
}
(
,
)
{
;
FLOAT
;
;
IF
(
)
(
,
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
(
,
)
{
STATIC
;
INT
;
;
INT
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
{
WHILE
(
)
{
=
;
;
}
RETURN
;
}
DO
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
;
WHILE
(
)
{
=
;
;
}
}
WHILE
(
)
;
RETURN
;
}
(
INT
,
)
{
IF
(
)
RETURN
;
RETURN
(
(
)
,
)
;
}
;
VOID
(
)
{
INT
,
;
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
(
)
;
=
(
VOID
)
(
)
;
FOR
(
=
;
;
,
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
}
INT
;
INT
;
INT
;
VOID
(
)
{
;
INT
;
IF
(
)
{
=
(
)
;
=
;
IF
(
)
RETURN
;
=
;
=
;
;
RETURN
;
}
(
)
;
(
)
;
}
VOID
(
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
}
}
VOID
(
)
{
;
,
;
INT
,
,
;
FLOAT
,
;
CHAR
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
(
,
(
)
,
,
)
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
}
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
=
)
;
}
}
VOID
(
)
{
FLOAT
,
,
;
INT
,
,
;
;
;
INT
,
;
=
=
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
(
(
)
)
)
(
,
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
;
CONTINUE
;
}
IF
(
)
{
;
FOR
(
=
;
;
)
{
=
;
=
;
}
CONTINUE
;
}
IF
(
)
{
;
FOR
(
=
;
;
)
{
=
;
=
;
}
CONTINUE
;
}
}
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
;
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
(
(
)
)
;
}
}
(
,
)
;
}
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
INT
,
,
;
SHORT
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
,
)
;
=
;
}
}
VOID
(
)
{
INT
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
=
(
(
)
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
=
(
)
;
=
(
)
;
=
;
}
}
VOID
(
,
VOID
)
{
INT
;
;
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
)
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
FOR
(
=
;
;
)
{
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
(
,
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
=
;
}
(
)
;
}
VOID
(
,
VOID
)
{
INT
,
;
,
;
,
;
,
;
,
;
INT
,
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
)
;
=
(
(
)
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
IF
(
)
(
,
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
FOR
(
=
;
;
)
{
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
(
,
,
(
)
)
;
}
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
FOR
(
=
;
;
)
=
(
)
;
(
(
CHAR
)
,
(
CHAR
)
,
)
;
FOR
(
=
;
;
)
{
=
(
(
CHAR
)
,
)
;
}
}
VOID
(
,
VOID
)
{
,
;
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
=
(
,
)
;
}
=
;
}
VOID
(
CHAR
)
{
CHAR
;
;
;
=
;
(
,
(
)
,
,
)
;
(
)
;
=
(
,
,
)
;
IF
(
(
,
)
)
(
)
;
=
(
)
;
(
)
;
}
STRUCT
(
CHAR
)
{
;
INT
;
;
;
=
(
,
)
;
IF
(
)
{
=
;
IF
(
)
{
=
(
)
;
FOR
(
=
;
;
)
=
(
,
)
;
}
ELSE
IF
(
)
{
=
(
)
;
FOR
(
=
;
;
)
=
(
(
CHAR
)
,
)
;
=
;
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
=
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
(
,
,
(
)
)
;
}
ELSE
{
(
,
)
;
}
}
(
)
;
}
VOID
(
)
{
(
)
;
(
,
,
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
}
}
__E__O__F__
,
,
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
}
;
STATIC
;
STATIC
UNSIGNED
;
(
)
VOID
(
VOID
)
{
,
,
,
,
,
,
,
,
}
(
)
VOID
(
VOID
)
{
,
,
,
,
,
,
,
,
}
(
)
VOID
(
VOID
)
{
,
}
(
)
VOID
(
VOID
)
{
STATIC
,
;
STATIC
FLOAT
;
STATIC
INT
,
,
;
STATIC
SHORT
;
STATIC
INT
;
STATIC
(
)
(
VOID
)
;
STATIC
FLOAT
=
;
STATIC
FLOAT
=
;
STATIC
FLOAT
=
;
STATIC
FLOAT
=
;
,
,
;
;
;
;
;
;
(
)
;
;
;
;
(
)
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
;
(
)
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
;
(
)
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
;
(
)
,
,
,
,
,
,
,
,
,
,
;
;
;
;
(
)
;
;
(
)
;
;
(
)
,
(
)
;
(
)
;
;
(
)
;
;
(
)
;
;
;
(
)
,
,
,
,
,
,
,
;
=
,
;
=
;
=
,
;
=
,
;
=
(
)
,
;
=
(
SHORT
)
(
(
)
)
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
STATIC
(
INT
,
INT
)
{
RETURN
;
}
STATIC
(
INT
,
INT
)
{
RETURN
;
}
STATIC
(
INT
,
INT
)
{
=
;
RETURN
;
}
VOID
(
VOID
)
{
=
;
INT
=
;
,
;
FLOAT
;
;
SHORT
;
INT
=
;
INT
,
,
,
,
,
;
(
)
(
INT
,
INT
)
;
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
RETURN
;
}
=
(
)
;
=
;
=
(
INT
)
(
)
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
SWITCH
(
)
{
CASE
FOR
(
;
;
,
,
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
(
(
INT
)
)
;
}
}
}
BREAK
;
CASE
FOR
(
;
;
,
,
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
(
)
(
INT
)
;
}
}
}
BREAK
;
DEFAULT
FOR
(
;
;
,
,
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
}
}
BREAK
;
}
}
VOID
(
VOID
)
{
;
INT
;
EXTERN
UNSIGNED
LONG
,
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
IF
(
)
=
(
UNSIGNED
INT
)
(
)
;
ELSE
=
(
UNSIGNED
INT
)
;
(
)
;
}
}
__E__O__F__
TYPEDEF
STRUCT
{
,
;
SHORT
;
,
;
,
;
INT
,
,
;
INT
;
UNSIGNED
,
;
}
;
;
STATIC
INT
;
STATIC
;
;
;
EXTERN
INT
;
STATIC
INT
;
;
STATIC
INT
,
;
STATIC
VOID
(
)
;
VOID
(
VOID
)
{
UNSIGNED
;
DO
{
UNSIGNED
,
;
=
;
=
;
=
(
(
)
(
)
)
;
IF
(
)
{
IF
(
(
)
)
{
=
;
=
;
}
}
;
;
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
;
INT
,
;
=
;
SHORT
=
;
INT
=
;
IF
(
)
{
;
;
IF
(
)
;
ELSE
;
IF
(
)
{
;
;
;
;
;
;
}
;
;
WHILE
(
)
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
(
)
)
;
IF
(
(
)
)
=
;
;
;
;
;
;
;
}
}
}
VOID
(
VOID
)
{
UNSIGNED
;
INT
,
;
=
;
SHORT
=
;
INT
=
;
IF
(
(
)
)
{
;
;
IF
(
)
;
ELSE
;
IF
(
)
{
;
;
;
;
;
;
}
;
;
WHILE
(
)
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
(
)
)
;
IF
(
(
)
)
=
;
;
;
;
;
;
;
}
}
ELSE
{
;
;
IF
(
)
;
ELSE
;
WHILE
(
)
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
(
)
)
;
IF
(
(
)
)
=
;
;
;
;
;
;
;
}
}
}
VOID
(
VOID
)
{
UNSIGNED
;
INT
,
;
DO
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
(
)
)
;
IF
(
(
)
)
=
;
;
;
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
;
INT
,
;
DO
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
(
)
)
;
IF
(
(
)
)
=
;
;
;
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
;
DO
{
UNSIGNED
,
;
=
;
=
;
=
(
(
)
(
)
)
;
IF
(
)
{
IF
(
(
)
)
{
=
;
}
}
;
;
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
DO
{
IF
(
(
)
)
{
=
;
}
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
;
DO
{
UNSIGNED
,
;
=
;
=
;
=
(
(
)
(
)
)
;
IF
(
)
{
IF
(
(
)
)
{
=
;
}
}
;
;
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
;
=
;
SHORT
=
;
INT
=
;
IF
(
(
)
)
{
;
;
IF
(
)
;
ELSE
;
IF
(
(
)
)
{
;
;
;
;
;
;
}
;
;
WHILE
(
)
{
UNSIGNED
=
;
UNSIGNED
=
;
=
(
(
)
(
)
)
;
IF
(
)
{
IF
(
(
)
)
=
;
}
;
;
;
;
;
;
}
}
}
VOID
(
VOID
)
{
UNSIGNED
;
=
;
SHORT
=
;
INT
=
;
;
;
IF
(
)
;
ELSE
;
IF
(
(
)
)
{
IF
(
(
)
)
{
;
;
;
;
;
;
}
;
;
WHILE
(
)
{
UNSIGNED
=
;
UNSIGNED
=
;
=
(
(
)
(
)
)
;
IF
(
)
{
IF
(
(
)
)
=
;
}
;
;
;
;
;
;
}
}
ELSE
{
WHILE
(
)
{
UNSIGNED
=
;
UNSIGNED
=
;
=
(
(
)
(
)
)
;
IF
(
)
{
IF
(
(
)
)
=
;
}
;
;
;
;
;
;
}
}
}
INT
(
INT
,
)
{
INT
,
;
FLOAT
;
FLOAT
,
,
;
FLOAT
,
,
,
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
=
;
FOR
(
=
;
;
,
(
)
(
FLOAT
)
)
{
=
(
,
)
;
}
=
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
(
)
(
FLOAT
)
)
{
IF
(
)
{
(
,
,
(
)
)
;
(
)
(
FLOAT
)
;
;
}
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
)
CONTINUE
;
=
(
)
;
=
(
)
(
FLOAT
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
(
FLOAT
)
;
;
}
RETURN
;
}
VOID
(
,
)
{
INT
;
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
=
;
IF
(
)
=
(
(
INT
)
(
)
(
)
)
;
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
;
=
;
DO
{
=
(
)
(
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
GOTO
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
IF
(
)
{
=
(
(
)
)
;
=
(
(
)
)
;
}
(
)
;
=
;
=
;
}
WHILE
(
)
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
;
,
;
;
FLOAT
,
,
,
,
;
,
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
=
(
)
;
DO
{
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
(
(
(
)
)
)
)
(
)
;
=
(
INT
)
;
=
(
INT
)
;
FOR
(
=
;
;
)
{
=
;
=
;
;
;
}
}
=
;
;
IF
(
)
=
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
;
,
;
;
FLOAT
,
,
,
,
,
,
,
,
;
,
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
DO
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
(
(
(
)
)
)
)
(
)
;
=
(
INT
)
;
=
(
INT
)
;
FOR
(
=
;
;
)
{
=
(
)
;
;
;
}
}
=
;
=
;
;
IF
(
)
=
;
}
WHILE
(
)
;
=
;
}
VOID
(
FLOAT
,
,
)
{
,
;
FLOAT
;
INT
,
;
FLOAT
;
,
;
IF
(
)
{
=
;
}
ELSE
{
IF
(
)
{
=
;
}
ELSE
{
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
}
ELSE
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
}
}
}
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
(
,
,
)
;
}
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
(
)
(
)
;
}
=
;
=
;
(
)
;
}
VOID
(
)
{
INT
,
,
;
,
;
INT
;
FLOAT
;
;
FLOAT
=
{
,
}
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
;
}
=
(
,
)
;
=
;
=
;
IF
(
)
{
(
(
)
(
INT
)
(
)
)
;
}
=
;
}
VOID
(
VOID
)
{
,
,
;
FLOAT
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
(
(
,
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
(
(
(
,
)
)
)
;
=
(
)
(
(
(
,
)
)
)
;
=
(
)
;
=
(
)
;
}
STATIC
VOID
(
)
{
INT
,
;
FLOAT
,
;
;
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
;
}
=
(
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
(
)
;
IF
(
)
(
,
(
)
,
)
;
ELSE
(
,
(
)
,
)
;
=
;
}
=
;
}
VOID
(
,
,
,
,
INT
,
FLOAT
)
{
,
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
=
;
(
,
,
)
;
}
__E__O__F__
INT
=
{
}
;
INT
=
;
TYPEDEF
STRUCT
{
VOID
;
SHORT
;
INT
;
;
INT
,
,
,
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
}
;
;
INT
,
,
;
;
INT
;
INT
;
;
=
{
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
}
;
INT
,
,
,
;
INT
,
,
,
,
;
INT
,
;
INT
,
;
;
;
STATIC
INT
;
,
;
SHORT
;
INT
,
,
,
;
INT
,
;
INT
,
,
;
INT
,
,
;
INT
,
;
INT
,
;
INT
,
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
STATIC
=
{
}
;
;
INT
;
;
VOID
(
)
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
=
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
;
IF
(
)
{
=
;
=
;
=
;
FOR
(
=
;
;
,
)
=
;
}
}
VOID
(
VOID
)
{
;
INT
,
;
INT
,
;
=
;
=
;
IF
(
(
)
)
RETURN
;
=
;
=
;
IF
(
(
)
)
RETURN
;
=
(
)
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
}
}
VOID
(
INT
)
{
DO
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
;
IF
(
)
{
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
;
;
;
}
ELSE
{
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
;
;
}
}
WHILE
(
)
;
}
VOID
(
FLOAT
,
FLOAT
,
INT
,
INT
)
{
INT
,
;
FLOAT
;
IF
(
)
{
=
(
)
;
=
(
INT
)
;
=
(
INT
)
(
(
)
)
;
}
ELSE
{
=
(
)
;
=
(
INT
)
;
=
(
INT
)
(
(
)
)
;
IF
(
)
{
;
=
(
INT
)
;
}
}
=
;
=
;
}
VOID
(
,
,
,
)
{
FLOAT
,
;
INT
,
;
;
=
;
=
;
=
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
(
(
)
)
(
)
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
(
,
,
,
)
;
=
;
}
}
VOID
(
INT
)
{
STATIC
FLOAT
,
,
,
;
STATIC
FLOAT
,
,
,
;
STATIC
FLOAT
=
,
=
;
STATIC
UNSIGNED
LONG
,
;
EXTERN
UNSIGNED
LONG
,
,
;
,
,
,
,
,
,
,
,
,
,
,
,
;
;
;
;
(
)
,
,
,
,
;
(
)
,
,
;
;
(
)
;
;
;
;
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
(
)
;
;
(
)
;
(
)
;
,
,
,
,
,
,
;
;
(
)
;
;
;
(
)
;
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
(
)
;
;
(
)
;
(
)
;
,
,
,
,
,
,
;
;
(
)
;
;
;
(
)
;
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
(
)
;
;
(
)
;
(
)
;
,
,
,
,
,
,
;
;
(
)
;
;
;
(
)
;
;
;
;
;
;
;
(
)
;
(
)
,
;
(
)
,
;
(
)
;
;
(
)
;
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
VOID
(
INT
)
{
FLOAT
,
,
,
;
FLOAT
,
,
,
;
=
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
)
(
)
;
}
VOID
(
)
{
INT
;
;
;
INT
,
;
INT
;
INT
;
SHORT
;
DO
{
=
;
;
IF
(
)
{
;
;
}
ELSE
{
;
}
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
DO
{
IF
(
(
)
)
{
=
(
)
;
IF
(
)
{
=
(
(
)
)
(
)
;
=
;
}
}
;
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
}
WHILE
(
)
;
}
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
;
;
INT
,
;
INT
;
INT
;
SHORT
;
DO
{
=
;
;
IF
(
)
{
;
;
}
ELSE
{
;
}
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
DO
{
IF
(
(
)
)
{
INT
=
(
)
;
=
;
}
;
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
}
WHILE
(
)
;
}
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
;
INT
;
SHORT
;
DO
{
=
;
;
IF
(
)
{
;
;
}
ELSE
{
;
}
IF
(
)
{
=
;
=
;
=
;
DO
{
IF
(
(
)
)
{
=
;
}
;
;
;
}
WHILE
(
)
;
}
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
;
;
INT
,
;
INT
;
INT
;
SHORT
;
DO
{
=
;
;
IF
(
)
{
;
;
}
ELSE
{
;
}
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
DO
{
IF
(
(
)
)
{
INT
=
(
)
;
=
;
=
;
}
;
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
}
WHILE
(
)
;
}
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
;
INT
;
SHORT
;
DO
{
=
;
;
IF
(
)
{
;
;
}
ELSE
{
;
}
IF
(
)
{
=
;
=
;
=
;
DO
{
IF
(
(
)
)
{
=
;
}
;
;
;
}
WHILE
(
)
;
}
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
DO
{
=
;
;
IF
(
)
{
;
;
}
ELSE
{
;
}
IF
(
)
{
INT
,
;
;
;
INT
;
INT
;
SHORT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
DO
{
IF
(
(
)
)
{
IF
(
)
=
(
(
)
)
;
ELSE
=
(
(
)
)
(
)
;
=
;
}
;
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
}
WHILE
(
)
;
}
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
=
;
WHILE
(
)
{
INT
;
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
DO
{
=
;
}
WHILE
(
)
;
}
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
,
,
,
;
INT
,
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
}
ELSE
{
(
,
,
,
)
;
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
(
)
)
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
}
=
;
=
;
=
(
(
)
)
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
}
=
;
=
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
IF
(
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
(
)
(
)
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
}
ELSE
{
(
,
,
,
)
;
=
;
=
;
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
=
;
ELSE
=
;
=
;
=
(
(
)
)
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
}
=
;
=
;
=
(
(
)
)
(
(
)
)
;
IF
(
)
{
=
(
(
)
)
;
=
(
(
)
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
}
=
;
=
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
}
=
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
(
)
(
)
;
IF
(
)
{
INT
;
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
(
)
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
ELSE
{
=
;
}
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
;
IF
(
)
;
=
;
}
__E__O__F__
UNSIGNED
INT
;
INT
;
;
;
;
;
,
;
STATIC
,
;
;
INT
;
INT
;
INT
;
,
;
,
;
TYPEDEF
STRUCT
{
FLOAT
,
;
INT
;
}
;
INT
;
FLOAT
;
FLOAT
,
,
;
INT
;
;
INT
;
;
;
;
;
;
INT
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
}
;
=
{
{
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
}
}
;
FLOAT
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
VOID
(
VOID
)
{
INT
;
EXTERN
;
=
;
;
=
;
;
=
;
;
=
;
;
IF
(
)
(
,
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
FOR
(
=
;
;
)
IF
(
)
=
;
ELSE
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
=
(
,
)
;
}
=
;
=
;
FOR
(
=
;
;
)
{
(
,
)
;
}
=
;
}
VOID
(
,
)
{
,
;
INT
;
FLOAT
,
;
,
;
FLOAT
;
INT
,
,
;
FLOAT
,
,
,
;
INT
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
INT
)
(
)
;
}
=
;
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
=
(
INT
)
(
)
;
IF
(
)
{
IF
(
)
{
=
(
)
;
}
RETURN
;
}
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
FLOAT
)
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
FLOAT
)
)
;
}
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
WHILE
(
)
=
;
=
;
=
;
}
=
;
=
;
}
VOID
(
,
,
)
{
FLOAT
,
,
;
;
IF
(
)
{
DO
{
=
(
,
)
;
=
(
,
)
;
IF
(
)
{
IF
(
)
{
CONTINUE
;
}
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
(
,
,
)
;
RETURN
;
}
ELSE
{
IF
(
)
{
IF
(
)
=
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
(
,
,
)
;
RETURN
;
}
}
WHILE
(
(
=
)
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
;
=
(
)
(
(
UNSIGNED
LONG
)
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
;
}
VOID
(
,
INT
)
{
INT
,
;
UNSIGNED
;
;
FLOAT
;
;
,
;
;
IF
(
(
)
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
;
RETURN
;
}
IF
(
(
)
)
{
;
RETURN
;
}
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
{
=
;
CONTINUE
;
}
}
ELSE
{
IF
(
(
(
(
UNSIGNED
LONG
)
(
UNSIGNED
LONG
)
)
)
(
(
(
)
(
(
UNSIGNED
LONG
)
)
)
)
)
{
(
)
;
=
;
CONTINUE
;
}
}
}
=
(
)
(
)
;
=
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
ELSE
{
=
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
{
=
;
CONTINUE
;
}
}
ELSE
{
IF
(
(
(
(
UNSIGNED
LONG
)
(
UNSIGNED
LONG
)
)
)
(
(
(
)
(
(
UNSIGNED
LONG
)
)
)
)
)
{
(
)
;
=
;
CONTINUE
;
}
}
}
=
(
)
(
)
;
=
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
}
IF
(
)
RETURN
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
(
,
)
)
;
=
;
=
;
=
;
;
}
VOID
(
,
)
{
INT
;
UNSIGNED
;
;
FLOAT
;
;
;
;
IF
(
(
)
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
;
RETURN
;
}
IF
(
(
)
)
{
;
RETURN
;
}
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
=
;
=
;
FOR
(
;
;
=
)
{
=
=
;
(
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
}
IF
(
)
{
=
;
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
(
,
,
)
;
}
IF
(
)
RETURN
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
(
,
)
)
;
=
;
=
;
=
;
;
}
__E__O__F__
UNSIGNED
CHAR
,
;
,
,
,
;
INT
;
INT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
,
;
INT
,
,
,
;
;
INT
;
INT
;
;
STATIC
INT
,
;
STATIC
;
STATIC
INT
;
=
;
=
;
IF
(
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
(
INT
)
(
(
FLOAT
)
(
)
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
INT
)
(
(
FLOAT
)
(
)
)
;
=
;
}
}
=
(
(
INT
)
(
)
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
DO
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
)
;
;
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
=
(
(
INT
)
(
)
(
)
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
INT
;
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
=
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
INT
,
;
UNSIGNED
CHAR
,
;
,
,
,
,
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
DO
{
=
(
(
)
(
)
)
;
;
;
}
WHILE
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
INT
,
,
;
INT
;
SHORT
;
UNSIGNED
;
FLOAT
;
FLOAT
,
;
=
(
INT
)
(
)
;
DO
{
=
(
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
INT
)
(
)
;
IF
(
(
LONG
)
)
{
=
(
SHORT
)
(
)
;
;
;
}
IF
(
(
=
)
)
{
DO
{
=
;
;
;
;
(
INT
)
=
;
;
}
WHILE
(
)
;
}
IF
(
)
=
(
SHORT
)
(
)
;
}
WHILE
(
(
=
)
)
;
}
__E__O__F__
EXTERN
;
VOID
(
)
;
VOID
(
VOID
)
;
EXTERN
VOID
(
FLOAT
,
)
;
EXTERN
;
EXTERN
VOID
(
FLOAT
,
,
)
;
VOID
(
VOID
)
{
;
,
,
,
;
;
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
,
)
;
=
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
;
}
__E__O__F__
;
INT
,
,
,
;
INT
,
;
INT
,
,
,
;
UNSIGNED
;
VOID
;
UNSIGNED
CHAR
;
INT
;
UNSIGNED
;
INT
;
INT
;
INT
,
;
UNSIGNED
CHAR
,
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
=
{
,
,
,
}
;
VOID
(
VOID
)
;
EXTERN
UNSIGNED
;
FLOAT
;
;
INT
;
,
;
(
)
{
INT
;
IF
(
)
RETURN
;
=
;
WHILE
(
)
{
=
;
;
}
RETURN
;
}
VOID
(
VOID
)
{
UNSIGNED
CHAR
;
INT
,
,
;
INT
;
INT
,
,
;
INT
;
UNSIGNED
CHAR
;
VOID
(
)
(
VOID
)
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
(
(
)
(
)
)
)
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
(
)
(
)
;
=
;
IF
(
)
=
;
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
IF
(
)
{
=
;
}
ELSE
{
=
;
=
;
IF
(
)
(
)
;
}
=
(
)
;
(
,
,
)
;
=
;
=
(
)
(
)
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
{
IF
(
)
=
;
}
=
;
=
;
=
;
=
;
}
(
INT
,
INT
)
{
;
;
IF
(
(
)
(
)
)
(
,
,
)
;
IF
(
(
)
(
)
)
(
,
,
)
;
=
(
INT
)
(
(
)
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
;
IF
(
(
)
(
)
)
{
IF
(
)
{
=
;
}
=
;
}
=
;
IF
(
)
=
;
WHILE
(
)
{
=
;
IF
(
)
(
,
)
;
IF
(
)
=
;
;
=
;
}
IF
(
)
{
=
(
)
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
=
;
=
;
IF
(
)
=
(
(
)
(
)
)
;
=
;
IF
(
)
{
IF
(
(
)
)
=
;
}
ELSE
IF
(
)
{
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
)
;
(
,
,
,
,
)
;
}
}
INT
(
INT
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
INT
)
{
INT
;
=
;
WHILE
(
)
;
RETURN
;
}
(
,
INT
)
{
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
,
)
;
=
;
=
;
=
;
}
IF
(
)
=
;
ELSE
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
;
(
)
;
(
)
;
RETURN
;
}
__E__O__F__
VOID
(
VOID
)
{
INT
,
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
FOR
(
=
;
;
)
(
,
,
(
)
)
;
=
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
IF
(
(
(
)
,
)
)
{
(
,
(
)
)
;
CONTINUE
;
}
IF
(
)
=
(
)
;
(
,
(
)
)
;
(
)
;
(
,
,
)
;
;
}
=
;
}
(
VOID
)
{
;
INT
;
INT
;
CHAR
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
=
;
=
;
RETURN
;
}
}
(
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
CHAR
;
CHAR
;
(
,
)
;
(
,
(
)
,
,
(
)
,
)
;
(
)
;
(
,
(
)
,
,
(
)
,
)
;
(
)
;
(
,
(
)
,
,
(
)
,
)
;
=
(
,
,
)
;
WHILE
(
)
{
(
)
;
=
(
,
)
;
}
(
)
;
(
,
(
)
,
,
(
)
,
)
;
=
(
,
,
)
;
WHILE
(
)
{
(
)
;
=
(
,
)
;
}
(
)
;
}
VOID
(
CHAR
,
CHAR
)
{
,
;
INT
;
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
WHILE
(
)
{
=
(
,
,
(
)
,
)
;
IF
(
)
BREAK
;
(
,
,
,
)
;
}
(
)
;
(
)
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
,
;
INT
,
;
CHAR
;
(
,
,
)
;
(
)
;
(
,
(
)
,
,
(
)
,
)
;
(
,
(
)
,
,
(
)
,
)
;
(
)
;
(
,
)
;
(
,
(
)
,
,
(
)
,
)
;
(
,
(
)
,
,
(
)
,
)
;
(
,
)
;
(
,
(
)
,
,
(
)
,
)
;
=
(
)
;
(
,
(
)
,
,
(
)
,
)
;
=
(
,
,
)
;
WHILE
(
)
{
(
,
)
;
(
,
(
)
,
,
(
)
,
,
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
=
(
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
(
)
;
(
,
(
)
,
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
(
)
,
,
)
;
(
)
;
(
)
;
(
,
(
)
,
,
(
)
,
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
(
)
;
(
,
(
)
,
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
(
)
,
)
;
(
)
;
(
)
;
(
,
(
)
,
,
(
)
,
)
;
(
)
;
}
VOID
(
)
{
;
;
CHAR
,
;
CHAR
;
;
STRUCT
;
(
,
)
;
(
,
(
)
,
,
(
)
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
=
(
)
;
(
,
(
)
,
,
,
,
,
,
)
;
(
,
,
(
)
(
)
)
;
}
ELSE
{
(
,
(
)
,
,
)
;
}
(
,
,
(
)
,
)
;
(
,
,
(
)
,
)
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
CONTINUE
;
IF
(
(
)
(
)
(
)
(
)
)
{
(
,
,
)
;
CONTINUE
;
}
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
,
(
)
,
)
;
(
,
,
(
)
,
)
;
}
(
)
;
(
,
(
)
,
,
(
)
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
CHAR
,
;
CHAR
;
CHAR
;
(
)
;
(
,
(
)
,
,
(
)
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
(
)
,
)
;
(
,
(
)
,
)
;
WHILE
(
)
{
IF
(
(
,
,
(
)
,
)
)
BREAK
;
(
,
(
)
,
)
;
(
,
,
)
;
(
,
)
;
}
(
)
;
(
)
;
(
,
)
;
(
,
(
)
,
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
;
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
(
)
)
;
(
(
,
(
)
)
)
;
=
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
)
{
=
(
(
)
)
;
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
}
(
)
;
FOR
(
=
,
=
;
;
,
)
=
;
(
)
;
}
}
(
,
(
)
,
)
;
(
,
(
)
,
(
)
)
;
IF
(
)
{
(
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
=
(
)
;
IF
(
(
,
)
)
{
(
,
(
)
,
,
)
;
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
IF
(
(
,
)
(
,
)
(
,
)
)
{
(
)
;
}
(
,
(
)
,
,
(
)
,
(
)
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
;
(
(
)
,
)
;
(
)
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
(
,
)
(
,
)
(
,
)
)
{
(
)
;
}
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
,
,
;
;
CHAR
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
)
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
)
;
(
,
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
{
=
;
(
,
)
;
}
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
;
(
,
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
CHAR
;
CHAR
;
IF
(
(
)
)
RETURN
;
(
,
)
;
=
(
)
;
IF
(
)
{
;
(
)
=
;
}
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
(
)
;
(
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
;
INT
;
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
,
(
)
,
,
(
)
,
(
)
)
;
(
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
(
,
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
;
INT
;
;
(
)
{
IF
(
)
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
=
;
RETURN
;
}
VOID
(
)
{
;
INT
,
;
;
INT
,
,
,
,
;
INT
;
IF
(
)
RETURN
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
;
=
;
=
(
)
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
)
;
IF
(
)
{
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
;
=
(
)
(
)
;
=
(
)
;
=
;
=
(
)
;
}
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
;
=
(
)
;
}
FOR
(
=
;
;
)
(
,
)
;
}
}
VOID
(
,
,
)
{
,
;
INT
,
;
INT
,
;
INT
;
INT
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
{
=
(
)
;
=
;
}
IF
(
)
=
;
ELSE
{
=
(
)
;
=
;
}
IF
(
)
{
(
,
,
,
,
)
;
;
;
CONTINUE
;
}
IF
(
)
{
(
,
,
,
,
)
;
;
CONTINUE
;
}
IF
(
)
{
=
;
IF
(
)
;
(
,
)
;
IF
(
)
(
,
(
)
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
;
CONTINUE
;
}
}
(
,
)
;
IF
(
)
(
)
;
}
VOID
(
,
,
)
{
INT
;
INT
;
,
;
;
INT
;
=
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
}
ELSE
=
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
FOR
(
=
;
;
)
IF
(
)
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
(
,
)
;
}
VOID
(
,
)
{
,
;
INT
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
(
)
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
;
VOID
(
)
{
INT
;
INT
,
,
;
INT
;
;
,
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
,
,
,
,
)
;
IF
(
)
(
,
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
(
)
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
=
(
)
;
FOR
(
=
;
;
)
(
(
LONG
)
)
(
(
LONG
)
)
;
}
}
VOID
(
)
{
INT
,
;
;
;
;
;
;
INT
;
INT
,
;
INT
;
INT
;
;
;
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
)
;
=
;
(
)
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
(
,
)
)
{
IF
(
(
,
)
)
CONTINUE
;
}
IF
(
)
{
=
;
IF
(
(
(
(
)
)
)
)
CONTINUE
;
}
ELSE
{
IF
(
)
{
=
;
}
ELSE
=
;
IF
(
)
{
IF
(
(
,
)
)
CONTINUE
;
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
(
(
)
)
)
BREAK
;
}
IF
(
)
CONTINUE
;
}
IF
(
)
{
;
FLOAT
;
(
,
,
)
;
=
(
)
;
IF
(
)
CONTINUE
;
}
}
}
IF
(
(
)
)
CONTINUE
;
=
;
IF
(
)
{
(
)
;
=
;
}
=
;
IF
(
)
=
;
;
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
;
;
INT
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
(
)
;
WHILE
(
)
{
IF
(
(
)
(
)
)
(
,
,
,
,
)
;
;
=
(
)
;
}
(
,
)
;
(
,
,
)
;
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
__E__O__F__
;
VOID
(
,
)
{
INT
;
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
CHAR
;
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
,
INT
,
CHAR
,
)
{
CHAR
;
;
INT
;
IF
(
)
{
=
(
)
;
IF
(
)
(
,
)
;
}
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
(
(
)
,
,
,
)
;
ELSE
(
,
)
;
}
VOID
(
,
CHAR
,
)
{
CHAR
;
;
INT
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
CHAR
;
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
,
CHAR
)
{
INT
;
;
IF
(
)
(
,
)
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
;
(
,
)
;
(
,
)
;
(
)
;
}
}
VOID
(
INT
,
CHAR
)
{
IF
(
)
(
,
,
)
;
IF
(
)
=
;
(
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
}
VOID
(
INT
)
{
(
,
)
;
}
VOID
(
INT
)
{
(
,
)
;
}
VOID
(
INT
)
{
(
,
)
;
}
VOID
(
INT
)
{
(
,
)
;
}
VOID
(
FLOAT
)
{
(
,
)
;
}
VOID
(
CHAR
)
{
(
,
)
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
FLOAT
)
{
(
,
)
;
}
(
,
)
{
INT
;
INT
;
INT
,
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
(
(
(
)
)
)
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
(
,
)
{
INT
;
INT
;
INT
,
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
(
(
(
)
)
)
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
,
INT
,
INT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
IF
(
)
RETURN
;
(
,
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
=
;
}
VOID
(
FLOAT
,
INT
)
;
VOID
(
VOID
)
{
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
,
,
)
;
(
)
;
}
__E__O__F__
;
;
INT
(
CHAR
,
INT
,
INT
,
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
RETURN
;
}
INT
(
CHAR
)
{
RETURN
(
,
,
,
)
;
}
INT
(
CHAR
)
{
RETURN
(
,
,
,
)
;
}
INT
(
CHAR
)
{
RETURN
(
,
,
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
(
,
)
;
=
;
}
}
VOID
(
VOID
)
{
CHAR
;
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
,
(
)
,
,
(
)
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
;
=
;
=
;
FOR
(
=
;
;
)
(
)
;
=
;
}
}
VOID
(
CHAR
,
CHAR
,
,
,
)
{
INT
;
UNSIGNED
;
IF
(
)
(
,
)
;
(
)
;
(
,
)
;
IF
(
)
(
)
;
;
=
;
(
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
(
,
)
;
IF
(
(
)
)
{
(
,
,
)
;
=
;
}
ELSE
{
(
,
)
;
=
;
}
(
,
,
(
)
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
=
;
}
=
;
(
,
)
;
(
,
)
;
IF
(
)
{
=
(
,
,
)
;
}
ELSE
{
(
,
(
)
,
,
)
;
=
(
,
,
)
;
}
(
,
(
)
,
,
)
;
(
)
;
FOR
(
=
;
(
)
;
)
{
(
,
(
)
,
,
)
;
=
(
)
;
}
=
;
(
)
;
(
,
(
)
,
)
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
CHAR
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
)
;
(
)
;
}
(
)
;
=
;
IF
(
(
)
(
)
)
{
(
)
;
(
,
,
)
;
}
IF
(
)
{
IF
(
(
)
)
(
,
,
)
;
}
IF
(
(
)
)
{
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
(
,
)
,
)
;
}
ELSE
IF
(
(
)
)
{
IF
(
)
(
,
,
)
;
IF
(
)
(
)
;
}
ELSE
{
(
,
,
)
;
IF
(
)
(
)
;
}
=
(
)
;
=
(
(
)
)
;
=
;
=
(
(
)
)
;
(
(
)
)
;
=
;
(
,
(
)
,
,
)
;
(
,
)
;
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
(
,
,
(
)
)
;
}
}
VOID
(
,
CHAR
,
)
{
CHAR
;
CHAR
;
INT
;
CHAR
;
=
;
=
;
IF
(
)
(
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
(
,
)
)
;
}
ELSE
(
,
)
;
IF
(
(
)
(
,
)
)
(
,
)
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
ELSE
=
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
(
,
,
,
,
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
(
)
;
(
,
,
,
,
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
(
)
;
(
,
,
,
,
)
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
(
,
,
,
,
)
;
(
)
;
}
(
)
;
}
__E__O__F__
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
VOID
(
VOID
)
;
VOID
(
)
{
(
,
)
;
IF
(
)
{
(
)
;
}
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
}
CHAR
(
VOID
)
{
CHAR
;
STATIC
CHAR
;
INT
;
;
INT
;
INT
;
(
,
(
)
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
,
(
)
,
,
,
,
)
;
=
(
)
;
IF
(
(
)
)
BREAK
;
(
,
)
;
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
(
,
,
,
(
)
)
;
(
,
,
,
)
;
(
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
,
;
INT
;
IF
(
)
RETURN
;
=
(
(
)
)
;
IF
(
)
(
,
(
)
,
,
,
(
)
)
;
ELSE
{
=
;
FOR
(
=
;
;
)
IF
(
)
;
(
,
(
)
,
,
,
,
,
(
INT
)
)
;
}
(
,
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
(
)
;
=
;
=
;
=
;
}
(
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
INT
;
,
;
;
;
INT
;
INT
;
INT
;
INT
;
=
;
(
)
;
=
(
(
)
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
)
;
RETURN
;
}
=
(
(
)
)
;
=
(
(
)
)
;
(
,
(
)
,
(
)
)
;
(
)
=
;
(
,
,
(
)
)
;
IF
(
)
{
IF
(
(
)
)
{
(
)
;
(
,
,
)
;
RETURN
;
}
}
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
)
BREAK
;
(
,
,
)
;
RETURN
;
}
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
}
=
;
(
,
,
(
)
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
(
)
)
{
IF
(
(
)
(
)
(
(
INT
)
)
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
(
)
)
;
=
;
GOTO
;
}
}
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
(
,
,
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
(
(
,
)
)
)
{
IF
(
(
,
)
)
(
,
,
,
(
,
)
)
;
ELSE
(
,
,
)
;
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
(
)
;
(
,
,
)
;
(
,
,
,
)
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
}
INT
(
VOID
)
{
IF
(
(
)
)
RETURN
;
IF
(
(
(
)
,
)
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
(
,
(
)
,
)
;
ELSE
(
,
(
)
,
)
;
(
,
,
,
)
;
IF
(
(
)
)
{
(
)
;
}
ELSE
{
=
;
FOR
(
=
;
(
)
;
)
{
(
,
(
)
)
;
(
,
)
;
}
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
(
)
;
(
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
(
)
,
)
;
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
(
,
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
INT
,
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
;
}
}
IF
(
)
=
;
ELSE
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
;
INT
;
WHILE
(
(
,
,
)
)
{
IF
(
(
INT
)
)
{
(
)
;
CONTINUE
;
}
(
)
;
(
)
;
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
=
;
}
IF
(
(
,
)
)
{
IF
(
)
{
=
;
(
)
;
}
}
BREAK
;
}
IF
(
)
CONTINUE
;
}
}
VOID
(
VOID
)
{
INT
;
;
INT
;
INT
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
=
;
IF
(
)
{
=
;
CONTINUE
;
}
IF
(
(
)
)
{
(
,
,
)
;
(
)
;
=
;
}
}
}
VOID
(
VOID
)
{
;
INT
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
=
(
)
;
;
=
;
IF
(
)
{
(
)
;
IF
(
)
{
IF
(
)
(
)
;
=
;
}
}
IF
(
)
=
(
)
;
}
VOID
(
INT
)
{
=
=
;
IF
(
)
RETURN
;
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
(
)
;
=
;
}
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
)
{
(
,
(
)
)
;
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
{
IF
(
)
(
,
(
)
)
;
(
,
,
)
;
}
}
VOID
(
)
{
CHAR
;
INT
;
(
,
)
;
(
,
(
,
)
,
(
)
)
;
FOR
(
=
;
(
)
;
)
;
=
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
=
;
=
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
}
}
VOID
(
VOID
)
{
(
)
;
=
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
(
,
)
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
(
,
)
,
)
;
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
,
(
)
)
;
}
VOID
(
CHAR
,
)
{
INT
;
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
(
,
,
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
(
,
,
)
;
}
VOID
(
CHAR
,
)
{
IF
(
)
(
,
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
,
,
(
)
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
,
,
(
)
)
;
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
CHAR
,
)
{
}
VOID
(
FLOAT
)
{
}
__E__O__F__
CHAR
;
VOID
(
INT
,
CHAR
)
{
IF
(
)
{
(
,
,
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
}
VOID
(
,
INT
,
CHAR
,
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
{
CHAR
;
INT
;
FOR
(
=
;
;
)
=
;
=
;
(
,
)
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
)
;
(
,
)
;
(
,
)
;
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
,
)
{
;
;
INT
,
;
INT
;
;
INT
,
;
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
IF
(
)
(
,
,
)
;
SWITCH
(
)
{
CASE
=
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
BREAK
;
CASE
=
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
BREAK
;
DEFAULT
=
;
(
,
,
)
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
(
(
(
(
)
)
)
)
)
CONTINUE
;
}
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
(
)
;
}
VOID
(
,
,
INT
,
INT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
INT
;
INT
;
INT
;
INT
;
;
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
=
(
)
;
IF
(
)
{
=
;
;
}
ELSE
=
;
=
(
)
(
)
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
(
)
(
)
)
;
;
IF
(
)
;
IF
(
)
{
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
(
,
)
;
}
}
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
=
;
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
ELSE
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
}
(
)
{
;
;
(
)
;
(
,
,
(
)
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
,
)
;
(
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
(
,
,
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
(
)
;
}
(
)
{
INT
;
INT
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
{
;
}
IF
(
)
{
;
=
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
;
INT
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
{
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
,
)
;
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
(
)
;
(
,
,
)
;
(
)
;
}
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
{
IF
(
(
)
)
CONTINUE
;
(
)
;
}
ELSE
{
IF
(
)
(
,
,
)
;
}
}
}
__E__O__F__
;
VOID
(
VOID
)
{
CHAR
;
(
,
(
)
,
,
)
;
(
,
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
;
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
(
,
)
;
IF
(
)
{
=
(
)
;
=
;
=
;
(
,
,
(
)
)
;
(
,
)
;
(
,
(
,
)
)
;
}
}
VOID
(
VOID
)
{
INT
;
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
)
)
;
WHILE
(
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
;
}
IF
(
)
{
(
,
)
;
(
,
(
,
)
)
;
}
ELSE
{
(
,
)
;
(
,
(
,
,
)
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
)
)
;
(
,
,
(
)
)
;
WHILE
(
)
{
=
;
IF
(
)
{
(
,
)
;
(
,
,
,
,
)
;
}
;
}
IF
(
)
{
(
,
)
;
(
,
(
,
)
)
;
}
ELSE
{
(
,
)
;
(
,
(
,
,
)
)
;
}
}
VOID
(
VOID
)
{
(
,
)
;
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
(
,
)
;
(
,
)
;
;
=
;
IF
(
)
=
;
=
;
(
,
)
;
(
,
,
)
;
IF
(
)
RETURN
;
(
)
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
INT
;
INT
=
;
=
(
)
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
,
)
(
(
,
,
)
)
(
(
,
,
)
)
(
(
,
,
)
)
(
(
,
,
)
)
(
,
)
)
{
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
IF
(
)
(
)
;
=
(
,
(
VOID
)
)
;
=
;
IF
(
)
=
;
IF
(
(
(
,
,
)
)
)
{
(
,
,
)
;
IF
(
)
{
(
)
;
=
;
}
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
(
)
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
(
(
)
)
)
RETURN
;
;
=
(
)
;
IF
(
)
(
)
;
ELSE
{
(
)
;
(
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
(
(
)
)
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
(
)
;
}
TYPEDEF
STRUCT
{
CHAR
;
VOID
(
)
(
VOID
)
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
VOID
(
CHAR
)
{
;
(
,
)
;
=
;
FOR
(
=
;
;
)
IF
(
(
(
)
,
)
)
{
(
)
;
BREAK
;
}
IF
(
)
(
)
;
}
VOID
(
,
)
{
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
CHAR
;
;
,
,
;
INT
;
INT
;
INT
,
;
INT
;
;
INT
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
BREAK
;
SWITCH
(
)
{
DEFAULT
(
)
;
(
)
;
RETURN
;
CASE
BREAK
;
CASE
(
,
(
)
,
(
)
)
;
(
)
;
BREAK
;
CASE
IF
(
)
RETURN
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
{
(
)
=
;
}
}
(
,
,
(
)
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
=
;
BREAK
;
}
=
(
,
,
)
;
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
{
WHILE
(
)
{
(
,
)
;
;
}
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
(
,
)
;
}
=
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
BREAK
;
}
}
}
__E__O__F__
(
,
,
)
(
(
)
(
(
)
(
INT
)
(
(
(
)
)
)
)
)
(
)
(
,
,
)
TYPEDEF
STRUCT
{
INT
;
FLOAT
;
STRUCT
;
;
;
}
;
;
INT
;
FLOAT
,
;
;
INT
,
;
INT
;
INT
(
)
;
VOID
(
)
{
=
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
=
;
}
(
INT
,
,
)
{
;
;
,
,
,
;
=
;
;
(
)
;
(
)
;
IF
(
)
{
=
;
=
=
;
RETURN
;
}
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
=
;
=
(
,
,
)
;
=
(
,
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
=
=
;
}
VOID
(
)
{
;
INT
;
INT
;
INT
;
INT
,
,
;
INT
;
INT
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
IF
(
(
)
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
(
)
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
=
;
IF
(
(
)
)
{
FLOAT
,
;
INT
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
;
;
;
;
;
;
=
;
=
;
=
;
=
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
(
,
,
,
)
;
=
;
}
ELSE
=
;
}
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
IF
(
)
{
=
;
=
;
BREAK
;
}
=
;
}
}
}
IF
(
)
{
(
,
)
;
}
;
IF
(
)
RETURN
;
=
;
WHILE
(
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
BREAK
;
}
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
)
{
,
,
;
;
INT
;
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
=
)
{
=
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
;
}
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
INT
(
,
,
,
INT
,
INT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
INT
(
)
{
,
;
INT
,
;
INT
,
;
INT
;
FLOAT
;
=
(
,
)
;
=
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
;
IF
(
)
=
;
=
(
,
,
,
)
;
;
}
RETURN
;
}
TYPEDEF
STRUCT
{
,
;
FLOAT
,
;
,
;
FLOAT
,
;
;
;
INT
;
}
;
INT
(
)
{
;
IF
(
)
{
=
;
IF
(
)
(
,
)
;
RETURN
;
}
RETURN
(
,
)
;
}
VOID
(
)
{
INT
,
;
,
;
;
INT
;
FLOAT
;
=
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
}
IF
(
(
)
(
)
)
CONTINUE
;
=
(
)
;
=
;
IF
(
)
=
;
IF
(
)
=
(
,
,
,
,
,
,
,
)
;
ELSE
=
(
,
,
,
,
,
,
,
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
}
ELSE
IF
(
)
=
;
}
}
VOID
(
,
,
,
,
,
)
{
=
=
=
;
=
=
=
;
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
}
(
,
,
,
,
,
INT
)
{
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
(
)
)
;
=
(
,
,
,
,
,
)
;
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
,
,
,
,
)
;
(
)
;
RETURN
;
}
__E__O__F__
STATIC
INT
(
CHAR
,
CHAR
)
{
REGISTER
CHAR
=
,
=
;
REGISTER
CHAR
,
;
WHILE
(
(
=
)
)
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
WHILE
(
)
{
IF
(
(
)
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
}
}
STATIC
INT
(
CHAR
)
{
REGISTER
CHAR
=
;
REGISTER
CHAR
;
INT
=
;
WHILE
(
(
=
)
)
SWITCH
(
)
{
CASE
CASE
RETURN
;
CASE
;
CONTINUE
;
CASE
IF
(
)
RETURN
;
CONTINUE
;
CASE
IF
(
)
RETURN
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
)
{
REGISTER
CHAR
=
,
=
;
REGISTER
CHAR
;
WHILE
(
(
=
)
)
SWITCH
(
)
{
CASE
IF
(
)
RETURN
;
ELSE
;
BREAK
;
CASE
IF
(
)
RETURN
;
BREAK
;
CASE
RETURN
(
,
)
;
CASE
{
REGISTER
CHAR
=
;
INT
;
IF
(
)
RETURN
(
)
;
=
(
(
)
(
)
)
;
IF
(
)
;
=
;
WHILE
(
)
{
REGISTER
CHAR
=
,
=
;
IF
(
)
{
=
;
=
;
}
IF
(
)
RETURN
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
}
IF
(
)
GOTO
;
IF
(
)
BREAK
;
}
IF
(
)
RETURN
;
BREAK
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
ELSE
IF
(
)
;
}
IF
(
)
RETURN
;
BREAK
;
}
DEFAULT
IF
(
)
RETURN
;
}
RETURN
;
}
__E__O__F__
INT
(
INT
,
CHAR
)
{
}
__E__O__F__
;
TYPEDEF
STRUCT
{
;
INT
;
}
;
TYPEDEF
STRUCT
{
;
INT
,
;
}
;
;
INT
;
INT
;
INT
(
CHAR
,
INT
)
;
CHAR
(
VOID
)
;
VOID
(
,
STRUCT
)
{
(
,
,
(
)
)
;
IF
(
)
{
=
;
=
;
(
INT
)
=
;
}
ELSE
IF
(
)
{
=
;
(
INT
)
=
(
INT
)
;
=
;
}
}
VOID
(
STRUCT
,
)
{
(
INT
)
=
(
INT
)
;
=
;
=
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
,
,
)
)
)
RETURN
;
RETURN
;
}
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
(
)
,
,
,
,
,
,
(
)
)
;
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
(
)
,
,
,
,
,
)
;
RETURN
;
}
(
CHAR
,
STRUCT
)
{
STRUCT
;
CHAR
;
CHAR
;
(
,
,
(
)
)
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
(
(
STRUCT
)
)
=
(
(
SHORT
)
(
)
)
;
}
IF
(
)
{
(
INT
)
(
(
STRUCT
)
)
=
(
)
;
}
ELSE
{
IF
(
(
=
(
)
)
)
RETURN
;
(
INT
)
(
(
STRUCT
)
)
=
(
INT
)
;
}
RETURN
;
}
(
CHAR
,
)
{
STRUCT
;
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
IF
(
(
,
(
STRUCT
)
)
)
RETURN
;
(
,
)
;
RETURN
;
}
(
)
{
RETURN
(
,
)
;
}
(
,
,
)
{
INT
;
;
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
(
)
;
;
(
,
,
)
;
=
;
=
;
RETURN
;
}
VOID
(
,
INT
,
VOID
,
)
{
INT
;
;
=
;
=
(
)
;
;
(
,
,
)
;
=
;
}
(
,
,
)
{
INT
;
STRUCT
;
INT
;
INT
;
INT
;
INT
;
IF
(
(
,
,
)
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
CONTINUE
;
=
(
)
;
=
(
,
,
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
=
;
IF
(
)
CONTINUE
;
(
,
(
)
)
;
CONTINUE
;
}
IF
(
)
{
(
,
(
)
)
;
CONTINUE
;
}
=
;
(
,
)
;
RETURN
;
}
RETURN
;
}
VOID
(
,
INT
,
VOID
,
)
{
INT
;
STRUCT
;
INT
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
(
,
)
;
(
,
)
;
=
(
,
,
,
,
(
STRUCT
)
,
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
}
}
VOID
(
VOID
)
{
,
;
=
(
,
(
,
)
,
)
;
=
(
,
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
=
(
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
)
{
INT
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
}
}
ELSE
{
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
}
INT
(
CHAR
,
INT
)
{
INT
;
STRUCT
;
=
;
INT
=
;
IF
(
(
=
(
,
,
)
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
,
,
(
CHAR
)
,
(
)
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
=
;
ELSE
(
,
(
STRUCT
)
)
;
IF
(
)
=
;
ELSE
=
(
(
SHORT
)
)
;
=
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
}
CHAR
(
VOID
)
{
INT
;
=
;
RETURN
(
)
;
}
VOID
(
INT
)
{
STRUCT
;
;
EXTERN
;
EXTERN
;
IF
(
(
)
)
RETURN
;
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
=
(
)
;
(
,
,
,
,
)
;
}
__E__O__F__
;
INT
;
INT
;
VOID
(
INT
)
{
=
;
=
;
=
(
)
;
IF
(
)
(
,
,
)
;
RETURN
;
}
VOID
(
INT
)
{
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
;
RETURN
;
}
INT
(
VOID
)
{
;
=
(
,
)
;
IF
(
)
(
,
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
INT
;
INT
(
VOID
)
{
STRUCT
;
STRUCT
;
STATIC
INT
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
;
RETURN
;
}
VOID
(
CHAR
)
{
(
,
)
;
}
CHAR
(
CHAR
)
{
WHILE
(
)
{
=
(
)
;
;
}
}
STATIC
CHAR
;
STATIC
CHAR
;
STATIC
CHAR
;
STATIC
;
STATIC
(
CHAR
,
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
CHAR
;
IF
(
(
,
)
(
,
)
)
RETURN
;
(
,
,
,
)
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
CHAR
;
IF
(
)
(
)
;
(
,
)
;
IF
(
(
=
(
,
)
)
)
{
=
;
(
,
)
;
}
ELSE
(
,
)
;
IF
(
(
,
)
)
(
,
)
;
IF
(
(
=
(
)
)
)
RETURN
;
WHILE
(
(
=
(
)
)
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
}
}
RETURN
;
}
CHAR
(
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
IF
(
)
RETURN
;
WHILE
(
(
=
(
)
)
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
}
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
}
__E__O__F__
;
UNSIGNED
;
=
;
VOID
(
CHAR
)
{
IF
(
)
RETURN
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
UNSIGNED
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
RETURN
;
FOR
(
=
(
UNSIGNED
CHAR
)
;
;
)
{
;
IF
(
(
)
)
(
,
)
;
ELSE
(
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
(
,
,
)
)
;
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
,
(
,
,
)
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
INT
(
CHAR
)
{
STRUCT
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
(
,
)
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
;
STRUCT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
,
)
;
=
;
=
;
IF
(
(
,
,
,
,
)
(
,
)
)
RETURN
;
=
(
,
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
RETURN
;
}
STATIC
VOID
;
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
}
VOID
(
VOID
)
{
VOID
(
)
(
VOID
)
;
CHAR
;
CHAR
;
CHAR
;
CONST
CHAR
=
;
CONST
CHAR
=
;
IF
(
)
(
,
)
;
(
,
(
)
)
;
(
,
)
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
RETURN
;
(
,
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
BREAK
;
}
ELSE
(
,
(
)
)
;
}
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
=
(
)
;
}
CHAR
(
VOID
)
{
RETURN
;
}
INT
(
INT
,
CHAR
)
{
INT
,
,
;
INT
;
CHAR
;
INT
;
=
;
=
(
(
)
(
CHAR
)
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
;
(
,
)
;
(
,
)
;
(
,
,
(
,
,
)
)
;
=
(
,
,
)
;
IF
(
)
{
(
,
,
(
,
,
)
)
;
}
=
(
)
;
WHILE
(
)
{
DO
{
=
(
)
;
=
;
}
WHILE
(
)
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
RETURN
;
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
EXTERN
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
;
;
;
;
INT
;
VOID
(
VOID
)
;
STATIC
VOID
(
VOID
)
{
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
}
STATIC
INT
(
VOID
)
{
;
;
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
VOID
(
INT
,
)
{
;
;
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
}
=
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
}
VOID
(
INT
,
)
{
=
;
(
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
,
,
,
)
;
=
(
,
,
,
)
;
=
(
)
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
,
)
)
{
(
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
RETURN
;
}
}
(
,
,
,
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
}
BREAK
;
CASE
CASE
BREAK
;
CASE
(
)
;
(
)
;
=
;
BREAK
;
DEFAULT
(
,
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
ELSE
{
=
;
(
)
;
}
}
}
INT
(
VOID
)
{
;
;
;
INT
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
RETURN
;
=
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
{
(
,
)
;
(
,
,
,
(
)
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
=
;
IF
(
(
)
)
{
=
;
=
;
}
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
(
,
,
,
(
)
)
)
(
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
}
__E__O__F__
;
;
;
;
;
;
UNSIGNED
(
VOID
)
;
(
)
;
VOID
(
)
;
(
INT
)
;
(
INT
)
;
(
,
INT
,
INT
)
;
(
)
;
INT
(
CHAR
)
;
(
,
INT
,
INT
)
;
INT
;
CHAR
;
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
VOID
(
INT
,
CHAR
)
{
UNSIGNED
;
;
;
;
INT
;
=
;
=
;
IF
(
(
=
(
)
)
)
{
IF
(
)
=
(
)
(
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
=
(
)
(
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
=
(
)
(
)
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
=
;
=
;
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
,
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
UNSIGNED
(
VOID
)
{
INT
;
;
;
INT
,
;
=
;
=
;
WHILE
(
)
{
=
(
,
,
,
)
;
IF
(
)
BREAK
;
=
(
INT
)
(
)
;
IF
(
)
{
(
)
;
BREAK
;
}
SWITCH
(
)
{
CASE
=
(
(
)
(
)
)
;
BREAK
;
CASE
=
;
=
;
=
(
(
)
(
)
,
,
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
}
(
)
;
(
)
;
}
(
)
;
RETURN
;
}
(
)
{
;
=
(
,
,
,
,
)
;
RETURN
;
}
VOID
(
)
{
(
)
;
}
(
INT
)
{
;
;
=
(
,
)
;
IF
(
)
=
;
RETURN
;
}
(
INT
)
{
RETURN
(
,
,
)
;
}
(
,
INT
,
INT
)
{
;
;
;
=
;
=
;
=
(
,
,
(
)
,
,
)
;
IF
(
)
=
;
RETURN
;
}
(
)
{
;
;
CHAR
,
;
=
(
)
;
WHILE
(
)
{
IF
(
)
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
=
;
(
,
,
,
)
;
;
}
RETURN
;
}
INT
(
CHAR
)
{
CHAR
;
=
(
)
;
SWITCH
(
)
{
CASE
RETURN
;
DEFAULT
BREAK
;
}
IF
(
(
)
)
RETURN
(
)
;
IF
(
(
)
)
RETURN
(
)
;
RETURN
;
}
(
,
INT
,
INT
)
{
;
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
,
)
)
RETURN
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
(
,
)
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
(
,
)
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
}
RETURN
;
}
__E__O__F__
STATIC
(
INT
,
INT
)
;
(
VOID
)
;
;
EXTERN
;
EXTERN
;
STATIC
(
VOID
)
{
CHAR
;
(
,
(
)
)
;
(
)
;
IF
(
(
,
)
)
IF
(
)
RETURN
;
RETURN
;
}
(
INT
,
INT
,
)
{
;
;
,
;
INT
;
INT
,
,
,
;
INT
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
(
VOID
)
;
=
;
=
;
IF
(
(
)
)
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
,
,
)
;
=
(
,
,
)
;
=
;
=
;
}
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
)
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
(
)
;
(
)
;
(
,
)
;
RETURN
;
}
(
INT
,
INT
,
INT
,
)
{
INT
,
;
CONST
CHAR
=
{
,
}
;
(
,
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
,
)
;
IF
(
)
{
(
)
;
}
IF
(
)
{
;
(
,
)
;
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
{
=
;
;
(
,
,
(
INT
)
)
;
}
ELSE
{
=
(
)
;
INT
=
(
,
)
;
(
,
,
)
;
(
,
)
;
}
(
,
)
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
(
,
)
;
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
ELSE
{
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
IF
(
)
{
=
;
;
}
IF
(
(
,
)
)
{
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
ELSE
{
(
,
)
;
IF
(
(
,
,
)
)
RETURN
;
=
;
RETURN
;
}
}
}
ELSE
{
(
,
)
;
(
,
)
;
=
;
=
;
=
;
IF
(
(
,
,
)
)
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
(
,
)
)
(
,
)
;
IF
(
)
{
IF
(
(
)
)
(
,
)
;
=
;
}
IF
(
)
{
IF
(
(
,
)
)
(
,
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
(
,
)
;
IF
(
)
{
(
,
)
;
=
;
}
}
(
VOID
,
VOID
)
{
;
=
(
)
;
=
;
IF
(
(
)
)
{
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
(
)
)
{
=
;
}
}
}
}
ELSE
{
(
,
)
;
RETURN
;
}
=
(
)
;
=
;
RETURN
;
}
(
VOID
)
{
=
{
(
)
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
;
;
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
;
=
;
}
ELSE
{
=
;
}
IF
(
(
,
)
)
=
;
ELSE
=
;
IF
(
)
(
,
)
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
=
(
,
)
)
)
{
(
,
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
,
)
;
RETURN
;
}
(
,
,
(
)
,
)
;
}
ELSE
{
IF
(
(
=
(
,
)
)
)
{
(
,
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
,
)
;
RETURN
;
}
(
,
,
(
)
,
)
;
IF
(
(
)
)
{
EXTERN
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
;
}
}
IF
(
(
)
(
)
)
{
(
,
)
;
(
,
)
;
=
;
}
IF
(
(
=
(
)
)
)
{
(
,
)
;
GOTO
;
}
IF
(
(
,
)
)
{
(
,
)
;
GOTO
;
}
IF
(
(
)
)
{
(
,
)
;
GOTO
;
}
(
,
,
(
INT
)
,
(
INT
)
)
;
RETURN
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
=
;
}
RETURN
;
}
VOID
(
FLOAT
)
{
IF
(
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
}
=
;
}
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
(
)
;
IF
(
(
,
)
)
{
IF
(
(
)
)
(
,
)
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
(
,
)
;
}
ELSE
{
IF
(
)
(
,
)
;
}
}
__E__O__F__
EXTERN
UNSIGNED
;
ENUM
{
=
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
,
,
;
,
;
INT
;
;
;
STATIC
;
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
;
;
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
(
)
;
}
INT
;
INT
;
;
INT
,
,
,
,
,
;
INT
,
;
;
;
;
INT
,
=
{
,
,
}
;
;
INT
,
;
;
VOID
(
VOID
)
{
INT
,
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
IF
(
)
=
(
,
,
,
)
;
=
(
)
;
=
(
)
;
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
=
(
)
;
(
,
)
;
=
;
=
;
(
)
;
(
)
;
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
(
,
,
,
)
;
=
;
(
)
;
(
)
;
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
;
=
(
,
,
)
;
IF
(
)
RETURN
;
=
;
=
(
,
,
,
)
;
=
;
}
VOID
(
INT
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
,
)
;
}
}
=
;
}
VOID
(
)
{
INT
,
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
;
;
IF
(
(
)
(
)
)
;
ELSE
;
IF
(
(
)
(
)
)
{
;
}
ELSE
{
;
}
IF
(
)
(
,
)
;
}
;
;
VOID
(
VOID
)
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
(
)
;
}
VOID
(
)
{
(
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
;
;
=
;
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
=
(
)
)
)
{
RETURN
;
}
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
IF
(
(
=
(
,
)
)
)
BREAK
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
(
)
)
;
IF
(
(
=
(
,
,
(
)
)
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
=
;
=
;
=
;
(
)
;
}
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
}
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
(
,
)
)
{
(
,
)
;
}
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
,
;
IF
(
)
{
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
(
,
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
(
,
,
)
;
}
}
=
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
,
)
;
}
}
=
;
}
}
(
VOID
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
IF
(
(
,
)
)
{
RETURN
;
}
ELSE
{
RETURN
;
}
}
VOID
(
)
{
FLOAT
,
;
FLOAT
;
INT
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
RETURN
;
}
IF
(
(
)
)
{
RETURN
;
}
IF
(
(
)
(
INT
)
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
{
=
(
FLOAT
)
;
;
;
SWITCH
(
)
{
CASE
IF
(
(
)
)
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
}
ELSE
{
IF
(
(
)
)
{
(
)
;
}
}
BREAK
;
CASE
IF
(
(
)
)
{
(
)
;
}
BREAK
;
CASE
IF
(
(
)
)
{
(
)
;
}
BREAK
;
CASE
IF
(
(
)
(
)
)
{
IF
(
(
)
)
{
(
)
;
}
}
ELSE
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
}
BREAK
;
CASE
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
}
BREAK
;
DEFAULT
BREAK
;
}
}
}
__E__O__F__
TYPEDEF
STRUCT
{
;
INT
;
}
;
TYPEDEF
STRUCT
{
;
INT
,
;
}
;
;
STATIC
;
STATIC
;
;
INT
;
INT
;
CHAR
(
VOID
)
;
VOID
(
,
STRUCT
)
{
(
,
,
(
)
)
;
IF
(
)
{
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
}
ELSE
IF
(
)
{
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
(
INT
)
;
(
(
STRUCT
)
)
=
;
}
ELSE
IF
(
)
{
(
(
STRUCT
)
)
=
;
(
(
(
STRUCT
)
)
,
,
)
;
(
(
(
STRUCT
)
)
,
,
)
;
(
(
STRUCT
)
)
=
;
}
ELSE
IF
(
)
{
(
(
STRUCT
)
)
=
;
(
(
(
STRUCT
)
)
,
,
)
;
(
(
(
STRUCT
)
)
,
,
)
;
(
(
STRUCT
)
)
=
;
}
}
VOID
(
STRUCT
,
)
{
IF
(
)
{
=
;
(
INT
)
=
(
(
STRUCT
)
)
;
=
(
(
STRUCT
)
)
;
}
ELSE
IF
(
)
{
=
;
(
,
(
(
STRUCT
)
)
,
)
;
(
,
(
(
STRUCT
)
)
,
)
;
=
(
(
STRUCT
)
)
;
}
}
(
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
,
,
)
)
)
RETURN
;
RETURN
;
}
}
(
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
,
,
)
)
)
RETURN
;
RETURN
;
}
}
CHAR
(
)
{
STATIC
CHAR
;
IF
(
)
(
,
(
)
,
)
;
ELSE
IF
(
)
(
,
(
)
,
,
,
,
,
,
(
)
)
;
ELSE
(
,
(
)
,
,
,
,
,
,
,
,
,
,
,
,
(
)
)
;
RETURN
;
}
(
,
)
=
;
=
;
(
,
,
)
;
(
(
STRUCT
)
)
=
(
CHAR
,
STRUCT
)
{
STRUCT
;
CHAR
;
INT
;
CHAR
;
(
,
,
(
)
)
;
IF
(
(
(
)
)
(
)
(
)
)
{
(
(
STRUCT
)
)
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
(
STRUCT
)
)
=
(
(
UNSIGNED
SHORT
)
)
;
}
ELSE
{
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
(
(
STRUCT
)
)
=
(
(
SHORT
)
(
)
)
;
}
IF
(
)
{
(
INT
)
(
(
STRUCT
)
)
=
(
)
;
}
ELSE
{
IF
(
(
=
(
)
)
)
RETURN
;
(
INT
)
(
(
STRUCT
)
)
=
(
INT
)
;
}
}
RETURN
;
}
(
CHAR
,
)
{
STRUCT
;
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
(
,
)
;
RETURN
;
}
(
)
{
RETURN
;
}
(
,
,
)
{
INT
;
;
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
(
)
;
;
(
,
,
)
;
=
;
(
,
,
(
)
)
;
=
;
RETURN
;
}
VOID
(
,
INT
,
VOID
,
)
{
INT
;
;
=
;
=
(
)
;
;
(
,
,
)
;
=
;
}
(
,
,
)
{
INT
;
STRUCT
;
INT
;
INT
;
INT
;
INT
;
IF
(
(
,
,
)
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
CONTINUE
;
=
(
)
;
=
(
,
,
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
(
,
(
)
)
;
ELSE
(
,
,
(
)
)
;
CONTINUE
;
}
(
,
)
;
IF
(
)
{
(
,
(
)
)
;
CONTINUE
;
}
=
;
RETURN
;
}
RETURN
;
}
VOID
(
,
INT
,
VOID
,
)
{
INT
;
STRUCT
;
INT
;
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
RETURN
;
}
ELSE
(
,
)
;
(
,
)
;
=
(
,
,
,
,
,
(
)
)
;
IF
(
)
{
INT
=
(
)
;
IF
(
)
RETURN
;
IF
(
(
)
(
(
)
(
)
)
)
RETURN
;
IF
(
)
{
(
,
(
)
)
;
}
ELSE
{
IF
(
)
{
(
,
(
)
,
(
)
)
;
}
ELSE
{
(
,
,
(
)
)
;
}
}
}
}
INT
(
CHAR
,
INT
)
{
INT
;
STRUCT
;
=
;
INT
=
;
INT
;
IF
(
(
=
(
,
,
)
)
)
{
=
(
)
;
IF
(
)
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
,
,
(
CHAR
)
,
(
)
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
=
;
ELSE
(
,
(
STRUCT
)
)
;
IF
(
)
=
;
ELSE
=
(
(
SHORT
)
)
;
=
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
;
INT
;
INT
;
=
(
,
,
)
;
=
(
)
;
IF
(
)
{
=
(
,
,
)
;
IF
(
)
{
=
(
,
,
)
;
IF
(
)
{
=
(
,
(
,
)
,
)
;
}
}
=
(
,
)
;
IF
(
)
(
,
)
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
(
,
,
)
;
IF
(
)
{
=
(
,
(
,
)
,
)
;
IF
(
)
=
;
}
=
(
,
)
;
IF
(
)
=
(
,
)
;
}
}
INT
(
INT
)
{
INT
;
STRUCT
;
INT
=
;
INT
;
IF
(
(
=
(
,
,
)
)
)
{
=
(
)
;
IF
(
)
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
,
,
,
(
CHAR
)
,
(
)
)
)
{
(
,
(
)
)
;
RETURN
;
}
=
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
(
(
SHORT
)
)
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
(
)
;
IF
(
)
{
=
(
,
,
)
;
IF
(
)
{
=
(
,
,
)
;
IF
(
)
{
=
(
,
(
,
)
,
)
;
}
}
=
(
)
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
(
,
,
)
;
IF
(
)
{
=
(
,
(
,
)
,
)
;
IF
(
)
=
;
}
=
(
)
;
IF
(
)
=
(
)
;
}
}
VOID
(
)
{
INT
;
STATIC
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
}
}
ELSE
{
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
VOID
(
INT
)
{
STRUCT
;
;
EXTERN
;
INT
;
IF
(
)
RETURN
;
(
)
;
=
;
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
{
(
,
)
;
IF
(
)
=
;
}
=
;
=
(
)
;
(
,
,
,
,
)
;
}
STATIC
;
VOID
(
VOID
)
{
;
INT
;
=
(
,
)
;
=
(
(
,
)
,
)
;
IF
(
)
(
,
)
;
(
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
CHAR
(
VOID
)
{
INT
;
=
(
)
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
DEFAULT
RETURN
;
}
}
__E__O__F__
INT
(
)
(
,
)
;
INT
(
)
(
,
INT
,
,
)
;
INT
(
)
(
)
;
(
)
(
,
INT
,
)
;
(
)
(
)
;
(
)
(
,
,
)
;
(
)
(
)
;
(
)
(
,
INT
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
,
)
;
(
)
(
,
)
;
(
)
(
,
,
,
)
;
(
)
(
,
,
,
,
,
,
INT
,
)
;
(
)
(
,
INT
,
INT
,
,
)
;
INT
(
)
(
,
INT
,
INT
,
INT
,
)
;
INT
(
)
(
,
INT
,
INT
,
INT
,
)
;
(
)
(
,
INT
,
)
;
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
(
)
(
,
CONST
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
)
;
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
(
)
(
VOID
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
CONST
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
,
CONST
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
,
CONST
,
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
,
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
,
CONST
)
;
(
)
(
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
CONST
)
;
VOID
(
)
(
,
,
,
CONST
)
;
VOID
(
)
(
,
,
,
)
;
VOID
(
)
(
INT
,
INT
)
;
VOID
(
)
(
VOID
)
;
(
)
(
INT
)
;
(
)
(
UNSIGNED
CHAR
,
UNSIGNED
CHAR
,
UNSIGNED
CHAR
)
;
(
)
(
CONST
UNSIGNED
CHAR
,
CONST
UNSIGNED
CHAR
,
CONST
UNSIGNED
CHAR
)
;
VOID
(
)
(
,
)
;
VOID
(
)
(
,
CONST
)
;
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
INT
,
CONST
VOID
)
;
VOID
(
)
(
)
;
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
(
)
(
,
CONST
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
CONST
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
(
)
(
)
;
(
)
(
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
,
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
,
CONST
)
;
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
,
,
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
)
(
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
CONST
)
;
STATIC
VOID
(
)
(
,
,
,
)
;
STATIC
VOID
(
,
)
{
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
(
,
CONST
,
)
{
(
,
)
;
RETURN
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
CONST
)
{
(
,
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
,
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
,
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
)
;
(
)
;
}
(
)
(
,
)
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
,
,
,
,
,
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
,
,
,
,
,
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
,
,
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
(
VOID
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
CONST
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
VOID
)
{
(
)
;
(
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
,
CONST
)
{
(
)
;
(
,
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
VOID
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
)
{
(
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
,
,
,
)
;
(
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
CONST
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
VOID
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
,
CONST
)
{
(
)
;
(
,
)
;
}
STATIC
(
)
{
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
CONST
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
,
,
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
,
,
,
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
)
{
(
)
;
(
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
CONST
)
{
(
)
;
(
)
;
}
STATIC
VOID
(
,
,
,
CONST
VOID
)
{
(
)
;
(
,
,
,
)
;
}
STATIC
VOID
(
,
,
,
)
{
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
(
)
(
,
)
(
CONST
CHAR
)
{
{
CHAR
;
FLOAT
;
=
(
(
)
)
;
(
,
(
)
,
,
)
;
(
)
;
(
,
(
)
,
,
)
;
(
)
;
}
IF
(
(
=
(
)
)
)
{
CHAR
=
;
(
,
,
(
)
,
(
,
)
,
(
)
,
,
)
;
(
,
,
)
;
RETURN
;
}
=
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
{
STRUCT
;
;
CHAR
;
(
)
;
=
(
)
;
(
)
;
(
,
(
)
,
,
(
)
)
;
=
(
,
)
;
(
,
,
(
)
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
(
,
)
;
}
(
DEFAULT
)
__E__O__F__
INT
;
;
INT
;
INT
;
VOID
(
INT
)
{
=
;
=
;
=
(
,
,
,
)
;
=
(
)
;
(
,
,
)
;
IF
(
)
(
)
;
RETURN
(
VOID
)
;
}
VOID
(
INT
)
{
VOID
;
=
(
)
;
=
(
,
,
,
)
;
IF
(
)
{
(
,
,
(
)
,
(
,
)
,
(
)
,
,
)
;
(
,
)
;
}
;
IF
(
)
(
)
;
RETURN
(
VOID
)
(
)
;
}
INT
(
VOID
)
{
VOID
;
=
(
,
,
,
)
;
IF
(
)
(
)
;
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
,
)
;
(
)
;
;
}
INT
;
INT
(
VOID
)
{
STATIC
INT
;
STATIC
=
;
IF
(
)
{
=
(
)
;
=
;
}
=
(
)
;
RETURN
;
}
VOID
(
CHAR
)
{
(
)
;
}
CHAR
;
CHAR
;
INT
;
STATIC
(
UNSIGNED
,
UNSIGNED
,
UNSIGNED
)
{
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
IF
(
)
(
)
;
=
;
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
(
,
(
)
,
,
,
)
;
RETURN
;
}
CHAR
(
UNSIGNED
,
UNSIGNED
)
{
STRUCT
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
(
,
(
)
,
,
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
}
__E__O__F__
STATIC
CONST
CHAR
(
INT
)
;
(
UNSIGNED
CHAR
,
INT
)
{
;
;
;
;
INT
;
EXTERN
;
(
)
(
,
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
(
,
)
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
GOTO
;
}
(
,
)
;
}
IF
(
(
=
(
(
)
(
,
,
)
)
(
,
)
)
)
{
(
,
)
;
GOTO
;
}
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
=
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
(
,
)
;
}
ELSE
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
(
,
,
)
;
IF
(
(
=
(
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
IF
(
(
=
(
,
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
=
;
}
ELSE
{
(
,
)
;
GOTO
;
}
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
(
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
=
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
(
(
CONST
UNSIGNED
CHAR
)
)
;
(
,
,
(
)
)
;
=
(
)
;
(
,
)
;
IF
(
(
=
(
,
,
,
,
)
)
)
{
(
,
,
(
)
)
;
GOTO
;
}
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
}
=
;
RETURN
;
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
CONST
UNSIGNED
CHAR
)
{
;
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
=
;
}
IF
(
(
,
,
,
,
)
)
{
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
(
)
;
=
;
}
}
STATIC
CONST
CHAR
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
DEFAULT
RETURN
;
}
}
__E__O__F__
STATIC
;
STATIC
;
STATIC
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
(
(
)
(
INT
)
)
STATIC
INT
;
TYPEDEF
STRUCT
{
;
;
}
;
TYPEDEF
STRUCT
{
;
;
;
}
;
STATIC
;
STATIC
VOID
(
VOID
)
;
STATIC
VOID
(
VOID
)
;
(
UNSIGNED
CHAR
,
INT
)
{
;
=
(
)
;
INT
;
(
,
,
(
)
)
;
IF
(
)
{
IF
(
(
=
(
)
)
)
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
{
(
)
;
=
;
}
}
ELSE
{
=
;
}
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
GOTO
;
}
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
,
)
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
GOTO
;
}
IF
(
(
=
(
,
)
)
)
{
(
,
)
;
GOTO
;
}
RETURN
;
(
)
;
RETURN
;
}
VOID
(
CONST
UNSIGNED
CHAR
)
{
CONST
UNSIGNED
CHAR
=
;
=
(
)
;
;
INT
;
INT
;
=
;
IF
(
)
{
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
,
,
,
)
)
{
(
,
)
;
}
}
IF
(
)
{
INT
;
;
IF
(
(
,
)
)
{
(
,
)
;
}
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
=
(
)
)
)
{
(
,
,
(
)
)
;
}
IF
(
(
=
(
,
,
)
)
)
{
(
,
,
(
)
)
;
}
IF
(
)
=
;
IF
(
(
=
(
)
)
)
{
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
,
,
)
;
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
=
;
}
IF
(
)
{
(
,
)
;
=
;
}
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
(
)
;
}
__E__O__F__
;
VOID
(
INT
,
INT
,
INT
)
{
;
;
,
,
;
INT
,
,
,
;
INT
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
(
VOID
)
;
=
;
=
;
IF
(
(
)
)
(
,
)
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
INT
(
VOID
,
VOID
)
{
=
(
)
;
=
;
RETURN
;
}
STATIC
(
)
{
(
)
;
(
,
,
)
;
IF
(
)
{
IF
(
(
,
)
)
{
=
;
=
;
RETURN
;
}
}
ELSE
{
IF
(
(
,
)
)
{
=
;
=
;
RETURN
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
{
}
(
,
,
,
,
,
,
,
,
)
;
IF
(
)
{
}
}
ELSE
{
;
;
;
=
;
=
;
=
;
=
;
(
,
)
;
IF
(
)
{
IF
(
(
=
(
,
,
,
,
,
)
)
)
{
(
)
;
(
,
,
,
,
,
)
;
}
IF
(
(
=
(
,
,
)
)
)
{
(
)
;
(
,
,
)
;
}
}
ELSE
{
IF
(
(
=
(
,
,
,
,
,
)
)
)
{
(
)
;
(
,
,
,
,
,
)
;
}
}
(
,
,
(
)
)
;
=
(
)
;
(
,
,
,
,
)
;
=
;
=
;
}
}
(
INT
,
INT
,
INT
,
)
{
CONST
CHAR
=
{
,
}
;
=
;
(
,
,
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
,
)
;
=
;
IF
(
)
{
IF
(
(
)
)
{
IF
(
(
)
)
{
=
;
=
;
}
ELSE
{
=
;
}
}
}
ELSE
{
IF
(
(
)
)
{
=
;
RETURN
;
}
}
=
;
IF
(
)
{
IF
(
(
)
)
{
(
,
,
)
;
}
}
(
(
CONST
UNSIGNED
CHAR
)
)
;
=
;
RETURN
;
}
VOID
(
CONST
UNSIGNED
CHAR
)
{
IF
(
)
=
(
CONST
UNSIGNED
CHAR
)
;
IF
(
)
{
(
(
CONST
UNSIGNED
CHAR
)
)
;
}
ELSE
{
(
(
CONST
UNSIGNED
CHAR
)
)
;
}
}
VOID
(
VOID
)
{
(
,
)
;
(
)
;
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
)
;
=
;
(
,
)
;
}
}
VOID
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
(
,
)
;
}
}
ELSE
{
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
}
}
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
;
IF
(
(
(
)
,
,
,
)
)
(
,
)
;
}
VOID
(
VOID
)
{
}
UNSIGNED
,
,
,
,
;
UNSIGNED
,
;
VOID
(
VOID
)
{
,
,
,
,
;
,
,
,
,
;
,
,
,
,
;
,
,
,
;
,
,
,
;
,
,
;
,
}
__E__O__F__
(
,
,
)
(
,
,
)
(
)
(
,
,
)
;
TYPEDEF
ENUM
{
,
,
}
;
;
STATIC
;
STATIC
;
STATIC
=
,
,
;
STATIC
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
INT
,
;
;
,
;
;
;
;
;
;
;
;
,
;
;
(
VOID
)
;
(
VOID
)
;
VOID
(
VOID
)
;
STATIC
CONST
CHAR
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
}
RETURN
;
}
STATIC
(
VOID
)
{
;
;
,
;
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
(
)
;
=
;
(
)
;
IF
(
(
,
,
,
)
)
{
=
;
(
)
;
IF
(
(
,
)
)
{
IF
(
)
(
)
;
}
ELSE
{
IF
(
)
(
)
;
=
;
}
}
ELSE
(
)
;
IF
(
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
(
)
;
(
)
;
IF
(
(
,
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
}
ELSE
{
(
)
;
(
)
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
=
;
}
(
,
,
,
)
;
IF
(
)
(
,
,
,
)
;
=
;
=
;
(
)
;
(
,
,
)
;
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
(
)
;
(
,
,
)
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
IF
(
(
)
)
{
(
)
;
(
)
;
}
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
IF
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
IF
(
)
{
(
)
;
FOR
(
=
;
;
)
(
,
,
(
)
)
;
}
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
}
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
VOID
)
{
;
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
(
)
;
IF
(
)
{
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
(
)
;
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
,
)
)
{
(
)
;
RETURN
;
}
}
(
)
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
=
;
(
)
;
RETURN
;
}
(
VOID
)
{
;
INT
;
;
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
WHILE
(
(
=
(
(
)
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
,
)
)
{
(
)
;
RETURN
;
}
}
(
)
;
(
)
;
=
;
=
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
,
)
;
(
)
;
(
)
;
=
(
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
(
)
;
=
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
,
,
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
}
(
)
;
=
(
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
=
;
RETURN
;
}
INT
(
VOID
)
{
;
(
(
VOID
)
,
,
(
)
)
;
=
(
,
,
)
;
=
=
;
=
;
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
IF
(
)
(
)
;
}
ELSE
{
=
;
(
)
;
}
}
}
IF
(
(
)
)
{
IF
(
)
{
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
}
ELSE
{
(
)
;
}
}
}
=
;
=
;
IF
(
)
{
IF
(
)
(
)
;
RETURN
;
}
RETURN
;
}
INT
(
VOID
)
{
;
INT
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
}
ELSE
IF
(
)
{
=
;
}
;
(
)
;
RETURN
;
}
;
VOID
(
VOID
)
{
INT
;
;
,
;
;
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
IF
(
)
(
)
;
IF
(
(
)
)
(
,
,
,
)
;
=
;
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
,
(
)
)
;
(
)
;
RETURN
;
}
ELSE
{
(
)
;
}
IF
(
)
RETURN
;
}
=
(
UNSIGNED
CHAR
)
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
)
(
,
,
,
,
)
;
IF
(
)
RETURN
;
WHILE
(
)
{
IF
(
)
{
(
)
;
BREAK
;
}
IF
(
(
)
)
{
BREAK
;
}
;
}
WHILE
(
(
(
)
)
)
{
=
(
)
;
IF
(
)
BREAK
;
;
=
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
}
}
ELSE
{
IF
(
)
{
(
)
;
}
}
}
__E__O__F__
;
INT
;
INT
;
;
STATIC
,
;
UNSIGNED
;
UNSIGNED
;
STATIC
;
INT
;
CHAR
;
VOID
(
CHAR
,
)
{
;
CHAR
;
(
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
,
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
(
,
,
(
)
,
(
,
)
,
(
)
,
,
)
;
(
,
,
,
)
;
(
)
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
STATIC
;
CHAR
;
;
CHAR
;
IF
(
)
RETURN
;
(
)
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
IF
(
(
)
)
RETURN
;
}
}
=
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
;
=
(
,
,
)
;
IF
(
)
(
)
;
(
)
;
=
(
,
,
,
)
;
(
)
;
=
(
)
;
IF
(
(
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
=
;
IF
(
)
{
IF
(
(
)
)
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
}
}
STATIC
CHAR
;
STATIC
INT
;
CHAR
(
VOID
)
{
;
INT
;
INT
,
,
;
IF
(
)
RETURN
;
FOR
(
;
;
)
{
IF
(
(
,
)
)
(
)
;
IF
(
)
BREAK
;
IF
(
(
,
,
,
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
{
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
(
,
,
,
,
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
BREAK
;
CASE
IF
(
)
{
;
(
,
,
,
,
)
;
}
BREAK
;
DEFAULT
IF
(
)
{
IF
(
(
)
)
{
(
,
,
,
,
)
;
=
;
;
}
}
BREAK
;
}
}
}
}
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
CHAR
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
=
;
(
,
,
,
,
)
;
}
(
,
,
(
)
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
;
WHILE
(
(
,
,
,
,
)
)
{
IF
(
(
,
,
,
)
)
(
)
;
=
;
(
)
;
(
)
;
}
=
(
)
;
}
CHAR
(
VOID
)
{
CHAR
=
;
CHAR
;
IF
(
(
)
)
{
;
IF
(
(
=
(
)
)
)
{
IF
(
(
=
(
)
)
)
{
=
(
(
)
)
;
(
,
)
;
(
)
;
}
}
(
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
,
)
;
(
)
;
}
STATIC
;
VOID
(
VOID
)
{
IF
(
(
)
)
(
,
)
;
=
;
}
VOID
(
VOID
)
{
VOID
(
)
(
VOID
)
;
CHAR
;
CHAR
;
CHAR
;
CONST
CHAR
=
;
CONST
CHAR
=
;
CONST
CHAR
=
;
CONST
CHAR
=
;
CONST
CHAR
=
;
CONST
CHAR
=
;
IF
(
)
(
,
)
;
(
,
(
)
)
;
(
,
(
)
,
,
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
(
)
,
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
RETURN
;
(
,
(
)
,
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
BREAK
;
}
}
}
}
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
(
)
;
}
VOID
(
)
{
=
;
=
;
WHILE
(
(
)
)
{
WHILE
(
(
(
)
(
)
)
)
;
IF
(
)
{
=
;
;
WHILE
(
(
(
)
(
)
)
)
;
IF
(
)
{
=
;
;
}
}
}
}
;
INT
(
,
,
,
INT
)
{
;
INT
,
,
;
CHAR
;
IF
(
)
RETURN
;
=
;
(
)
;
=
(
)
;
IF
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
=
;
=
;
=
;
}
}
(
,
)
;
=
(
)
;
WHILE
(
)
{
IF
(
(
)
)
{
(
)
;
}
WHILE
(
(
,
,
,
,
)
)
{
IF
(
(
,
,
,
)
)
(
)
;
=
;
(
)
;
(
)
;
}
DO
{
=
(
)
;
=
;
}
WHILE
(
)
;
(
,
)
;
(
)
;
=
;
}
RETURN
;
}
__E__O__F__
;
;
(
)
STATIC
;
;
;
;
;
;
;
;
=
;
;
(
(
)
(
)
)
(
,
,
,
)
;
STATIC
;
EXTERN
UNSIGNED
;
EXTERN
;
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
;
(
,
,
,
)
;
}
ELSE
{
(
,
,
,
)
;
(
,
,
,
)
;
}
=
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
{
;
(
,
,
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
=
;
}
}
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
STATIC
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
}
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
STATIC
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
(
INT
)
{
INT
;
INT
=
(
)
;
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
=
;
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
DEFAULT
RETURN
;
}
}
ELSE
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
}
RETURN
;
}
}
VOID
(
,
)
{
=
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
}
}
ELSE
{
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
}
}
}
(
,
,
,
)
{
=
;
IF
(
)
{
IF
(
(
(
INT
)
)
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
RETURN
(
,
,
,
)
;
}
SWITCH
(
)
{
CASE
IF
(
(
SHORT
)
(
)
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
BREAK
;
CASE
RETURN
;
CASE
=
;
=
(
)
;
RETURN
(
,
,
,
)
;
CASE
(
)
;
RETURN
(
,
,
,
)
;
CASE
=
;
RETURN
(
,
,
,
)
;
CASE
{
INT
,
;
=
(
)
;
=
(
)
(
)
;
(
,
)
;
IF
(
)
(
(
)
)
;
}
RETURN
(
,
,
,
)
;
CASE
{
INT
,
;
;
INT
;
IF
(
)
{
=
(
SHORT
)
(
)
;
=
(
SHORT
)
(
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
IF
(
)
(
)
;
}
}
RETURN
(
,
,
,
)
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
{
INT
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
RETURN
;
RETURN
(
,
,
,
)
;
CASE
IF
(
)
{
IF
(
)
{
(
,
)
;
}
RETURN
;
}
CASE
(
(
)
,
,
)
;
BREAK
;
CASE
CASE
(
(
)
,
,
)
;
BREAK
;
CASE
{
(
,
,
,
)
;
=
(
,
,
,
)
;
}
BREAK
;
DEFAULT
RETURN
(
,
,
,
)
;
}
RETURN
(
,
,
,
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
(
,
,
)
;
(
)
;
}
TYPEDEF
STRUCT
{
CONST
CHAR
;
INT
,
;
INT
;
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
(
INT
,
INT
,
INT
)
{
IF
(
)
RETURN
;
=
;
=
;
RETURN
;
}
VOID
(
INT
,
INT
)
{
;
INT
;
INT
,
;
=
;
=
;
=
;
=
;
=
(
,
)
;
(
,
,
)
;
=
;
=
;
(
,
,
,
,
,
)
;
}
VOID
(
INT
,
INT
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
(
,
)
;
(
,
,
(
)
)
;
=
;
=
;
}
(
CHAR
)
{
;
;
IF
(
)
{
(
)
;
(
)
;
}
(
,
)
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
=
(
VOID
)
(
,
)
)
)
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
=
;
=
;
IF
(
)
{
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
=
;
}
IF
(
)
{
=
;
(
)
;
}
WHILE
(
)
{
=
;
=
;
=
;
=
;
(
,
(
)
,
,
)
;
IF
(
(
)
)
{
IF
(
(
,
)
)
(
,
)
;
(
,
)
;
IF
(
)
{
(
)
;
}
}
=
;
}
IF
(
)
{
IF
(
)
(
,
)
;
=
;
=
;
}
}
VOID
(
VOID
)
{
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
,
)
;
(
,
)
;
{
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
(
,
)
)
{
(
,
)
;
=
;
=
;
}
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
(
)
;
}
}
__E__O__F__
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
EXTERN
VOID
(
VOID
)
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
VOID
(
VOID
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
STATIC
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
)
)
{
FLOAT
=
(
(
)
)
;
(
,
)
;
}
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
FLOAT
;
=
;
=
;
=
;
=
(
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
}
IF
(
(
,
)
)
{
IF
(
)
{
=
;
IF
(
(
,
)
)
{
CHAR
;
FLOAT
;
=
;
=
(
(
)
)
;
(
,
(
)
,
,
)
;
(
)
;
(
,
(
)
,
,
)
;
(
)
;
=
;
}
}
IF
(
)
=
;
}
(
)
;
}
STATIC
VOID
(
VOID
)
{
EXTERN
VOID
(
VOID
)
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
,
,
}
;
STATIC
CONST
CHAR
=
{
,
,
}
;
INT
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
=
;
=
;
IF
(
)
=
(
,
,
)
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
=
=
;
}
ELSE
IF
(
(
,
)
)
{
=
;
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
=
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
,
(
VOID
)
)
;
(
)
;
(
)
;
;
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
}
CONST
CHAR
(
INT
)
{
=
;
STATIC
CONST
CHAR
=
;
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
CASE
CASE
;
(
,
)
;
BREAK
;
CASE
CASE
;
(
,
)
;
BREAK
;
CASE
CASE
(
,
)
;
BREAK
;
CASE
CASE
(
,
)
;
BREAK
;
CASE
CASE
IF
(
(
)
)
(
)
;
BREAK
;
}
RETURN
;
}
__E__O__F__
CHAR
=
;
CHAR
=
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
(
VOID
)
{
INT
=
;
INT
=
;
INT
=
;
INT
,
;
STATIC
INT
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
,
,
)
)
BREAK
;
;
}
(
)
;
=
(
)
;
=
(
INT
)
(
(
)
)
;
IF
(
(
(
)
)
)
{
;
}
;
=
(
)
(
)
;
=
(
)
(
)
;
;
;
RETURN
;
}
__E__O__F__
EXTERN
;
(
)
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
STRUCT
{
CHAR
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
INT
;
}
;
STRUCT
{
CHAR
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
INT
;
}
;
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
SHORT
;
CHAR
;
UNION
{
STRUCT
;
STRUCT
;
STRUCT
;
}
;
}
;
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
}
;
STRUCT
{
CHAR
;
INT
;
}
;
STRUCT
{
CHAR
;
CHAR
;
}
;
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
INT
;
}
;
STRUCT
{
CHAR
;
CHAR
;
INT
;
CHAR
;
}
;
STRUCT
{
CHAR
;
SHORT
;
INT
;
INT
;
}
;
STRUCT
{
CHAR
;
}
;
UNION
{
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
}
;
(
)
TYPEDEF
STRUCT
{
INT
;
INT
;
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
;
;
;
}
;
STATIC
STRUCT
;
STATIC
UNION
;
STATIC
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
SHORT
;
STATIC
SHORT
;
STATIC
SHORT
;
STATIC
SHORT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
(
INT
)
{
;
;
;
=
(
)
;
=
(
)
;
=
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
STATIC
INT
(
,
INT
)
{
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
RETURN
(
)
;
}
STATIC
INT
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
{
=
(
)
(
)
;
IF
(
)
=
(
)
(
)
;
}
}
RETURN
;
}
STATIC
INT
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
STATIC
INT
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
(
VOID
)
{
RETURN
;
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
}
VOID
(
,
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
}
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
,
)
;
=
;
=
;
RETURN
;
}
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
(
)
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
FOR
(
=
;
;
)
{
=
(
,
)
;
(
,
,
,
(
)
,
(
)
)
;
}
IF
(
)
(
,
,
)
;
(
,
)
;
(
)
;
(
,
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
STATIC
DOUBLE
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
)
{
STATIC
DOUBLE
;
IF
(
(
)
)
RETURN
;
=
;
=
(
)
;
IF
(
)
{
(
)
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
}
=
(
INT
)
(
)
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
(
)
;
IF
(
)
{
(
)
;
IF
(
(
)
)
{
=
;
IF
(
)
(
,
)
;
}
}
}
(
VOID
)
{
RETURN
;
}
INT
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
STRUCT
)
(
UNION
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
STRUCT
)
;
=
(
)
;
=
(
)
;
=
(
UNION
)
(
(
STRUCT
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
IF
(
(
)
)
{
(
)
;
=
;
}
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
}
__E__O__F__
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
FLOAT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
=
;
STATIC
CHAR
=
;
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
}
STATIC
INT
(
VOID
)
{
STRUCT
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
VOID
(
,
)
{
STRUCT
;
STRUCT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
}
=
;
=
;
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
(
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
(
,
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
STRUCT
;
STATIC
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
(
)
;
}
ELSE
{
(
,
)
;
=
;
(
)
;
}
}
IF
(
(
)
)
{
=
(
)
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
(
,
)
;
}
}
}
INT
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
(
=
(
)
)
)
{
(
,
,
(
)
)
;
(
)
=
;
}
IF
(
(
=
(
,
)
)
)
{
(
,
,
)
;
=
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
=
;
}
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
=
;
}
__E__O__F__
VOID
(
,
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
__E__O__F__
EXTERN
;
EXTERN
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
FLOAT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
;
STATIC
VOID
(
VOID
)
{
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
}
STATIC
INT
(
VOID
)
{
;
;
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
VOID
(
,
)
{
;
;
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
}
=
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
,
,
,
)
;
=
(
,
,
,
)
;
=
(
)
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
(
,
)
;
RETURN
;
}
}
(
,
,
,
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
IF
(
)
(
,
)
;
}
BREAK
;
CASE
CASE
BREAK
;
CASE
(
)
;
(
)
;
=
;
BREAK
;
DEFAULT
(
,
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
(
)
;
}
ELSE
{
(
,
)
;
=
;
(
)
;
}
}
}
INT
(
VOID
)
{
;
;
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
{
(
,
)
;
(
,
,
,
(
)
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
=
;
=
;
}
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
(
,
,
,
(
)
)
)
(
)
;
}
__E__O__F__
STATIC
;
STATIC
=
;
STATIC
INT
;
=
{
,
}
;
=
{
,
}
;
;
;
DOUBLE
;
INT
=
;
INT
=
;
STATIC
VOID
(
,
)
{
FLOAT
;
FLOAT
,
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
=
(
)
;
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
=
;
=
;
=
;
}
STATIC
FLOAT
(
)
{
RETURN
(
)
;
}
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
(
INT
)
{
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
=
;
=
;
(
)
;
}
}
VOID
(
INT
)
{
CHAR
;
(
,
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
(
)
;
}
(
,
)
{
(
,
,
(
)
)
;
=
;
(
,
)
;
=
;
(
,
)
;
RETURN
(
,
)
;
}
STATIC
FLOAT
(
,
,
,
)
{
;
;
FLOAT
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
,
)
;
=
(
)
;
=
(
,
)
;
IF
(
)
RETURN
;
}
RETURN
;
}
STATIC
(
,
)
{
;
;
FLOAT
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
STATIC
(
,
,
INT
)
{
FLOAT
,
;
,
;
,
,
;
(
,
)
;
=
;
(
,
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
(
,
)
;
IF
(
(
=
(
,
,
,
)
)
)
{
=
;
(
,
)
;
}
IF
(
)
{
RETURN
;
}
=
;
(
,
)
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
INT
,
,
;
;
=
;
FOR
(
=
,
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
IF
(
)
(
)
;
}
ELSE
(
)
;
}
VOID
(
)
{
,
;
;
;
FLOAT
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
;
IF
(
)
(
)
;
ELSE
(
)
;
RETURN
;
}
=
;
=
;
=
;
IF
(
(
,
)
)
{
IF
(
)
{
IF
(
(
,
,
)
)
(
,
,
)
;
=
;
}
}
ELSE
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
=
=
;
(
,
)
;
(
,
)
;
IF
(
(
,
,
(
)
)
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
=
;
}
ELSE
{
(
,
,
)
;
=
(
)
;
=
=
=
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
,
)
;
(
,
,
)
;
(
,
)
;
=
;
}
}
STATIC
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
;
=
(
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
RETURN
(
)
;
}
VOID
(
VOID
)
{
RETURN
;
,
;
;
,
;
IF
(
)
RETURN
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
{
=
;
(
,
)
;
=
;
}
ELSE
{
(
,
)
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
}
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
;
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
{
=
;
(
,
)
;
=
;
}
ELSE
{
(
,
)
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
}
(
,
)
;
}
IF
(
)
{
IF
(
(
)
)
{
;
;
IF
(
)
{
(
)
;
(
,
)
;
RETURN
;
}
}
ELSE
RETURN
;
}
ELSE
{
;
IF
(
)
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
)
)
{
;
RETURN
;
}
;
}
IF
(
)
=
(
)
;
ELSE
=
;
=
;
DO
{
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
}
WHILE
(
)
;
=
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
__E__O__F__
VOID
(
VOID
)
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
;
;
=
(
(
FLOAT
)
)
;
(
,
(
)
,
,
)
;
=
;
(
,
(
)
,
,
)
;
=
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
(
)
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
,
)
;
}
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
;
IF
(
)
RETURN
;
=
(
(
FLOAT
)
)
;
(
,
(
)
,
,
)
;
=
;
(
,
(
)
,
,
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
(
VOID
)
{
INT
,
,
;
FLOAT
;
FLOAT
;
;
;
(
,
(
)
,
,
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
{
=
;
(
,
(
)
(
)
,
)
;
RETURN
;
}
IF
(
)
{
=
(
)
;
=
;
}
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
(
,
(
)
(
)
,
)
;
RETURN
;
}
ELSE
IF
(
)
{
(
,
(
)
(
)
,
)
;
RETURN
;
}
}
ELSE
=
;
IF
(
)
(
)
;
(
,
(
)
,
,
)
;
SWITCH
(
)
{
CASE
=
;
=
;
=
(
,
(
)
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
;
FOR
(
=
;
;
)
{
=
(
,
,
,
)
;
=
(
)
;
}
BREAK
;
CASE
(
,
,
,
)
;
=
(
)
;
IF
(
)
(
)
;
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
BREAK
;
CASE
(
,
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
BREAK
;
DEFAULT
(
)
;
(
)
;
RETURN
;
}
RETURN
;
}
(
VOID
)
{
IF
(
)
RETURN
(
)
;
IF
(
(
)
)
RETURN
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
=
;
=
;
(
)
;
}
VOID
(
,
INT
)
{
INT
;
INT
;
FLOAT
;
;
IF
(
)
RETURN
;
=
(
(
FLOAT
)
)
;
(
,
(
)
,
,
)
;
=
;
(
,
(
)
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
;
;
IF
(
)
RETURN
;
=
(
(
FLOAT
)
)
;
(
,
(
)
,
,
)
;
=
;
(
,
(
)
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
(
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
CHAR
;
INT
,
,
;
CHAR
;
;
,
;
;
EXTERN
CHAR
;
INT
=
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
(
,
,
,
(
)
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
=
;
(
,
,
(
)
)
;
=
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
,
)
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
=
;
=
;
WHILE
(
)
{
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
}
;
=
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
(
,
)
;
(
,
)
;
=
;
=
;
WHILE
(
)
{
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
}
;
=
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
FOR
(
=
;
;
)
{
=
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
)
;
}
}
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
,
,
(
)
)
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
)
;
}
}
}
(
,
)
;
(
,
(
,
)
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
FOR
(
=
;
;
)
{
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
}
FOR
(
=
;
;
)
{
(
,
)
;
(
,
(
CHAR
)
)
;
(
,
)
;
}
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
(
,
,
,
(
)
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
=
;
=
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
}
__E__O__F__
EXTERN
;
EXTERN
;
EXTERN
;
STATIC
STRUCT
{
INT
;
;
;
}
;
(
INT
)
{
INT
;
;
IF
(
)
{
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
}
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
}
=
;
(
,
,
(
)
)
;
=
;
RETURN
;
}
VOID
(
INT
,
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
,
INT
)
{
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
;
IF
(
)
=
;
}
}
INT
;
VOID
(
,
,
INT
)
{
INT
;
=
;
=
;
;
IF
(
)
{
=
(
)
;
;
}
FOR
(
=
;
;
)
IF
(
(
)
)
;
=
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
}
}
VOID
(
VOID
)
{
INT
;
,
;
(
)
;
(
,
,
(
)
)
;
=
;
=
;
WHILE
(
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
BREAK
;
(
,
,
)
;
}
}
VOID
(
)
{
INT
,
;
,
,
;
INT
,
;
INT
,
,
;
;
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
=
;
IF
(
(
)
(
)
)
(
)
;
}
ELSE
=
;
=
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
WHILE
(
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
WHILE
(
)
{
IF
(
)
(
)
;
=
;
;
;
}
BREAK
;
}
=
;
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
(
)
;
=
;
;
;
=
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
(
)
;
(
)
;
RETURN
;
}
CONTINUE
;
}
IF
(
)
(
)
;
(
,
,
)
;
;
CONTINUE
;
}
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
;
CONTINUE
;
}
(
,
,
)
;
;
;
}
}
=
;
}
VOID
(
VOID
)
{
;
;
,
;
FLOAT
;
;
;
FLOAT
;
INT
;
INT
;
;
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
(
)
)
(
)
)
(
,
,
,
,
(
(
)
)
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
(
(
)
)
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
(
(
)
)
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
(
(
)
)
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
(
(
)
)
,
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
BREAK
;
=
;
;
=
;
=
=
;
IF
(
(
)
(
,
)
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
FLOAT
,
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
;
IF
(
)
;
=
(
)
;
}
}
FOR
(
=
;
;
)
=
(
)
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
BREAK
;
}
}
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
(
)
)
{
(
,
)
;
BREAK
;
}
IF
(
)
{
(
,
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
}
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
}
}
TYPEDEF
STRUCT
{
INT
;
;
;
}
;
;
INT
;
EXTERN
INT
;
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
,
,
;
;
;
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
)
;
IF
(
)
CONTINUE
;
=
;
;
=
;
=
(
(
(
(
)
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
(
(
)
)
)
)
;
=
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
BREAK
;
=
;
;
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
}
}
EXTERN
INT
,
,
;
(
VOID
)
;
EXTERN
INT
;
EXTERN
DOUBLE
;
VOID
(
VOID
)
{
INT
;
INT
;
;
;
INT
;
INT
;
=
(
)
;
IF
(
)
(
)
;
=
;
=
;
=
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
ELSE
=
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
(
)
;
ELSE
=
;
}
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
(
,
)
;
}
VOID
(
,
INT
)
{
INT
;
FLOAT
;
,
,
;
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
)
;
=
;
=
;
(
,
,
,
)
;
=
;
FOR
(
=
;
;
)
=
;
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
;
DOUBLE
;
;
INT
;
;
INT
;
=
;
IF
(
)
=
;
=
;
FOR
(
=
,
=
,
=
;
;
,
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
(
(
)
)
(
)
)
(
,
,
,
,
(
(
)
)
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
(
(
)
)
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
(
(
)
)
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
(
(
)
)
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
(
(
)
)
,
,
)
;
}
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
BREAK
;
=
;
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
(
,
)
;
=
(
)
;
IF
(
(
)
)
{
(
,
)
;
}
ELSE
{
IF
(
)
=
;
=
;
=
;
(
)
;
(
,
,
,
)
;
=
;
(
,
)
;
}
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
(
,
)
;
;
}
}
}
VOID
(
)
{
INT
;
;
;
DOUBLE
;
INT
;
;
STRUCT
;
=
;
IF
(
)
=
;
=
;
FOR
(
=
,
=
,
=
;
;
,
,
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
{
(
,
)
;
}
ELSE
{
=
(
)
;
IF
(
(
)
)
{
(
,
)
;
}
ELSE
{
IF
(
)
=
;
=
;
(
,
,
,
)
;
(
,
)
;
}
}
}
}
VOID
(
INT
)
{
INT
;
EXTERN
;
EXTERN
;
STRUCT
;
;
IF
(
)
RETURN
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
;
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
(
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
=
{
,
}
;
,
;
,
,
,
;
,
,
,
;
,
,
,
,
;
,
;
INT
;
VOID
(
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
;
}
VOID
(
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
{
=
=
;
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
;
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
=
(
(
)
)
;
}
FLOAT
(
)
{
FLOAT
;
,
,
;
=
;
=
;
=
;
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
;
RETURN
;
}
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
VOID
(
VOID
)
{
FLOAT
;
FLOAT
,
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
{
(
)
;
(
)
;
=
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
=
(
)
;
=
(
)
;
;
;
IF
(
)
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
VOID
(
)
{
(
)
;
(
,
,
(
)
)
;
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
}
IF
(
)
{
;
;
;
}
}
INT
(
INT
)
{
;
IF
(
)
=
;
IF
(
)
=
;
RETURN
;
}
VOID
(
)
{
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
;
;
IF
(
)
;
;
=
;
IF
(
)
=
;
=
;
(
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
(
INT
)
(
)
)
(
)
;
}
VOID
(
VOID
)
{
;
;
INT
;
,
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
(
,
)
;
=
;
(
,
)
;
=
(
)
;
(
,
(
)
)
;
=
(
)
;
=
;
(
,
,
)
;
=
;
=
(
)
;
=
;
(
,
,
)
;
=
;
=
(
)
;
=
;
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
=
;
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
}
ELSE
=
;
IF
(
)
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
}
__E__O__F__
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
STATIC
=
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
EXTERN
;
;
;
;
;
;
;
;
INT
,
;
,
;
;
DOUBLE
=
;
;
;
;
DOUBLE
;
DOUBLE
;
DOUBLE
;
INT
;
INT
;
;
;
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
INT
;
;
VOID
(
VOID
)
;
FLOAT
=
;
CHAR
=
{
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
;
CHAR
;
DOUBLE
,
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
=
(
)
;
=
(
)
;
=
;
=
(
)
;
(
,
,
(
)
,
)
;
(
,
,
,
,
,
,
,
,
,
)
;
(
(
)
,
,
)
;
}
VOID
(
VOID
)
{
;
CHAR
;
DOUBLE
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
=
(
)
;
=
(
)
;
=
;
(
,
)
;
(
,
,
,
,
,
)
;
(
(
)
,
,
)
;
}
VOID
(
VOID
)
{
=
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
)
;
(
,
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
{
(
,
(
)
)
;
(
,
)
;
}
IF
(
)
=
;
ELSE
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
}
(
(
)
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
,
,
(
)
)
;
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
=
;
=
;
}
VOID
(
VOID
)
{
;
=
;
(
,
)
;
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
IF
(
)
(
)
;
=
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
=
=
=
;
}
(
)
;
IF
(
)
{
(
)
;
=
;
}
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
(
)
)
)
{
(
)
;
RETURN
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
,
)
;
;
}
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
IF
(
(
)
)
{
(
,
(
,
)
,
(
,
)
)
;
(
)
;
RETURN
;
}
IF
(
(
)
)
=
=
(
(
)
)
;
ELSE
{
=
(
(
)
)
;
=
(
(
)
)
;
}
;
IF
(
)
=
;
;
IF
(
)
=
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
FLOAT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
(
)
)
;
IF
(
(
=
(
,
)
)
)
{
=
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
=
;
}
}
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
;
WHILE
(
)
{
=
;
WHILE
(
)
=
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
;
WHILE
(
)
=
;
=
;
IF
(
)
;
IF
(
(
,
)
(
,
)
)
CONTINUE
;
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
,
)
(
(
)
,
)
)
RETURN
;
(
,
(
)
,
(
)
,
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
,
;
CHAR
,
;
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
,
)
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
;
=
=
=
=
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
;
}
ELSE
=
;
}
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
}
(
,
,
)
;
(
)
;
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
(
)
;
(
)
;
=
(
)
;
IF
(
)
(
,
(
)
)
;
IF
(
)
{
(
)
;
IF
(
)
{
IF
(
)
(
)
;
RETURN
;
}
(
,
,
)
;
(
,
)
;
(
,
)
;
=
;
(
)
;
=
;
RETURN
;
}
IF
(
)
{
CHAR
;
(
)
;
IF
(
(
(
UNSIGNED
)
(
UNSIGNED
)
(
UNSIGNED
)
(
)
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
=
;
=
(
)
;
WHILE
(
(
)
)
;
WHILE
(
(
(
)
)
)
(
)
=
;
IF
(
(
(
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
(
)
;
(
,
,
)
;
(
)
;
(
,
)
;
RETURN
;
}
(
)
;
=
;
RETURN
;
}
IF
(
)
{
(
)
;
=
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
CHAR
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
)
;
=
(
)
;
=
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
VOID
)
{
WHILE
(
(
)
)
{
IF
(
(
INT
)
)
{
(
)
;
CONTINUE
;
}
IF
(
)
{
(
,
(
)
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
(
,
(
)
)
;
CONTINUE
;
}
IF
(
(
)
)
CONTINUE
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
CHAR
,
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
,
,
(
)
)
;
=
;
FOR
(
;
;
)
{
IF
(
(
=
(
,
)
)
)
{
=
;
(
)
;
=
;
=
;
}
ELSE
BREAK
;
}
(
,
)
;
=
(
,
)
;
=
;
(
,
)
;
(
,
(
,
(
)
)
)
;
}
VOID
(
VOID
)
{
(
,
,
,
(
)
(
)
)
;
}
VOID
(
VOID
)
{
EXTERN
;
EXTERN
;
CHAR
;
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
(
)
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
STATIC
=
;
IF
(
)
(
)
;
=
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
)
;
=
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
{
=
(
(
,
)
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
}
}
(
FLOAT
)
{
FLOAT
;
IF
(
)
=
;
IF
(
)
=
(
,
(
,
)
)
;
ELSE
=
(
,
(
,
)
)
;
IF
(
(
)
)
RETURN
;
RETURN
;
}
INT
;
VOID
(
FLOAT
)
{
STATIC
DOUBLE
=
;
STATIC
DOUBLE
=
;
STATIC
DOUBLE
=
;
INT
,
,
;
FLOAT
;
IF
(
(
)
)
RETURN
;
;
IF
(
)
=
;
IF
(
)
=
(
,
(
,
)
)
;
ELSE
=
(
,
(
,
)
)
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
}
ELSE
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
=
(
)
;
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
ELSE
(
,
,
,
)
;
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
}
;
;
}
STATIC
VOID
(
CHAR
,
INT
)
{
WHILE
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
(
,
(
)
)
;
(
,
(
)
)
;
(
,
(
)
)
;
(
,
(
)
)
;
}
VOID
(
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
=
;
=
;
IF
(
)
(
,
(
FLOAT
)
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
(
)
)
;
(
)
;
=
(
)
(
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
(
)
;
=
;
(
,
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
}
__E__O__F__
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
;
INT
;
DOUBLE
;
INT
,
,
;
INT
;
INT
(
VOID
)
{
INT
,
;
;
INT
;
CHAR
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
(
)
;
}
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
RETURN
;
}
(
CHAR
)
{
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
,
)
)
;
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
EXTERN
CHAR
;
IF
(
)
{
(
)
;
=
;
}
=
;
FOR
(
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
RETURN
;
}
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
)
;
RETURN
;
}
}
=
;
(
)
;
(
)
;
(
,
)
;
(
,
(
,
,
)
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
{
(
)
;
=
;
}
=
;
FOR
(
;
;
)
{
=
;
IF
(
(
(
,
)
)
)
RETURN
;
}
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
=
(
)
;
}
(
,
,
(
)
)
;
=
;
=
;
=
;
(
,
)
;
(
,
(
,
,
)
)
;
}
VOID
(
VOID
)
{
SWITCH
(
)
{
CASE
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
DEFAULT
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
(
)
;
=
;
}
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
,
,
)
)
(
,
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
{
;
(
,
)
;
(
)
;
RETURN
;
}
}
(
,
,
,
)
;
;
IF
(
)
{
(
)
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
}
=
;
(
,
)
;
(
,
)
;
}
ELSE
{
CHAR
;
CHAR
;
(
)
;
(
)
;
IF
(
(
,
)
)
{
IF
(
(
,
,
)
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
=
(
,
)
;
IF
(
)
(
)
;
}
=
;
=
;
(
)
;
}
}
STATIC
;
STATIC
INT
;
STATIC
INT
;
VOID
(
VOID
)
{
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
(
,
,
)
;
(
,
)
;
(
,
)
;
;
=
;
IF
(
)
=
;
=
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
RETURN
;
(
)
;
(
)
;
=
;
=
=
;
}
VOID
(
,
INT
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
(
,
)
;
=
(
)
;
(
,
,
)
;
=
;
=
;
(
)
;
}
(
VOID
)
{
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
;
CHAR
;
=
;
EXTERN
CHAR
;
INT
;
(
)
;
(
)
;
=
(
)
;
IF
(
(
(
)
)
)
(
,
,
)
;
=
(
)
;
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
=
;
}
(
)
;
IF
(
)
{
(
,
,
,
)
;
IF
(
(
=
(
,
)
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
}
=
(
)
;
IF
(
)
{
=
;
;
}
=
(
)
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
)
;
(
,
,
(
)
)
;
(
,
)
;
(
,
(
,
,
)
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
=
(
)
;
FOR
(
;
;
)
{
=
(
)
;
IF
(
)
BREAK
;
;
IF
(
)
(
)
;
(
,
)
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
(
,
(
,
,
)
)
;
RETURN
;
}
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
=
(
)
;
FOR
(
;
;
)
{
=
(
)
;
IF
(
)
BREAK
;
;
IF
(
)
(
)
;
(
,
)
;
IF
(
(
,
)
)
=
;
IF
(
(
,
)
)
=
;
IF
(
(
,
)
)
=
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
(
,
(
,
,
)
)
;
RETURN
;
}
=
;
=
;
(
)
;
}
VOID
(
)
{
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
;
INT
;
;
(
)
;
=
;
IF
(
)
(
)
;
=
;
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
,
,
;
INT
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
;
INT
,
;
INT
;
INT
;
FLOAT
;
INT
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
;
IF
(
)
(
,
)
;
(
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
;
;
=
;
=
;
=
;
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
}
ELSE
{
IF
(
)
=
;
ELSE
;
}
}
VOID
(
INT
)
{
IF
(
)
(
)
;
(
)
;
INT
,
;
INT
,
;
,
;
;
CHAR
;
IF
(
)
(
)
;
=
;
(
,
(
,
)
)
;
(
,
)
;
IF
(
(
,
)
)
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
IF
(
)
=
;
;
=
;
IF
(
)
=
;
;
FOR
(
=
;
;
,
,
)
{
IF
(
)
(
,
,
)
;
ELSE
FOR
(
=
;
;
)
=
;
IF
(
)
(
,
,
)
;
ELSE
FOR
(
=
;
;
)
=
;
}
}
}
VOID
(
INT
,
)
{
(
,
(
,
)
,
(
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
IF
(
)
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
IF
(
)
(
)
;
=
;
=
(
)
;
(
,
(
)
,
(
)
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
CHAR
;
CHAR
;
=
(
)
;
IF
(
)
(
)
;
=
;
(
,
(
)
,
(
)
)
;
(
)
=
;
(
,
(
)
,
(
)
)
;
(
)
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
CHAR
;
CHAR
;
(
,
(
)
,
(
)
)
;
(
)
=
;
(
,
(
)
,
(
)
)
;
(
)
=
;
(
,
,
)
;
(
,
,
,
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
IF
(
)
(
,
)
;
(
)
;
IF
(
)
{
(
)
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
(
(
)
)
)
=
;
}
=
;
}
VOID
(
VOID
)
{
,
,
;
;
INT
;
;
=
(
)
;
IF
(
(
UNSIGNED
)
(
)
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
IF
(
)
(
,
,
)
;
INT
;
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
,
;
=
;
=
;
(
)
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
)
;
(
)
;
WHILE
(
)
{
IF
(
)
{
(
)
;
BREAK
;
}
=
(
)
;
IF
(
)
{
;
(
)
;
BREAK
;
}
(
)
;
SWITCH
(
)
{
DEFAULT
(
)
;
BREAK
;
CASE
BREAK
;
CASE
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
{
(
)
;
=
;
}
(
,
(
)
)
;
=
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
=
;
BREAK
;
CASE
FOR
(
=
;
;
)
=
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
)
;
(
,
(
)
)
;
=
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
BREAK
;
CASE
(
)
;
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
;
BREAK
;
CASE
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
(
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
(
,
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
(
)
;
(
(
)
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
(
)
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
(
)
;
FOR
(
=
;
;
)
(
)
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
}
}
(
)
;
}
__E__O__F__
=
{
,
}
;
=
{
,
}
;
EXTERN
;
VOID
(
VOID
)
{
;
INT
,
;
IF
(
(
,
,
)
)
RETURN
;
(
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
,
,
)
)
RETURN
;
}
}
(
)
;
}
VOID
(
,
,
,
)
{
IF
(
)
{
;
;
=
;
;
(
,
,
,
)
;
(
,
,
,
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
;
,
=
;
INT
;
IF
(
)
(
,
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
)
;
=
;
IF
(
)
{
CHAR
;
=
;
(
,
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
RETURN
;
}
=
;
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
,
)
;
IF
(
)
BREAK
;
=
;
}
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
{
=
(
)
(
)
;
IF
(
)
=
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
INT
;
STRUCT
;
FLOAT
;
,
;
}
;
;
TYPEDEF
STRUCT
{
;
FLOAT
;
;
}
;
;
;
;
;
;
;
;
;
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
(
,
,
(
)
)
;
}
(
VOID
)
{
INT
;
FLOAT
;
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
}
RETURN
;
}
VOID
(
)
{
INT
;
,
;
;
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
RETURN
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
INT
;
;
INT
;
=
(
)
;
SWITCH
(
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
{
=
(
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
{
=
(
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
)
;
=
(
)
;
(
,
)
;
=
;
=
(
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
(
(
,
)
)
;
BREAK
;
CASE
(
(
,
)
)
;
BREAK
;
CASE
(
(
,
)
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
BREAK
;
DEFAULT
(
)
;
}
}
(
VOID
)
{
;
IF
(
)
RETURN
;
=
;
;
=
;
(
,
,
(
)
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
,
;
FLOAT
;
;
FLOAT
,
;
FLOAT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
)
;
}
(
,
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
=
(
)
;
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
(
,
)
;
=
(
)
;
WHILE
(
)
{
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
=
;
=
;
=
;
=
(
)
;
FOR
(
=
;
;
)
;
;
}
}
}
VOID
(
VOID
)
{
INT
;
INT
;
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
(
)
;
IF
(
)
{
=
;
CONTINUE
;
}
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
=
;
=
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
__E__O__F__
VOID
(
VOID
)
;
TYPEDEF
STRUCT
{
STRUCT
;
CHAR
;
CHAR
;
}
;
;
;
=
{
,
}
;
VOID
(
VOID
)
{
=
;
}
;
;
VOID
(
VOID
)
{
=
;
=
(
)
;
}
VOID
(
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
}
VOID
(
CHAR
)
{
CHAR
;
INT
;
=
;
IF
(
)
{
=
(
)
;
(
,
,
)
;
(
)
;
}
ELSE
=
;
(
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
CHAR
;
INT
;
WHILE
(
)
{
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
IF
(
(
)
)
BREAK
;
IF
(
)
BREAK
;
}
(
,
,
)
;
=
;
IF
(
)
=
;
ELSE
{
;
;
(
,
,
)
;
}
(
)
;
IF
(
)
{
=
;
BREAK
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
CHAR
,
,
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
)
;
}
IF
(
)
RETURN
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
)
;
IF
(
)
(
,
)
;
}
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
FOR
(
=
;
(
)
(
)
(
)
;
)
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
}
}
IF
(
)
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
CHAR
)
(
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
)
(
)
)
(
,
(
)
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
(
)
;
)
(
,
(
)
)
;
(
)
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
(
(
)
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
CHAR
;
INT
,
;
CHAR
;
IF
(
(
)
)
{
(
)
;
FOR
(
=
;
;
=
)
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
)
;
BREAK
;
}
}
IF
(
)
{
=
(
(
)
)
;
=
;
=
;
}
(
,
)
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
IF
(
)
(
,
)
;
}
(
,
)
;
=
(
)
;
}
TYPEDEF
STRUCT
{
STRUCT
;
CHAR
;
;
}
;
STATIC
INT
;
STATIC
CHAR
;
STATIC
CHAR
=
;
STATIC
CHAR
=
;
STATIC
;
INT
(
VOID
)
{
RETURN
;
}
CHAR
(
INT
)
{
IF
(
)
RETURN
;
RETURN
;
}
CHAR
(
VOID
)
{
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
(
)
;
=
;
=
;
WHILE
(
)
{
WHILE
(
)
{
;
}
IF
(
)
{
;
BREAK
;
}
IF
(
)
RETURN
;
IF
(
)
=
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
;
}
}
}
VOID
(
CHAR
,
)
{
;
IF
(
)
(
)
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
=
(
(
)
)
;
=
;
=
;
=
;
=
;
}
(
CHAR
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
CHAR
(
CHAR
)
{
;
INT
;
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
,
)
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
)
;
(
,
(
)
)
;
IF
(
(
)
)
{
(
,
)
;
(
,
(
)
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
(
(
)
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
,
)
;
(
,
(
)
)
;
}
}
VOID
(
VOID
)
{
}
VOID
(
CHAR
)
{
;
;
(
)
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
IF
(
)
(
)
;
ELSE
(
)
;
RETURN
;
}
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
}
IF
(
(
)
(
)
)
(
,
(
)
)
;
}
INT
(
CHAR
)
{
INT
;
IF
(
)
(
)
;
FOR
(
=
;
(
)
;
)
IF
(
(
,
(
)
)
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
;
STATIC
CHAR
;
STATIC
CHAR
=
;
STATIC
CHAR
=
{
,
,
,
,
,
}
;
=
{
,
}
;
;
INT
=
;
=
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
=
,
,
;
CHAR
;
UNSIGNED
SHORT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
)
{
=
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
=
;
}
VOID
(
VOID
,
INT
,
INT
)
{
INT
;
IF
(
(
(
(
LONG
)
)
)
)
{
;
=
(
)
(
)
(
)
;
FOR
(
=
;
;
)
(
(
INT
)
)
=
;
}
ELSE
FOR
(
=
;
;
)
(
(
)
)
=
;
}
VOID
(
VOID
,
VOID
,
INT
)
{
INT
;
IF
(
(
(
(
LONG
)
(
LONG
)
)
)
)
{
;
FOR
(
=
;
;
)
(
(
INT
)
)
=
(
(
INT
)
)
;
}
ELSE
FOR
(
=
;
;
)
(
(
)
)
=
(
(
)
)
;
}
INT
(
VOID
,
VOID
,
INT
)
{
WHILE
(
)
{
;
IF
(
(
(
)
)
(
(
)
)
)
RETURN
;
}
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
WHILE
(
)
{
=
;
}
=
;
}
VOID
(
CHAR
,
CHAR
,
INT
)
{
WHILE
(
)
{
=
;
}
IF
(
)
=
;
}
INT
(
CHAR
)
{
INT
;
=
;
WHILE
(
)
;
RETURN
;
}
CHAR
(
CHAR
,
CHAR
)
{
INT
=
(
)
;
;
WHILE
(
)
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
(
)
;
(
,
)
;
}
INT
(
CHAR
,
CHAR
)
{
WHILE
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
,
INT
)
{
WHILE
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
,
INT
)
{
INT
,
;
WHILE
(
)
{
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
RETURN
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
)
{
RETURN
(
,
,
)
;
}
INT
(
CHAR
)
{
INT
;
INT
;
INT
;
IF
(
)
{
=
;
;
}
ELSE
=
;
=
;
IF
(
(
)
)
{
;
WHILE
(
)
{
=
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
RETURN
;
}
}
IF
(
)
{
RETURN
;
}
WHILE
(
)
{
=
;
IF
(
)
RETURN
;
=
;
}
RETURN
;
}
FLOAT
(
CHAR
)
{
DOUBLE
;
INT
;
INT
;
INT
,
;
IF
(
)
{
=
;
;
}
ELSE
=
;
=
;
IF
(
(
)
)
{
;
WHILE
(
)
{
=
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
RETURN
;
}
}
IF
(
)
{
RETURN
;
}
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
{
=
;
CONTINUE
;
}
IF
(
)
BREAK
;
=
;
;
}
IF
(
)
RETURN
;
WHILE
(
)
{
;
;
}
RETURN
;
}
;
SHORT
(
)
(
SHORT
)
;
SHORT
(
)
(
SHORT
)
;
INT
(
)
(
INT
)
;
INT
(
)
(
INT
)
;
FLOAT
(
)
(
FLOAT
)
;
FLOAT
(
)
(
FLOAT
)
;
SHORT
(
SHORT
)
{
,
;
=
;
=
(
)
;
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
RETURN
;
}
INT
(
INT
)
{
,
,
,
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
(
(
INT
)
)
(
(
INT
)
)
(
(
INT
)
)
;
}
INT
(
INT
)
{
RETURN
;
}
FLOAT
(
FLOAT
)
{
UNION
{
FLOAT
;
;
}
,
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
FLOAT
(
FLOAT
)
{
RETURN
;
}
VOID
(
,
INT
)
{
;
IF
(
)
(
)
;
=
(
,
)
;
=
;
}
VOID
(
,
INT
)
{
;
IF
(
)
(
)
;
=
(
,
)
;
=
;
}
VOID
(
,
INT
)
{
;
IF
(
(
(
SHORT
)
)
(
SHORT
)
)
(
)
;
=
(
,
)
;
=
;
=
;
}
VOID
(
,
INT
)
{
;
=
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
,
FLOAT
)
{
UNION
{
FLOAT
;
INT
;
}
;
=
;
=
(
)
;
(
,
,
)
;
}
VOID
(
,
CHAR
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
)
)
;
}
VOID
(
,
FLOAT
)
{
(
,
(
INT
)
(
)
)
;
}
VOID
(
,
FLOAT
)
{
(
,
(
INT
)
(
)
)
;
}
VOID
(
,
FLOAT
)
{
(
,
(
INT
)
(
)
)
;
}
VOID
(
,
,
)
{
INT
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
INT
;
;
VOID
(
VOID
)
{
=
;
=
;
}
INT
(
VOID
)
{
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
SIGNED
CHAR
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
UNSIGNED
CHAR
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
SHORT
)
(
(
)
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
(
)
(
)
;
;
RETURN
;
}
FLOAT
(
VOID
)
{
UNION
{
;
FLOAT
;
INT
;
}
;
=
;
=
;
=
;
=
;
;
=
(
)
;
RETURN
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
,
;
=
;
DO
{
=
(
)
;
IF
(
)
BREAK
;
=
;
;
}
WHILE
(
(
)
)
;
=
;
RETURN
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
,
;
=
;
DO
{
=
(
)
;
IF
(
)
BREAK
;
=
;
;
}
WHILE
(
(
)
)
;
=
;
RETURN
;
}
FLOAT
(
VOID
)
{
RETURN
(
)
(
)
;
}
FLOAT
(
VOID
)
{
RETURN
(
)
(
)
;
}
FLOAT
(
VOID
)
{
RETURN
(
)
(
)
;
}
VOID
(
,
)
{
INT
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
=
(
)
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
INT
)
{
VOID
;
IF
(
)
{
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
=
;
}
=
;
;
RETURN
;
}
VOID
(
,
VOID
,
INT
)
{
(
(
,
)
,
,
)
;
}
VOID
(
,
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
(
(
)
(
,
)
,
,
)
;
ELSE
(
(
)
(
,
)
,
,
)
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
;
WHILE
(
)
{
IF
(
)
=
;
;
}
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
WHILE
(
)
=
;
=
;
}
CHAR
(
CHAR
)
{
STATIC
CHAR
;
INT
;
WHILE
(
)
;
IF
(
)
RETURN
;
;
FOR
(
=
;
;
,
)
=
;
=
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
,
;
=
(
)
;
WHILE
(
)
;
FOR
(
=
;
;
)
;
IF
(
)
(
,
)
;
ELSE
{
;
(
,
,
)
;
=
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
)
{
IF
(
)
RETURN
;
;
}
(
,
)
;
}
CHAR
;
INT
;
CHAR
;
CHAR
(
CHAR
)
{
INT
;
INT
;
=
;
=
;
IF
(
)
RETURN
;
WHILE
(
(
=
)
)
{
IF
(
)
RETURN
;
;
}
IF
(
)
{
WHILE
(
)
;
GOTO
;
}
IF
(
)
{
;
WHILE
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
;
}
}
DO
{
=
;
;
;
=
;
}
WHILE
(
)
;
=
;
RETURN
;
}
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
;
UNSIGNED
SHORT
;
INT
;
(
,
)
;
=
;
IF
(
)
{
(
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
,
(
)
,
)
;
(
)
;
FOR
(
=
;
;
)
IF
(
(
UNSIGNED
SHORT
)
(
)
)
(
)
;
(
,
)
;
=
;
(
)
;
}
VOID
(
INT
,
CHAR
)
{
;
INT
;
=
;
FOR
(
=
;
(
)
(
)
;
)
{
=
;
IF
(
(
,
)
)
=
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
;
}
}
=
;
=
;
}
VOID
(
CHAR
)
{
=
;
}
VOID
(
VOID
)
{
=
{
,
}
;
IF
(
(
SHORT
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
;
(
,
)
;
(
)
;
(
)
;
}
CHAR
(
CHAR
,
)
{
;
STATIC
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
INT
(
,
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
INT
;
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
;
INT
;
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
CHAR
;
CHAR
;
TYPEDEF
STRUCT
{
CHAR
;
;
STRUCT
;
}
;
;
;
INT
(
)
{
INT
;
INT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
INT
(
CHAR
,
)
{
;
=
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
=
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
;
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
}
}
VOID
(
CHAR
,
VOID
,
INT
)
{
;
CHAR
;
(
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
}
(
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
CHAR
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
)
;
=
;
}
}
}
VOID
(
CHAR
,
CHAR
)
{
,
;
INT
,
;
CHAR
;
=
(
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
WHILE
(
)
{
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
;
}
(
)
;
(
)
;
}
INT
;
INT
(
CHAR
,
)
{
;
CHAR
;
;
INT
;
INT
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
=
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
(
,
,
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
=
;
RETURN
;
}
}
ELSE
{
IF
(
)
{
IF
(
(
,
)
(
,
)
)
CONTINUE
;
}
(
,
,
,
)
;
=
(
)
;
IF
(
)
CONTINUE
;
(
,
)
;
=
(
,
)
;
RETURN
(
)
;
}
}
(
,
)
;
=
;
=
;
RETURN
;
}
;
;
INT
;
(
CHAR
,
INT
)
{
;
;
CHAR
;
INT
;
=
;
=
=
(
,
)
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
=
(
,
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
,
,
)
;
ELSE
IF
(
)
{
IF
(
)
=
(
)
;
ELSE
=
;
}
ELSE
(
)
;
IF
(
)
(
,
)
;
(
(
)
)
=
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
RETURN
;
}
(
CHAR
)
{
RETURN
(
,
)
;
}
(
CHAR
)
{
RETURN
(
,
)
;
}
VOID
(
CHAR
,
STRUCT
)
{
=
;
(
,
)
;
}
(
CHAR
,
VOID
,
INT
)
{
;
=
(
)
;
=
;
=
(
,
)
;
RETURN
;
}
(
CHAR
)
{
;
INT
;
;
INT
;
;
;
;
UNSIGNED
SHORT
;
IF
(
(
,
)
)
RETURN
;
(
,
,
(
)
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
=
;
=
(
(
)
)
;
(
,
,
)
;
(
,
,
,
)
;
=
(
(
)
,
)
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
(
,
)
;
=
(
)
;
=
(
)
;
}
=
(
(
)
)
;
(
,
)
;
=
;
=
;
=
;
(
,
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
;
;
CHAR
;
CHAR
;
IF
(
(
=
(
,
)
)
)
(
,
)
;
ELSE
(
,
)
;
(
,
)
;
=
(
(
)
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
=
(
)
;
IF
(
)
BREAK
;
=
(
(
)
)
;
=
;
=
;
=
;
}
}
VOID
(
CHAR
)
{
,
;
INT
;
;
CHAR
;
IF
(
(
,
)
(
,
)
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
(
,
)
;
WHILE
(
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
=
;
(
)
;
=
;
}
(
)
;
IF
(
(
,
)
(
,
)
)
RETURN
;
(
,
,
,
)
;
=
(
(
)
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
=
(
)
;
IF
(
)
BREAK
;
=
(
(
)
)
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
(
,
)
)
;
(
(
,
)
)
;
=
;
}
CHAR
(
CHAR
,
CHAR
)
{
CHAR
;
STATIC
CHAR
;
STATIC
INT
;
CHAR
;
=
(
)
;
IF
(
)
;
WHILE
(
)
{
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
WHILE
(
)
{
=
;
IF
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
IF
(
)
RETURN
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
=
;
WHILE
(
)
{
IF
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
RETURN
;
}
}
VOID
(
CHAR
,
CHAR
,
CHAR
,
INT
)
{
CHAR
,
;
INT
;
EXTERN
;
IF
(
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
=
(
,
)
)
)
{
IF
(
(
)
(
)
(
)
)
{
(
)
;
RETURN
;
}
}
(
,
)
;
IF
(
(
)
)
RETURN
;
(
,
,
,
)
;
IF
(
(
INT
)
(
(
)
(
)
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
WHILE
(
)
{
=
(
UNSIGNED
CHAR
)
;
IF
(
(
,
)
)
{
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
=
(
)
;
}
IF
(
)
{
;
IF
(
)
CONTINUE
;
}
IF
(
)
=
;
}
=
;
}
VOID
(
CHAR
,
CHAR
,
CHAR
,
INT
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
,
)
;
}
VOID
(
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
INT
;
IF
(
)
;
WHILE
(
)
{
=
;
WHILE
(
)
=
;
=
;
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
=
;
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
;
WHILE
(
)
=
;
=
;
IF
(
)
;
(
,
)
;
}
}
STATIC
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
;
STATIC
UNSIGNED
=
;
(
,
INT
,
INT
,
UNSIGNED
)
{
INT
;
;
IF
(
)
{
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
(
)
,
)
;
}
=
(
(
(
)
)
)
;
IF
(
)
=
;
(
,
,
)
;
;
=
(
)
;
=
;
=
(
(
)
)
;
=
;
;
=
(
(
,
)
)
;
;
RETURN
;
}
(
,
INT
,
INT
)
{
UNSIGNED
SHORT
;
;
;
=
(
(
(
)
)
)
;
IF
(
)
=
;
(
,
,
)
;
=
(
)
;
=
;
=
(
(
)
)
;
=
;
;
=
(
,
)
;
;
RETURN
;
}
STATIC
CHAR
=
;
STATIC
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
(
VOID
)
{
INT
=
;
INT
=
;
INT
=
;
STATIC
INT
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
,
,
)
)
BREAK
;
;
}
(
)
;
=
(
)
;
=
(
INT
)
(
(
)
)
;
IF
(
(
(
)
)
)
{
;
}
;
RETURN
;
}
__E__O__F__
INT
;
;
;
;
INT
;
INT
;
FLOAT
=
;
=
{
,
}
;
FLOAT
;
INT
;
INT
;
;
EXTERN
CHAR
;
EXTERN
INT
;
EXTERN
INT
;
;
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
=
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
=
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
)
{
INT
,
,
,
,
,
,
;
CHAR
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
)
=
(
(
)
)
;
}
}
(
)
;
}
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
VOID
)
{
=
(
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
;
;
(
(
)
,
,
)
;
}
VOID
(
CHAR
)
{
INT
;
INT
,
;
STATIC
INT
;
INT
;
IF
(
)
{
=
;
;
}
ELSE
=
;
WHILE
(
(
=
)
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
(
)
)
=
;
;
IF
(
)
{
;
=
;
}
IF
(
)
{
(
)
;
IF
(
)
=
;
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
=
;
=
;
;
IF
(
)
=
;
BREAK
;
}
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
STATIC
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
IF
(
)
(
(
,
)
,
,
)
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
IF
(
)
{
=
;
(
)
;
=
;
}
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
;
IF
(
)
RETURN
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
;
)
=
;
IF
(
)
;
=
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
=
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
INT
;
FLOAT
;
CHAR
;
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
;
}
IF
(
)
{
=
;
=
;
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
{
(
,
,
)
;
=
;
}
=
;
IF
(
(
)
(
)
)
(
(
)
(
)
)
;
=
;
WHILE
(
)
{
(
(
)
,
,
)
;
;
}
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
;
}
IF
(
)
=
;
}
VOID
(
INT
)
{
INT
,
,
,
,
;
INT
;
CHAR
;
INT
;
CHAR
;
IF
(
)
RETURN
;
(
)
;
=
;
=
(
)
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
(
(
)
,
,
)
;
;
;
}
=
;
FOR
(
=
;
;
,
,
)
{
IF
(
)
BREAK
;
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
}
IF
(
)
{
IF
(
(
=
(
,
)
)
)
;
ELSE
=
;
=
(
(
)
)
;
=
(
)
;
=
;
IF
(
(
)
)
{
=
;
(
,
,
)
;
=
;
(
,
)
;
}
ELSE
(
,
)
;
(
,
)
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
ELSE
=
;
=
;
=
;
(
(
)
,
,
)
;
=
;
FOR
(
=
;
(
)
;
)
(
(
)
,
,
)
;
}
(
)
;
}
VOID
(
CHAR
)
{
DOUBLE
,
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
DO
{
=
(
)
;
(
)
;
(
)
;
=
(
)
;
;
}
WHILE
(
)
;
(
)
;
=
;
=
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
=
;
=
;
(
,
)
;
=
;
}
__E__O__F__
STATIC
UNSIGNED
SHORT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
UNSIGNED
SHORT
)
{
=
;
}
VOID
(
UNSIGNED
SHORT
,
)
{
=
(
)
(
)
;
}
UNSIGNED
SHORT
(
UNSIGNED
SHORT
)
{
RETURN
;
}
UNSIGNED
SHORT
(
,
INT
)
{
UNSIGNED
SHORT
;
(
)
;
WHILE
(
)
=
(
)
(
)
;
RETURN
;
}
__E__O__F__
;
CHAR
=
;
(
CHAR
)
{
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
FLOAT
(
CHAR
)
{
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
(
)
;
}
CHAR
(
CHAR
)
{
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
)
{
;
INT
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
;
VOID
(
CHAR
,
CHAR
)
{
;
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
,
)
;
(
,
)
;
}
IF
(
)
{
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
(
,
,
)
)
;
}
}
(
)
;
=
(
(
)
)
;
(
,
)
;
=
(
)
;
}
VOID
(
CHAR
,
FLOAT
)
{
CHAR
;
(
,
,
)
;
(
,
)
;
}
VOID
(
)
{
CHAR
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
(
,
)
;
=
(
)
;
(
,
)
;
}
(
VOID
)
{
;
=
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
(
,
(
)
)
;
RETURN
;
}
VOID
(
)
{
;
FOR
(
=
;
;
=
)
IF
(
)
(
,
,
,
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
;
INT
;
INT
;
;
INT
;
}
;
STATIC
;
;
;
;
TYPEDEF
STRUCT
{
CHAR
;
;
}
;
;
INT
;
(
CHAR
)
{
RETURN
(
)
;
}
(
CHAR
)
{
;
INT
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
IF
(
)
(
)
;
;
(
,
)
;
}
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
}
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
;
;
UNSIGNED
SHORT
;
INT
;
INT
,
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
(
)
(
)
;
IF
(
)
{
=
;
;
=
;
}
ELSE
=
;
IF
(
)
{
=
;
WHILE
(
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
;
;
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
(
)
(
)
)
;
WHILE
(
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
;
(
)
;
}
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
(
)
)
;
;
;
}
}
VOID
(
INT
,
INT
,
)
{
;
UNSIGNED
SHORT
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
(
)
(
)
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
EXTERN
,
,
,
;
EXTERN
;
=
(
)
;
IF
(
)
{
=
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
IF
(
)
(
,
,
)
;
}
VOID
(
CHAR
)
{
;
;
INT
;
EXTERN
;
INT
,
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
)
(
)
;
=
;
WHILE
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
;
}
}
VOID
(
INT
,
INT
,
)
{
,
;
UNSIGNED
SHORT
;
INT
,
;
IF
(
(
)
(
)
(
)
(
)
)
{
(
)
;
}
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
;
;
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
}
;
;
}
}
}
VOID
(
INT
,
INT
,
,
INT
,
INT
,
INT
,
INT
)
{
,
;
UNSIGNED
SHORT
;
INT
,
;
IF
(
(
)
(
)
(
)
(
)
)
{
(
)
;
}
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
;
;
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
=
;
}
;
;
}
}
}
VOID
(
INT
,
INT
,
)
{
,
,
;
UNSIGNED
SHORT
;
INT
,
;
IF
(
(
UNSIGNED
)
(
)
(
UNSIGNED
)
(
)
)
{
(
)
;
}
=
;
IF
(
)
{
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
(
=
)
)
=
;
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
}
;
;
}
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
}
}
;
;
}
}
}
VOID
(
INT
,
INT
,
,
)
{
,
,
;
UNSIGNED
SHORT
;
INT
,
;
IF
(
(
UNSIGNED
)
(
)
(
UNSIGNED
)
(
)
)
{
(
)
;
}
=
;
IF
(
)
{
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
(
=
)
)
=
;
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
}
;
;
}
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
}
}
;
;
}
}
}
VOID
(
INT
,
)
{
INT
,
;
;
INT
;
INT
;
=
;
=
;
=
(
)
(
)
;
=
;
WHILE
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
;
;
}
}
VOID
(
INT
)
{
INT
,
,
;
,
;
UNSIGNED
SHORT
;
INT
,
;
;
CHAR
;
STATIC
CHAR
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
(
)
;
}
ELSE
{
(
)
(
,
,
,
)
;
(
,
,
)
;
=
(
(
)
)
;
}
(
,
,
)
;
FOR
(
=
;
(
)
;
)
(
,
(
)
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
IF
(
)
(
,
,
)
;
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
,
(
)
)
{
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
(
,
,
)
;
}
VOID
(
,
INT
,
,
INT
)
{
;
INT
,
,
,
;
;
=
(
)
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
}
;
;
}
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
(
,
,
)
;
;
;
}
}
}
VOID
(
,
INT
,
,
INT
)
{
;
INT
,
,
,
;
UNSIGNED
SHORT
;
=
(
UNSIGNED
SHORT
)
(
(
)
)
;
=
;
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
}
;
;
}
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
;
;
}
;
;
}
}
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
;
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
}
ELSE
{
(
,
,
,
)
;
}
;
;
=
;
}
;
;
=
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
;
UNSIGNED
SHORT
;
UNSIGNED
;
INT
,
;
IF
(
)
{
(
,
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
FOR
(
=
;
;
,
)
FOR
(
=
;
;
)
=
;
}
ELSE
{
=
;
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
,
(
)
)
FOR
(
=
;
;
)
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
INT
;
=
(
)
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
}
}
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
,
)
;
}
__E__O__F__
STATIC
INT
;
FLOAT
;
INT
;
INT
,
,
,
;
INT
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
;
VOID
(
VOID
)
{
}
INT
(
FLOAT
)
{
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
RETURN
;
}
VOID
(
,
INT
)
{
;
;
INT
,
,
;
=
(
)
(
)
(
)
;
FOR
(
=
;
;
=
)
{
=
(
)
;
=
;
=
;
(
(
)
)
=
;
IF
(
)
{
FOR
(
;
;
)
(
(
)
)
=
;
}
ELSE
{
FOR
(
;
;
)
(
(
)
)
=
;
;
FOR
(
;
;
)
(
INT
)
(
(
)
)
=
;
;
FOR
(
;
;
)
(
(
)
)
=
;
}
}
}
VOID
(
)
{
;
FLOAT
;
;
,
;
FLOAT
;
=
;
=
(
FLOAT
)
(
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
}
VOID
(
VOID
)
{
;
;
;
;
;
=
;
(
,
)
;
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
;
=
;
(
,
(
INT
)
(
(
LONG
)
)
)
;
(
,
(
INT
)
)
;
(
)
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
{
(
)
;
}
(
)
;
(
)
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
(
,
(
INT
)
)
;
(
)
;
}
ELSE
IF
(
)
{
=
;
=
;
=
(
)
(
(
)
)
;
=
;
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
}
ELSE
{
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
(
)
;
}
=
;
=
(
)
;
=
(
,
)
;
=
(
)
;
=
;
(
)
;
(
)
(
)
;
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
}
}
}
}
}
__E__O__F__
VOID
(
,
INT
)
{
INT
,
,
,
;
UNSIGNED
CHAR
;
UNSIGNED
;
=
;
=
;
=
;
=
;
IF
(
)
{
;
=
;
}
IF
(
)
{
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
(
(
)
)
;
IF
(
(
(
)
)
(
(
(
LONG
)
)
)
)
{
=
(
UNSIGNED
)
;
;
;
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
=
(
UNSIGNED
)
(
(
)
)
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
;
}
}
}
__E__O__F__
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
;
;
INT
;
FLOAT
;
STATIC
FLOAT
=
{
,
,
}
;
EXTERN
INT
;
VOID
(
)
(
)
;
VOID
(
VOID
)
{
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
INT
)
{
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
=
;
ELSE
=
(
VOID
)
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
FOR
(
=
;
(
)
;
)
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
}
VOID
(
)
{
(
)
;
}
__E__O__F__
INT
,
,
,
;
INT
,
,
,
;
INT
;
SHORT
;
VOID
(
VOID
)
{
STATIC
=
;
IF
(
)
{
(
(
INT
)
,
(
INT
)
(
INT
)
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
=
;
=
;
=
;
=
;
IF
(
)
=
;
=
(
INT
)
(
(
FLOAT
)
(
)
)
;
=
(
INT
)
(
(
FLOAT
)
)
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
(
)
;
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
(
)
;
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
)
{
,
;
FLOAT
;
;
SHORT
;
INT
,
,
,
,
,
;
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
RETURN
;
}
=
(
)
;
=
;
=
(
INT
)
(
)
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
SWITCH
(
)
{
CASE
=
;
FOR
(
;
;
,
,
)
{
IF
(
)
{
=
;
=
;
}
}
BREAK
;
CASE
=
;
FOR
(
;
;
,
,
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
}
BREAK
;
CASE
=
;
FOR
(
;
;
,
,
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
}
BREAK
;
CASE
=
;
FOR
(
;
;
,
,
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
}
BREAK
;
DEFAULT
=
;
FOR
(
;
;
,
,
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
}
}
BREAK
;
}
}
__E__O__F__
TYPEDEF
STRUCT
{
VOID
;
SHORT
;
INT
;
;
INT
,
,
,
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
}
;
INT
,
,
;
;
INT
;
INT
;
;
=
{
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
}
;
INT
,
,
,
;
INT
,
,
,
,
;
INT
,
;
INT
,
;
;
;
STATIC
INT
;
,
;
SHORT
;
INT
,
,
,
;
INT
,
;
INT
,
,
;
INT
,
,
;
INT
,
;
INT
,
;
INT
,
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
STATIC
=
{
}
;
;
INT
;
;
VOID
(
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
,
INT
,
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
{
(
(
)
(
)
)
;
=
(
)
(
(
(
LONG
)
)
(
)
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
VOID
(
,
INT
)
{
INT
,
;
SHORT
;
FOR
(
=
;
;
,
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
IF
(
)
{
INT
;
=
;
=
;
=
(
(
)
)
(
)
;
=
;
}
}
}
}
VOID
(
VOID
)
{
;
,
,
,
;
INT
;
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
(
(
)
(
)
(
)
(
)
)
)
{
CONTINUE
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
{
INT
,
,
;
=
;
=
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
,
,
)
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
;
,
,
,
;
INT
;
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
=
(
)
(
)
(
)
(
)
;
IF
(
)
{
CONTINUE
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
(
)
;
(
)
;
}
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
INT
;
INT
;
INT
;
SHORT
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
GOTO
;
}
RETURN
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
GOTO
;
IF
(
(
)
(
)
)
GOTO
;
=
;
=
;
IF
(
)
{
INT
;
=
;
=
;
=
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
{
=
;
=
;
=
;
FOR
(
=
;
;
,
)
=
;
}
}
VOID
(
INT
)
{
DO
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
;
IF
(
)
{
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
;
;
;
}
ELSE
{
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
;
;
}
}
WHILE
(
)
;
}
VOID
(
,
,
,
)
{
DOUBLE
,
;
INT
,
;
;
=
;
=
;
=
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
(
(
)
)
(
)
;
=
;
=
;
=
;
}
ELSE
{
=
(
DOUBLE
)
;
=
(
DOUBLE
)
;
(
,
,
,
)
;
=
;
}
}
VOID
(
INT
)
{
FLOAT
,
,
,
;
FLOAT
,
,
,
;
=
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
;
=
;
=
(
)
(
)
;
}
;
VOID
(
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
=
;
}
}
VOID
(
)
{
INT
;
;
;
INT
,
;
INT
;
INT
;
SHORT
;
DO
{
=
;
;
IF
(
)
{
;
;
}
ELSE
{
;
}
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
DO
{
IF
(
(
)
)
{
=
(
(
)
)
(
)
;
=
;
}
;
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
}
WHILE
(
)
;
}
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
=
;
WHILE
(
)
{
INT
;
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
DO
{
=
;
}
WHILE
(
)
;
}
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
,
,
,
;
INT
,
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
,
,
,
)
;
=
;
=
;
=
;
=
(
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
IF
(
)
{
INT
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
=
;
=
(
)
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
=
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
INT
;
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
ELSE
{
=
;
}
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
;
IF
(
)
;
=
;
}
VOID
(
INT
,
INT
)
{
INT
;
INT
;
INT
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
RETURN
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
{
INT
;
=
;
=
;
=
;
}
(
,
)
;
(
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
INT
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
RETURN
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
}
__E__O__F__
UNSIGNED
CHAR
,
;
,
,
,
;
INT
;
INT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
,
;
INT
,
;
;
INT
;
INT
;
;
;
INT
;
FLOAT
,
;
=
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
FOR
(
=
;
;
)
{
=
(
)
(
(
INT
)
(
(
FLOAT
)
(
)
)
)
;
}
FOR
(
=
;
;
)
{
=
(
INT
)
(
(
FLOAT
)
(
)
)
;
}
=
(
(
INT
)
(
)
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
DO
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
)
;
;
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
=
(
(
INT
)
(
)
(
)
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
INT
,
;
UNSIGNED
CHAR
,
;
,
,
,
,
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
DO
{
=
(
(
)
(
)
)
;
;
;
}
WHILE
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
INT
,
,
;
INT
;
SHORT
;
UNSIGNED
;
DOUBLE
;
FLOAT
,
;
=
(
INT
)
(
)
;
DO
{
=
(
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
INT
)
(
)
;
IF
(
(
LONG
)
)
{
=
(
SHORT
)
(
)
;
;
;
}
IF
(
(
=
)
)
{
DO
{
=
;
;
;
;
(
INT
)
=
;
;
}
WHILE
(
)
;
}
IF
(
)
=
(
SHORT
)
(
)
;
}
WHILE
(
(
=
)
)
;
}
__E__O__F__
(
)
VOID
(
INT
,
INT
,
,
)
{
FLOAT
,
,
;
;
IF
(
)
=
(
FLOAT
)
;
ELSE
=
(
FLOAT
)
;
=
(
FLOAT
)
(
(
(
INT
)
)
)
;
=
(
FLOAT
)
(
(
(
INT
)
)
)
;
=
;
=
;
=
;
;
(
)
;
=
;
=
(
INT
)
(
(
(
)
)
)
;
=
(
INT
)
(
(
(
)
)
)
;
}
VOID
(
)
{
INT
,
,
,
;
UNSIGNED
CHAR
;
,
,
,
,
,
;
INT
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
;
=
;
(
,
,
,
)
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
IF
(
)
{
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
}
}
DO
{
=
(
(
)
)
(
(
)
)
;
;
;
}
WHILE
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
,
;
STATIC
;
VOID
(
)
{
INT
,
,
;
INT
;
,
;
,
,
,
,
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
;
SHORT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
INT
)
(
)
;
DO
{
=
(
)
(
)
;
=
(
)
;
=
;
IF
(
)
GOTO
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
DO
{
=
(
(
)
(
)
)
;
IF
(
)
{
IF
(
(
)
)
{
=
;
=
;
}
}
;
;
;
;
;
}
WHILE
(
)
;
=
;
=
;
}
WHILE
(
)
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
;
,
;
;
FLOAT
,
,
,
,
;
,
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
=
(
)
;
DO
{
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
(
(
(
)
)
)
)
(
)
;
=
(
INT
)
;
=
(
INT
)
;
FOR
(
=
;
;
)
{
=
;
=
;
;
;
}
}
=
;
;
IF
(
)
=
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
;
,
;
;
FLOAT
,
,
,
,
,
,
,
,
;
,
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
DO
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
(
(
(
)
)
)
)
(
)
;
=
(
INT
)
;
=
(
INT
)
;
FOR
(
=
;
;
)
{
=
(
)
;
;
;
}
}
=
;
=
;
;
IF
(
)
=
;
}
WHILE
(
)
;
=
;
}
VOID
(
VOID
)
{
,
,
,
;
FLOAT
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
(
(
,
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
FLOAT
,
;
;
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
;
}
=
(
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
FLOAT
;
;
INT
;
,
;
INT
(
INT
,
INT
)
{
INT
,
;
IF
(
(
)
)
{
=
(
(
)
)
;
RETURN
;
}
=
;
=
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
VOID
,
INT
)
{
=
;
=
(
)
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
{
IF
(
)
=
;
}
=
;
=
;
=
;
=
;
}
(
INT
,
INT
)
{
;
;
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
=
(
INT
)
(
(
LONG
)
(
(
)
)
)
;
=
(
INT
)
(
(
)
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
IF
(
(
)
(
)
)
{
IF
(
)
{
=
;
}
=
;
}
=
;
IF
(
)
=
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
IF
(
)
=
;
;
=
;
}
IF
(
)
{
=
(
)
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
=
;
=
;
IF
(
)
=
(
(
)
(
)
)
;
=
;
IF
(
)
{
IF
(
(
)
)
=
;
}
ELSE
IF
(
)
{
=
;
}
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
)
;
(
,
,
,
)
;
}
}
INT
(
INT
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
INT
)
{
INT
;
=
;
WHILE
(
)
;
RETURN
;
}
(
,
INT
)
{
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
,
)
;
=
;
=
;
=
;
}
IF
(
)
=
;
ELSE
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
;
(
)
;
RETURN
;
}
__E__O__F__
FLOAT
,
,
;
FLOAT
,
,
;
FLOAT
,
,
;
,
,
,
;
;
INT
;
;
SHORT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
__E__O__F__
VOID
(
VOID
)
{
;
SHORT
;
INT
;
=
(
)
;
=
;
=
(
INT
)
(
)
;
IF
(
)
{
=
;
=
;
}
}
__E__O__F__
EXTERN
UNSIGNED
CHAR
;
EXTERN
,
,
,
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
;
;
;
INT
;
INT
;
INT
;
STATIC
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
TYPEDEF
STRUCT
{
INT
;
FLOAT
,
,
,
;
}
;
(
)
(
)
;
=
(
)
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
INT
,
;
;
}
;
;
INT
;
VOID
(
INT
)
{
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
(
,
)
;
(
,
)
;
}
INT
;
;
;
INT
;
INT
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
INT
,
;
INT
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
}
IF
(
)
{
=
;
=
=
;
}
}
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
;
RETURN
;
}
(
)
;
RETURN
;
}
INT
;
VOID
(
VOID
)
{
;
(
)
;
(
,
,
,
,
)
;
=
;
}
TYPEDEF
STRUCT
{
CHAR
;
;
;
}
;
;
INT
;
;
INT
;
INT
;
(
CHAR
)
{
;
;
=
(
)
;
=
(
)
;
IF
(
)
{
INT
,
;
INT
,
,
;
INT
;
=
(
,
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
,
)
(
)
=
;
;
=
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
;
;
}
ELSE
{
=
(
)
;
=
;
=
;
=
;
=
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
)
;
;
(
,
)
;
=
(
)
(
)
;
IF
(
)
(
,
)
;
(
)
;
IF
(
(
,
)
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
INT
,
)
{
INT
,
;
;
INT
;
INT
;
=
;
=
;
=
(
)
(
)
;
=
;
WHILE
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
;
;
}
}
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
VOID
(
VOID
)
{
INT
;
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
IF
(
(
,
(
)
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
(
)
;
(
,
,
)
;
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
INT
;
;
;
INT
;
CHAR
;
;
INT
;
;
(
)
;
(
)
;
(
)
;
IF
(
(
(
CHAR
)
,
,
)
(
(
CHAR
)
,
,
)
)
(
,
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
)
=
;
=
(
,
,
,
,
,
)
;
=
(
,
,
,
,
,
)
;
=
(
)
;
=
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
,
(
)
)
;
=
;
=
;
=
=
(
,
)
;
FOR
(
=
;
;
,
)
{
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
=
;
=
;
=
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
=
(
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
;
=
(
)
;
=
(
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
,
;
FLOAT
,
,
;
IF
(
)
RETURN
;
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
(
)
)
;
;
;
}
}
VOID
(
VOID
)
{
INT
,
;
EXTERN
;
UNSIGNED
CHAR
;
IF
(
)
{
=
;
=
;
(
,
,
)
;
=
(
UNSIGNED
CHAR
)
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
}
ELSE
IF
(
)
(
,
,
)
;
}
VOID
(
CHAR
)
{
}
VOID
(
INT
,
INT
,
)
{
;
IF
(
)
(
)
;
=
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
,
INT
,
,
FLOAT
)
{
;
IF
(
)
(
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
}
VOID
(
INT
,
INT
,
,
INT
,
INT
,
INT
,
INT
)
{
;
FLOAT
,
,
,
;
FLOAT
,
;
IF
(
)
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
,
INT
,
)
{
IF
(
(
UNSIGNED
)
(
)
(
UNSIGNED
)
(
)
)
{
(
)
;
}
(
,
,
)
;
}
VOID
(
INT
,
INT
,
,
)
{
INT
,
,
;
UNSIGNED
,
;
;
INT
;
(
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
;
}
}
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
)
{
CHAR
;
INT
,
;
INT
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
,
(
FLOAT
)
(
)
)
;
=
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
=
(
(
)
)
(
)
;
FOR
(
=
;
(
)
;
)
(
,
,
)
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
(
,
,
)
;
(
(
INT
)
)
;
(
)
;
(
,
)
;
(
,
)
;
(
(
)
,
)
;
(
,
)
;
(
(
)
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
(
,
,
,
)
;
(
)
;
(
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
}
INT
(
CHAR
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
VOID
(
UNSIGNED
,
INT
,
INT
,
UNSIGNED
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
;
UNSIGNED
,
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
VOID
(
UNSIGNED
CHAR
,
INT
,
INT
,
UNSIGNED
CHAR
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
CHAR
;
UNSIGNED
,
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
VOID
(
,
INT
,
INT
)
{
INT
,
;
;
;
;
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
}
VOID
(
,
INT
,
INT
)
{
INT
,
;
;
UNSIGNED
SHORT
,
,
;
,
,
,
;
;
=
;
FOR
(
=
;
;
,
)
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
;
=
(
)
;
;
=
(
)
;
;
=
(
)
(
)
(
)
;
}
}
VOID
(
UNSIGNED
,
INT
,
INT
,
,
)
{
INT
;
STATIC
UNSIGNED
;
INT
,
;
FOR
(
=
;
;
)
;
FOR
(
=
;
;
)
;
(
INT
)
;
(
INT
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
)
)
(
)
;
=
;
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
,
,
,
)
;
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
;
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
)
;
GOTO
;
}
(
,
,
)
;
}
ELSE
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
IF
(
)
{
INT
;
=
;
WHILE
(
)
{
(
(
)
,
,
)
;
;
;
IF
(
)
=
;
IF
(
)
=
;
;
(
,
,
,
,
,
,
,
,
)
;
}
}
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
}
VOID
(
,
INT
,
INT
,
,
)
{
INT
,
;
;
INT
;
STATIC
UNSIGNED
CHAR
;
INT
,
;
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
IF
(
)
=
;
}
FOR
(
=
;
;
)
;
FOR
(
=
;
;
)
;
(
INT
)
;
(
INT
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
)
)
(
)
;
=
;
;
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
)
;
GOTO
;
}
(
,
,
)
;
}
ELSE
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
IF
(
)
{
INT
;
=
;
WHILE
(
)
{
(
(
)
,
,
)
;
;
;
IF
(
)
=
;
IF
(
)
=
;
;
(
,
,
,
,
,
,
,
,
)
;
}
}
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
}
EXTERN
(
)
;
VOID
(
,
INT
,
INT
,
,
)
{
STATIC
UNSIGNED
;
INT
,
;
;
INT
;
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
=
;
}
IF
(
)
=
;
}
ELSE
{
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
IF
(
(
)
(
)
)
{
(
,
,
,
,
)
;
RETURN
;
}
(
,
,
,
,
)
;
}
INT
(
CHAR
,
INT
,
INT
,
,
,
)
{
INT
;
;
IF
(
)
{
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
{
IF
(
)
(
)
;
RETURN
;
}
}
}
ELSE
=
;
;
(
,
)
;
=
;
=
;
=
;
=
;
(
)
;
(
,
,
,
,
)
;
;
RETURN
;
}
INT
(
)
{
RETURN
(
,
,
,
,
,
)
;
}
STATIC
=
;
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
}
__E__O__F__
;
;
;
INT
;
INT
;
INT
;
INT
;
INT
,
;
INT
;
INT
;
INT
;
INT
(
INT
,
INT
)
{
INT
,
;
INT
;
,
;
INT
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
GOTO
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
=
(
)
;
=
;
;
=
;
GOTO
;
}
}
FOR
(
=
;
;
)
IF
(
)
=
;
RETURN
;
}
INT
(
INT
,
INT
)
{
INT
,
;
INT
;
,
;
INT
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
GOTO
;
=
(
)
;
=
;
=
;
;
=
;
GOTO
;
}
}
FOR
(
=
;
;
)
IF
(
)
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
,
;
INT
;
FLOAT
,
;
INT
,
,
;
INT
;
INT
;
INT
;
=
;
=
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
)
=
(
,
)
;
ELSE
=
(
,
)
;
IF
(
)
{
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
}
}
}
FOR
(
=
;
;
)
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
IF
(
)
;
=
(
)
;
=
(
)
;
(
FLOAT
)
=
;
(
FLOAT
)
=
;
}
}
=
;
(
,
,
,
)
;
;
;
}
VOID
(
,
)
{
INT
,
;
INT
;
;
CHAR
,
;
;
=
;
=
;
(
,
)
;
(
(
)
,
(
)
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
)
;
}
ELSE
{
(
,
)
;
(
)
;
(
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
CHAR
;
(
,
,
)
;
(
)
;
=
(
,
)
;
}
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
)
;
}
}
=
;
=
(
)
;
=
(
)
(
)
;
(
,
,
)
;
=
(
(
)
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
;
}
__E__O__F__
;
CHAR
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
(
,
)
;
;
;
INT
;
=
{
,
,
}
;
VOID
(
VOID
)
{
(
)
;
(
,
,
(
)
)
;
}
VOID
(
)
{
VOID
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
)
{
;
FLOAT
;
;
IF
(
)
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
(
,
)
{
STATIC
;
INT
;
;
INT
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
{
WHILE
(
)
{
=
;
;
}
RETURN
;
}
DO
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
;
WHILE
(
)
{
=
;
;
}
}
WHILE
(
)
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
=
;
}
(
CHAR
)
{
INT
;
;
IF
(
)
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
IF
(
)
(
)
;
(
,
)
;
=
;
;
}
RETURN
;
}
VOID
(
CHAR
)
{
;
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
}
}
(
,
)
{
VOID
;
UNSIGNED
;
;
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
RETURN
;
}
ELSE
RETURN
;
}
IF
(
)
{
}
=
(
UNSIGNED
)
(
,
,
(
)
)
;
IF
(
)
{
IF
(
)
(
,
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
SWITCH
(
(
(
UNSIGNED
)
)
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
RETURN
;
}
(
CHAR
,
)
{
;
=
(
)
;
RETURN
(
,
)
;
}
;
VOID
(
)
{
INT
,
,
,
,
,
;
;
,
;
;
;
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
)
(
(
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
=
;
=
(
(
)
,
)
;
=
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
(
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
(
)
;
ELSE
{
=
;
=
(
,
,
,
(
)
(
)
,
,
)
;
=
;
}
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
=
;
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
;
}
ELSE
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
=
;
=
;
IF
(
)
=
;
}
ELSE
(
,
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
}
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
;
FLOAT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
}
}
}
VOID
(
)
{
FLOAT
,
,
;
INT
,
,
;
;
;
INT
,
;
=
=
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
(
)
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
CONTINUE
;
}
IF
(
(
,
,
)
)
{
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
CONTINUE
;
}
}
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
;
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
(
(
)
)
;
}
}
(
,
)
;
}
VOID
(
)
{
;
;
INT
,
,
,
;
CHAR
;
=
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
(
,
,
(
,
)
)
;
IF
(
(
,
)
)
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
;
}
IF
(
)
{
FOR
(
=
;
;
)
;
}
}
}
VOID
(
)
{
,
;
INT
,
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
,
;
;
INT
,
,
;
;
=
;
=
;
=
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
}
}
VOID
(
)
{
INT
,
,
;
SHORT
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
=
;
}
}
VOID
(
)
{
INT
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
=
(
)
;
=
(
)
;
=
;
}
}
FLOAT
(
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
(
)
(
)
(
)
;
}
RETURN
(
)
;
}
VOID
(
,
VOID
)
{
INT
,
;
;
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
)
;
IF
(
)
CONTINUE
;
(
,
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
(
,
)
;
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
{
CHAR
;
(
,
,
)
;
=
(
)
;
=
;
(
,
)
;
=
;
}
}
}
;
;
;
;
INT
;
;
VOID
(
VOID
,
)
{
;
INT
;
;
=
(
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
)
(
)
;
=
;
;
;
RETURN
(
VOID
)
;
}
VOID
(
VOID
,
)
{
;
INT
,
;
;
VOID
;
=
(
)
;
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
)
(
)
;
=
(
)
;
;
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
)
(
(
)
)
;
;
=
(
)
(
(
)
)
;
}
RETURN
;
}
TYPEDEF
STRUCT
{
SHORT
,
;
}
;
EXTERN
UNSIGNED
;
(
)
(
,
,
)
{
IF
(
)
{
=
;
=
(
)
,
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
=
;
}
VOID
(
,
INT
,
INT
)
{
=
;
;
INT
=
,
=
;
INT
=
;
INT
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
IF
(
(
)
)
{
=
;
BREAK
;
}
}
IF
(
(
)
(
)
)
{
RETURN
;
}
=
,
=
;
=
(
)
;
WHILE
(
)
{
INT
=
,
=
;
INT
=
;
=
;
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
=
;
}
}
VOID
(
INT
,
)
{
INT
,
,
;
CHAR
;
INT
;
;
;
INT
;
;
=
(
)
(
)
;
IF
(
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
)
;
IF
(
(
,
)
)
{
IF
(
(
)
)
(
)
;
(
,
(
)
(
)
,
)
;
}
(
,
,
,
)
;
=
=
=
=
(
,
,
,
(
)
(
)
,
,
)
;
=
(
)
(
(
)
(
)
)
;
}
ELSE
{
;
=
(
)
;
=
(
)
;
=
(
)
(
)
;
=
(
VOID
)
(
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
,
,
,
)
;
=
(
,
,
,
(
)
(
)
,
,
)
;
=
(
)
(
(
)
(
)
)
;
}
=
;
FOR
(
;
;
)
=
;
}
}
RETURN
(
VOID
)
;
}
VOID
(
,
VOID
)
{
INT
,
;
;
;
;
INT
,
;
INT
;
;
;
INT
,
,
;
IF
(
(
,
)
(
,
)
)
{
UNSIGNED
SHORT
;
;
INT
;
CHAR
;
(
)
;
FOR
(
=
,
=
;
;
,
)
(
,
)
;
(
,
,
(
INT
)
)
;
(
,
(
,
)
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
(
,
)
,
(
INT
)
)
;
(
,
)
;
}
}
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
(
(
)
)
(
)
;
=
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
}
=
;
=
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
IF
(
)
{
=
(
)
(
,
)
;
}
ELSE
{
=
(
)
(
,
)
;
}
}
=
;
=
;
=
=
=
;
=
=
=
;
(
,
)
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
,
,
INT
)
{
;
;
INT
,
,
,
;
CHAR
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
(
,
,
,
(
)
(
)
,
,
)
;
RETURN
(
VOID
)
(
(
)
(
)
)
;
}
VOID
(
VOID
,
,
INT
)
{
;
;
INT
,
;
;
FLOAT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
(
)
(
)
(
)
,
)
;
=
;
=
(
)
;
=
(
)
(
)
;
=
(
(
FLOAT
)
,
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
;
;
}
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
,
,
)
;
}
RETURN
;
}
VOID
(
,
VOID
)
{
INT
;
INT
;
;
;
INT
;
INT
;
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
=
(
)
(
)
(
)
;
=
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
=
;
=
=
;
=
;
=
;
IF
(
)
(
,
)
;
=
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
(
,
,
)
;
}
ELSE
{
=
(
)
(
,
,
)
;
}
}
=
;
}
VOID
(
VOID
)
{
INT
;
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
}
}
__E__O__F__
EXTERN
;
INT
;
STATIC
;
STATIC
VOID
(
INT
,
INT
)
{
INT
;
INT
;
INT
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
ELSE
=
(
)
;
FOR
(
;
;
)
=
(
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
,
;
;
INT
;
INT
;
=
;
=
;
=
(
)
(
)
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
;
INT
;
CHAR
;
UNSIGNED
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
)
;
}
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
;
=
(
(
)
)
;
=
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
)
;
;
(
)
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
__E__O__F__
;
;
,
;
;
VOID
(
)
{
,
,
,
;
=
;
WHILE
(
)
{
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
BREAK
;
}
ELSE
=
;
}
=
;
=
;
=
;
=
;
}
=
;
}
VOID
(
)
{
;
;
;
INT
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
IF
(
)
=
;
=
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
=
;
}
VOID
(
)
{
;
;
;
WHILE
(
(
=
)
)
{
=
;
=
;
SWITCH
(
)
{
CASE
CASE
CASE
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
}
=
;
BREAK
;
DEFAULT
(
,
)
;
}
}
}
__E__O__F__
INT
;
VOID
(
VOID
)
{
INT
,
,
;
=
(
INT
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
=
;
=
;
=
;
}
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
;
=
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
FLOAT
,
;
VOID
(
)
{
FLOAT
;
INT
;
FLOAT
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
INT
,
;
;
FLOAT
;
FLOAT
,
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
(
)
)
{
(
,
,
,
)
;
RETURN
;
}
(
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
=
;
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
(
)
(
)
)
;
;
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
)
;
}
(
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
,
INT
,
)
{
;
FLOAT
;
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
}
}
;
;
INT
(
,
,
)
{
INT
;
FLOAT
,
,
;
INT
;
;
;
;
INT
,
,
,
;
INT
;
;
;
UNSIGNED
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
(
)
)
RETURN
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
=
(
,
)
;
=
(
,
)
;
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
;
;
=
;
=
;
IF
(
)
{
(
(
)
)
;
FOR
(
=
;
;
)
{
=
;
;
(
(
)
)
(
(
)
)
;
}
;
}
RETURN
;
}
RETURN
(
,
,
)
;
}
INT
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
=
;
RETURN
;
}
__E__O__F__
;
;
,
;
;
INT
;
INT
;
;
INT
,
;
;
INT
=
;
INT
=
{
,
}
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
FLOAT
;
FLOAT
;
;
,
;
;
INT
;
VOID
(
VOID
)
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
EXTERN
;
EXTERN
;
(
,
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
VOID
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
(
)
{
;
;
;
INT
,
,
;
FLOAT
,
,
,
;
=
;
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
IF
(
)
{
=
;
}
ELSE
{
=
(
)
;
=
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
}
=
;
}
RETURN
;
}
VOID
(
)
{
;
;
FLOAT
,
;
,
,
;
;
=
(
)
;
=
;
IF
(
)
{
(
,
,
,
)
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
}
FLOAT
=
{
}
;
;
FLOAT
,
;
FLOAT
=
;
FLOAT
=
;
INT
;
VOID
(
,
INT
)
{
FLOAT
;
;
INT
;
INT
;
=
;
=
(
)
(
(
)
)
;
;
=
(
INT
)
(
(
)
)
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
(
)
;
}
ELSE
(
)
;
DO
{
(
(
(
FLOAT
)
)
,
(
(
FLOAT
)
)
)
;
;
=
;
(
,
,
)
;
(
,
,
)
;
;
}
WHILE
(
)
;
(
)
;
}
}
EXTERN
;
VOID
(
,
INT
)
{
;
INT
;
;
FLOAT
,
;
INT
;
=
;
=
;
=
(
)
(
(
)
)
;
;
=
(
INT
)
(
(
)
)
;
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
(
)
;
}
ELSE
(
)
;
DO
{
;
=
;
=
;
=
;
(
)
;
(
)
;
=
;
(
)
;
;
}
WHILE
(
)
;
(
)
;
}
}
VOID
(
INT
,
)
{
INT
,
;
FLOAT
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
=
;
=
;
IF
(
)
{
=
;
(
INT
)
(
)
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
INT
;
;
FLOAT
;
;
,
;
;
FLOAT
;
INT
;
=
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
,
)
)
RETURN
;
(
,
)
;
(
,
,
)
;
=
=
(
)
;
IF
(
)
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
)
;
=
(
)
;
IF
(
)
{
;
;
}
}
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
,
)
)
{
IF
(
)
=
=
;
}
ELSE
IF
(
(
,
)
(
,
)
)
=
=
;
=
(
(
INT
)
(
(
)
)
)
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
(
)
;
=
(
)
(
)
;
;
(
)
;
(
)
;
(
)
;
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
=
(
INT
)
(
)
;
(
)
;
IF
(
)
{
=
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
(
)
;
}
IF
(
)
(
)
;
(
,
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
}
VOID
(
VOID
)
{
FLOAT
,
;
INT
;
INT
;
;
FLOAT
;
;
INT
,
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
=
(
)
;
IF
(
)
;
}
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
(
,
(
)
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
INT
(
)
{
INT
,
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
,
(
)
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
(
)
)
;
}
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
=
;
=
;
IF
(
(
(
,
)
)
)
=
;
(
)
;
;
(
,
)
;
(
,
,
,
)
;
=
;
=
(
,
)
;
(
)
;
(
)
;
=
;
=
;
=
;
}
VOID
(
,
,
,
)
{
,
,
,
;
=
(
)
;
=
;
=
;
=
;
(
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
EXTERN
INT
,
;
INT
,
,
,
,
,
;
(
)
;
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
(
)
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
=
;
=
;
IF
(
)
{
=
=
;
=
=
;
}
(
,
,
,
)
;
=
(
FLOAT
)
;
(
,
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
}
ELSE
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
(
)
;
}
ELSE
IF
(
)
{
STATIC
INT
;
IF
(
)
(
)
;
;
IF
(
)
{
=
;
=
;
(
)
;
}
ELSE
{
=
;
=
;
(
)
;
}
}
ELSE
{
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
(
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
;
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
=
(
,
)
;
(
,
,
,
)
;
=
(
,
)
;
(
,
,
,
)
;
=
(
)
;
=
(
,
)
;
=
;
=
;
IF
(
)
{
=
;
;
}
=
;
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
=
;
FOR
(
;
;
=
)
(
)
;
=
;
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
DOUBLE
=
,
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
{
(
)
;
=
(
)
;
=
;
=
;
}
=
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
=
(
)
;
(
,
(
INT
)
(
(
)
)
,
,
)
;
}
}
__E__O__F__
EXTERN
VOID
(
)
;
VOID
(
VOID
)
{
INT
,
,
;
;
=
(
(
)
,
)
;
=
=
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
(
)
;
)
FOR
(
=
;
(
)
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
=
;
ELSE
=
;
}
}
}
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
}
;
VOID
(
VOID
)
{
INT
,
;
;
=
;
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
;
=
;
;
}
VOID
(
INT
)
{
INT
,
;
;
UNSIGNED
;
INT
,
;
;
UNSIGNED
,
;
UNSIGNED
,
;
INT
,
;
INT
,
;
;
UNSIGNED
,
;
;
EXTERN
;
CHAR
;
(
)
;
=
;
IF
(
)
RETURN
;
(
,
(
,
)
)
;
(
,
)
;
IF
(
(
,
)
)
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
;
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
}
=
;
=
;
IF
(
)
(
)
;
IF
(
(
=
(
)
)
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
(
)
;
=
;
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
(
,
,
,
,
,
)
;
=
;
=
;
(
INT
)
;
(
INT
)
;
IF
(
(
)
)
{
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
(
(
)
,
,
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
=
;
IF
(
(
,
,
)
)
=
;
=
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
,
,
;
(
)
;
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
(
)
;
}
(
)
;
=
(
)
;
=
;
(
,
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
}
__E__O__F__
INT
;
INT
;
INT
;
UNSIGNED
;
INT
;
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
,
;
}
;
;
;
;
INT
;
;
=
;
=
;
VOID
(
)
;
VOID
(
)
{
INT
;
INT
,
;
FLOAT
,
,
;
,
;
INT
,
;
INT
;
INT
,
;
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
(
,
)
;
(
)
;
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
;
}
=
(
,
)
;
=
(
,
)
;
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
IF
(
)
(
)
;
}
}
}
}
VOID
(
,
,
INT
)
{
INT
,
;
INT
;
INT
,
,
;
;
UNSIGNED
;
INT
;
UNSIGNED
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
GOTO
;
}
FOR
(
=
;
;
)
=
;
IF
(
)
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
;
;
}
IF
(
)
(
)
;
SWITCH
(
)
{
CASE
(
)
;
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
;
=
;
;
}
}
BREAK
;
CASE
CASE
CASE
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
;
=
;
}
}
BREAK
;
DEFAULT
(
)
;
}
}
(
)
{
INT
;
INT
;
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
RETURN
;
=
(
INT
)
(
)
;
=
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
RETURN
;
}
EXTERN
INT
;
EXTERN
INT
;
EXTERN
FLOAT
;
VOID
(
)
;
VOID
(
)
;
=
;
=
;
=
;
VOID
(
)
;
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
(
)
;
=
;
}
}
VOID
(
)
{
;
FLOAT
;
INT
;
;
IF
(
)
{
=
;
=
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
}
=
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
;
FLOAT
;
INT
;
;
,
;
FLOAT
,
,
;
FLOAT
,
;
;
IF
(
(
(
)
)
)
{
(
)
;
IF
(
)
{
=
;
=
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
=
;
IF
(
)
{
=
;
=
;
(
,
,
,
,
,
,
,
,
(
)
)
;
=
;
=
;
=
;
=
;
}
(
,
,
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
RETURN
;
}
ELSE
{
=
;
=
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
(
)
;
}
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
RETURN
;
}
(
)
;
IF
(
)
{
=
;
=
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
=
;
IF
(
)
{
=
;
=
;
(
,
,
,
,
,
,
,
,
(
)
)
;
=
;
=
;
=
;
=
;
}
(
,
,
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
,
,
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
;
(
)
;
}
(
)
;
}
ELSE
{
=
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
}
VOID
(
)
{
INT
;
FLOAT
;
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
;
(
)
;
}
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
;
(
)
;
}
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
FLOAT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
)
;
}
IF
(
)
{
(
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
)
;
IF
(
)
{
=
;
=
;
(
,
,
,
,
,
,
,
,
(
)
)
;
=
;
=
;
=
;
=
;
}
FOR
(
;
;
=
)
{
IF
(
(
(
(
)
)
(
(
)
)
)
(
)
)
(
)
;
ELSE
{
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
}
}
(
)
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
}
(
)
;
}
VOID
(
)
{
;
;
INT
;
;
INT
,
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
(
)
)
(
(
)
)
)
(
)
)
(
)
;
ELSE
(
)
;
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
GOTO
;
IF
(
)
{
IF
(
)
{
=
;
=
;
IF
(
)
{
IF
(
)
;
=
;
}
IF
(
)
{
IF
(
)
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
=
;
;
(
,
,
)
;
}
}
}
VOID
(
)
{
;
INT
;
;
INT
,
;
;
IF
(
(
)
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
GOTO
;
IF
(
)
{
IF
(
)
{
=
;
=
;
IF
(
)
{
IF
(
)
;
=
;
}
IF
(
)
{
IF
(
)
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
=
;
;
(
,
,
)
;
}
}
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
;
IF
(
)
RETURN
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
)
;
FOR
(
;
;
=
)
(
)
;
=
;
}
(
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
(
)
;
(
,
,
,
)
;
(
,
,
)
;
}
IF
(
)
{
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
{
(
)
;
(
)
;
}
=
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
)
;
FOR
(
;
;
=
)
(
)
;
=
;
}
}
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
=
;
}
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
(
)
;
CONTINUE
;
}
ELSE
{
IF
(
(
)
)
CONTINUE
;
FOR
(
;
;
=
)
(
)
;
}
=
;
}
}
VOID
(
)
{
INT
;
INT
;
,
;
;
FLOAT
;
;
;
;
=
;
=
;
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
ELSE
{
=
;
(
,
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
RETURN
;
(
,
,
)
;
(
,
,
(
)
)
;
(
,
,
)
;
IF
(
)
{
;
,
,
;
(
,
)
;
(
,
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
CONTINUE
;
(
,
,
)
;
}
}
(
)
;
=
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
IF
(
)
(
)
;
ELSE
(
)
;
}
}
(
)
;
(
)
;
}
VOID
(
)
{
INT
,
;
;
,
;
;
DOUBLE
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
=
(
)
;
=
;
=
;
IF
(
)
{
DO
{
(
)
=
;
;
}
WHILE
(
)
;
}
IF
(
)
(
)
;
RETURN
;
}
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
,
)
;
BREAK
;
}
IF
(
)
=
;
ELSE
=
;
(
)
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
{
FOR
(
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
(
(
(
)
)
(
(
)
)
)
(
)
)
(
(
)
(
)
)
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
(
)
;
}
}
}
(
)
;
}
VOID
(
VOID
)
{
;
(
,
,
(
)
)
;
=
;
(
,
)
;
=
;
=
;
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
=
;
IF
(
)
{
=
;
(
,
,
(
)
)
;
}
ELSE
=
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
=
(
)
;
DO
{
IF
(
)
BREAK
;
=
;
=
;
}
WHILE
(
)
;
}
}
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
INT
,
;
INT
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
}
IF
(
)
{
=
;
=
=
;
}
}
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
;
RETURN
;
}
(
)
;
RETURN
;
}
;
;
INT
;
VOID
(
)
{
INT
,
,
;
,
;
INT
;
FLOAT
;
FLOAT
,
;
;
=
;
=
;
=
;
=
(
(
)
(
)
(
FLOAT
)
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
,
)
;
;
=
(
,
)
;
;
(
,
)
;
=
;
=
;
=
(
,
)
;
;
;
;
;
=
(
,
)
;
;
;
;
;
=
;
=
;
}
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
,
;
FLOAT
,
,
;
=
(
)
;
=
;
=
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
IF
(
(
(
)
)
(
(
)
)
(
(
)
)
)
{
INT
;
FOR
(
=
;
;
)
{
INT
;
FOR
(
=
;
;
)
=
;
}
;
;
;
}
}
}
=
;
}
VOID
(
)
{
INT
,
;
;
IF
(
(
)
)
RETURN
;
=
(
)
;
=
(
)
;
=
(
,
,
,
)
;
=
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
(
,
,
(
)
)
;
=
;
IF
(
)
{
=
;
;
}
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
=
;
=
;
FOR
(
=
;
;
)
{
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
)
;
}
}
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
IF
(
)
(
)
;
}
__E__O__F__
INT
,
,
,
;
INT
;
INT
;
FLOAT
;
FLOAT
;
FLOAT
,
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
EXTERN
;
;
;
;
;
INT
;
INT
;
INT
;
INT
;
;
;
;
;
FLOAT
;
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
CHAR
;
FLOAT
;
FLOAT
;
INT
;
INT
;
INT
;
VOID
(
CHAR
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
;
;
}
}
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
INT
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
IF
(
)
RETURN
;
}
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
=
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
}
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
;
FLOAT
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
FLOAT
;
INT
;
=
;
=
;
=
;
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
IF
(
)
{
=
;
=
;
=
;
}
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
{
=
;
=
;
}
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
;
=
;
=
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
(
,
)
;
=
;
}
VOID
(
VOID
)
{
(
,
)
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
STATIC
INT
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
EXTERN
;
STATIC
DOUBLE
;
DOUBLE
;
EXTERN
INT
;
STATIC
;
INT
,
;
CHAR
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
(
)
)
{
=
;
=
;
=
;
}
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
=
(
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
}
ELSE
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
(
)
;
=
;
}
ELSE
{
IF
(
)
(
)
;
}
}
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
CHAR
,
;
}
;
VOID
(
VOID
)
{
;
CHAR
;
CHAR
;
INT
,
,
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
CHAR
,
,
INT
,
INT
,
INT
,
,
)
{
INT
,
,
;
;
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
SHORT
)
(
)
)
;
=
(
(
SHORT
)
(
)
)
;
=
(
(
SHORT
)
)
;
=
(
(
SHORT
)
)
;
(
,
,
(
)
)
;
=
;
=
(
(
SHORT
)
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
ELSE
{
=
;
=
;
}
}
;
;
}
=
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
(
(
VOID
)
,
)
;
ELSE
(
,
,
)
;
}
INT
(
INT
,
INT
,
INT
)
{
INT
;
FLOAT
;
INT
;
FLOAT
;
INT
,
,
;
STATIC
INT
=
,
=
,
=
;
STATIC
INT
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
;
RETURN
;
}
;
VOID
(
INT
,
,
INT
)
{
INT
,
;
;
INT
;
INT
;
=
;
=
;
=
(
)
(
)
;
=
;
WHILE
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
ELSE
=
;
;
;
}
}
VOID
(
CONST
CHAR
,
,
INT
,
INT
,
INT
)
{
;
CONST
UNSIGNED
CHAR
;
=
(
(
)
)
;
=
(
CONST
UNSIGNED
CHAR
)
;
WHILE
(
)
{
(
,
,
)
;
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
UNSIGNED
CHAR
,
;
CHAR
;
CHAR
;
UNSIGNED
CHAR
,
;
INT
;
INT
,
;
INT
,
,
,
,
;
INT
,
,
;
INT
;
FLOAT
,
;
CHAR
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
,
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
FLOAT
)
(
FLOAT
)
;
=
(
FLOAT
)
(
FLOAT
)
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
=
=
;
=
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
IF
(
)
;
=
;
FOR
(
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
;
;
;
;
}
}
;
;
;
=
;
=
;
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
,
,
)
;
;
}
}
(
)
;
(
,
(
)
)
;
(
)
=
;
(
,
,
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
=
;
(
,
,
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
=
;
(
,
,
(
)
,
,
)
;
(
,
,
,
,
,
,
)
;
(
)
;
(
,
)
;
}
CHAR
;
;
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
=
;
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
,
)
(
,
,
)
;
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
INT
(
CHAR
)
{
=
;
=
;
=
;
(
)
;
=
;
(
)
;
DO
{
=
;
(
)
;
}
WHILE
(
)
;
=
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
(
)
)
;
}
}
FLOAT
=
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
ELSE
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
}
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
(
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
;
;
;
;
;
;
FLOAT
;
}
;
;
VOID
(
VOID
)
{
}
;
(
,
)
{
;
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
(
,
,
,
,
,
,
)
;
=
;
RETURN
;
}
VOID
(
)
{
INT
;
;
;
;
;
;
FLOAT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
BREAK
;
}
IF
(
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
(
)
;
=
(
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
}
VOID
(
)
{
;
INT
,
;
FLOAT
,
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
}
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
(
)
;
}
}
__E__O__F__
STATIC
=
;
(
)
{
,
}
UNSIGNED
SHORT
;
UNSIGNED
;
UNSIGNED
CHAR
;
INT
=
;
STRUCT
{
CHAR
;
INT
;
}
=
{
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
}
;
STATIC
UNSIGNED
CHAR
;
INT
=
(
)
(
)
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
CHAR
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
}
;
INT
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
,
;
=
{
,
}
;
INT
,
;
INT
=
;
INT
=
;
FLOAT
,
;
=
{
,
}
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
=
;
=
;
=
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
INT
(
INT
,
CHAR
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
INT
;
STRUCT
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
INT
)
{
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
}
VOID
(
UNSIGNED
CHAR
)
{
;
UNSIGNED
,
,
;
UNSIGNED
;
INT
,
,
;
INT
;
UNSIGNED
SHORT
;
UNSIGNED
;
;
CHAR
;
FLOAT
,
;
STATIC
=
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
(
)
(
)
(
)
(
)
;
=
;
}
;
IF
(
)
RETURN
;
=
;
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
;
FOR
(
=
,
=
,
=
;
;
,
)
{
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
(
(
)
(
)
(
)
)
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
(
,
,
)
;
(
)
;
(
,
,
)
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
,
)
;
(
)
;
}
}
}
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
EXTERN
;
=
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
(
)
;
}
}
STATIC
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
(
)
)
{
=
;
=
;
RETURN
;
}
=
;
=
;
RETURN
;
}
(
VOID
)
{
RETURN
;
}
VOID
(
)
{
INT
;
CHAR
;
CHAR
,
;
IF
(
(
,
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
(
,
,
,
,
,
(
VOID
)
)
;
=
;
}
EXTERN
VOID
(
)
;
VOID
(
VOID
)
{
INT
;
;
CHAR
;
IF
(
(
,
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
}
(
(
)
)
;
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
;
CHAR
;
INT
=
,
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
=
;
;
IF
(
)
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
=
;
=
(
,
(
,
)
,
,
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
=
;
;
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
}
ELSE
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
=
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
WHILE
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
}
VOID
(
)
{
}
__E__O__F__
STATIC
=
;
STATIC
;
STATIC
=
;
STATIC
FLOAT
=
;
(
)
(
)
(
)
UNSIGNED
SHORT
;
UNSIGNED
;
UNSIGNED
CHAR
;
=
{
,
,
}
;
=
{
,
,
}
;
STATIC
FLOAT
,
;
STATIC
FLOAT
,
;
=
{
,
}
;
STATIC
INT
,
;
INT
=
;
INT
=
;
FLOAT
,
;
=
{
,
}
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
=
;
=
;
=
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
STATIC
INT
(
)
{
INT
;
CHAR
;
;
=
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
UNSIGNED
CHAR
)
;
IF
(
)
=
;
BREAK
;
}
RETURN
;
}
STATIC
VOID
(
VOID
)
{
(
,
,
,
,
,
,
,
,
)
;
(
,
(
)
,
)
;
=
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
(
)
,
)
;
=
;
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
;
INT
;
IF
(
)
RETURN
;
(
,
)
;
SWITCH
(
)
{
CASE
CASE
(
(
)
,
)
;
BREAK
;
CASE
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
{
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
(
)
,
(
)
)
;
(
,
,
)
;
}
}
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
,
)
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
,
)
;
BREAK
;
}
IF
(
)
{
=
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
,
)
;
}
VOID
(
INT
)
{
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
}
VOID
(
UNSIGNED
CHAR
)
{
;
UNSIGNED
,
,
;
UNSIGNED
;
INT
,
,
;
INT
;
UNSIGNED
SHORT
;
UNSIGNED
;
;
CHAR
;
FLOAT
,
;
STATIC
=
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
(
)
(
)
(
)
(
)
;
=
;
}
;
IF
(
)
RETURN
;
=
;
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
;
FOR
(
=
,
=
,
=
;
;
,
)
{
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
(
(
)
(
)
(
)
)
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
(
,
,
)
;
(
)
;
(
,
,
)
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
,
)
;
(
)
;
}
}
}
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
EXTERN
;
=
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
(
VOID
)
{
RETURN
;
}
VOID
(
)
{
INT
;
CHAR
;
CHAR
,
;
IF
(
(
,
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
(
,
,
,
,
,
(
VOID
)
)
;
=
;
}
EXTERN
VOID
(
)
;
VOID
(
VOID
)
{
INT
;
;
CHAR
;
IF
(
(
,
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
}
(
(
)
)
;
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
;
INT
=
,
=
;
INT
;
;
UNSIGNED
LONG
;
;
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
=
;
;
IF
(
)
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
=
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
)
;
}
=
(
)
;
=
(
,
)
;
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
=
;
=
;
=
(
,
,
,
)
;
=
;
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
=
(
,
,
,
)
;
(
,
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
(
)
;
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
)
{
IF
(
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
=
=
;
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
}
VOID
(
)
{
}
__E__O__F__
STATIC
=
;
(
)
{
,
}
UNSIGNED
SHORT
;
UNSIGNED
;
UNSIGNED
CHAR
;
INT
=
;
STRUCT
{
CHAR
;
INT
;
}
=
{
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
}
;
STATIC
UNSIGNED
CHAR
;
INT
=
(
)
(
)
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
CHAR
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
}
;
INT
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
,
;
=
{
,
,
}
;
=
{
,
}
;
INT
,
;
INT
=
;
INT
=
;
FLOAT
,
;
=
{
,
}
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
=
;
=
;
=
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
VOID
)
{
FLOAT
,
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
(
)
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
)
;
=
;
}
}
INT
(
INT
,
CHAR
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
INT
;
STRUCT
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
INT
)
{
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
;
UNSIGNED
SHORT
,
,
;
INT
;
INT
,
,
;
INT
;
UNSIGNED
SHORT
;
UNSIGNED
;
;
CHAR
;
FLOAT
,
;
STATIC
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
(
)
(
)
(
)
(
)
;
=
;
}
;
IF
(
)
RETURN
;
=
;
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
;
FOR
(
=
,
=
,
=
;
;
,
)
{
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
(
(
)
(
)
(
)
)
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
(
,
,
)
;
(
)
;
(
,
,
)
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
,
)
;
(
)
;
}
}
}
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
EXTERN
;
=
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
(
)
;
}
}
STATIC
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
(
)
)
{
=
;
=
;
RETURN
;
}
=
;
=
;
RETURN
;
}
(
VOID
)
{
RETURN
;
}
VOID
(
)
{
INT
;
CHAR
;
CHAR
,
;
IF
(
(
,
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
(
,
,
,
,
,
(
VOID
)
)
;
=
;
}
EXTERN
VOID
(
)
;
VOID
(
VOID
)
{
INT
;
;
CHAR
;
IF
(
(
,
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
}
(
(
)
)
;
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
;
CHAR
;
INT
=
,
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
=
;
;
IF
(
)
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
=
;
=
(
,
(
,
)
,
,
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
=
;
;
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
}
ELSE
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
=
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
WHILE
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
}
VOID
(
)
{
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
STATIC
=
;
STATIC
;
STATIC
=
;
UNSIGNED
SHORT
;
UNSIGNED
INT
;
UNSIGNED
CHAR
;
STATIC
=
;
(
)
{
,
}
=
{
,
,
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
}
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
INT
;
STATIC
FLOAT
,
;
STATIC
FLOAT
,
;
STATIC
FLOAT
,
;
=
{
,
,
}
;
=
{
,
}
;
STATIC
FLOAT
;
STATIC
INT
,
;
(
)
(
)
INT
=
;
INT
=
;
FLOAT
,
;
=
{
,
}
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
=
;
=
;
=
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
VOID
)
{
FLOAT
,
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
(
)
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
(
)
,
)
;
}
INT
(
)
{
INT
;
CHAR
;
;
=
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
UNSIGNED
CHAR
)
;
IF
(
)
=
;
BREAK
;
}
RETURN
;
}
STRUCT
{
INT
;
INT
;
}
;
INT
=
;
INT
=
;
INT
=
;
INT
;
INT
;
(
VOID
)
{
;
IF
(
(
,
,
)
)
RETURN
;
SWITCH
(
)
{
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
}
RETURN
;
}
(
VOID
)
{
;
INT
;
IF
(
(
,
,
)
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
)
{
;
;
}
ELSE
IF
(
)
{
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
(
,
,
(
)
)
;
(
,
,
,
,
,
,
,
(
)
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
=
(
FLOAT
)
(
)
;
=
;
=
;
}
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
)
;
BREAK
;
}
IF
(
)
{
=
;
IF
(
)
{
(
)
;
(
,
)
;
(
,
)
;
}
ELSE
{
(
)
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
}
}
RETURN
;
}
VOID
(
INT
)
{
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
;
UNSIGNED
SHORT
,
,
;
INT
;
INT
,
,
;
INT
;
UNSIGNED
SHORT
;
UNSIGNED
;
;
CHAR
;
FLOAT
,
;
STATIC
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
(
)
(
)
(
)
(
)
;
=
;
}
;
IF
(
)
RETURN
;
=
;
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
;
FOR
(
=
,
=
,
=
;
;
,
)
{
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
(
(
)
(
)
(
)
)
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
(
,
,
)
;
(
)
;
(
,
,
)
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
,
)
;
(
)
;
}
}
}
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
EXTERN
;
=
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
(
VOID
)
{
RETURN
;
}
VOID
(
)
{
INT
;
CHAR
;
CHAR
,
;
IF
(
(
,
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
(
,
,
,
,
,
(
VOID
)
)
;
=
;
}
EXTERN
VOID
(
)
;
VOID
(
VOID
)
{
INT
;
;
CHAR
;
IF
(
(
,
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
}
(
(
)
)
;
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
CHAR
;
INT
=
,
=
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
}
;
INT
;
;
UNSIGNED
LONG
;
;
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
=
;
;
IF
(
)
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
=
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
)
;
}
=
(
)
;
=
(
,
)
;
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
=
;
=
;
=
(
,
,
,
)
;
=
;
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
IF
(
(
)
)
(
)
;
ELSE
(
)
;
=
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
(
,
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
;
WHILE
(
)
{
(
,
)
;
=
(
)
;
}
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
}
=
;
}
VOID
(
)
{
WHILE
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
=
=
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
(
)
(
)
TYPEDEF
STRUCT
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
}
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
;
;
STATIC
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
=
;
STATIC
,
;
STATIC
=
;
STATIC
=
;
STATIC
INT
;
EXTERN
;
STATIC
;
INT
,
;
;
,
;
,
;
INT
=
;
INT
;
INT
=
;
STATIC
INT
;
UNSIGNED
CHAR
;
STATIC
=
;
STATIC
FLOAT
=
;
;
;
;
=
{
,
}
;
(
,
INT
)
;
;
UNSIGNED
SHORT
;
UNSIGNED
;
UNSIGNED
CHAR
;
FLOAT
,
;
=
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
(
,
,
,
)
;
VOID
(
,
)
;
CHAR
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
;
;
;
;
TYPEDEF
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
INT
,
CONST
VOID
)
;
;
=
;
=
;
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
INT
,
,
,
,
,
;
;
VOID
(
)
{
}
VOID
(
INT
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
,
INT
,
INT
,
)
{
;
INT
,
;
=
(
(
)
)
;
=
(
(
)
)
;
IF
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
,
,
)
;
}
(
INT
)
{
;
INT
,
,
;
;
=
;
=
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
(
,
,
,
)
;
(
,
)
;
(
)
;
=
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
RETURN
;
}
(
INT
)
{
;
INT
,
,
;
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
,
)
)
(
)
;
}
=
;
=
;
=
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
(
,
)
;
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
RETURN
;
}
INT
(
INT
,
UNSIGNED
CHAR
)
{
INT
,
;
;
;
;
IF
(
(
(
)
)
(
(
)
)
(
(
)
)
)
{
(
)
;
}
=
;
=
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
{
=
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
=
(
)
;
}
}
ELSE
IF
(
)
{
=
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
}
=
;
=
;
(
)
;
(
)
;
=
;
IF
(
)
{
(
)
;
}
(
)
;
(
)
;
=
;
(
,
(
FLOAT
)
)
;
WHILE
(
(
,
,
,
,
)
)
{
(
)
;
(
)
;
}
(
)
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
IF
(
)
(
,
(
)
)
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
}
;
VOID
(
VOID
)
{
CHAR
;
;
;
=
;
=
(
UNSIGNED
CHAR
)
(
)
;
WHILE
(
)
{
IF
(
(
(
CONST
CHAR
)
,
,
(
)
)
)
=
;
;
}
IF
(
(
)
)
{
=
(
)
;
IF
(
)
(
)
;
=
(
VOID
)
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
(
=
(
)
(
(
)
)
)
)
{
(
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
CHAR
;
=
(
UNSIGNED
CHAR
)
(
)
;
WHILE
(
)
{
IF
(
(
(
CONST
CHAR
)
,
,
(
)
)
)
{
IF
(
(
(
=
(
)
)
)
(
(
=
(
)
)
)
(
(
=
(
)
)
)
(
(
=
(
)
)
)
)
{
(
)
;
RETURN
;
}
RETURN
;
}
;
}
(
)
;
}
INT
=
;
INT
=
;
VOID
(
VOID
)
{
IF
(
(
,
)
(
)
)
{
(
)
;
=
(
VOID
)
(
)
;
=
(
VOID
)
(
)
;
=
;
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
IF
(
(
,
,
)
)
=
;
IF
(
(
,
,
)
)
=
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
EXTERN
;
=
=
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
=
;
}
}
ELSE
{
=
;
IF
(
)
{
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
}
}
IF
(
)
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
;
UNSIGNED
,
,
;
UNSIGNED
;
INT
,
,
;
INT
,
,
,
;
UNSIGNED
SHORT
;
UNSIGNED
;
;
CHAR
;
,
;
FLOAT
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
(
)
(
)
(
)
(
)
;
=
;
}
;
FOR
(
=
;
(
)
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
;
FOR
(
=
,
=
,
=
;
;
,
)
{
=
;
=
;
=
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
}
;
VOID
(
UNSIGNED
CHAR
)
{
EXTERN
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
;
;
IF
(
)
{
=
;
=
(
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
}
(
)
{
STATIC
=
{
(
)
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
RETURN
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
(
INT
)
{
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
(
,
)
;
}
(
)
;
(
)
;
}
VOID
(
,
)
{
;
;
INT
,
;
STATIC
;
=
;
=
;
IF
(
)
{
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
}
}
ELSE
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
IF
(
)
{
(
,
)
;
=
;
}
}
ELSE
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
}
(
,
,
,
)
{
=
;
INT
,
,
,
,
,
;
EXTERN
UNSIGNED
INT
;
IF
(
)
=
;
SWITCH
(
)
{
CASE
IF
(
)
(
,
)
;
BREAK
;
CASE
BREAK
;
CASE
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
(
)
;
BREAK
;
CASE
CASE
(
(
)
,
)
;
BREAK
;
CASE
CASE
(
(
)
,
)
;
BREAK
;
CASE
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
)
;
BREAK
;
CASE
IF
(
(
SHORT
)
(
)
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
BREAK
;
CASE
IF
(
(
,
,
,
)
)
{
(
)
;
}
BREAK
;
CASE
=
(
)
;
=
(
)
(
)
;
(
(
)
,
)
;
(
)
;
BREAK
;
CASE
{
IF
(
)
(
)
;
(
)
;
}
BREAK
;
CASE
=
(
,
,
,
)
;
BREAK
;
DEFAULT
=
(
,
,
,
)
;
BREAK
;
}
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
(
INT
)
{
IF
(
(
)
(
)
)
RETURN
;
ELSE
RETURN
;
}
CHAR
(
INT
)
{
CHAR
;
;
STATIC
CHAR
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
(
,
,
,
)
;
=
;
}
RETURN
;
}
CHAR
(
INT
)
{
STATIC
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
,
,
)
;
}
ELSE
{
(
,
,
,
)
;
}
}
ELSE
{
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
=
(
(
)
)
;
=
;
=
;
(
,
(
)
)
;
=
;
}
VOID
(
VOID
)
{
INT
,
,
;
CHAR
;
;
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
(
,
,
)
;
}
=
;
}
VOID
(
)
{
;
;
INT
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
=
;
IF
(
(
)
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
=
;
IF
(
(
)
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
=
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
;
INT
,
,
,
,
,
;
INT
,
,
;
;
=
;
=
;
DO
{
=
(
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
)
;
IF
(
(
)
)
{
IF
(
(
)
)
{
;
=
;
(
,
,
,
,
)
;
}
}
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
;
}
}
}
;
}
WHILE
(
)
;
=
(
)
(
)
;
=
;
=
;
DO
{
FOR
(
=
;
(
)
(
)
;
)
{
=
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
)
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
;
}
}
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
WHILE
(
)
;
IF
(
)
(
)
;
}
(
)
{
RETURN
;
}
VOID
(
)
{
INT
;
CHAR
;
CHAR
,
;
=
(
VOID
)
(
)
;
IF
(
(
,
)
(
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
(
,
,
,
,
,
(
VOID
)
)
;
=
;
}
STATIC
VOID
(
UNSIGNED
CHAR
)
{
FLOAT
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
(
=
(
)
)
)
{
IF
(
(
(
,
)
)
(
(
,
)
)
)
=
;
ELSE
=
;
}
ELSE
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
,
,
(
)
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
,
;
INT
,
,
,
,
,
;
;
CHAR
;
;
;
(
,
,
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
,
(
)
)
;
(
)
;
(
)
;
=
=
;
(
)
;
IF
(
(
)
)
{
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
}
(
,
)
;
=
;
=
;
}
ELSE
{
IF
(
)
(
)
;
=
;
IF
(
(
)
)
{
=
(
(
)
)
;
}
ELSE
{
IF
(
(
)
)
{
=
(
)
;
=
(
)
;
=
;
=
;
}
ELSE
{
IF
(
(
)
)
{
=
(
(
)
)
;
}
ELSE
{
=
;
}
IF
(
(
)
)
{
=
(
(
)
)
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
)
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
;
}
}
=
;
DO
{
IF
(
(
)
)
{
=
(
(
)
)
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
=
;
BREAK
;
}
}
}
ELSE
{
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
BREAK
;
}
}
}
IF
(
)
{
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
ELSE
{
=
;
}
}
}
WHILE
(
)
;
IF
(
)
{
(
)
;
}
}
}
}
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
=
;
;
IF
(
)
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
=
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
(
)
;
(
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
(
,
)
)
(
)
;
(
)
;
(
,
,
)
;
(
)
;
=
;
(
)
;
=
;
=
;
(
,
)
;
=
;
IF
(
(
)
)
=
;
}
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
INT
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
STATIC
INT
,
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
INT
;
}
;
(
)
(
)
STATIC
;
VOID
(
VOID
)
{
;
CHAR
;
INT
,
,
,
,
,
,
,
;
CHAR
;
;
=
(
)
;
(
(
)
,
,
)
;
=
;
=
(
)
;
FOR
(
=
;
(
)
(
)
;
)
{
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
;
}
IF
(
)
{
(
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
IF
(
(
)
(
)
)
{
=
;
;
}
}
}
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
__E__O__F__
EXTERN
;
INT
;
INT
;
INT
;
FLOAT
;
;
EXTERN
;
VOID
(
INT
,
FLOAT
,
,
)
{
INT
,
;
FLOAT
;
=
=
=
;
=
=
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
,
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
VOID
(
INT
,
FLOAT
)
{
INT
,
,
;
,
;
FLOAT
;
FLOAT
;
,
;
INT
,
;
FLOAT
;
FLOAT
;
;
FLOAT
,
;
IF
(
)
(
,
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
,
)
=
;
=
;
;
(
,
)
;
=
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
)
;
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
)
{
=
(
)
;
FOR
(
=
;
;
)
=
=
(
)
;
;
;
}
}
(
,
)
;
(
,
)
;
RETURN
;
}
=
(
(
)
(
)
(
FLOAT
)
)
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
}
}
VOID
(
)
{
;
INT
;
INT
;
INT
;
FLOAT
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
;
}
(
,
)
;
}
FLOAT
=
{
}
;
(
(
)
)
VOID
(
)
{
;
FLOAT
;
INT
;
FLOAT
,
,
,
;
FOR
(
=
;
;
=
)
{
(
)
;
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
(
INT
)
(
(
)
)
;
(
)
;
=
(
INT
)
(
(
)
)
;
(
)
;
(
,
)
;
(
)
;
}
(
)
;
}
}
VOID
(
)
{
;
FLOAT
;
INT
;
FLOAT
,
;
;
FLOAT
;
FOR
(
=
;
;
=
)
{
(
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
;
=
;
=
(
)
;
=
;
;
;
=
(
)
(
)
;
=
(
)
(
)
;
(
,
)
;
(
)
;
}
(
)
;
}
}
VOID
(
)
{
(
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
}
VOID
(
)
{
;
(
)
;
(
)
;
=
;
(
INT
)
;
FOR
(
=
;
;
=
)
(
)
;
(
)
;
(
)
;
=
;
(
INT
)
;
FOR
(
=
;
;
=
)
(
)
;
(
)
;
}
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
CHAR
;
CHAR
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
CHAR
;
UNSIGNED
;
}
;
;
VOID
(
)
{
,
;
;
;
INT
,
;
INT
,
;
INT
;
(
,
,
(
)
,
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
(
,
,
,
)
;
(
,
(
)
,
)
;
=
(
)
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
)
)
{
=
;
=
(
)
;
}
ELSE
=
;
WHILE
(
)
{
=
;
=
;
=
;
=
;
;
;
}
}
}
}
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
CHAR
,
;
}
;
;
;
INT
(
)
{
,
;
=
(
)
;
=
(
)
;
RETURN
(
SHORT
)
(
)
;
}
INT
(
)
{
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
(
)
(
)
(
)
;
}
VOID
(
)
{
INT
,
,
;
;
INT
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
UNSIGNED
CHAR
,
,
,
;
SWITCH
(
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
BREAK
;
}
}
}
}
ELSE
IF
(
)
{
UNSIGNED
CHAR
,
,
,
,
,
,
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
IF
(
)
;
ELSE
GOTO
;
=
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
SWITCH
(
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
BREAK
;
}
;
IF
(
)
{
=
;
IF
(
)
;
ELSE
GOTO
;
=
;
}
}
}
}
;
}
}
(
)
;
}
CHAR
=
{
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
;
CHAR
;
FOR
(
=
;
;
)
{
(
)
;
(
,
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
CONTINUE
;
}
(
)
;
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
}
}
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
;
INT
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
FLOAT
,
;
VOID
(
INT
,
)
{
INT
,
;
,
;
FLOAT
,
,
;
INT
;
FLOAT
;
;
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
)
;
}
(
)
;
RETURN
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
FOR
(
=
;
;
,
)
{
=
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
VOID
(
INT
,
,
INT
)
{
FLOAT
;
FLOAT
;
,
;
FLOAT
,
;
FLOAT
;
INT
;
;
INT
;
INT
,
;
IF
(
)
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
=
;
=
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
;
(
,
(
(
)
)
)
;
=
=
;
FOR
(
=
,
=
;
;
,
)
{
SWITCH
(
)
{
CASE
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
;
(
,
)
;
;
BREAK
;
}
IF
(
)
CONTINUE
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
}
;
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
)
{
;
INT
;
;
;
=
;
(
)
;
FOR
(
=
;
;
=
)
{
FOR
(
=
;
;
=
)
{
FOR
(
=
;
;
)
{
(
,
,
)
;
}
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
=
;
=
=
;
}
}
VOID
(
FLOAT
,
FLOAT
,
INT
)
{
,
;
INT
,
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
;
}
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
(
,
)
;
(
)
;
}
INT
=
{
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
,
,
;
;
FLOAT
,
;
(
)
;
(
,
,
)
;
(
,
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
(
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
)
{
INT
,
,
;
;
UNSIGNED
;
UNSIGNED
;
INT
,
,
;
UNSIGNED
;
EXTERN
INT
;
=
(
)
;
=
=
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
(
)
=
;
(
(
)
)
;
(
(
)
)
;
(
(
)
)
;
}
(
(
)
)
=
(
)
;
(
(
)
)
=
(
)
;
(
(
)
)
=
(
)
;
(
(
)
)
=
;
IF
(
)
=
;
(
)
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
}
IF
(
)
=
;
(
)
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
(
,
,
,
)
(
,
,
,
)
(
)
(
,
,
,
)
;
=
{
,
}
;
INT
;
INT
;
;
INT
,
,
,
,
,
;
STATIC
;
STATIC
INT
,
=
{
,
,
}
;
;
STATIC
,
;
STATIC
=
;
STATIC
;
STATIC
UNSIGNED
INT
;
UNSIGNED
INT
;
;
ENUM
{
=
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
;
;
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
,
,
;
,
;
INT
;
;
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
TYPEDEF
STRUCT
{
;
;
;
;
;
;
;
}
;
STATIC
=
{
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
}
;
(
(
)
(
)
)
STATIC
=
{
(
)
,
(
)
,
,
(
)
,
,
,
}
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
}
ELSE
{
RETURN
;
}
}
ELSE
{
IF
(
)
=
(
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
}
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
}
}
ELSE
{
IF
(
)
(
,
,
,
)
;
(
)
;
(
)
;
}
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
(
)
;
(
)
;
}
(
VOID
)
{
;
=
{
{
(
)
,
(
)
,
,
,
}
,
,
}
;
IF
(
)
{
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
)
{
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
=
(
,
,
,
)
;
IF
(
(
)
)
{
RETURN
;
}
=
(
,
,
,
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
,
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
(
)
)
{
=
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
IF
(
)
{
=
(
,
,
,
)
;
IF
(
)
{
IF
(
(
)
)
=
;
IF
(
(
)
)
{
=
;
=
;
}
IF
(
(
)
)
{
=
;
=
;
=
;
}
}
}
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
INT
)
{
INT
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
}
VOID
(
)
{
INT
,
;
;
INT
;
;
;
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
FOR
(
;
;
)
{
=
;
=
(
,
(
)
,
,
,
)
;
IF
(
(
)
(
)
)
{
=
;
(
)
;
BREAK
;
}
IF
(
(
)
)
{
BREAK
;
}
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
BREAK
;
CASE
IF
(
)
;
ELSE
;
BREAK
;
CASE
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
CASE
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
}
}
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
ELSE
{
(
)
;
=
;
=
;
=
;
=
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
IF
(
)
{
(
,
)
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
IF
(
)
{
(
)
;
;
;
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
;
=
;
IF
(
(
)
)
RETURN
;
IF
(
(
=
(
)
)
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
IF
(
(
=
(
,
)
)
)
BREAK
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
(
)
)
;
IF
(
(
=
(
,
,
(
)
)
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
=
;
=
;
=
;
(
)
;
}
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
}
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
(
,
)
)
{
(
,
)
;
}
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
,
;
IF
(
)
{
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
(
,
)
;
}
}
=
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
}
(
VOID
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
IF
(
(
,
)
)
{
IF
(
)
{
;
}
RETURN
;
}
ELSE
{
RETURN
;
}
}
VOID
(
)
{
FLOAT
,
;
FLOAT
,
;
INT
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
RETURN
;
}
IF
(
(
)
)
{
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
{
=
(
FLOAT
)
;
;
IF
(
)
{
IF
(
)
{
=
(
(
)
,
)
;
IF
(
)
=
;
=
(
)
;
}
}
;
SWITCH
(
)
{
CASE
IF
(
(
)
(
)
)
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
(
)
;
}
ELSE
{
IF
(
)
(
)
;
}
}
ELSE
{
IF
(
(
)
)
{
(
)
;
}
}
BREAK
;
CASE
IF
(
(
)
)
{
(
)
;
}
BREAK
;
CASE
IF
(
(
)
(
(
)
)
)
{
IF
(
(
)
)
{
(
)
;
}
}
ELSE
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
}
BREAK
;
CASE
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
(
)
;
}
ELSE
{
IF
(
)
(
)
;
}
}
BREAK
;
DEFAULT
BREAK
;
}
}
IF
(
)
=
;
IF
(
)
=
;
}
__E__O__F__
CHAR
;
INT
;
INT
=
;
INT
;
INT
=
;
INT
=
;
;
INT
;
CHAR
;
;
;
INT
;
INT
;
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
(
VOID
)
{
CHAR
;
CHAR
,
;
INT
;
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
ELSE
=
;
=
;
=
(
)
;
IF
(
(
,
)
)
=
(
)
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
,
;
=
;
IF
(
)
;
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
=
;
(
,
)
;
=
(
)
;
=
;
;
=
;
RETURN
;
}
}
VOID
(
INT
)
{
CHAR
,
;
INT
;
;
CHAR
,
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
IF
(
(
)
)
(
)
;
ELSE
{
IF
(
)
(
)
;
(
)
;
}
(
)
;
(
,
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
;
RETURN
;
}
IF
(
)
{
DO
{
=
(
)
;
}
WHILE
(
)
;
IF
(
)
=
(
)
;
(
,
)
;
=
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
DO
{
=
(
)
;
}
WHILE
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
(
,
)
;
=
(
)
;
}
RETURN
;
}
IF
(
)
{
;
RETURN
;
}
IF
(
)
{
;
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
(
)
(
)
)
{
IF
(
(
)
)
{
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
=
;
(
,
)
;
;
;
}
(
)
;
}
(
)
;
}
(
)
;
RETURN
;
}
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
;
=
;
}
}
;
CHAR
;
INT
=
;
VOID
(
INT
)
{
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
;
=
;
}
RETURN
;
}
IF
(
(
)
)
RETURN
;
=
;
=
;
}
INT
(
CHAR
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
CHAR
(
INT
)
{
;
STATIC
CHAR
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
RETURN
;
}
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
INT
,
CHAR
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
=
;
}
=
(
)
;
=
(
)
;
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
CHAR
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
(
)
,
)
;
ELSE
(
,
(
)
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
IF
(
(
)
)
(
,
)
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
,
,
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
INT
,
)
{
CHAR
;
CHAR
;
=
;
IF
(
)
=
;
=
;
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
;
IF
(
)
RETURN
;
IF
(
)
(
,
(
)
)
;
}
IF
(
)
=
;
IF
(
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
)
;
}
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
}
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
(
(
)
)
)
{
=
;
IF
(
)
{
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
}
}
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
__E__O__F__
VOID
(
CHAR
,
)
;
=
{
,
,
}
;
INT
=
;
(
)
(
)
VOID
(
,
CONST
,
CONST
)
{
FLOAT
;
;
FLOAT
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
CONST
)
{
INT
;
INT
;
FLOAT
=
;
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
)
{
=
;
=
(
)
;
}
}
=
=
=
;
=
;
(
,
,
)
;
(
)
;
}
(
,
)
VOID
(
,
CONST
,
CONST
,
FLOAT
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
INT
;
,
,
;
=
;
=
;
=
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
=
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
}
}
(
,
)
FLOAT
(
FLOAT
)
{
IF
(
)
(
INT
)
(
)
;
ELSE
(
(
INT
)
(
)
)
;
=
(
)
(
(
INT
)
(
(
)
)
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
}
INT
(
,
,
)
{
FLOAT
,
;
INT
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
=
=
;
(
)
;
BREAK
;
}
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
IF
(
)
;
=
;
IF
(
)
=
;
IF
(
)
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
,
,
,
)
{
FLOAT
;
FLOAT
,
,
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
}
INT
(
,
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
FLOAT
,
,
)
{
=
;
=
;
=
;
}
(
,
)
{
RETURN
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
DOUBLE
(
DOUBLE
)
;
(
)
{
INT
;
FLOAT
;
=
;
FOR
(
=
;
;
)
;
=
(
)
;
RETURN
;
}
FLOAT
(
)
{
FLOAT
,
;
=
;
=
(
)
;
IF
(
)
{
=
;
;
;
;
}
RETURN
;
}
VOID
(
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
INT
(
INT
)
{
INT
=
;
WHILE
(
(
)
)
;
RETURN
;
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
DOUBLE
,
DOUBLE
,
INT
,
INT
)
{
INT
,
;
DOUBLE
;
IF
(
)
(
,
)
;
IF
(
)
{
=
(
)
;
=
(
INT
)
;
=
(
INT
)
(
(
)
)
;
}
ELSE
{
=
(
)
;
=
(
INT
)
;
=
(
INT
)
(
(
)
)
;
IF
(
)
{
;
=
(
INT
)
;
}
}
=
;
=
;
}
INT
(
INT
,
INT
)
{
IF
(
)
{
IF
(
)
RETURN
(
)
;
RETURN
(
,
)
;
}
ELSE
{
IF
(
)
RETURN
(
)
;
RETURN
(
,
)
;
}
}
(
)
{
IF
(
)
RETURN
(
)
;
RETURN
(
)
(
(
(
DOUBLE
)
(
DOUBLE
)
(
DOUBLE
)
)
)
;
}
__E__O__F__
TYPEDEF
UNSIGNED
CHAR
;
TYPEDEF
UNSIGNED
SHORT
INT
;
TYPEDEF
UNSIGNED
INT
;
TYPEDEF
UNSIGNED
LONG
INT
;
TYPEDEF
STRUCT
{
;
;
UNSIGNED
CHAR
;
}
;
VOID
(
)
;
VOID
(
,
UNSIGNED
CHAR
,
UNSIGNED
INT
)
;
VOID
(
UNSIGNED
CHAR
,
)
;
STATIC
VOID
(
,
UNSIGNED
CHAR
)
;
STATIC
VOID
(
UNSIGNED
CHAR
,
,
UNSIGNED
INT
)
;
STATIC
VOID
(
,
UNSIGNED
CHAR
,
UNSIGNED
INT
)
;
STATIC
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
(
,
,
)
(
(
(
)
(
)
)
(
(
)
(
)
)
)
(
,
,
)
(
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
)
(
,
,
)
(
(
)
(
)
(
)
)
(
,
)
(
(
(
)
(
)
)
(
(
)
(
(
)
)
)
)
(
,
,
,
,
,
)
{
(
)
(
(
)
,
(
)
,
(
)
)
(
)
;
(
)
=
(
(
)
,
(
)
)
;
}
(
,
,
,
,
,
)
{
(
)
(
(
)
,
(
)
,
(
)
)
(
)
(
)
;
(
)
=
(
(
)
,
(
)
)
;
}
(
,
,
,
,
,
)
{
(
)
(
(
)
,
(
)
,
(
)
)
(
)
(
)
;
(
)
=
(
(
)
,
(
)
)
;
}
VOID
(
)
{
=
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
UNSIGNED
CHAR
,
UNSIGNED
INT
)
{
UNSIGNED
INT
,
,
;
=
(
UNSIGNED
INT
)
(
(
)
)
;
IF
(
(
(
(
)
)
)
(
(
)
)
)
;
(
(
)
)
;
=
;
IF
(
)
{
(
(
)
,
(
)
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
=
;
}
ELSE
=
;
(
(
)
,
(
)
,
)
;
}
VOID
(
UNSIGNED
CHAR
,
)
{
UNSIGNED
CHAR
;
UNSIGNED
INT
,
;
(
,
,
)
;
=
(
UNSIGNED
INT
)
(
(
)
)
;
=
(
)
(
)
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
(
)
,
,
(
)
)
;
}
STATIC
VOID
(
,
UNSIGNED
CHAR
)
{
=
,
=
,
=
,
=
,
;
(
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
;
;
;
;
(
(
)
,
,
(
)
)
;
}
STATIC
VOID
(
UNSIGNED
CHAR
,
,
UNSIGNED
INT
)
{
UNSIGNED
INT
,
;
FOR
(
=
,
=
;
;
,
)
{
=
(
UNSIGNED
CHAR
)
(
)
;
=
(
UNSIGNED
CHAR
)
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
(
(
)
)
;
}
}
STATIC
VOID
(
,
UNSIGNED
CHAR
,
UNSIGNED
INT
)
{
UNSIGNED
INT
,
;
FOR
(
=
,
=
;
;
,
)
=
(
(
)
)
(
(
(
)
)
)
(
(
(
)
)
)
(
(
(
)
)
)
;
}
UNSIGNED
(
VOID
,
INT
)
{
INT
;
UNSIGNED
;
;
(
)
;
(
,
(
UNSIGNED
CHAR
)
,
)
;
(
(
UNSIGNED
CHAR
)
,
)
;
=
;
RETURN
;
}
VOID
(
VOID
,
INT
,
UNSIGNED
CHAR
)
{
;
(
)
;
(
,
(
UNSIGNED
CHAR
)
,
)
;
(
,
)
;
}
__E__O__F__
VOID
(
)
(
VOID
)
;
VOID
(
)
(
INT
)
;
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
;
;
INT
;
;
CHAR
;
(
)
(
)
(
)
(
)
(
)
(
)
VOID
(
VOID
)
;
VOID
(
INT
,
INT
,
INT
)
{
(
(
(
)
)
,
,
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
(
)
)
;
;
;
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
INT
,
INT
,
)
{
(
(
(
)
)
,
,
)
;
}
VOID
(
INT
,
INT
,
)
{
(
(
(
)
)
,
,
)
;
}
;
;
VOID
(
INT
,
INT
)
{
INT
;
,
;
FOR
(
=
;
;
)
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
FOR
(
=
;
;
)
=
;
IF
(
)
(
,
,
)
;
ELSE
FOR
(
=
;
;
)
=
;
}
VOID
(
INT
,
INT
,
)
{
(
(
(
)
)
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
;
INT
,
;
INT
;
=
;
=
;
=
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
;
(
,
,
)
;
}
=
(
)
;
(
,
,
)
;
;
WHILE
(
)
{
=
;
=
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
;
IF
(
)
=
(
)
;
(
,
,
)
;
}
=
(
)
;
(
,
,
)
;
;
;
}
=
;
=
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
;
(
,
,
)
;
}
=
(
)
;
(
,
,
)
;
}
INT
;
VOID
(
VOID
)
{
=
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
INT
;
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
(
INT
)
(
)
;
(
,
,
(
(
,
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
=
;
=
;
=
;
IF
(
)
(
)
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
}
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
INT
)
{
(
)
;
SWITCH
(
)
{
CASE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
;
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
CASE
(
,
)
;
BREAK
;
}
}
VOID
(
INT
,
INT
,
FLOAT
)
{
INT
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
)
;
(
(
)
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
(
,
,
(
(
INT
)
(
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
=
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
(
)
;
BREAK
;
}
RETURN
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
IF
(
(
)
(
)
)
{
IF
(
)
=
;
ELSE
=
;
}
}
CHAR
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
(
(
)
(
)
)
INT
;
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
CHAR
,
INT
)
{
INT
;
INT
;
INT
;
CHAR
;
=
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
{
=
;
;
IF
(
)
BREAK
;
}
}
}
VOID
(
CHAR
)
{
INT
;
INT
;
CHAR
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
CHAR
;
INT
,
;
;
=
(
)
;
(
(
)
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
(
,
,
)
;
=
(
)
;
(
,
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
{
=
(
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
(
)
)
;
}
}
}
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
(
INT
)
(
)
)
)
;
}
VOID
(
INT
)
{
CHAR
;
INT
;
IF
(
)
{
(
)
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
(
,
,
(
)
,
)
;
(
)
;
}
=
;
RETURN
;
}
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
,
)
;
(
)
;
IF
(
)
(
)
;
=
;
BREAK
;
CASE
CASE
(
)
;
(
)
;
BREAK
;
}
}
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
(
)
;
}
VOID
(
INT
)
{
(
)
(
)
;
}
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
,
,
(
(
,
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
CASE
=
;
IF
(
)
=
;
BREAK
;
CASE
CASE
=
;
IF
(
)
=
;
BREAK
;
}
}
INT
;
INT
;
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
CASE
CASE
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
BREAK
;
CASE
CASE
=
;
(
)
;
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
=
;
}
VOID
(
VOID
)
{
(
)
(
)
(
)
CHAR
=
{
,
(
)
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
;
INT
;
IF
(
)
{
=
;
=
;
(
)
;
=
;
}
(
,
,
,
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
ELSE
(
)
;
=
;
}
ELSE
{
=
;
}
SWITCH
(
)
{
CASE
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
BREAK
;
CASE
BREAK
;
CASE
(
)
;
BREAK
;
CASE
BREAK
;
CASE
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
BREAK
;
CASE
BREAK
;
CASE
BREAK
;
CASE
BREAK
;
CASE
BREAK
;
CASE
BREAK
;
}
IF
(
)
{
(
)
;
=
;
}
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
(
)
;
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
BREAK
;
CASE
RETURN
;
}
}
__E__O__F__
;
CHAR
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
(
,
)
;
;
;
INT
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
VOID
(
)
{
VOID
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
)
{
;
FLOAT
;
;
IF
(
)
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
(
,
)
{
STATIC
;
INT
;
;
INT
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
{
WHILE
(
)
{
=
;
;
}
RETURN
;
}
DO
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
;
WHILE
(
)
{
=
;
;
}
}
WHILE
(
)
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
=
;
}
(
CHAR
)
{
INT
;
;
IF
(
)
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
IF
(
)
(
)
;
(
,
)
;
=
;
;
}
RETURN
;
}
VOID
(
CHAR
)
{
;
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
}
}
(
,
)
{
VOID
;
UNSIGNED
;
;
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
RETURN
;
}
ELSE
RETURN
;
}
IF
(
)
{
}
=
(
UNSIGNED
)
(
,
,
(
)
)
;
IF
(
)
{
IF
(
)
(
,
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
SWITCH
(
(
(
UNSIGNED
)
)
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
RETURN
;
}
(
CHAR
,
)
{
;
=
(
)
;
RETURN
(
,
)
;
}
;
VOID
(
)
{
INT
,
,
,
,
,
;
;
,
;
;
;
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
)
(
(
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
=
;
=
(
(
)
,
)
;
=
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
(
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
(
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
=
;
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
;
}
ELSE
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
=
;
=
;
IF
(
)
=
;
}
ELSE
(
,
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
}
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
;
FLOAT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
}
}
}
VOID
(
)
{
FLOAT
,
,
;
INT
,
,
;
;
;
INT
,
;
=
=
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
(
)
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
{
(
)
;
CONTINUE
;
}
IF
(
(
,
,
)
)
{
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
CONTINUE
;
}
}
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
;
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
(
(
)
)
;
}
}
(
,
)
;
}
VOID
(
)
{
;
;
INT
,
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
=
;
}
}
VOID
(
)
{
,
;
INT
,
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
,
;
;
INT
,
,
;
;
=
;
=
;
=
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
}
}
VOID
(
)
{
INT
,
,
;
SHORT
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
=
;
}
}
VOID
(
)
{
INT
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
=
(
)
;
=
(
)
;
=
;
}
}
FLOAT
(
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
(
)
(
)
(
)
;
}
RETURN
(
)
;
}
VOID
(
,
VOID
)
{
INT
,
;
;
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
)
;
IF
(
)
CONTINUE
;
(
,
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
=
(
,
)
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
{
CHAR
;
(
,
,
)
;
=
(
)
;
=
;
(
,
)
;
=
;
}
}
}
VOID
(
VOID
,
INT
,
INT
,
,
,
,
CHAR
)
{
,
;
INT
,
;
;
=
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
)
(
)
;
=
(
(
)
,
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
INT
;
=
;
FOR
(
=
;
;
)
{
=
;
}
}
;
RETURN
(
VOID
)
;
}
VOID
(
VOID
,
INT
,
INT
,
,
,
,
CHAR
)
{
;
;
INT
,
;
;
FLOAT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
(
)
(
)
(
)
,
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
)
(
)
;
=
(
)
(
)
;
=
(
(
FLOAT
)
,
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
;
;
}
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
,
,
,
,
,
,
)
;
}
RETURN
;
}
VOID
(
VOID
,
INT
,
INT
,
)
{
INT
;
,
;
UNSIGNED
SHORT
;
=
(
,
)
;
=
(
)
;
=
(
)
(
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
=
;
}
ELSE
{
(
,
)
;
}
;
RETURN
(
(
VOID
)
)
;
}
VOID
(
VOID
,
INT
,
INT
,
)
{
;
;
INT
,
;
;
FLOAT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
(
)
(
)
(
)
,
)
;
=
;
=
(
)
(
)
;
=
(
)
(
)
;
=
(
(
FLOAT
)
,
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
;
;
}
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
,
,
,
)
;
}
RETURN
;
}
VOID
(
,
VOID
)
{
INT
;
,
;
,
;
;
;
;
INT
,
,
;
INT
;
;
;
;
INT
;
INT
,
,
;
IF
(
(
,
)
(
,
)
)
{
UNSIGNED
SHORT
;
;
INT
;
CHAR
;
(
)
;
FOR
(
=
,
=
;
;
,
)
(
,
)
;
(
,
,
(
INT
)
)
;
(
,
(
,
)
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
(
,
)
,
(
INT
)
)
;
(
,
)
;
}
}
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
(
(
)
)
(
)
(
)
(
)
(
)
(
)
(
)
;
=
(
,
)
;
=
(
)
(
(
)
(
(
)
)
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
;
=
;
IF
(
)
(
)
;
=
(
)
(
)
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
(
,
,
,
)
;
}
ELSE
{
=
(
)
(
,
,
,
)
;
}
}
=
(
)
;
=
(
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
INT
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
}
IF
(
)
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
(
,
,
,
,
,
,
)
;
}
ELSE
{
=
(
)
(
,
,
,
,
,
,
)
;
}
}
=
;
=
=
=
;
=
=
=
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
,
)
{
;
;
INT
,
,
,
,
;
UNSIGNED
SHORT
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
,
(
)
(
)
,
)
;
}
ELSE
IF
(
)
{
=
(
)
(
)
;
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
=
;
}
ELSE
{
(
,
)
;
}
RETURN
(
VOID
)
(
(
)
(
)
)
;
}
VOID
(
VOID
,
)
{
;
;
INT
,
;
;
FLOAT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
(
)
(
)
(
)
,
)
;
=
;
=
(
)
;
=
(
)
(
)
;
=
(
(
FLOAT
)
,
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
;
;
}
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
,
)
;
}
RETURN
;
}
VOID
(
,
VOID
)
{
INT
;
INT
;
;
;
INT
;
INT
;
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
=
(
)
(
)
(
)
;
=
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
=
;
=
=
;
=
;
=
;
IF
(
)
(
,
)
;
=
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
(
,
)
;
}
ELSE
{
=
(
)
(
,
)
;
}
}
=
;
}
VOID
(
VOID
)
{
INT
;
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
}
}
__E__O__F__
INT
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
VOID
(
VOID
)
{
INT
;
=
(
(
INT
)
(
(
)
)
(
)
)
;
=
(
(
INT
)
(
(
)
(
)
)
(
)
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
VOID
(
,
INT
,
)
{
;
;
=
;
=
(
)
;
=
;
(
,
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
,
CHAR
,
)
{
;
STATIC
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
(
)
,
(
)
)
;
}
VOID
(
,
,
INT
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
}
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
IF
(
)
RETURN
;
RETURN
(
)
;
}
(
VOID
)
;
VOID
(
,
INT
,
)
{
;
;
;
UNSIGNED
,
;
INT
;
IF
(
)
{
=
;
(
,
(
)
)
;
RETURN
;
}
=
;
IF
(
)
=
;
IF
(
)
{
(
,
,
)
;
=
;
=
;
;
=
;
}
=
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
IF
(
)
(
,
,
)
;
=
(
)
;
=
;
=
;
IF
(
)
(
,
,
)
;
IF
(
)
=
;
ELSE
;
IF
(
(
)
)
=
;
IF
(
)
(
,
,
,
,
,
)
;
}
(
)
{
UNSIGNED
,
;
UNSIGNED
,
;
INT
;
INT
;
IF
(
(
,
)
)
RETURN
;
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
(
,
,
,
,
,
)
;
IF
(
)
{
INT
;
DOUBLE
,
;
=
(
)
;
=
;
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
{
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
}
}
}
IF
(
(
UNSIGNED
)
)
{
IF
(
)
(
,
(
)
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
;
IF
(
)
(
,
(
)
,
(
)
,
)
;
}
IF
(
(
UNSIGNED
)
)
=
;
=
;
=
;
=
;
IF
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
;
=
;
RETURN
;
}
__E__O__F__
(
)
;
;
;
INT
;
INT
;
;
INT
(
CHAR
,
INT
)
;
INT
(
INT
)
;
VOID
(
,
STRUCT
)
{
(
,
,
(
)
)
;
=
;
(
INT
)
=
(
INT
)
;
=
;
}
VOID
(
STRUCT
,
)
{
(
INT
)
=
(
INT
)
;
=
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
,
,
,
,
,
(
)
)
;
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
,
,
,
,
)
;
RETURN
;
}
(
CHAR
,
)
{
STRUCT
;
STRUCT
;
CHAR
;
CHAR
;
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
(
(
)
)
;
}
IF
(
)
{
(
INT
)
=
(
)
;
}
ELSE
{
IF
(
(
=
(
)
)
)
RETURN
;
(
INT
)
=
(
INT
)
;
}
(
,
)
;
RETURN
;
}
(
)
{
STRUCT
;
INT
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
,
(
)
)
;
=
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
{
(
)
;
RETURN
;
}
(
)
;
RETURN
;
RETURN
;
}
(
VOID
)
{
INT
;
STRUCT
;
INT
;
=
(
)
;
=
(
,
,
(
)
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
(
)
)
;
RETURN
;
}
=
;
(
,
)
;
RETURN
;
}
VOID
(
INT
,
VOID
,
)
{
INT
;
STRUCT
;
(
,
)
;
=
(
,
,
,
,
(
STRUCT
)
,
(
)
)
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
(
)
)
;
}
}
INT
(
INT
)
{
INT
;
STRUCT
;
=
;
INT
;
IF
(
(
=
(
,
,
)
)
)
(
,
(
)
)
;
IF
(
(
,
,
(
CHAR
)
)
)
(
,
(
)
)
;
=
;
IF
(
(
=
(
)
)
)
{
=
(
)
;
(
,
(
)
)
;
}
ELSE
=
;
IF
(
)
=
;
ELSE
=
(
(
SHORT
)
)
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
(
,
(
)
)
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
STRUCT
;
INT
;
(
,
)
;
=
;
(
,
)
;
=
(
)
;
IF
(
(
,
(
STRUCT
)
,
)
)
(
,
(
)
)
;
=
;
(
,
(
)
)
;
}
VOID
(
INT
)
{
=
(
)
;
=
(
)
;
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
__E__O__F__
;
;
;
INT
;
(
)
;
;
VOID
(
,
STRUCT
)
{
(
,
,
(
)
)
;
=
;
(
INT
)
=
(
INT
)
;
=
;
}
VOID
(
STRUCT
,
)
{
(
INT
)
=
(
INT
)
;
=
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
,
,
,
,
,
(
)
)
;
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
,
,
,
,
)
;
RETURN
;
}
(
CHAR
,
)
{
STRUCT
;
STRUCT
;
CHAR
;
CHAR
;
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
(
(
SHORT
)
(
)
)
;
}
IF
(
)
{
(
INT
)
=
(
)
;
}
ELSE
{
IF
(
(
=
(
)
)
)
RETURN
;
(
INT
)
=
(
INT
)
;
}
(
,
)
;
RETURN
;
}
(
)
{
STRUCT
;
INT
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
,
(
)
)
;
=
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
{
(
)
;
RETURN
;
}
(
)
;
RETURN
;
RETURN
;
}
(
VOID
)
{
INT
;
STRUCT
;
INT
;
=
(
)
;
=
(
,
(
CHAR
)
,
(
)
,
,
(
STRUCT
)
,
)
;
(
,
)
;
IF
(
)
{
INT
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
(
)
)
;
}
=
;
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
RETURN
;
}
VOID
(
INT
,
VOID
,
)
{
INT
;
STRUCT
;
(
,
)
;
=
(
,
,
,
,
(
STRUCT
)
,
(
)
)
;
IF
(
)
{
INT
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
}
INT
(
INT
)
{
INT
;
STRUCT
;
UNSIGNED
LONG
=
;
INT
;
IF
(
(
=
(
,
,
)
)
)
(
,
(
)
)
;
IF
(
(
,
,
)
)
(
,
(
)
)
;
=
;
IF
(
(
=
(
)
)
)
{
=
(
)
;
(
,
(
)
)
;
}
ELSE
=
;
IF
(
)
=
;
ELSE
=
(
(
SHORT
)
)
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
(
,
(
)
)
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
STRUCT
;
INT
;
(
,
)
;
=
;
(
,
)
;
=
(
)
;
IF
(
(
,
(
STRUCT
)
,
)
)
(
,
(
)
)
;
=
;
(
,
(
)
)
;
}
VOID
(
INT
)
{
;
INT
;
=
(
,
)
;
=
(
(
,
)
,
)
;
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
__E__O__F__
VOID
(
)
{
}
VOID
(
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
;
;
INT
;
INT
;
INT
;
FLOAT
;
,
,
;
=
{
,
,
}
;
=
{
,
,
}
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
(
)
;
}
INT
(
,
,
,
FLOAT
)
{
FLOAT
;
FLOAT
;
INT
,
;
=
;
IF
(
)
;
IF
(
)
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
}
RETURN
;
}
INT
(
VOID
)
{
INT
,
;
;
FLOAT
;
INT
;
;
,
;
INT
,
;
;
;
FLOAT
;
INT
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
BREAK
;
=
;
;
IF
(
)
{
;
}
IF
(
)
{
;
}
;
IF
(
)
{
(
,
)
;
BREAK
;
}
(
,
)
;
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
{
}
ELSE
{
IF
(
)
{
(
,
)
;
BREAK
;
}
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
{
(
,
)
;
BREAK
;
}
}
IF
(
)
{
(
,
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
,
;
;
,
,
,
,
;
FLOAT
,
;
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
}
(
)
;
(
,
)
;
;
=
(
,
)
;
IF
(
)
GOTO
;
IF
(
)
{
(
,
)
;
}
(
,
)
;
=
(
)
(
)
(
)
(
)
;
=
(
)
(
)
(
)
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
=
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
,
,
;
FLOAT
;
FLOAT
;
,
;
;
IF
(
)
RETURN
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
=
;
IF
(
)
{
=
=
;
=
=
;
=
;
=
;
=
(
,
)
;
IF
(
)
{
;
}
}
=
;
IF
(
)
;
ELSE
IF
(
)
{
=
;
;
}
=
;
IF
(
)
=
;
;
=
;
=
;
=
;
}
VOID
(
,
FLOAT
,
FLOAT
)
{
INT
;
FLOAT
,
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
}
VOID
(
,
FLOAT
,
FLOAT
)
{
INT
;
FLOAT
,
,
,
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
;
;
,
;
;
FOR
(
=
;
;
)
=
;
IF
(
)
;
ELSE
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
;
(
,
,
)
;
(
,
,
,
)
;
(
,
)
;
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
,
;
;
FLOAT
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
=
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
IF
(
)
{
=
;
(
,
,
)
;
;
(
)
;
}
ELSE
{
(
,
,
)
;
;
(
)
;
}
}
VOID
(
VOID
)
{
;
INT
;
;
=
;
=
;
=
;
IF
(
)
{
=
;
}
ELSE
{
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
IF
(
)
(
,
)
;
}
IF
(
)
{
=
;
;
}
}
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
(
)
;
IF
(
)
=
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
{
;
RETURN
;
}
IF
(
)
{
;
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
;
;
}
VOID
(
VOID
)
{
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
(
)
;
(
,
,
,
)
;
;
=
(
)
;
IF
(
)
RETURN
;
;
=
(
)
;
IF
(
)
RETURN
;
(
,
,
)
;
=
;
=
;
;
}
VOID
(
VOID
)
{
;
INT
,
,
;
INT
;
STATIC
INT
=
{
,
,
}
;
(
,
)
;
FOR
(
=
;
;
)
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
RETURN
;
}
}
}
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
,
,
,
,
,
;
FLOAT
,
,
;
INT
;
;
FLOAT
,
;
;
FLOAT
;
EXTERN
FLOAT
;
=
(
)
;
IF
(
)
{
(
,
)
}
ELSE
{
=
;
=
;
=
;
;
=
;
IF
(
)
=
;
;
(
,
,
)
;
}
=
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
=
;
=
;
(
,
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
=
;
IF
(
)
(
)
;
ELSE
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
}
__E__O__F__
STATIC
;
STATIC
;
STATIC
;
EXTERN
;
EXTERN
;
VOID
(
VOID
)
{
INT
;
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
}
}
(
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
INT
(
,
INT
,
)
{
FLOAT
;
;
;
WHILE
(
)
{
IF
(
)
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
INT
(
)
{
FLOAT
;
;
;
;
INT
;
=
;
=
;
WHILE
(
)
{
IF
(
)
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
(
)
(
,
INT
,
FLOAT
,
FLOAT
,
,
,
)
{
;
;
FLOAT
,
;
FLOAT
;
INT
;
;
INT
;
FLOAT
;
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
RETURN
;
}
IF
(
)
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
,
)
;
=
(
,
)
;
}
IF
(
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
=
(
)
(
)
;
ELSE
=
(
)
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
IF
(
(
,
,
,
,
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
{
(
,
,
)
;
=
;
}
WHILE
(
(
,
,
)
)
{
;
IF
(
)
{
=
;
(
,
)
;
(
)
;
RETURN
;
}
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
=
;
(
,
)
;
RETURN
;
}
(
)
{
INT
;
;
,
,
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
{
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
}
(
,
,
)
;
IF
(
(
,
,
)
)
RETURN
;
}
RETURN
;
}
(
,
)
{
,
;
;
,
;
;
INT
;
;
,
;
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
{
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
}
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
(
,
,
,
,
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
(
,
,
)
;
=
;
=
;
}
}
RETURN
;
}
__E__O__F__
STATIC
;
STATIC
;
VOID
(
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
{
FLOAT
;
,
,
;
=
;
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
(
,
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
VOID
(
,
,
)
{
FLOAT
;
INT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
INT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
INT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
INT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
INT
(
,
,
INT
,
INT
,
VOID
(
)
(
,
,
)
)
{
INT
,
,
;
INT
,
;
=
;
=
;
FOR
(
=
;
;
=
,
)
{
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
;
}
IF
(
)
{
=
;
;
}
}
RETURN
;
}
VOID
(
)
{
INT
,
,
;
;
UNSIGNED
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
;
}
}
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
(
)
;
}
}
__E__O__F__
;
;
VOID
;
;
;
;
INT
;
FLOAT
;
;
;
;
STATIC
FLOAT
;
STATIC
;
STATIC
,
,
;
STATIC
;
INT
;
INT
;
INT
;
FLOAT
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
STATIC
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
FLOAT
=
{
}
;
VOID
(
,
)
;
VOID
(
INT
)
;
VOID
(
,
)
;
VOID
(
,
,
,
)
;
VOID
(
,
)
;
(
VOID
)
{
INT
,
,
,
;
;
FLOAT
,
,
,
,
;
,
,
;
,
,
;
;
,
;
UNSIGNED
,
;
INT
;
=
;
=
;
=
(
)
;
=
(
)
(
(
)
)
;
(
)
;
=
;
IF
(
(
)
(
)
)
{
(
,
,
)
;
=
;
}
=
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
=
;
=
;
=
;
}
}
IF
(
)
{
RETURN
;
}
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
;
}
}
}
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
;
;
}
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
(
(
)
)
)
{
;
}
}
RETURN
;
}
VOID
(
,
)
{
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
;
;
;
=
(
)
(
(
)
)
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
,
,
)
{
(
,
,
,
)
;
IF
(
)
;
ELSE
{
(
,
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
}
=
;
=
(
)
(
(
)
)
;
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
IF
(
(
)
)
CONTINUE
;
IF
(
(
(
)
(
)
)
)
{
=
;
=
;
(
)
;
}
ELSE
{
(
)
;
}
}
}
VOID
(
INT
)
{
INT
;
FLOAT
,
;
STATIC
FLOAT
;
STATIC
FLOAT
;
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
=
;
=
;
=
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
(
(
FLOAT
)
)
)
;
(
(
(
FLOAT
)
)
)
;
(
(
FLOAT
)
)
;
}
}
}
VOID
(
,
,
,
)
{
INT
;
FLOAT
,
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
IF
(
)
{
(
INT
)
(
)
;
IF
(
)
=
;
}
=
;
}
VOID
(
,
)
{
INT
,
;
FLOAT
,
,
;
;
=
;
FOR
(
=
;
;
,
,
,
)
{
=
(
(
,
)
)
;
=
;
=
(
(
(
,
)
)
)
;
=
(
(
(
,
)
)
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
IF
(
)
{
(
INT
)
(
)
;
IF
(
)
=
;
}
=
;
}
}
VOID
(
,
)
{
FLOAT
;
=
;
=
;
=
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
;
;
=
(
)
(
(
)
)
;
=
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
(
)
(
(
)
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
,
;
;
FLOAT
,
;
FLOAT
,
;
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
=
(
(
)
(
(
)
)
)
;
=
;
IF
(
)
{
=
(
)
(
(
)
)
;
=
(
FLOAT
)
(
(
)
)
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
}
=
;
}
=
;
=
(
VOID
)
(
(
)
)
;
=
;
=
(
)
;
=
;
IF
(
)
{
;
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
}
}
VOID
(
)
{
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
=
;
IF
(
)
=
;
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
,
;
;
FLOAT
,
,
,
;
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
IF
(
)
{
=
(
)
(
(
)
)
;
RETURN
;
}
=
(
)
(
(
)
)
;
=
(
FLOAT
)
(
(
)
)
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
}
=
(
)
(
(
)
)
;
}
VOID
(
)
{
(
(
)
(
)
)
;
;
;
=
(
)
(
(
(
LONG
)
)
(
)
)
;
=
;
=
(
)
(
)
;
=
(
)
(
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
=
;
IF
(
)
=
(
FLOAT
)
(
FLOAT
)
;
ELSE
=
(
FLOAT
)
(
FLOAT
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
__E__O__F__
;
;
,
;
;
FLOAT
;
;
INT
;
TYPEDEF
ENUM
{
,
,
}
;
STATIC
;
STATIC
;
STATIC
INT
,
;
STATIC
,
;
STATIC
;
VOID
(
)
{
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
,
,
,
,
,
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
,
,
)
{
,
,
;
INT
,
,
;
FLOAT
,
,
;
,
;
,
,
;
;
=
=
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
FOR
(
;
;
=
)
{
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
RETURN
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
=
;
=
;
}
}
IF
(
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
}
}
ELSE
{
(
,
,
)
;
}
}
}
}
}
VOID
(
)
{
INT
,
,
;
;
;
INT
;
;
;
,
;
,
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
;
=
;
=
=
;
IF
(
)
{
=
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
}
=
;
}
=
;
(
,
,
)
;
}
ELSE
{
(
)
;
}
}
}
}
VOID
(
,
INT
)
{
INT
;
;
;
INT
;
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
(
(
)
)
;
(
,
)
;
}
}
}
VOID
(
,
INT
)
{
INT
,
,
,
;
,
;
;
,
;
;
DOUBLE
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
,
)
;
;
IF
(
)
RETURN
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
,
)
;
;
IF
(
)
(
)
;
}
}
IF
(
)
{
=
(
)
;
=
;
=
;
IF
(
)
{
DO
{
(
)
=
;
;
}
WHILE
(
)
;
}
IF
(
)
{
(
)
;
}
=
;
;
}
ELSE
{
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
,
)
;
BREAK
;
}
IF
(
)
=
;
ELSE
=
;
(
,
)
;
=
;
IF
(
)
{
=
;
IF
(
)
{
DO
{
IF
(
(
)
(
)
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
;
}
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
}
}
;
}
WHILE
(
)
;
}
ELSE
IF
(
)
{
DO
{
IF
(
(
)
(
)
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
;
}
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
}
}
;
}
WHILE
(
)
;
}
;
}
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
=
;
=
;
(
,
)
;
=
;
=
;
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
)
;
}
}
}
__E__O__F__
UNSIGNED
INT
;
INT
;
;
;
;
;
;
;
,
;
STATIC
,
;
;
INT
;
INT
;
,
;
,
;
TYPEDEF
STRUCT
{
FLOAT
,
;
INT
;
}
;
INT
;
FLOAT
;
FLOAT
,
,
;
INT
;
;
VOID
(
,
)
{
,
;
INT
;
FLOAT
,
;
,
;
FLOAT
;
INT
,
,
;
FLOAT
,
,
,
;
INT
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
INT
)
(
)
;
}
=
;
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
=
(
INT
)
(
)
;
IF
(
)
{
IF
(
)
{
=
(
)
;
}
RETURN
;
}
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
FLOAT
)
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
FLOAT
)
)
;
}
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
WHILE
(
)
=
;
=
;
=
;
}
=
;
=
;
}
VOID
(
,
,
)
{
FLOAT
,
,
;
;
IF
(
)
{
DO
{
=
(
,
)
;
=
(
,
)
;
IF
(
)
{
IF
(
)
{
CONTINUE
;
}
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
(
,
,
)
;
RETURN
;
}
ELSE
{
IF
(
)
{
IF
(
)
=
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
(
,
,
)
;
RETURN
;
}
}
WHILE
(
(
=
)
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
;
=
(
)
(
(
UNSIGNED
LONG
)
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
;
}
VOID
(
,
INT
)
{
INT
,
;
UNSIGNED
;
;
FLOAT
;
;
,
;
;
IF
(
(
)
)
{
;
RETURN
;
}
IF
(
(
)
)
{
;
RETURN
;
}
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
{
=
;
CONTINUE
;
}
}
ELSE
{
IF
(
(
(
(
UNSIGNED
LONG
)
(
UNSIGNED
LONG
)
)
)
(
(
(
)
(
(
UNSIGNED
LONG
)
)
)
)
)
{
(
)
;
=
;
CONTINUE
;
}
}
}
=
(
)
(
)
;
=
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
ELSE
{
=
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
{
=
;
CONTINUE
;
}
}
ELSE
{
IF
(
(
(
(
UNSIGNED
LONG
)
(
UNSIGNED
LONG
)
)
)
(
(
(
)
(
(
UNSIGNED
LONG
)
)
)
)
)
{
(
)
;
=
;
CONTINUE
;
}
}
}
=
(
)
(
)
;
=
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
}
IF
(
)
RETURN
;
;
=
(
VOID
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
(
,
)
)
;
=
;
=
;
=
;
;
}
VOID
(
,
)
{
INT
;
UNSIGNED
;
;
FLOAT
;
;
;
;
IF
(
)
{
;
RETURN
;
}
IF
(
(
)
)
{
;
RETURN
;
}
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
=
;
=
;
FOR
(
;
;
=
)
{
=
=
;
(
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
}
IF
(
)
{
=
;
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
(
,
,
)
;
}
IF
(
)
RETURN
;
;
=
(
VOID
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
(
,
)
)
;
=
;
=
;
=
;
;
}
VOID
(
,
INT
)
{
INT
,
,
,
,
;
FLOAT
,
,
,
,
,
,
;
UNSIGNED
;
,
;
;
;
;
;
;
INT
,
,
,
;
;
=
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
WHILE
(
)
{
=
;
=
(
,
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
(
)
(
)
)
{
=
(
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
;
}
IF
(
)
{
=
;
;
=
;
}
=
;
=
;
}
IF
(
(
)
)
RETURN
;
=
;
;
=
;
}
=
;
SWITCH
(
)
{
CASE
CASE
=
;
=
;
BREAK
;
CASE
CASE
=
;
=
;
BREAK
;
CASE
CASE
=
;
=
;
BREAK
;
}
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
INT
,
;
;
FLOAT
;
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
(
,
)
;
}
}
}
__E__O__F__
,
FOR
,
(
)
;
,
,
;
,
,
;
;
;
,
;
INT
;
EXTERN
INT
;
INT
;
INT
,
;
STATIC
VOID
(
)
(
VOID
)
;
;
;
;
;
FLOAT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
)
;
VOID
(
VOID
)
{
;
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
FOR
(
=
;
;
)
{
=
=
;
}
}
VOID
(
,
)
{
;
DO
{
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
GOTO
;
=
;
=
;
=
;
=
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
DO
{
=
;
=
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
,
;
WHILE
(
)
{
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
GOTO
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
;
INT
;
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
DO
{
=
;
=
;
}
WHILE
(
)
;
}
VOID
(
)
{
;
,
;
INT
;
=
;
IF
(
)
{
=
;
IF
(
)
GOTO
;
IF
(
(
)
)
{
GOTO
;
}
DO
{
=
;
}
WHILE
(
)
;
IF
(
)
{
IF
(
)
GOTO
;
}
GOTO
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
,
)
{
;
INT
;
IF
(
)
{
IF
(
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
}
=
;
=
;
}
}
VOID
(
)
{
;
,
;
INT
;
DOUBLE
,
,
,
,
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
;
=
;
IF
(
)
GOTO
;
IF
(
(
)
)
{
=
(
FLOAT
)
(
)
(
)
;
=
;
=
;
=
;
IF
(
)
{
GOTO
;
}
=
;
IF
(
)
{
IF
(
)
{
GOTO
;
}
}
}
DO
{
=
;
}
WHILE
(
)
;
IF
(
)
{
IF
(
)
GOTO
;
=
(
FLOAT
)
(
)
(
)
;
=
;
=
;
=
;
IF
(
)
{
GOTO
;
}
=
;
IF
(
)
{
IF
(
)
{
GOTO
;
}
}
GOTO
;
}
GOTO
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
;
;
=
;
=
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
=
;
(
,
)
;
IF
(
)
CONTINUE
;
}
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
=
;
=
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
)
;
IF
(
)
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
(
)
;
;
;
=
(
)
(
(
LONG
)
(
)
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
FLOAT
)
;
=
;
IF
(
)
{
(
,
)
;
}
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
FOR
(
=
;
;
)
=
;
=
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
=
;
=
(
FLOAT
)
;
=
;
IF
(
)
(
,
)
;
(
)
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
__E__O__F__
;
;
,
;
;
VOID
(
)
{
,
,
,
;
=
;
WHILE
(
)
{
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
BREAK
;
}
ELSE
=
;
}
=
;
=
;
=
;
=
;
}
=
;
}
VOID
(
)
{
;
;
;
INT
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
IF
(
)
=
;
=
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
=
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
=
;
}
VOID
(
)
{
;
;
;
WHILE
(
(
=
)
)
{
=
;
=
;
SWITCH
(
)
{
CASE
CASE
CASE
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
}
=
;
BREAK
;
DEFAULT
(
,
)
;
}
}
}
__E__O__F__
INT
;
VOID
(
VOID
)
{
INT
,
,
;
=
(
INT
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
=
;
=
;
=
;
}
}
VOID
(
,
INT
,
)
{
;
FLOAT
;
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
}
}
INT
(
,
,
)
{
INT
;
FLOAT
,
,
;
INT
;
;
;
;
INT
,
,
,
;
INT
;
;
;
UNSIGNED
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
(
)
)
RETURN
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
=
(
,
)
;
=
(
,
)
;
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
;
;
=
;
=
;
IF
(
)
{
(
(
)
)
;
FOR
(
=
;
;
)
{
=
;
;
(
(
)
)
(
(
)
)
;
}
;
}
RETURN
;
}
RETURN
(
,
,
)
;
}
INT
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
RETURN
;
}
__E__O__F__
VOID
;
;
=
{
,
,
}
;
FLOAT
;
INT
;
;
;
;
=
;
INT
=
;
FLOAT
=
;
INT
;
INT
;
,
,
;
INT
;
;
;
INT
;
INT
,
,
;
;
INT
;
;
;
;
;
,
;
,
;
,
;
;
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
,
,
;
INT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
,
;
;
INT
=
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
=
;
,
;
;
FLOAT
,
;
INT
;
FLOAT
,
,
,
,
,
;
FLOAT
,
,
,
,
,
;
VOID
(
VOID
)
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
EXTERN
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
,
,
;
;
=
(
(
)
,
)
;
=
=
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
(
)
;
)
FOR
(
=
;
(
)
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
=
;
ELSE
=
;
}
}
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
(
FLOAT
)
)
;
(
,
(
FLOAT
)
)
;
=
;
=
;
=
=
=
;
=
=
=
;
=
;
=
;
(
)
;
(
(
LONG
)
,
(
LONG
)
(
LONG
)
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
=
;
IF
(
)
=
;
IF
(
)
{
=
(
(
)
,
)
;
=
;
=
;
=
;
;
(
)
;
}
ELSE
{
=
;
}
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
}
ELSE
{
=
(
(
)
,
)
;
}
=
;
=
;
}
VOID
(
,
,
INT
)
{
INT
;
FLOAT
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
IF
(
)
{
=
;
=
;
=
;
}
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
}
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
IF
(
)
=
;
;
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
;
}
VOID
(
,
INT
,
FLOAT
)
{
INT
;
FLOAT
;
=
;
(
,
,
)
;
=
(
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
)
(
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
)
(
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
FLOAT
)
)
;
=
;
=
(
(
FLOAT
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
(
)
;
=
(
(
DOUBLE
)
(
)
(
)
)
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
(
LONG
)
,
(
LONG
)
(
LONG
)
)
;
=
;
(
)
;
}
ELSE
{
(
(
LONG
)
,
(
LONG
)
(
LONG
)
)
;
=
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
;
INT
;
IF
(
)
RETURN
;
;
=
;
=
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
=
(
)
;
DO
{
IF
(
)
BREAK
;
=
;
=
;
}
WHILE
(
)
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
;
FLOAT
=
{
,
,
}
;
;
FLOAT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
(
,
)
;
(
,
,
)
;
(
)
;
BREAK
;
CASE
(
,
)
;
(
,
,
)
;
IF
(
(
)
)
{
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
)
;
=
(
)
;
IF
(
)
;
}
}
IF
(
)
=
;
IF
(
)
=
;
(
)
;
}
BREAK
;
DEFAULT
BREAK
;
}
}
}
VOID
(
VOID
)
{
FLOAT
=
{
,
,
}
;
INT
;
INT
;
;
FLOAT
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
=
(
)
;
IF
(
)
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
=
(
)
;
IF
(
)
;
}
IF
(
)
=
;
IF
(
)
=
;
=
;
(
)
;
}
INT
(
,
FLOAT
)
{
INT
,
,
;
,
;
DOUBLE
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
(
,
)
;
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
(
,
)
;
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
)
;
;
IF
(
)
(
)
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
,
,
;
;
;
FLOAT
;
IF
(
)
RETURN
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
(
,
)
;
=
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
{
CONTINUE
;
}
(
,
,
)
;
}
}
IF
(
)
{
(
)
;
}
ELSE
{
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
(
)
;
}
ELSE
{
(
,
)
;
}
=
;
}
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
BREAK
;
DEFAULT
BREAK
;
}
}
=
;
}
VOID
(
VOID
)
{
(
(
)
(
)
)
;
(
(
)
(
)
)
;
IF
(
)
{
=
;
}
ELSE
{
=
(
)
(
(
(
LONG
)
)
(
)
)
;
}
IF
(
)
{
=
(
)
(
(
(
LONG
)
)
(
)
)
;
=
;
;
(
)
;
}
(
)
;
IF
(
)
{
=
(
)
;
}
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
;
=
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
(
)
;
IF
(
)
=
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
(
)
;
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
LONG
)
(
)
)
(
)
;
IF
(
(
LONG
)
(
)
)
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
__E__O__F__
VOID
(
VOID
)
{
STATIC
FLOAT
;
IF
(
)
{
=
;
(
)
;
}
}
VOID
(
VOID
)
{
;
=
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
,
,
;
INT
;
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
=
(
)
;
=
;
(
,
,
)
;
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
;
INT
;
INT
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
FOR
(
=
;
;
,
)
{
=
;
}
FOR
(
;
;
,
)
{
=
;
(
)
=
;
}
}
EXTERN
FLOAT
,
;
INT
;
VOID
(
VOID
)
{
STATIC
INT
;
INT
;
FLOAT
;
STATIC
;
INT
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
(
)
;
DO
{
(
,
,
)
;
IF
(
)
BREAK
;
;
;
IF
(
)
=
;
}
WHILE
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
;
INT
;
CHAR
;
IF
(
)
=
;
ELSE
=
;
=
(
(
)
)
;
=
(
INT
)
;
(
,
,
(
)
,
(
(
INT
)
)
)
;
=
;
=
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
)
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
;
STATIC
INT
;
IF
(
)
=
;
ELSE
=
;
=
(
(
INT
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
=
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
=
;
}
VOID
(
VOID
)
{
FLOAT
,
,
,
,
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
(
INT
)
,
,
(
INT
)
,
,
(
INT
)
,
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
)
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
,
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
,
)
;
}
}
VOID
(
,
)
{
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
,
FLOAT
,
FLOAT
)
{
FLOAT
;
=
(
,
)
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
=
;
;
}
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
,
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
(
)
)
=
;
(
,
,
,
)
;
}
IF
(
)
{
=
;
IF
(
)
=
;
(
,
,
,
)
;
}
=
;
IF
(
)
=
;
=
;
(
)
;
(
)
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
=
;
=
(
,
)
;
=
;
=
(
)
;
IF
(
(
)
)
{
IF
(
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
=
;
(
,
,
)
;
}
ELSE
{
=
;
=
;
IF
(
)
{
(
FLOAT
)
;
=
;
}
IF
(
)
{
=
;
(
FLOAT
)
;
}
=
;
=
;
=
(
INT
)
;
=
(
INT
)
;
(
,
(
INT
)
(
(
FLOAT
)
(
(
FLOAT
)
)
)
,
(
)
(
(
FLOAT
)
(
FLOAT
)
)
)
;
}
}
ELSE
{
=
;
=
;
=
;
=
;
(
,
,
)
;
}
=
;
}
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
__E__O__F__
INT
=
{
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
}
;
,
;
;
INT
;
,
,
;
VOID
(
VOID
)
{
INT
;
=
(
)
;
IF
(
)
{
=
(
INT
)
(
(
)
)
;
IF
(
)
=
;
}
ELSE
{
=
;
}
=
(
)
(
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
FOR
(
=
;
;
)
=
;
=
;
}
VOID
(
VOID
)
{
;
;
INT
;
INT
;
;
CHAR
;
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
=
;
FOR
(
;
;
)
{
=
(
,
,
,
,
)
;
IF
(
)
BREAK
;
;
IF
(
)
{
(
)
;
BREAK
;
}
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
(
,
)
;
(
,
)
;
}
(
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
ELSE
{
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
}
}
VOID
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
IF
(
)
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
ELSE
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
}
}
VOID
(
,
,
INT
,
INT
)
{
INT
,
;
;
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
)
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
;
}
}
}
VOID
(
)
{
INT
,
,
;
;
FLOAT
;
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
;
=
(
(
)
)
;
(
)
;
=
(
(
)
)
;
(
,
,
)
;
}
}
VOID
(
)
{
INT
,
,
;
;
FLOAT
;
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
=
(
(
)
)
;
(
,
,
)
;
}
}
VOID
(
,
,
INT
)
{
;
FLOAT
;
INT
;
;
(
,
,
)
;
=
(
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
IF
(
)
{
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
;
}
ELSE
IF
(
)
{
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
=
(
INT
)
;
=
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
=
(
INT
)
;
=
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
}
ELSE
IF
(
)
{
STATIC
INT
;
=
;
=
;
IF
(
)
=
(
(
)
)
;
ELSE
=
(
(
)
)
;
;
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
(
,
,
)
;
}
}
VOID
(
VOID
)
{
,
;
FLOAT
;
INT
;
FLOAT
,
;
FLOAT
;
FLOAT
;
FLOAT
;
UNSIGNED
CHAR
;
UNSIGNED
CHAR
;
,
;
FLOAT
;
;
(
)
;
=
(
)
;
IF
(
)
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
CONTINUE
;
}
BREAK
;
}
FOR
(
=
;
;
=
)
{
FOR
(
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
CONTINUE
;
}
BREAK
;
}
=
(
)
(
)
(
)
;
IF
(
)
=
;
ELSE
=
;
=
(
)
(
INT
)
;
IF
(
)
=
(
)
;
ELSE
=
;
(
,
(
)
,
(
)
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
(
)
;
;
;
;
SWITCH
(
)
{
CASE
BREAK
;
CASE
;
IF
(
)
=
;
ELSE
=
(
INT
)
;
;
BREAK
;
CASE
;
IF
(
)
=
;
ELSE
=
(
INT
)
;
FOR
(
=
;
;
)
;
;
BREAK
;
CASE
;
IF
(
)
=
;
ELSE
=
(
INT
)
;
FOR
(
=
;
;
)
;
;
BREAK
;
CASE
FOR
(
=
;
;
)
;
;
BREAK
;
CASE
FOR
(
=
;
;
)
;
;
BREAK
;
CASE
CASE
;
BREAK
;
}
}
(
)
;
(
)
;
IF
(
)
(
)
;
(
,
,
)
;
(
)
;
}
__E__O__F__
INT
=
;
INT
=
;
FLOAT
,
;
FLOAT
;
;
INT
;
INT
;
;
;
;
VOID
(
)
{
INT
,
;
;
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
)
=
;
}
}
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
(
)
=
(
)
;
(
)
=
;
}
ELSE
{
(
)
=
;
(
)
=
;
}
}
}
=
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
INT
,
;
UNSIGNED
;
STATIC
INT
=
,
=
;
=
;
=
;
IF
(
(
)
(
)
)
RETURN
;
=
;
=
;
=
(
UNSIGNED
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
(
(
(
UNSIGNED
)
)
)
(
UNSIGNED
)
)
(
UNSIGNED
)
;
;
}
FOR
(
=
;
;
)
{
=
(
(
)
)
;
(
)
=
(
(
(
)
)
(
)
)
(
)
;
=
(
UNSIGNED
)
(
(
)
)
;
}
(
UNSIGNED
)
;
}
=
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
INT
,
;
UNSIGNED
;
UNSIGNED
;
=
;
=
;
=
(
UNSIGNED
)
;
=
(
UNSIGNED
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
(
(
(
UNSIGNED
)
)
)
(
UNSIGNED
)
)
(
UNSIGNED
)
;
;
;
}
FOR
(
=
;
;
)
{
=
(
(
)
)
;
(
)
=
(
(
(
)
)
(
)
)
(
)
;
=
(
UNSIGNED
)
(
(
)
)
;
=
(
UNSIGNED
)
(
(
)
)
;
}
(
UNSIGNED
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
INT
,
;
;
UNSIGNED
SHORT
;
=
;
=
;
=
(
)
;
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
(
)
(
)
)
(
)
;
;
;
}
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
FLOAT
;
=
;
=
;
=
(
,
)
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
=
;
}
__E__O__F__
STATIC
INT
;
STATIC
;
STATIC
INT
,
;
;
VOID
(
FLOAT
)
{
;
IF
(
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
INT
(
INT
,
)
{
INT
,
;
FLOAT
;
FLOAT
,
,
;
FLOAT
,
,
,
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
=
;
FOR
(
=
;
;
,
(
)
(
FLOAT
)
)
{
=
(
,
)
;
}
=
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
(
)
(
FLOAT
)
)
{
IF
(
)
{
(
,
,
(
)
)
;
(
)
(
FLOAT
)
;
;
}
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
)
CONTINUE
;
=
(
)
;
=
(
)
(
FLOAT
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
(
FLOAT
)
;
;
}
RETURN
;
}
VOID
(
)
{
INT
,
;
FLOAT
,
,
;
;
,
,
,
,
,
;
,
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
}
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
(
)
(
)
;
}
=
;
=
;
(
)
;
}
(
)
{
;
;
INT
,
,
;
FLOAT
,
,
,
;
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
IF
(
)
{
=
;
}
ELSE
{
=
(
)
;
=
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
}
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
;
FLOAT
,
,
,
;
=
;
=
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
(
)
;
=
;
IF
(
(
)
(
)
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
}
ELSE
IF
(
)
{
=
;
IF
(
(
)
(
)
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
}
ELSE
{
(
,
)
;
}
(
)
;
(
)
;
}
__E__O__F__
;
INT
,
,
,
;
INT
,
;
INT
,
,
,
;
UNSIGNED
;
VOID
;
UNSIGNED
CHAR
;
INT
;
UNSIGNED
;
INT
;
INT
;
INT
,
;
UNSIGNED
CHAR
,
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
=
{
,
,
,
}
;
UNSIGNED
;
VOID
(
VOID
)
{
;
INT
;
INT
,
;
FLOAT
,
,
;
,
;
INT
,
;
INT
;
INT
,
;
;
=
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
(
,
)
;
(
)
;
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
;
}
=
(
,
)
;
=
(
,
)
;
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
IF
(
)
(
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
INT
,
;
;
UNSIGNED
;
INT
;
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
IF
(
)
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
;
;
}
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
(
INT
)
)
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
}
}
(
)
{
INT
;
INT
;
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
RETURN
;
=
(
INT
)
(
)
;
=
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
UNSIGNED
CHAR
;
INT
,
,
;
INT
;
INT
,
,
;
INT
;
UNSIGNED
CHAR
;
VOID
(
)
(
VOID
)
;
;
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
(
(
)
(
)
)
)
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
(
)
(
)
;
=
;
IF
(
)
=
;
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
UNSIGNED
CHAR
;
INT
,
,
;
UNSIGNED
SHORT
;
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
{
UNSIGNED
SHORT
;
UNSIGNED
CHAR
;
INT
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
;
;
;
}
;
;
;
=
(
UNSIGNED
SHORT
)
(
(
LONG
)
)
;
}
=
;
}
VOID
(
,
VOID
)
{
INT
;
INT
,
,
,
;
;
=
(
(
INT
)
(
)
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
)
;
}
}
}
VOID
(
,
VOID
)
{
INT
;
INT
,
,
,
;
UNSIGNED
SHORT
;
=
(
(
INT
)
(
)
(
)
)
;
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
)
;
}
}
}
VOID
(
,
VOID
)
{
IF
(
)
{
IF
(
)
{
(
(
)
(
(
)
)
,
)
;
}
ELSE
{
(
(
)
(
(
)
)
,
)
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
ELSE
{
(
)
;
}
}
__E__O__F__
INT
;
__E__O__F__
INT
;
;
,
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
INT
;
VOID
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
STATIC
=
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
(
(
,
)
)
;
=
(
(
,
)
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
INT
,
INT
,
)
{
(
,
(
)
,
)
;
}
VOID
(
INT
,
INT
,
,
INT
,
INT
,
INT
,
INT
)
{
(
,
(
)
,
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
)
{
(
,
(
)
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
(
,
,
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
(
,
,
)
;
}
INT
(
INT
,
CHAR
)
{
CHAR
;
INT
;
INT
;
=
;
IF
(
)
{
=
;
=
;
}
FOR
(
=
;
;
)
;
DO
{
;
=
;
=
;
;
}
WHILE
(
)
;
=
;
RETURN
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
CHAR
;
CHAR
;
INT
,
;
=
(
,
)
;
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
;
;
}
}
INT
;
INT
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
INT
,
,
;
}
;
;
INT
;
INT
;
VOID
(
)
{
INT
,
,
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
=
;
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
;
INT
;
CHAR
;
=
;
=
(
(
,
)
)
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
(
,
(
,
)
,
)
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
;
;
GOTO
;
}
IF
(
)
{
=
;
(
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
;
}
}
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
=
;
}
}
INT
(
INT
)
{
=
(
)
(
(
)
)
;
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
INT
,
,
,
;
(
,
,
)
;
=
;
=
;
=
;
=
;
(
,
,
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
FLOAT
;
INT
;
;
;
=
(
)
;
=
;
IF
(
)
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
=
;
=
(
INT
)
(
(
)
)
;
IF
(
)
=
;
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
ELSE
=
(
)
;
IF
(
)
{
IF
(
)
(
(
)
(
)
,
(
)
,
,
,
,
,
)
;
}
ELSE
(
,
,
)
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
(
,
,
)
;
IF
(
)
{
(
(
)
(
)
,
(
)
,
,
(
)
,
,
,
)
;
IF
(
)
(
(
)
(
)
,
(
)
,
)
;
IF
(
)
(
(
)
(
)
,
(
)
,
)
;
IF
(
)
(
(
)
(
)
,
(
)
,
)
;
}
ELSE
{
IF
(
)
(
(
)
,
,
)
;
IF
(
)
(
(
)
,
,
)
;
IF
(
)
(
(
)
,
,
)
;
}
}
=
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
{
=
;
IF
(
)
{
=
;
}
ELSE
(
,
,
)
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
{
=
;
IF
(
)
{
=
;
}
ELSE
(
,
,
)
;
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
INT
,
;
INT
,
,
;
CHAR
;
;
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
=
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
=
;
(
,
,
)
;
(
(
)
,
,
)
;
(
(
)
,
,
)
;
(
(
)
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
(
)
,
,
)
;
}
;
}
}
VOID
(
VOID
)
{
INT
,
;
IF
(
(
(
)
)
(
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
,
)
;
IF
(
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
}
(
)
;
(
,
,
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
;
CHAR
;
=
(
)
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
=
;
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
IF
(
)
(
)
;
ELSE
(
)
;
(
,
,
)
;
(
,
,
)
;
}
}
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
}
IF
(
)
IF
(
(
(
,
)
)
)
(
)
;
ELSE
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
IF
(
)
=
;
{
INT
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
}
IF
(
)
(
,
,
,
)
;
IF
(
)
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
CHAR
;
CHAR
;
INT
,
;
=
(
,
)
;
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
;
;
}
}
VOID
(
VOID
)
{
;
INT
,
,
;
INT
,
;
CHAR
;
INT
;
CHAR
;
;
INT
,
,
;
=
(
(
,
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
(
,
,
)
;
=
;
=
;
(
,
,
)
;
;
(
,
,
)
;
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
(
,
,
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
(
,
)
,
,
)
)
{
(
,
,
)
;
(
,
,
)
;
}
;
}
;
(
)
;
}
VOID
(
INT
)
{
;
INT
,
,
;
INT
,
;
INT
,
,
;
CHAR
;
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
INT
=
;
IF
(
)
=
;
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
}
=
(
(
,
)
)
;
=
;
=
;
IF
(
)
{
=
(
)
;
(
,
,
)
;
}
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
(
,
,
)
;
;
(
,
,
)
;
;
}
ELSE
{
=
;
(
,
,
)
;
;
(
,
,
)
;
;
}
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
=
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
CONTINUE
;
}
IF
(
)
=
;
ELSE
=
;
=
(
INT
)
;
(
,
,
)
;
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
)
;
ELSE
(
,
,
,
,
)
;
(
,
,
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
IF
(
)
{
=
;
(
,
(
,
)
,
)
;
(
,
,
)
;
}
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
}
IF
(
)
=
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
INT
,
,
;
CHAR
;
;
INT
;
CHAR
;
INT
;
CHAR
;
;
IF
(
)
RETURN
;
=
(
(
,
)
)
;
=
;
=
;
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
FOR
(
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
IF
(
)
{
=
;
(
,
(
,
)
,
)
;
(
,
,
)
;
}
=
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
}
IF
(
)
RETURN
;
;
FOR
(
=
;
;
)
(
,
,
)
;
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
(
,
)
,
,
)
)
{
(
,
,
)
;
(
,
,
)
;
}
;
}
}
VOID
(
VOID
)
{
=
;
=
;
IF
(
(
(
,
)
)
)
(
)
;
ELSE
(
)
;
}
VOID
(
VOID
)
{
;
=
;
=
(
)
;
(
(
)
,
,
)
;
}
__E__O__F__
INT
;
INT
;
FLOAT
;
FLOAT
;
FLOAT
,
;
FLOAT
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
;
;
;
;
INT
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
CHAR
;
FLOAT
;
FLOAT
;
INT
;
INT
;
INT
;
VOID
(
CHAR
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
;
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
;
(
,
,
,
(
,
)
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
INT
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
IF
(
)
RETURN
;
}
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
=
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
}
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
;
FLOAT
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
;
FLOAT
;
=
;
=
;
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
=
;
}
}
VOID
(
VOID
)
{
(
,
)
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
STATIC
INT
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
EXTERN
;
STATIC
DOUBLE
;
DOUBLE
;
EXTERN
INT
;
STATIC
;
INT
,
;
CHAR
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
(
)
)
{
=
;
=
;
=
;
}
(
,
,
)
;
=
(
)
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
IF
(
)
{
=
;
(
,
(
INT
)
,
,
(
INT
)
)
;
(
)
;
}
ELSE
IF
(
)
{
=
;
(
,
,
,
)
;
}
ELSE
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
(
)
;
=
;
}
ELSE
{
IF
(
)
(
)
;
}
}
VOID
(
CHAR
,
,
INT
,
INT
,
INT
,
,
)
{
INT
,
,
;
;
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
SHORT
)
(
)
)
;
=
(
(
SHORT
)
(
)
)
;
=
(
(
SHORT
)
)
;
=
(
(
SHORT
)
)
;
(
,
,
(
)
)
;
=
;
=
(
(
SHORT
)
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
ELSE
{
=
;
=
;
}
}
;
}
=
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
(
(
VOID
)
,
)
;
ELSE
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
CHAR
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
,
,
,
,
,
)
;
(
)
;
(
,
)
;
}
INT
(
INT
,
INT
,
INT
)
{
INT
;
FLOAT
;
INT
;
FLOAT
;
INT
,
,
;
STATIC
INT
=
,
=
,
=
;
STATIC
INT
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
;
RETURN
;
}
EXTERN
;
VOID
(
INT
,
,
INT
)
{
INT
,
;
;
INT
;
INT
;
=
;
=
;
=
(
)
(
)
;
=
;
WHILE
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
ELSE
=
;
;
;
}
}
VOID
(
CONST
CHAR
,
,
INT
,
INT
,
INT
)
{
;
CONST
UNSIGNED
CHAR
;
=
(
(
)
)
;
=
(
CONST
UNSIGNED
CHAR
)
;
WHILE
(
)
{
(
,
,
)
;
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
UNSIGNED
CHAR
,
;
CHAR
;
CHAR
;
UNSIGNED
CHAR
,
;
INT
;
INT
,
;
INT
,
,
,
,
;
INT
,
,
;
INT
;
FLOAT
,
;
CHAR
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
)
;
RETURN
;
}
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
=
(
)
;
=
(
FLOAT
)
(
FLOAT
)
;
=
(
FLOAT
)
(
FLOAT
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
=
=
;
=
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
IF
(
)
;
=
;
FOR
(
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
;
;
;
;
;
}
}
;
;
;
=
(
,
,
)
;
}
}
(
)
;
(
,
(
)
)
;
(
)
=
;
(
,
,
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
=
;
(
,
,
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
=
;
(
,
,
(
)
,
,
)
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
}
CHAR
;
;
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
=
;
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
,
)
(
,
,
)
;
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
INT
(
CHAR
)
{
=
;
=
;
=
;
(
)
;
=
;
(
)
;
DO
{
=
;
(
)
;
}
WHILE
(
)
;
=
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
FLOAT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
{
EXTERN
INT
;
IF
(
)
RETURN
;
}
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
(
)
;
}
(
)
;
IF
(
)
{
=
;
(
,
,
,
)
;
(
)
;
}
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
IF
(
)
{
(
)
;
}
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
=
;
(
)
;
}
__E__O__F__
=
{
,
}
;
=
{
,
}
;
CHAR
;
;
INT
;
VOID
(
)
{
;
INT
;
CHAR
,
;
IF
(
)
(
,
)
;
ELSE
{
=
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
IF
(
(
,
)
)
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
}
(
)
{
CHAR
;
;
,
;
;
INT
,
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
=
;
RETURN
;
}
}
=
(
)
;
=
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
)
(
)
;
=
;
(
,
,
)
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
(
)
;
=
;
(
,
)
;
RETURN
;
}
=
;
IF
(
(
)
)
{
=
;
IF
(
(
)
)
{
(
)
;
=
;
(
,
)
;
RETURN
;
}
=
;
}
ELSE
=
;
IF
(
)
{
(
)
;
=
;
(
,
)
;
RETURN
;
}
WHILE
(
)
=
;
}
}
IF
(
(
)
)
{
(
)
;
=
;
(
,
)
;
RETURN
;
}
=
;
RETURN
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
(
)
;
=
;
FOR
(
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
)
;
IF
(
)
CONTINUE
;
IF
(
(
(
,
)
)
)
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
(
,
(
,
)
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
}
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
(
)
;
}
__E__O__F__
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
VOID
)
;
;
INT
;
INT
=
;
STATIC
=
;
=
;
VOLATILE
=
;
VOLATILE
;
;
;
;
;
=
;
INT
;
INT
;
;
INT
;
;
INT
=
;
INT
=
;
INT
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
;
INT
=
;
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
}
=
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
=
;
(
)
;
(
)
;
=
(
(
)
,
)
;
=
;
IF
(
)
{
=
(
VOID
)
(
(
)
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
,
)
;
}
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
=
;
=
;
=
;
IF
(
)
{
(
)
;
}
}
(
CHAR
)
{
INT
;
;
IF
(
)
(
)
;
IF
(
(
)
)
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
RETURN
;
}
IF
(
)
(
)
;
=
;
(
,
)
;
;
RETURN
;
}
VOID
(
CHAR
)
{
;
IF
(
)
RETURN
;
=
(
)
;
(
)
;
}
(
CHAR
)
{
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
(
)
;
RETURN
;
}
(
INT
,
INT
)
{
INT
;
INT
;
INT
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
=
;
BREAK
;
}
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
;
IF
(
)
=
;
RETURN
;
}
VOID
(
)
{
;
;
,
,
;
;
;
IF
(
)
{
=
;
=
;
RETURN
;
}
=
;
(
,
,
)
;
=
(
)
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
=
(
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
}
VOID
(
INT
,
INT
,
,
,
FLOAT
,
FLOAT
)
{
,
;
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
(
,
)
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
(
)
(
INT
)
(
)
;
IF
(
)
=
;
;
;
BREAK
;
}
}
}
VOID
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
RETURN
;
}
}
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
(
,
,
(
)
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
;
INT
;
;
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
(
,
,
)
;
(
,
,
,
,
)
;
}
ELSE
{
(
,
,
)
;
}
}
VOID
(
,
,
FLOAT
,
FLOAT
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
(
,
)
;
=
;
=
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
;
FLOAT
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
=
=
;
}
}
VOID
(
,
,
,
)
{
INT
,
;
INT
;
;
;
IF
(
(
)
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
;
;
=
=
;
CONTINUE
;
}
=
;
FOR
(
=
;
;
,
)
IF
(
)
BREAK
;
IF
(
)
{
=
;
}
ELSE
{
IF
(
)
{
;
;
=
=
;
}
CONTINUE
;
}
}
}
IF
(
)
{
=
;
=
;
FOR
(
=
;
;
,
)
IF
(
(
)
)
{
;
}
(
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
STATIC
INT
;
STATIC
INT
;
INT
;
=
;
=
(
)
;
IF
(
)
{
;
IF
(
)
{
=
;
=
;
(
)
;
}
}
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
RETURN
;
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
;
INT
;
IF
(
(
)
)
RETURN
;
(
)
;
IF
(
)
{
=
;
}
=
;
=
(
)
;
IF
(
)
=
;
{
;
IF
(
)
{
IF
(
(
,
)
)
(
)
;
IF
(
)
(
)
;
IF
(
(
)
)
(
,
,
,
)
;
}
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
INT
=
;
INT
;
CHAR
;
;
=
;
WHILE
(
(
)
)
{
IF
(
(
(
)
,
)
)
{
(
,
(
)
)
;
(
,
)
;
}
ELSE
(
,
(
)
)
;
=
(
)
;
(
,
,
,
,
,
)
;
;
}
}
VOID
(
VOID
)
{
STATIC
INT
=
;
INT
;
FLOAT
;
CHAR
;
;
=
;
WHILE
(
(
)
)
{
IF
(
(
(
)
,
)
)
{
(
,
(
)
)
;
(
,
)
;
}
ELSE
(
,
(
)
)
;
=
(
)
;
=
(
(
)
)
;
(
,
,
,
,
,
)
;
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
INT
,
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
)
;
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
,
,
)
;
}
(
,
)
;
}
VOID
(
CHAR
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
INT
;
INT
;
STATIC
INT
=
{
,
,
,
}
;
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
CHAR
;
STRUCT
;
INT
;
=
;
=
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
{
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
{
FOR
(
=
;
(
)
;
)
IF
(
(
,
,
)
)
BREAK
;
=
;
}
=
(
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
(
=
(
)
)
)
=
;
ELSE
IF
(
(
=
(
)
)
)
=
;
ELSE
=
;
=
(
)
;
=
;
=
(
UNSIGNED
CHAR
)
(
,
,
,
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
IF
(
)
{
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
ELSE
IF
(
)
{
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
ELSE
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
INT
(
VOID
)
{
STRUCT
;
IF
(
)
RETURN
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
=
;
RETURN
;
}
=
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
}
__E__O__F__
INT
;
(
INT
)
;
VOID
(
,
INT
,
INT
,
)
{
INT
;
INT
;
FLOAT
;
INT
;
INT
,
,
;
;
=
(
)
;
IF
(
)
RETURN
;
=
(
FLOAT
)
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
(
(
SIGNED
CHAR
)
)
=
(
INT
)
(
(
UNSIGNED
CHAR
)
(
)
)
;
}
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
(
(
(
SHORT
)
)
)
;
ELSE
=
(
INT
)
(
(
UNSIGNED
CHAR
)
(
)
)
;
IF
(
)
(
(
SHORT
)
)
=
;
ELSE
(
(
SIGNED
CHAR
)
)
=
;
}
}
}
(
)
{
CHAR
;
;
;
INT
;
FLOAT
;
;
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
=
(
,
,
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
FLOAT
)
;
=
;
=
;
=
(
,
(
)
,
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
RETURN
;
}
;
;
;
;
INT
;
SHORT
(
VOID
)
{
SHORT
=
;
=
;
=
(
(
)
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
;
RETURN
;
}
VOID
(
CHAR
)
{
WHILE
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
=
;
RETURN
;
}
;
=
(
(
)
)
;
IF
(
(
,
,
)
)
RETURN
;
}
}
VOID
(
CHAR
)
{
=
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
;
=
;
DO
{
(
,
,
)
;
;
=
(
)
;
(
,
(
INT
)
(
)
,
,
)
;
(
)
;
}
WHILE
(
)
;
}
(
CHAR
,
,
INT
)
{
;
INT
;
INT
;
INT
;
(
,
,
(
)
)
;
IF
(
)
RETURN
;
=
;
=
;
(
)
;
IF
(
(
(
,
,
)
)
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
;
=
(
)
;
(
)
;
IF
(
)
{
;
=
(
)
;
(
)
;
IF
(
)
{
IF
(
(
,
,
)
)
{
;
=
(
)
;
=
;
}
}
}
ELSE
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
}
ELSE
=
;
=
;
RETURN
;
}
__E__O__F__
UNSIGNED
LONG
;
INT
;
INT
,
,
;
SHORT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
ELSE
=
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
ELSE
=
;
}
}
VOID
(
INT
)
{
INT
;
INT
;
;
INT
;
,
;
;
;
=
;
=
(
INT
)
;
=
;
IF
(
)
{
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
}
ELSE
{
=
(
)
;
}
WHILE
(
)
{
=
(
(
)
)
;
=
(
SHORT
)
(
)
;
=
(
)
;
IF
(
)
=
;
;
(
)
;
;
(
)
;
}
IF
(
)
(
,
,
,
,
)
;
}
VOID
(
INT
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
INT
;
,
;
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
INT
)
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
}
ELSE
{
=
(
)
;
}
IF
(
)
{
SHORT
=
(
SHORT
)
;
WHILE
(
)
{
=
(
)
;
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
=
;
=
(
)
;
}
}
ELSE
IF
(
)
{
UNSIGNED
CHAR
=
(
UNSIGNED
CHAR
)
;
WHILE
(
)
{
=
(
)
;
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
=
(
)
;
=
(
)
;
}
}
IF
(
)
{
,
;
INT
=
;
INT
=
;
;
(
,
,
,
,
)
;
(
,
,
)
;
}
}
VOID
(
,
,
INT
)
;
VOID
(
,
,
INT
)
;
VOID
(
INT
)
{
INT
;
INT
;
;
;
INT
,
;
WHILE
(
)
{
=
;
IF
(
)
=
;
(
,
,
(
)
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
(
)
;
IF
(
)
CONTINUE
;
=
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
}
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
BREAK
;
}
}
}
}
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
(
(
SIGNED
CHAR
)
)
;
}
VOID
(
,
,
INT
)
{
INT
;
INT
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
SIGNED
CHAR
)
;
FOR
(
=
;
;
)
{
=
;
;
;
}
;
}
VOID
(
,
,
INT
)
{
INT
;
INT
,
;
INT
,
;
SIGNED
SHORT
;
INT
;
=
;
=
;
=
(
SIGNED
SHORT
)
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
(
)
;
;
;
}
;
}
__E__O__F__
(
,
,
)
(
,
,
)
(
)
(
,
,
)
;
TYPEDEF
ENUM
{
,
,
}
;
STATIC
;
STATIC
;
STATIC
;
STATIC
=
,
,
;
STATIC
;
STATIC
INT
;
STATIC
INT
,
;
;
,
;
;
;
;
;
;
;
;
,
;
;
(
VOID
)
;
(
VOID
)
;
VOID
(
VOID
)
{
IF
(
)
{
;
IF
(
)
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
(
)
)
{
(
)
;
}
IF
(
)
{
(
,
,
)
;
(
)
;
}
IF
(
)
{
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
(
,
,
(
)
)
;
}
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
}
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
VOID
)
{
;
;
,
;
;
,
;
;
INT
;
(
(
VOID
)
,
,
(
)
)
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
,
)
)
{
(
)
;
RETURN
;
}
}
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
(
)
;
=
;
IF
(
(
)
)
{
IF
(
(
,
,
,
)
)
{
=
;
IF
(
(
,
)
)
{
}
ELSE
=
;
}
}
IF
(
(
)
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
(
,
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
}
ELSE
{
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
=
;
}
(
,
,
,
)
;
=
;
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
(
,
,
)
;
(
,
,
,
,
)
;
=
;
(
)
;
(
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
=
;
RETURN
;
}
(
VOID
)
{
;
INT
;
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
WHILE
(
(
=
(
(
)
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
,
)
)
{
(
)
;
RETURN
;
}
}
=
;
=
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
,
)
;
=
(
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
,
,
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
}
=
;
=
;
=
(
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
=
;
RETURN
;
}
INT
(
VOID
)
{
;
IF
(
(
)
)
=
;
=
=
;
=
;
IF
(
)
{
IF
(
)
{
=
(
)
;
;
IF
(
)
{
=
;
IF
(
)
(
)
;
}
ELSE
{
=
;
(
)
;
}
}
}
IF
(
(
)
)
{
IF
(
)
{
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
}
ELSE
{
(
)
;
}
}
}
=
;
IF
(
)
{
IF
(
)
(
)
;
RETURN
;
}
RETURN
;
}
INT
(
VOID
)
{
;
INT
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
}
ELSE
IF
(
)
{
=
;
}
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
RETURN
;
WHILE
(
)
{
IF
(
)
{
(
)
;
BREAK
;
}
IF
(
(
)
)
{
BREAK
;
}
;
}
WHILE
(
(
(
)
)
)
{
=
(
)
;
;
=
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
}
VOID
(
VOID
)
{
(
)
;
}
__E__O__F__
INT
=
;
INT
=
;
CHAR
=
;
CHAR
=
;
=
{
,
}
;
VOID
(
INT
,
INT
)
{
}
VOID
(
CHAR
,
)
{
;
CHAR
;
UNSIGNED
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
RETURN
;
FOR
(
=
(
UNSIGNED
CHAR
)
;
;
)
IF
(
(
)
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
(
,
,
)
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
,
(
,
,
)
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
INT
(
CHAR
)
{
STRUCT
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
)
{
(
,
)
;
}
INT
(
CHAR
,
INT
)
{
INT
;
STRUCT
;
=
(
,
,
)
;
=
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
,
)
;
RETURN
;
}
INT
(
CHAR
)
{
INT
;
(
)
;
=
(
,
,
)
;
IF
(
)
(
,
,
(
)
)
;
RETURN
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
)
;
}
VOID
(
INT
)
{
(
)
;
}
VOID
(
INT
,
INT
)
{
(
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
)
;
}
VOID
(
CHAR
,
CHAR
,
)
{
;
STATIC
CHAR
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
=
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
}
VOID
(
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
=
(
)
;
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
;
(
,
,
,
)
;
(
)
;
}
}
DOUBLE
(
VOID
)
{
STRUCT
;
STRUCT
;
STATIC
INT
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
RETURN
(
)
;
}
STATIC
VOLATILE
INT
;
VOID
(
INT
)
{
=
;
}
VOID
(
VOID
)
{
}
VOID
(
INT
)
{
(
,
)
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
IF
(
)
{
=
(
,
,
(
)
)
;
IF
(
)
RETURN
;
=
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
INT
;
INT
(
INT
,
CHAR
)
{
DOUBLE
,
,
;
;
INT
;
(
,
)
;
(
,
,
(
)
)
;
(
,
)
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
(
INT
)
(
(
)
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
)
(
,
,
(
,
,
)
)
;
IF
(
(
)
)
=
;
(
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
=
(
)
;
=
;
(
)
;
=
;
}
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
INT
(
)
{
INT
;
INT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
INT
(
CHAR
)
{
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
CHAR
)
{
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
}
VOID
(
CHAR
,
CHAR
,
)
{
}
VOID
(
CHAR
,
)
{
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
DOUBLE
(
VOID
)
{
STATIC
DOUBLE
;
;
RETURN
;
}
CHAR
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
INT
,
CHAR
)
{
;
=
;
=
(
)
;
=
;
(
,
)
;
=
;
=
;
(
)
;
(
)
;
WHILE
(
)
{
(
)
;
}
}
__E__O__F__
INT
;
,
;
;
;
STATIC
DOUBLE
;
STATIC
DOUBLE
=
;
STATIC
DOUBLE
=
;
STATIC
INT
;
STATIC
,
;
;
STATIC
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
CHAR
,
CHAR
,
)
{
;
STATIC
CHAR
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
=
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
}
;
INT
(
)
{
INT
;
INT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
INT
(
CHAR
)
{
;
INT
,
;
=
(
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
=
;
}
ELSE
{
=
;
}
(
)
;
RETURN
;
}
VOID
(
CHAR
)
{
(
)
;
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
;
IF
(
(
(
)
,
,
,
)
)
(
)
;
}
VOID
(
VOID
)
{
;
UNSIGNED
INT
,
;
;
=
(
,
,
)
;
IF
(
)
(
)
;
(
)
;
=
(
,
,
,
)
;
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
=
(
UNSIGNED
INT
)
;
=
(
UNSIGNED
INT
)
;
=
;
WHILE
(
(
)
)
{
;
;
(
)
;
;
}
=
(
DOUBLE
)
;
(
)
;
(
)
;
=
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
)
(
)
)
{
(
)
;
}
IF
(
)
=
;
ELSE
=
;
}
VOID
(
CHAR
,
)
{
;
CHAR
,
;
;
(
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
}
DOUBLE
(
VOID
)
{
STATIC
INT
;
STATIC
UNSIGNED
INT
;
STATIC
INT
=
;
;
UNSIGNED
INT
,
;
DOUBLE
;
(
)
;
(
)
;
=
(
(
UNSIGNED
INT
)
)
(
(
UNSIGNED
INT
)
(
)
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
(
)
(
(
)
)
)
{
=
;
}
ELSE
{
=
;
=
(
DOUBLE
)
;
=
;
;
IF
(
)
{
;
IF
(
)
{
;
=
;
}
}
ELSE
{
=
;
}
=
;
}
}
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
=
(
)
;
IF
(
)
{
=
(
DOUBLE
)
(
(
)
)
;
}
ELSE
{
=
;
}
=
;
}
DOUBLE
(
VOID
)
{
STATIC
;
STATIC
=
;
;
DOUBLE
;
=
(
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
RETURN
(
)
(
)
;
IF
(
)
RETURN
;
RETURN
(
)
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
STATIC
INT
;
;
INT
;
INT
,
;
INT
,
,
;
;
CHAR
,
;
FOR
(
;
;
)
{
IF
(
(
,
)
)
(
)
;
IF
(
)
BREAK
;
IF
(
(
,
,
,
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
{
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
(
,
,
,
,
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
BREAK
;
CASE
(
,
,
,
,
)
;
IF
(
)
{
;
(
)
;
}
BREAK
;
DEFAULT
(
,
)
;
IF
(
(
(
)
(
(
)
)
)
(
(
)
(
)
)
)
{
IF
(
(
)
)
{
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
(
,
)
;
;
(
,
,
,
,
)
;
}
(
)
;
}
(
)
;
}
(
)
;
}
}
ELSE
IF
(
)
{
(
,
,
,
,
)
;
=
;
=
(
)
;
}
BREAK
;
}
}
}
}
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
;
WHILE
(
(
,
,
,
,
)
)
{
=
;
IF
(
(
,
,
,
)
)
(
)
;
(
)
;
(
)
;
}
}
VOID
(
INT
)
{
(
,
,
,
,
)
;
}
;
INT
;
CHAR
;
STATIC
CHAR
=
;
;
INT
(
,
,
,
INT
)
{
;
;
DOUBLE
,
,
;
;
STATIC
CHAR
;
INT
;
;
IF
(
)
RETURN
;
=
;
=
;
=
(
)
;
(
)
;
IF
(
(
(
)
,
)
)
(
)
;
IF
(
(
)
)
(
)
=
;
=
;
=
;
=
;
=
;
WHILE
(
(
)
)
{
WHILE
(
(
(
)
(
)
)
)
;
IF
(
)
{
=
;
;
WHILE
(
(
(
)
(
)
)
)
;
IF
(
)
{
=
;
;
}
}
}
=
;
(
,
)
;
=
;
=
;
=
(
,
(
)
,
,
)
;
IF
(
)
{
IF
(
(
,
)
)
{
IF
(
(
)
)
{
(
,
,
(
)
(
(
)
)
,
,
,
,
)
;
}
}
(
,
)
;
(
)
;
(
)
;
}
=
;
IF
(
)
=
;
IF
(
(
)
)
=
;
IF
(
)
=
;
IF
(
(
)
)
{
=
(
)
;
IF
(
)
=
(
)
;
}
=
(
)
;
IF
(
)
(
)
;
=
(
,
,
,
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
IF
(
(
(
)
)
)
{
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
}
=
(
)
;
=
;
(
)
;
=
;
}
RETURN
;
}
__E__O__F__
;
;
SHORT
;
;
UNSIGNED
SHORT
;
UNSIGNED
;
VOID
(
UNSIGNED
CHAR
)
{
}
VOID
(
UNSIGNED
CHAR
)
{
}
VOID
(
UNSIGNED
CHAR
)
{
=
=
=
;
=
=
=
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
=
=
;
=
=
;
=
;
(
,
(
)
)
;
}
VOID
(
VOID
)
{
}
VOID
(
)
{
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
__E__O__F__
(
)
{
,
}
UNSIGNED
SHORT
;
STATIC
;
STATIC
INT
;
INT
;
;
INT
;
INT
=
;
STRUCT
{
CHAR
;
INT
;
}
=
{
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
}
;
STATIC
UNSIGNED
CHAR
;
STATIC
;
INT
=
(
)
(
)
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
CHAR
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
}
;
INT
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
,
;
=
{
,
,
}
;
=
{
,
}
;
STATIC
;
INT
,
,
,
,
;
;
VOID
(
VOID
)
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
INT
,
,
,
,
,
,
,
,
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
(
)
(
)
=
(
)
(
)
;
(
)
(
)
=
(
)
(
)
;
}
}
}
}
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
;
IF
(
(
)
)
{
=
;
(
)
;
}
(
(
)
,
,
)
;
(
,
(
)
,
)
;
}
}
}
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
,
,
,
,
,
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
(
)
(
)
=
(
)
(
)
;
}
}
}
}
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
;
IF
(
(
)
)
{
=
;
(
)
;
}
(
,
(
)
,
)
;
}
}
}
}
VOID
(
VOID
)
{
FLOAT
,
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
(
)
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
=
(
(
)
)
;
IF
(
(
)
(
)
)
(
,
)
;
(
,
,
,
)
;
IF
(
)
(
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
(
,
,
,
)
;
IF
(
)
(
)
;
ELSE
(
,
)
;
}
}
INT
(
)
{
INT
,
=
;
FOR
(
=
;
;
)
(
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
(
,
(
)
,
(
)
)
;
ELSE
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
}
INT
(
CHAR
,
INT
,
INT
,
INT
)
{
INT
;
INT
,
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
{
(
,
)
;
=
;
}
}
ELSE
{
FOR
(
=
;
;
)
IF
(
)
{
=
(
)
(
)
(
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
,
,
,
)
;
=
;
}
}
RETURN
;
}
INT
(
INT
,
CHAR
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
INT
;
STRUCT
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
)
{
STATIC
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
IF
(
(
)
)
{
=
;
FOR
(
=
;
;
)
(
)
=
(
)
;
IF
(
(
)
)
(
,
,
)
;
}
}
INT
(
INT
,
UNSIGNED
CHAR
)
{
INT
,
,
;
IF
(
(
)
(
)
)
{
(
,
(
FLOAT
)
)
;
(
,
)
;
RETURN
;
}
(
,
(
FLOAT
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
(
)
;
=
(
(
(
INT
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
)
;
(
)
;
=
;
=
;
}
=
;
=
(
,
)
;
=
(
)
;
=
(
)
;
=
(
,
)
;
=
(
(
)
)
;
=
=
(
)
(
(
(
)
)
)
;
(
,
)
;
(
)
;
(
)
;
=
=
=
(
CHAR
)
(
)
;
IF
(
)
(
)
;
(
)
;
=
;
=
;
RETURN
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
INT
,
,
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
=
=
;
IF
(
(
)
)
=
(
(
)
,
,
,
)
;
ELSE
IF
(
(
)
)
=
(
(
)
,
,
,
)
;
ELSE
IF
(
(
)
(
)
(
)
)
{
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
=
(
,
,
,
)
;
}
ELSE
=
;
(
,
)
;
(
)
;
(
)
;
}
IF
(
(
)
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
(
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
INT
=
;
INT
;
FOR
(
=
;
;
)
{
(
)
;
(
,
,
(
(
)
(
)
)
)
;
}
}
ELSE
{
INT
;
INT
;
INT
=
;
(
)
;
WHILE
(
)
{
=
;
=
;
WHILE
(
)
{
REGISTER
INT
=
;
IF
(
(
)
)
{
=
;
(
)
;
}
IF
(
)
{
(
,
,
)
;
(
)
;
(
,
,
)
;
}
ELSE
(
,
,
)
;
;
}
=
;
}
}
IF
(
)
(
(
INT
)
,
)
;
}
STATIC
INT
;
VOID
(
VOID
)
{
IF
(
)
{
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
=
;
;
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
}
ELSE
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
=
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
WHILE
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
}
VOID
(
)
{
(
)
;
}
CHAR
(
INT
)
{
STATIC
CHAR
=
;
STATIC
CHAR
;
IF
(
)
{
(
,
,
,
,
)
;
RETURN
(
)
;
}
ELSE
{
RETURN
(
)
;
}
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
;
EXTERN
INT
;
;
(
,
INT
)
;
INT
,
;
;
;
,
;
INT
,
,
,
,
,
;
;
STATIC
;
STATIC
=
,
;
STATIC
INT
=
;
STATIC
=
,
;
STATIC
INT
;
STATIC
INT
;
STATIC
,
,
,
;
STATIC
INT
,
;
STATIC
,
,
,
,
;
STATIC
;
;
;
(
)
(
)
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
}
;
INT
=
;
INT
,
;
DOUBLE
;
INT
=
;
STATIC
INT
;
=
;
STATIC
;
STATIC
INT
;
STATIC
INT
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
;
UNSIGNED
;
INT
=
,
;
=
,
=
;
=
,
=
,
=
,
=
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
}
;
STATIC
;
STATIC
INT
;
STATIC
;
INT
;
INT
;
INT
=
;
STATIC
;
STATIC
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
(
,
,
,
)
;
VOID
(
,
)
;
VOID
(
VOID
)
{
;
IF
(
(
,
)
)
{
IF
(
(
(
)
)
(
(
)
)
(
)
(
)
)
{
(
,
(
FLOAT
)
)
;
(
,
(
FLOAT
)
)
;
}
}
}
VOID
(
VOID
)
{
IF
(
(
(
INT
)
(
(
)
)
)
(
(
INT
)
(
(
)
)
)
(
(
INT
)
)
(
(
INT
)
)
)
{
(
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
(
,
)
;
}
(
)
;
(
)
;
}
(
INT
,
INT
)
{
INT
;
=
(
)
;
(
,
)
;
IF
(
(
)
)
{
RETURN
;
}
RETURN
;
}
(
INT
,
INT
)
{
INT
,
;
=
(
)
;
=
(
,
)
;
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
(
)
;
=
(
,
)
;
=
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
(
(
)
)
)
;
(
)
;
}
INT
(
,
INT
)
{
INT
;
IF
(
)
{
(
)
;
(
)
;
=
;
=
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
}
RETURN
;
}
INT
(
,
INT
)
{
IF
(
)
{
IF
(
)
{
RETURN
;
}
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
RETURN
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
RETURN
;
}
}
VOID
(
VOID
)
{
(
,
)
;
IF
(
)
{
(
,
)
;
IF
(
(
)
)
(
,
)
;
}
IF
(
)
{
(
,
)
;
}
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
,
,
,
,
;
INT
,
,
;
;
IF
(
(
)
(
)
(
)
)
{
=
;
}
IF
(
(
)
(
)
(
)
)
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
=
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
IF
(
)
=
;
IF
(
(
)
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
=
;
=
;
}
IF
(
(
)
(
(
)
)
)
{
=
;
=
;
}
}
;
}
IF
(
)
{
=
;
=
;
=
;
}
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
}
ELSE
{
=
;
}
=
;
=
;
=
;
(
,
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
;
;
(
,
,
,
)
;
}
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
}
}
(
)
;
}
(
INT
)
{
;
;
INT
;
IF
(
(
)
)
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
(
)
)
{
IF
(
)
{
=
;
}
}
IF
(
(
=
(
)
)
)
RETURN
;
IF
(
(
(
)
)
(
)
)
{
(
)
;
=
;
}
ELSE
{
=
(
(
)
,
(
)
,
,
)
;
(
)
;
}
IF
(
)
{
=
;
}
ELSE
{
=
;
IF
(
)
{
(
,
=
)
;
(
,
=
,
)
;
}
IF
(
)
=
;
}
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
VOID
(
)
{
;
;
INT
;
=
(
,
(
)
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
(
,
)
)
(
)
)
{
=
;
}
ELSE
{
=
;
}
=
;
(
,
)
;
=
;
=
;
}
VOID
(
)
{
;
INT
,
,
,
,
,
,
;
INT
,
,
;
INT
,
,
;
;
=
;
=
;
=
;
DO
{
=
(
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
{
IF
(
(
)
)
{
;
=
;
(
,
,
,
)
;
}
}
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
=
;
;
}
}
}
;
}
WHILE
(
)
;
IF
(
)
{
=
;
=
;
(
)
;
DO
{
=
(
,
,
)
;
IF
(
(
(
(
)
(
)
)
(
(
)
(
(
)
)
(
(
)
)
)
)
(
)
(
)
)
{
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
{
IF
(
(
)
)
{
;
=
;
(
,
,
,
)
;
}
}
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
)
{
IF
(
)
=
;
=
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
=
;
;
}
}
}
;
}
WHILE
(
)
;
}
=
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
}
WHILE
(
)
{
FOR
(
=
;
(
)
(
)
;
)
{
=
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
=
;
;
}
}
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
IF
(
)
{
FOR
(
=
,
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
=
;
=
;
=
;
}
}
IF
(
(
)
)
=
;
IF
(
)
{
FOR
(
=
(
)
;
;
)
=
;
;
=
;
=
;
;
;
=
;
(
,
,
,
)
;
}
}
IF
(
)
=
;
ELSE
(
)
;
}
INT
(
VOID
)
{
RETURN
;
}
(
INT
)
{
IF
(
(
)
(
)
)
RETURN
;
ELSE
RETURN
;
}
VOID
(
INT
)
{
INT
,
,
;
IF
(
)
{
=
(
INT
)
;
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
=
(
INT
)
;
=
(
INT
)
;
(
,
,
,
)
;
=
;
=
;
}
}
CHAR
(
INT
)
{
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
(
)
;
=
(
)
;
=
;
IF
(
(
,
)
)
{
RETURN
;
}
ELSE
{
RETURN
;
}
}
CHAR
(
INT
)
{
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
(
)
;
=
(
)
;
=
;
RETURN
;
}
CHAR
(
INT
)
{
STATIC
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
}
RETURN
;
}
CHAR
(
INT
)
{
STATIC
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
,
(
)
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
}
}
(
INT
)
{
;
;
;
INT
;
;
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
;
}
(
)
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
IF
(
(
)
)
(
)
;
=
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
;
;
}
=
;
=
;
(
,
,
,
)
;
IF
(
)
{
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
(
)
;
=
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
IF
(
(
,
,
,
,
,
,
)
)
{
(
)
;
}
IF
(
)
RETURN
;
(
)
;
(
,
,
(
INT
)
,
(
INT
)
,
,
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
(
=
(
)
)
)
(
)
;
IF
(
(
=
(
,
,
,
)
)
)
(
)
;
(
)
;
=
=
=
;
=
=
;
=
;
=
;
=
;
=
=
;
=
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
RETURN
;
}
(
INT
)
{
=
;
(
)
;
(
)
;
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
IF
(
(
=
(
(
INT
)
)
)
)
{
RETURN
;
}
=
;
=
;
=
=
=
;
=
;
=
;
=
=
=
;
=
=
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
=
;
=
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
(
,
)
;
RETURN
;
}
(
INT
)
{
;
;
INT
;
=
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
IF
(
(
)
)
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
=
;
=
=
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
,
,
,
,
,
,
)
)
{
(
)
;
}
(
,
,
,
,
,
,
)
;
(
,
)
;
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
(
=
(
)
)
)
(
)
;
IF
(
(
=
(
,
,
,
)
)
)
(
)
;
(
)
;
=
=
=
;
=
=
;
=
;
=
;
=
;
=
=
;
=
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
INT
)
{
STATIC
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
IF
(
(
,
)
)
(
)
;
}
=
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
(
)
;
}
INT
(
INT
,
UNSIGNED
CHAR
)
{
INT
,
,
;
;
;
;
WHILE
(
(
)
(
)
)
{
IF
(
)
{
IF
(
)
{
=
;
}
ELSE
{
=
;
}
(
,
(
FLOAT
)
)
;
}
ELSE
{
(
,
(
FLOAT
)
)
;
RETURN
;
}
}
IF
(
(
)
)
RETURN
;
=
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
{
=
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
=
(
)
;
}
}
ELSE
IF
(
)
{
=
(
)
;
(
)
;
(
)
;
}
ELSE
{
=
(
)
;
(
)
;
(
)
;
}
=
;
=
;
(
)
;
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
(
)
;
=
(
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
(
)
;
(
,
)
;
=
;
(
,
(
FLOAT
)
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
WHILE
(
(
,
,
,
,
)
)
{
(
)
;
(
)
;
}
(
)
;
IF
(
)
{
(
,
,
,
,
,
,
)
;
(
)
;
}
(
)
;
IF
(
)
(
,
(
)
)
;
(
)
;
=
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
=
=
=
;
=
=
;
}
ELSE
IF
(
)
{
=
=
=
;
=
=
;
}
IF
(
)
=
;
ELSE
=
(
VOID
)
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
(
)
;
=
=
=
=
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
=
;
}
ELSE
{
=
;
(
)
;
}
RETURN
;
}
VOID
(
INT
)
{
IF
(
)
{
=
;
(
)
;
}
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
;
;
;
IF
(
)
{
=
;
=
(
)
;
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
=
;
=
;
}
}
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
IF
(
)
{
IF
(
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
(
,
,
,
)
;
}
ELSE
{
IF
(
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
}
}
(
,
,
(
)
)
;
IF
(
)
{
(
,
,
(
)
,
(
)
)
;
=
;
}
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
(
)
)
;
(
,
(
)
)
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
;
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
(
,
)
)
{
(
,
,
)
;
}
ELSE
{
(
,
)
;
=
;
}
}
IF
(
)
{
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
DOUBLE
;
IF
(
)
{
=
(
(
)
)
;
IF
(
(
,
)
)
{
=
;
=
(
(
)
)
;
IF
(
)
=
;
=
;
}
}
}
VOID
(
VOID
)
{
(
(
INT
)
,
)
;
}
VOID
(
VOID
)
{
(
(
INT
)
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
DOUBLE
;
IF
(
)
{
=
(
(
)
)
;
=
;
(
,
)
;
=
;
}
}
VOID
(
UNSIGNED
CHAR
)
{
INT
,
,
,
,
,
,
;
INT
;
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
(
)
)
=
;
(
)
;
=
;
IF
(
)
(
)
;
IF
(
(
(
)
(
(
(
)
)
)
)
(
)
)
{
(
)
;
}
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
;
=
;
IF
(
)
BREAK
;
}
}
FOR
(
=
,
=
;
(
(
)
)
;
,
)
{
IF
(
)
=
;
}
IF
(
(
)
)
{
=
;
=
;
}
IF
(
)
(
)
;
=
;
(
,
)
;
=
;
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
(
)
;
=
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
{
IF
(
)
(
,
)
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
=
;
=
;
}
}
VOID
(
)
{
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
WHILE
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
(
)
,
(
)
)
;
}
ELSE
{
(
,
,
,
,
(
)
,
(
)
,
,
,
)
;
}
=
;
}
}
IF
(
)
{
=
(
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
}
}
}
ELSE
{
;
=
(
)
;
IF
(
)
{
(
,
)
;
WHILE
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
(
)
,
(
)
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
=
;
}
}
(
,
)
;
}
}
VOID
(
)
{
;
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
IF
(
)
{
IF
(
)
{
(
,
)
;
IF
(
(
(
INT
)
)
(
(
INT
)
)
)
{
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
(
)
;
(
,
,
(
INT
)
,
(
INT
)
,
,
,
)
;
}
}
IF
(
(
)
(
(
)
)
)
{
=
;
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
IF
(
(
)
(
)
)
{
(
,
)
;
}
(
,
)
;
}
}
(
)
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
}
}
ELSE
{
IF
(
(
INT
)
)
{
(
(
INT
)
,
)
;
(
,
(
FLOAT
)
)
;
=
;
}
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
}
=
;
}
ELSE
{
=
;
IF
(
)
{
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
}
}
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
INT
,
,
,
;
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
)
,
(
(
)
)
,
)
;
(
(
(
)
)
,
(
)
,
)
;
}
}
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
{
IF
(
)
(
)
;
(
,
)
;
(
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
)
,
(
)
(
(
)
)
,
)
;
(
(
)
(
(
)
)
,
(
)
,
)
;
}
}
(
)
;
(
,
)
;
IF
(
)
(
)
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
;
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
(
)
)
,
(
)
,
)
;
}
}
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
{
IF
(
)
(
)
;
(
,
)
;
(
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
)
(
(
)
)
,
(
)
,
)
;
}
}
(
)
;
(
,
)
;
IF
(
)
(
)
;
}
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
(
INT
)
{
=
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
)
{
;
INT
,
;
STATIC
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
}
(
,
)
;
IF
(
)
{
=
(
)
;
IF
(
(
,
)
)
{
IF
(
)
{
IF
(
(
)
(
)
)
{
IF
(
(
)
)
{
(
,
)
;
=
;
=
;
}
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
=
;
}
=
;
}
}
IF
(
)
(
)
;
=
;
(
,
)
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
=
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
(
,
)
;
=
;
=
;
=
;
(
,
)
;
=
;
}
(
)
;
(
)
;
}
ELSE
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
}
(
)
;
(
)
;
}
ELSE
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
}
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
}
}
}
(
,
,
,
)
;
(
,
,
,
)
{
=
;
INT
,
,
,
,
,
;
;
;
EXTERN
UNSIGNED
INT
;
STATIC
INT
;
IF
(
)
{
=
;
;
}
SWITCH
(
)
{
CASE
BREAK
;
CASE
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
(
,
)
;
=
;
}
(
(
INT
)
,
)
;
BREAK
;
CASE
CASE
IF
(
)
{
BREAK
;
}
DEFAULT
IF
(
)
{
(
)
;
(
)
;
}
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
}
}
BREAK
;
CASE
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
BREAK
;
CASE
=
;
IF
(
(
)
)
{
IF
(
)
=
;
}
BREAK
;
CASE
BREAK
;
CASE
=
(
)
;
=
(
)
(
)
;
(
(
)
,
)
;
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
(
)
;
}
BREAK
;
CASE
=
(
,
)
;
IF
(
)
(
)
;
(
,
)
;
BREAK
;
CASE
CASE
IF
(
)
(
(
)
,
)
;
BREAK
;
CASE
CASE
IF
(
)
(
(
)
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
IF
(
)
{
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
(
SHORT
)
(
)
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
IF
(
(
)
)
BREAK
;
CASE
=
(
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
(
,
)
;
=
;
IF
(
(
,
)
)
{
(
)
;
(
,
,
)
;
=
;
}
BREAK
;
CASE
IF
(
(
)
)
{
=
;
(
,
)
;
=
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
(
,
,
,
)
)
{
(
)
;
}
}
BREAK
;
CASE
=
(
,
,
,
)
;
BREAK
;
DEFAULT
=
(
,
,
,
)
;
BREAK
;
}
RETURN
;
}
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
INT
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
STATIC
INT
,
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
INT
;
INT
;
INT
;
}
;
(
)
(
)
STATIC
;
VOID
(
VOID
)
{
;
CHAR
;
INT
,
,
,
,
,
,
,
;
CHAR
;
;
;
=
(
)
;
(
(
)
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
}
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
(
(
)
(
)
)
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
;
=
;
BREAK
;
}
}
IF
(
(
)
)
{
IF
(
(
)
)
{
IF
(
)
{
=
;
}
ELSE
{
=
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
;
}
}
}
}
FOR
(
=
;
(
)
;
)
{
FOR
(
=
(
)
;
;
)
{
IF
(
)
{
=
;
=
;
=
;
}
}
}
(
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
}
IF
(
)
{
(
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
IF
(
(
(
)
)
(
)
)
{
=
;
;
}
}
}
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
=
(
(
INT
)
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
(
,
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
;
(
,
,
(
(
INT
)
(
)
)
)
;
}
}
VOID
(
INT
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
=
(
(
)
)
(
(
)
)
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
=
(
(
)
)
(
(
)
)
;
IF
(
)
=
(
)
;
BREAK
;
CASE
(
)
;
;
IF
(
)
{
(
(
(
)
)
)
;
WHILE
(
)
;
}
BREAK
;
CASE
(
)
;
;
IF
(
)
{
(
(
(
)
)
)
;
WHILE
(
)
;
}
BREAK
;
CASE
(
)
;
(
,
)
;
BREAK
;
CASE
CASE
(
)
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
}
BREAK
;
CASE
CASE
(
)
;
=
;
(
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
__E__O__F__
TYPEDEF
UNSIGNED
SHORT
;
=
{
,
,
}
;
=
{
,
,
}
;
FLOAT
;
INT
,
,
,
,
;
;
;
INT
=
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
;
INT
;
INT
;
INT
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
;
UNSIGNED
SHORT
;
INT
=
;
INT
=
;
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
;
STATIC
=
;
INT
(
)
;
INT
(
)
;
INT
;
STATIC
=
{
,
}
;
STATIC
;
STATIC
INT
=
;
STATIC
;
STATIC
LONG
;
STATIC
LONG
;
INT
;
VOID
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
INT
)
;
VOID
(
INT
)
;
STATIC
;
STATIC
INT
=
;
STATIC
LONG
,
,
;
STATIC
UNSIGNED
LONG
,
,
;
VOID
(
)
{
UNSIGNED
INT
;
=
;
=
;
=
;
FOR
(
=
,
=
;
;
=
)
;
FOR
(
=
,
=
;
;
=
)
;
FOR
(
=
,
=
;
;
=
)
;
=
;
}
(
INT
,
INT
,
INT
)
{
;
IF
(
)
(
)
;
=
;
IF
(
)
{
=
(
(
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
RETURN
;
}
VOID
(
,
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
FOR
(
=
;
(
)
;
)
{
=
;
=
(
)
;
FOR
(
=
(
)
;
;
)
{
=
;
}
}
}
VOID
(
INT
)
{
(
)
;
(
)
;
(
,
)
;
}
STATIC
(
,
)
{
;
;
;
;
;
=
(
,
,
,
,
)
;
=
;
=
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
(
)
;
=
(
)
;
=
(
,
)
;
;
=
(
,
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
(
,
)
;
=
;
IF
(
)
=
;
=
(
(
)
)
;
=
(
,
,
,
,
,
(
)
,
,
,
,
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
=
(
)
;
INT
;
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
(
)
;
=
(
)
;
=
(
,
)
;
;
=
(
,
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
}
=
(
,
,
,
,
,
,
,
)
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
(
)
,
,
)
;
IF
(
)
(
)
;
=
(
VOID
)
(
,
,
)
;
(
,
,
(
LONG
)
)
;
=
;
IF
(
(
,
)
)
(
)
;
(
,
)
;
(
,
,
)
;
}
}
VOID
(
UNSIGNED
CHAR
)
{
INT
,
;
;
INT
;
INT
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
(
)
)
;
ELSE
(
)
;
}
{
STRUCT
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
}
(
)
;
(
,
)
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
=
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
;
}
ELSE
{
INT
;
=
(
)
;
=
(
(
,
)
)
;
=
;
}
=
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
(
INT
)
(
)
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
IF
(
)
{
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
)
;
}
=
;
{
INT
=
;
;
;
=
(
,
(
,
)
,
,
)
;
=
;
=
;
=
;
=
(
,
(
,
)
,
,
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
)
;
}
IF
(
)
{
IF
(
)
{
=
(
,
,
,
)
;
(
)
;
(
,
,
)
;
}
}
(
,
,
(
,
)
)
;
{
;
INT
=
;
=
;
=
(
,
,
,
)
;
}
(
,
)
;
{
;
DO
{
(
,
)
;
IF
(
)
=
;
}
WHILE
(
)
;
}
IF
(
(
)
)
{
CHAR
;
=
;
=
(
CHAR
)
(
)
;
IF
(
)
{
CHAR
=
;
WHILE
(
(
)
)
;
IF
(
)
=
;
IF
(
(
(
,
)
)
)
=
;
}
}
IF
(
)
{
=
(
)
;
(
)
;
}
ELSE
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
;
FOR
(
=
;
;
)
=
(
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
}
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
INT
(
)
{
INT
;
CHAR
;
;
=
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
UNSIGNED
CHAR
)
;
IF
(
)
=
;
BREAK
;
}
RETURN
;
}
STRUCT
{
INT
;
INT
;
}
;
INT
=
;
INT
=
;
INT
=
;
INT
;
INT
;
VOID
(
VOID
)
{
;
INT
;
(
,
)
;
SWITCH
(
)
{
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
IF
(
)
{
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
(
)
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
=
(
FLOAT
)
(
)
;
=
;
=
;
}
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
DEFAULT
IF
(
)
=
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
}
}
VOID
(
)
{
IF
(
)
{
(
,
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
WHILE
(
)
{
IF
(
)
(
,
,
,
,
)
;
IF
(
(
,
,
,
,
,
,
,
,
,
,
)
)
(
)
;
=
;
WHILE
(
)
(
)
;
=
;
}
=
;
=
;
=
;
(
,
)
;
}
ELSE
{
WHILE
(
)
{
IF
(
)
(
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
,
)
;
=
;
}
(
,
)
;
}
}
STATIC
INT
;
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
INT
)
{
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
(
)
;
WHILE
(
)
{
(
,
)
;
=
(
)
;
}
}
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
;
INT
;
STRUCT
;
=
;
=
;
(
)
;
(
,
)
;
=
(
,
,
,
,
)
;
IF
(
)
{
=
(
,
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
}
RETURN
;
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
(
)
)
RETURN
;
=
=
;
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
}
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
=
=
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
FLOAT
,
,
;
EXTERN
INT
,
,
;
;
;
FLOAT
(
,
)
{
,
,
;
FLOAT
;
FLOAT
;
FLOAT
;
(
,
,
,
)
;
=
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
FLOAT
(
VOID
)
{
STATIC
DOUBLE
;
STATIC
FLOAT
;
FLOAT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
=
(
INT
)
(
)
;
;
IF
(
)
=
;
ELSE
=
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
RETURN
;
}
=
{
,
,
}
;
=
{
,
}
;
VOID
(
VOID
)
{
IF
(
)
{
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
FLOAT
,
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
)
)
=
;
ELSE
;
IF
(
)
{
(
)
;
}
RETURN
;
}
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
=
;
}
;
}
}
=
{
{
,
,
}
,
}
;
=
{
{
,
,
}
,
}
;
=
{
{
,
,
}
,
}
;
=
{
{
,
,
}
,
}
;
=
{
,
,
}
;
;
;
FLOAT
;
VOID
(
FLOAT
)
{
INT
,
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
(
VOID
)
{
STATIC
FLOAT
;
IF
(
)
RETURN
;
=
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
;
INT
;
,
,
;
FLOAT
;
FLOAT
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
;
IF
(
)
=
;
=
;
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
(
,
,
)
;
(
)
;
(
,
,
,
)
;
=
(
,
)
;
=
;
=
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
}
VOID
(
INT
)
{
IF
(
)
{
=
;
RETURN
;
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
DEFAULT
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
=
;
}
VOID
(
VOID
)
{
FLOAT
,
,
,
,
;
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
(
)
)
;
IF
(
)
CONTINUE
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
}
VOID
(
VOID
)
{
INT
,
;
;
,
;
;
FLOAT
,
,
,
;
INT
,
,
;
;
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
}
}
;
IF
(
)
=
;
;
IF
(
)
=
;
=
(
)
;
IF
(
)
RETURN
;
(
)
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
}
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
;
=
;
=
;
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
,
;
;
INT
,
,
;
;
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
}
}
;
IF
(
)
=
;
;
IF
(
)
=
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
FOR
(
=
;
;
)
{
(
(
)
)
;
(
(
)
)
;
(
(
)
)
;
}
=
;
=
;
=
;
;
}
(
)
;
}
FLOAT
(
FLOAT
)
{
=
(
)
;
IF
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
FLOAT
,
,
;
STATIC
FLOAT
=
;
STATIC
FLOAT
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
=
;
=
;
=
;
=
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
,
)
;
;
IF
(
)
{
;
;
;
}
}
VOID
(
VOID
)
{
;
FLOAT
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
(
)
;
=
;
}
VOID
(
VOID
)
{
;
INT
;
,
,
;
FLOAT
;
STATIC
FLOAT
=
;
(
)
;
=
;
=
(
)
;
(
,
)
;
;
;
;
;
(
,
)
;
(
)
;
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
ELSE
;
IF
(
)
=
;
(
,
,
,
)
;
(
,
)
;
(
)
;
(
,
)
;
;
FOR
(
=
;
;
)
{
;
}
;
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
IF
(
(
)
)
=
;
ELSE
=
;
=
;
=
;
;
IF
(
(
)
(
)
)
{
FLOAT
;
=
;
;
IF
(
)
=
;
IF
(
)
=
;
;
;
}
ELSE
=
;
}
VOID
(
VOID
)
{
;
IF
(
)
=
;
}
EXTERN
;
VOID
(
VOID
)
{
=
;
IF
(
)
RETURN
;
=
;
=
;
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
(
)
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
INT
;
;
;
VOID
(
)
;
VOID
(
CHAR
,
CHAR
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
(
)
;
=
;
}
FOR
(
;
;
)
=
;
}
VOID
(
CHAR
)
{
;
;
UNSIGNED
;
INT
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
(
)
;
FOR
(
=
,
=
;
;
,
)
{
=
(
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
(
)
(
)
)
;
}
}
(
CHAR
)
{
INT
;
;
CHAR
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
RETURN
;
}
(
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
;
=
(
)
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
INT
)
{
;
IF
(
)
(
,
)
;
=
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
)
{
=
(
)
;
=
(
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
STRUCT
,
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
;
;
}
;
VOID
(
INT
)
;
VOID
(
INT
)
;
;
VOID
(
,
INT
)
;
VOID
(
,
INT
)
{
;
=
=
=
(
)
(
(
)
(
)
)
;
=
;
=
;
=
;
=
;
=
=
;
=
;
=
;
=
(
)
;
}
VOID
(
VOID
)
{
,
;
IF
(
)
(
)
;
=
(
)
(
(
)
(
)
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
IF
(
)
{
;
=
;
=
;
IF
(
)
=
;
=
;
}
=
;
IF
(
)
{
;
=
;
=
;
IF
(
)
=
;
}
}
VOID
(
INT
)
{
VOID
;
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
INT
,
INT
)
{
INT
;
,
,
,
;
IF
(
)
(
)
;
(
)
;
;
=
(
)
;
=
=
;
=
;
DO
{
IF
(
)
RETURN
;
IF
(
)
=
=
;
ELSE
=
;
}
WHILE
(
)
;
=
;
IF
(
)
{
=
(
)
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
(
INT
)
(
(
)
)
=
;
RETURN
(
VOID
)
(
(
)
(
)
)
;
}
VOID
(
)
{
;
(
,
,
)
;
FOR
(
=
;
;
=
)
{
(
,
,
,
)
;
IF
(
)
BREAK
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
BREAK
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
TYPEDEF
STRUCT
{
INT
;
INT
;
CHAR
;
}
;
;
INT
;
INT
;
INT
;
;
INT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
;
FOR
(
=
(
)
;
(
)
;
)
{
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
(
(
)
)
;
}
}
VOID
(
)
{
,
,
,
,
;
INT
,
;
INT
;
CHAR
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
(
,
)
;
(
)
;
WHILE
(
)
{
IF
(
)
{
(
)
;
(
,
)
;
(
)
;
=
;
}
IF
(
)
BREAK
;
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
(
(
)
)
;
;
;
;
(
,
,
)
;
IF
(
)
(
,
,
,
)
;
IF
(
(
,
,
)
)
{
IF
(
)
(
,
,
)
;
=
;
=
;
}
=
;
}
(
)
;
(
,
)
;
}
VOID
(
INT
,
CHAR
)
{
;
(
)
;
IF
(
)
(
,
)
;
=
(
)
(
(
)
)
;
IF
(
)
(
)
;
(
)
;
=
(
)
(
)
;
;
(
)
;
(
,
,
)
;
=
;
=
;
(
,
,
)
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
INT
)
{
RETURN
(
,
)
;
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
)
{
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
}
INT
(
VOID
)
{
IF
(
)
{
=
;
(
)
;
}
RETURN
;
}
VOID
(
INT
)
{
IF
(
)
{
=
;
(
)
;
}
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
}
VOID
(
INT
,
CHAR
)
{
;
IF
(
)
(
,
)
;
IF
(
)
{
(
)
;
=
;
}
(
)
;
=
(
)
(
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
;
(
)
;
=
(
)
(
)
;
(
,
,
)
;
=
;
=
;
(
,
,
)
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
INT
)
{
VOID
;
=
(
)
;
IF
(
)
{
(
)
;
=
;
}
=
(
)
;
=
(
,
)
;
=
;
RETURN
;
}
TYPEDEF
STRUCT
{
INT
;
;
CHAR
;
STRUCT
,
;
STRUCT
,
;
}
;
(
INT
,
)
;
;
VOID
(
)
{
;
=
(
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
(
,
,
(
)
)
;
(
)
;
=
(
VOID
)
(
)
;
}
ELSE
{
(
)
;
}
}
VOID
(
INT
)
{
;
WHILE
(
)
{
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
)
;
}
}
VOID
(
INT
)
{
,
;
=
;
WHILE
(
)
{
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
)
(
)
;
ELSE
{
(
)
;
=
;
}
}
}
VOID
(
)
{
IF
(
)
(
)
;
=
;
=
;
=
=
;
}
VOID
(
)
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
}
(
INT
,
)
{
,
;
IF
(
)
{
IF
(
)
(
,
)
;
=
(
)
(
)
;
(
,
,
(
)
)
;
=
;
=
=
;
=
=
;
(
)
;
RETURN
;
}
=
(
)
(
)
;
=
;
DO
{
IF
(
)
{
IF
(
(
)
(
)
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
}
=
(
)
(
(
)
)
;
=
;
}
WHILE
(
)
;
IF
(
(
)
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
WHILE
(
)
(
)
;
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
(
,
,
)
;
}
}
VOID
(
VOID
)
{
(
,
(
)
(
FLOAT
)
(
)
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
=
=
;
=
=
;
(
,
)
;
}
VOID
(
)
{
;
IF
(
)
(
)
;
=
(
(
)
)
;
=
;
=
;
=
=
;
=
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
=
(
(
)
)
;
(
)
;
(
)
;
RETURN
;
}
VOID
(
,
INT
,
CHAR
)
{
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
=
(
(
)
)
;
WHILE
(
)
{
=
(
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
=
(
VOID
)
(
)
;
=
;
BREAK
;
}
IF
(
)
(
)
;
(
)
;
}
RETURN
(
)
;
}
VOID
(
VOID
,
INT
)
{
INT
;
INT
=
;
=
;
=
;
=
;
=
;
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
(
)
;
ELSE
(
)
;
}
=
(
,
)
;
(
,
)
;
}
__E__O__F__
TYPEDEF
ENUM
{
,
,
,
,
,
}
;
TYPEDEF
ENUM
{
,
,
}
;
INT
;
INT
,
;
CHAR
;
CHAR
;
=
;
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
INT
;
VOID
(
)
(
VOID
)
;
}
;
VOID
(
VOID
)
;
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
INT
;
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
}
;
INT
=
(
)
(
)
;
VOID
(
INT
,
CHAR
,
INT
)
{
INT
,
,
,
;
INT
;
CHAR
;
CHAR
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
(
,
,
)
;
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
IF
(
(
)
(
)
)
{
=
;
(
)
;
=
;
WHILE
(
(
)
(
)
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
IF
(
)
;
ELSE
IF
(
)
;
(
,
)
;
;
}
}
ELSE
{
;
=
;
FOR
(
=
;
(
)
(
)
;
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
IF
(
)
;
ELSE
IF
(
)
;
}
=
;
IF
(
(
)
(
(
)
(
)
)
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
}
ELSE
IF
(
(
)
(
(
)
(
)
)
)
{
(
,
)
;
}
ELSE
IF
(
(
)
(
)
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
ELSE
IF
(
(
(
)
(
)
)
)
{
;
IF
(
(
)
(
(
)
(
)
)
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
=
(
)
;
IF
(
)
=
;
=
;
WHILE
(
)
{
IF
(
(
)
)
{
(
,
,
)
;
(
)
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
}
ELSE
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
,
)
)
{
(
,
)
;
(
)
;
(
)
;
=
;
BREAK
;
}
}
IF
(
)
{
(
,
,
)
;
(
)
;
}
}
ELSE
IF
(
)
{
;
IF
(
(
)
(
)
)
{
=
;
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
}
}
ELSE
{
=
;
IF
(
(
)
(
(
(
)
)
(
(
)
)
)
)
{
;
DO
{
=
;
}
WHILE
(
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
)
;
;
=
;
}
ELSE
{
=
;
}
}
}
;
}
IF
(
)
=
;
=
;
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
(
)
;
)
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
IF
(
)
{
(
,
)
;
}
ELSE
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
INT
,
,
;
IF
(
)
{
(
,
)
;
}
ELSE
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
)
;
(
,
,
)
;
}
ELSE
IF
(
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
ELSE
{
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
(
)
;
}
}
VOID
(
CHAR
,
CHAR
)
{
INT
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
}
ELSE
IF
(
)
{
IF
(
(
,
)
)
(
,
)
;
ELSE
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
ELSE
{
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
FOR
(
=
;
(
)
;
)
{
(
,
,
)
;
(
)
;
}
(
,
,
)
;
}
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
}
;
INT
=
(
)
(
)
;
VOID
(
VOID
)
{
(
,
,
,
)
;
(
)
;
}
(
CHAR
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
(
)
)
{
RETURN
;
}
RETURN
;
}
INT
(
VOID
)
{
CHAR
;
INT
,
;
;
DO
{
IF
(
(
=
(
)
)
)
RETURN
;
IF
(
(
=
(
)
)
)
RETURN
;
}
WHILE
(
)
;
=
;
=
;
IF
(
)
{
;
=
;
=
;
=
;
=
;
}
IF
(
)
{
DO
{
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
)
;
}
=
;
}
WHILE
(
)
;
}
FOR
(
;
;
)
{
IF
(
(
=
(
)
)
)
{
=
;
RETURN
;
}
IF
(
(
)
)
{
IF
(
(
,
)
)
{
(
,
)
;
(
)
;
}
=
;
RETURN
;
}
IF
(
(
)
)
{
=
;
RETURN
;
}
IF
(
)
{
(
,
)
;
(
)
;
}
=
;
IF
(
)
{
;
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
DO
{
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
)
;
}
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
}
}
WHILE
(
(
)
(
)
)
;
}
}
}
(
VOID
)
{
;
INT
,
,
,
;
INT
;
=
;
=
;
=
;
FOR
(
;
;
)
{
=
;
=
(
)
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
(
)
;
}
(
,
)
;
(
)
(
)
;
=
;
BREAK
;
}
}
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
(
)
;
}
}
IF
(
)
{
IF
(
(
)
)
(
)
;
ELSE
(
)
;
;
}
RETURN
;
CASE
IF
(
)
{
IF
(
(
)
)
{
=
;
IF
(
)
{
(
)
=
;
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
(
)
;
}
=
;
BREAK
;
}
}
=
;
IF
(
)
{
(
,
)
;
(
)
;
}
;
BREAK
;
DEFAULT
(
,
,
)
;
(
)
;
}
}
}
VOID
(
INT
,
CHAR
)
{
;
(
)
;
=
;
=
;
FOR
(
;
;
)
{
=
(
)
;
;
SWITCH
(
)
{
CASE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
(
)
;
(
)
;
CASE
BREAK
;
DEFAULT
(
,
,
)
;
(
)
;
}
}
}
__E__O__F__
INT
;
CHAR
;
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
CHAR
(
)
{
STATIC
CHAR
;
(
,
,
,
,
,
,
(
)
)
;
RETURN
;
}
(
CHAR
)
{
;
INT
,
,
,
,
;
=
=
=
=
=
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
(
)
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
,
)
{
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
)
;
}
INT
;
CHAR
(
VOID
)
{
CHAR
;
=
;
FOR
(
;
;
)
IF
(
)
BREAK
;
=
;
;
RETURN
;
}
INT
;
CHAR
;
CHAR
;
CHAR
(
CHAR
)
{
INT
;
INT
;
=
;
=
;
IF
(
)
RETURN
;
WHILE
(
(
=
)
)
{
IF
(
)
RETURN
;
;
}
IF
(
)
{
WHILE
(
)
;
GOTO
;
}
IF
(
)
{
;
WHILE
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
;
}
}
DO
{
=
;
;
;
=
;
}
WHILE
(
)
;
=
;
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
CHAR
(
INT
)
{
IF
(
(
UNSIGNED
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
)
{
=
;
WHILE
(
)
{
WHILE
(
)
{
;
}
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
;
}
}
}
CHAR
(
CHAR
,
CHAR
)
{
CHAR
;
STATIC
CHAR
;
CHAR
;
IF
(
)
;
WHILE
(
)
{
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
WHILE
(
)
{
=
;
IF
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
IF
(
)
RETURN
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
=
;
WHILE
(
)
{
IF
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
RETURN
;
}
}
VOID
(
CHAR
,
CHAR
,
CHAR
)
{
CHAR
;
IF
(
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
IF
(
(
)
)
RETURN
;
(
,
,
,
)
;
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
INT
;
IF
(
)
;
WHILE
(
)
{
=
;
WHILE
(
)
=
;
=
;
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
=
;
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
;
WHILE
(
)
=
;
=
;
IF
(
)
;
(
,
)
;
}
}
__E__O__F__
INT
;
TYPEDEF
STRUCT
{
;
STRUCT
;
STRUCT
;
INT
;
STRUCT
;
}
;
;
VOID
(
VOID
)
{
STATIC
;
INT
;
=
(
(
,
)
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
(
)
;
}
INT
(
CHAR
,
CHAR
,
CHAR
)
{
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
INT
,
;
(
,
,
(
)
)
;
=
;
IF
(
=
(
,
)
)
=
;
ELSE
IF
(
(
=
(
(
)
(
)
)
)
)
{
(
,
,
)
;
(
)
;
}
IF
(
=
(
)
)
(
(
CHAR
)
,
,
)
;
ELSE
IF
(
(
=
(
)
)
)
{
(
,
,
)
;
(
)
;
}
IF
(
(
=
(
)
)
)
{
(
,
,
)
;
(
)
;
}
IF
(
(
,
)
)
=
;
ELSE
=
;
=
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
)
;
}
IF
(
(
,
(
STRUCT
)
,
(
)
)
)
{
(
,
,
,
,
)
;
(
)
;
}
RETURN
;
}
INT
(
INT
,
CHAR
)
{
;
STRUCT
;
INT
;
INT
;
CHAR
;
STRUCT
;
INT
;
;
INT
;
STRUCT
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
;
IF
(
(
=
(
,
,
)
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
(
(
UNSIGNED
SHORT
)
(
)
)
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
(
)
;
WHILE
(
)
{
(
)
;
(
,
)
;
=
;
FOR
(
=
;
;
=
)
{
(
,
)
;
IF
(
)
=
;
}
=
;
=
;
=
(
,
,
(
)
,
(
)
,
)
;
IF
(
)
{
IF
(
(
,
)
)
{
=
(
)
;
=
(
,
,
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
FOR
(
=
;
;
=
)
IF
(
(
,
,
(
)
)
(
,
,
(
)
)
)
{
(
,
,
,
)
;
(
)
;
BREAK
;
}
IF
(
)
{
(
,
(
)
,
(
INT
)
(
)
)
;
=
(
)
;
=
;
=
(
,
,
)
;
=
;
=
;
(
,
,
,
)
;
(
)
;
}
}
}
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
{
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
(
,
,
,
,
(
STRUCT
)
,
(
)
)
;
}
}
}
ELSE
{
;
=
;
=
;
WHILE
(
)
{
IF
(
(
)
)
{
IF
(
)
{
(
,
(
)
,
(
INT
)
(
)
)
;
(
)
;
=
=
;
CONTINUE
;
}
=
;
(
,
(
)
,
(
INT
)
(
)
)
;
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
}
}
}
}
__E__O__F__
;
CHAR
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
(
,
)
;
;
;
INT
;
;
UNSIGNED
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
(
,
)
{
;
FLOAT
;
;
IF
(
)
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
(
,
)
{
STATIC
;
INT
;
;
INT
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
{
WHILE
(
)
{
=
;
;
}
RETURN
;
}
DO
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
;
WHILE
(
)
{
=
;
;
}
}
WHILE
(
)
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
=
;
}
(
CHAR
)
{
INT
;
;
IF
(
)
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
IF
(
)
(
)
;
(
,
)
;
=
;
;
}
RETURN
;
}
(
,
)
{
VOID
;
UNSIGNED
;
;
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
RETURN
;
}
ELSE
RETURN
;
}
=
(
UNSIGNED
)
(
,
,
(
)
)
;
IF
(
)
{
IF
(
)
(
,
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
(
,
)
;
RETURN
;
}
(
CHAR
,
)
{
;
=
(
)
;
RETURN
(
,
)
;
}
;
VOID
(
)
{
INT
,
,
,
,
,
;
;
,
;
;
;
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
)
(
(
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
=
;
=
(
(
)
,
)
;
=
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
(
)
;
(
,
,
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
=
;
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
;
}
ELSE
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
=
;
=
;
IF
(
)
=
;
}
ELSE
(
,
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
}
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
;
FLOAT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
}
}
}
VOID
(
)
{
FLOAT
,
,
;
INT
,
,
;
;
;
INT
,
;
=
=
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
(
)
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
{
(
)
;
CONTINUE
;
}
IF
(
(
,
,
)
)
{
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
CONTINUE
;
}
}
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
;
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
(
(
)
)
;
}
}
(
,
)
;
}
VOID
(
)
{
;
;
INT
,
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
=
;
}
}
VOID
(
)
{
,
;
INT
,
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
,
;
;
INT
,
,
;
;
=
;
=
;
=
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
}
}
VOID
(
)
{
INT
,
,
;
SHORT
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
=
;
}
}
VOID
(
)
{
INT
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
=
(
)
;
=
(
)
;
=
;
}
}
VOID
(
,
VOID
)
{
INT
,
;
;
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
(
,
)
)
;
IF
(
)
CONTINUE
;
(
(
,
)
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
{
CHAR
;
(
,
,
)
;
=
(
)
;
=
;
(
,
)
;
=
;
}
}
}
__E__O__F__
(
)
(
(
(
INT
)
)
=
(
)
)
(
)
(
(
(
INT
)
)
=
(
)
)
CHAR
(
INT
)
{
INT
;
STATIC
CHAR
;
=
;
FOR
(
=
;
;
)
{
(
,
(
(
)
)
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
;
=
(
)
;
(
,
(
)
,
)
;
=
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
=
(
)
;
(
,
(
)
,
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
(
)
,
,
,
)
;
}
VOID
(
VOID
)
{
;
FLOAT
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
FLOAT
,
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
CHAR
,
;
INT
;
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
(
,
)
;
=
(
)
;
=
;
IF
(
)
{
=
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
INT
;
=
(
)
;
=
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
INT
;
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
,
(
)
)
;
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
;
FLOAT
;
=
(
)
;
=
;
=
(
)
;
IF
(
)
=
=
=
;
ELSE
{
=
;
=
;
=
;
=
;
}
(
,
(
)
)
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
=
(
)
;
=
;
=
(
)
;
(
)
=
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
=
(
)
;
IF
(
)
=
;
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
(
)
=
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
FLOAT
,
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
=
(
)
;
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
(
)
=
;
(
)
=
;
(
)
=
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
(
)
)
(
(
FLOAT
)
)
;
(
)
=
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
FLOAT
;
FLOAT
,
;
INT
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
;
INT
;
FLOAT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
INT
)
=
;
}
VOID
(
VOID
)
{
FLOAT
,
;
;
INT
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
}
VOID
(
VOID
)
{
}
;
INT
(
INT
)
{
INT
;
;
;
;
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
;
;
)
{
IF
(
)
=
;
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
INT
)
)
CONTINUE
;
BREAK
;
}
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
(
)
)
;
RETURN
;
}
INT
,
;
VOID
(
VOID
)
{
,
;
;
INT
;
;
IF
(
)
{
=
(
)
;
=
;
}
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
(
,
)
;
=
(
)
;
IF
(
(
)
(
(
(
)
)
)
)
{
;
(
)
;
RETURN
;
}
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
=
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
(
,
,
(
)
)
;
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
CHAR
,
;
=
(
)
;
=
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
,
;
FLOAT
;
FLOAT
;
;
INT
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
(
(
)
)
;
IF
(
(
)
)
CONTINUE
;
=
(
)
;
=
;
}
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
CHAR
;
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
IF
(
(
INT
)
)
(
,
,
(
INT
)
)
;
ELSE
(
,
,
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
(
,
,
(
)
,
(
)
,
(
)
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
,
;
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
FOR
(
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
}
(
)
;
}
VOID
(
CHAR
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
=
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
(
)
;
=
(
)
;
(
)
=
(
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
}
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
(
)
;
=
(
)
;
(
)
=
(
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
}
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
(
(
)
)
;
}
VOID
(
VOID
)
{
;
FLOAT
,
;
;
;
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
(
INT
)
(
)
)
)
{
(
)
=
;
RETURN
;
}
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
(
)
=
(
,
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
;
=
(
)
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
(
)
=
;
ELSE
{
(
,
)
;
(
,
)
;
=
(
INT
)
;
=
(
)
;
(
)
=
;
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
INT
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
{
(
,
,
(
)
)
;
(
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
IF
(
)
(
)
=
(
INT
)
(
)
;
ELSE
(
)
=
(
INT
)
(
)
;
}
VOID
(
VOID
)
{
(
)
=
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
=
(
(
)
)
;
}
VOID
(
VOID
)
{
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
WHILE
(
)
{
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
}
=
{
,
}
;
VOID
(
VOID
)
{
,
,
;
,
,
,
;
INT
,
;
;
FLOAT
,
;
FLOAT
;
CHAR
;
=
(
)
;
=
(
)
;
(
,
)
;
;
=
(
)
;
IF
(
)
{
=
(
,
)
;
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
}
(
,
)
;
(
,
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
(
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
=
;
(
)
;
(
,
(
)
)
;
}
ELSE
{
(
,
(
)
)
;
}
}
VOID
(
VOID
)
{
;
FLOAT
,
,
,
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
=
(
)
;
}
(
VOID
)
{
INT
;
INT
;
;
=
(
)
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
RETURN
;
CASE
RETURN
;
CASE
IF
(
)
(
)
;
RETURN
;
CASE
RETURN
;
DEFAULT
(
)
;
BREAK
;
}
RETURN
;
}
STATIC
(
VOID
)
{
INT
;
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
(
(
)
)
)
;
(
,
(
)
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
(
(
)
,
(
)
)
;
}
INT
(
CHAR
)
;
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
(
,
)
;
(
,
(
(
)
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
=
;
}
VOID
(
VOID
)
{
CHAR
;
STATIC
INT
;
IF
(
)
RETURN
;
=
;
=
(
)
;
(
(
,
)
)
;
}
VOID
(
VOID
)
{
,
;
INT
,
;
CHAR
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
RETURN
;
=
(
,
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
;
INT
;
CHAR
;
CHAR
;
STATIC
CHAR
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
(
=
(
,
)
)
)
=
(
,
)
;
}
ELSE
IF
(
)
{
IF
(
(
,
)
)
=
(
,
(
)
)
;
ELSE
IF
(
(
,
)
)
{
INT
=
(
)
;
(
,
,
)
;
=
;
}
ELSE
=
(
,
)
;
}
ELSE
=
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
INT
;
=
(
)
;
=
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
;
INT
=
(
)
(
)
;
__E__O__F__
;
;
CHAR
;
;
;
;
;
FLOAT
;
INT
;
INT
=
{
,
(
VOID
)
,
,
,
,
,
(
VOID
)
,
(
VOID
)
}
;
(
INT
)
;
(
VOID
,
,
CHAR
)
;
TYPEDEF
STRUCT
{
;
CHAR
;
}
;
STATIC
=
{
{
,
}
,
{
,
}
}
;
;
;
;
VOID
(
)
{
(
,
,
)
;
=
;
}
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
IF
(
)
{
(
)
;
;
=
(
)
;
(
)
;
}
ELSE
;
=
(
)
;
(
)
;
RETURN
;
}
VOID
(
)
{
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
}
(
INT
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
}
RETURN
;
}
(
INT
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
(
)
,
)
)
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
(
)
,
)
)
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
(
)
,
)
)
RETURN
;
}
RETURN
;
}
(
,
CHAR
)
{
=
;
INT
;
STATIC
INT
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
;
GOTO
;
}
}
=
(
)
;
IF
(
(
)
)
{
=
;
(
,
)
;
;
}
IF
(
)
RETURN
;
RETURN
(
)
(
(
CHAR
)
)
;
}
CHAR
(
,
)
{
STATIC
CHAR
;
;
;
;
SWITCH
(
)
{
CASE
(
,
,
(
)
)
;
BREAK
;
CASE
(
,
,
(
(
)
)
)
;
BREAK
;
CASE
=
;
(
,
,
(
)
)
;
BREAK
;
CASE
=
(
)
;
(
,
,
(
)
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
RETURN
;
}
CHAR
(
,
)
{
STATIC
CHAR
;
;
;
;
SWITCH
(
)
{
CASE
(
,
,
(
)
)
;
BREAK
;
CASE
(
,
,
(
(
)
)
)
;
BREAK
;
CASE
=
;
(
,
,
(
)
)
;
BREAK
;
CASE
=
(
)
;
(
,
,
(
)
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
,
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
RETURN
;
}
CHAR
(
INT
)
{
CHAR
;
INT
;
;
VOID
;
STATIC
CHAR
;
=
(
VOID
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
{
=
(
,
)
;
(
,
,
,
(
)
,
)
;
}
=
(
)
;
FOR
(
;
;
)
(
,
)
;
(
,
)
;
RETURN
;
}
CHAR
(
INT
)
{
INT
;
;
STATIC
CHAR
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
,
(
)
)
;
=
(
)
;
FOR
(
;
;
)
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
)
{
INT
;
;
INT
;
INT
,
;
CHAR
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
=
(
)
;
IF
(
(
)
)
CONTINUE
;
=
(
INT
)
(
(
CHAR
)
)
;
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
(
,
)
;
=
(
)
;
WHILE
(
)
(
)
;
(
,
(
,
(
)
)
)
;
}
}
VOID
(
,
)
{
;
INT
;
INT
,
;
CHAR
;
INT
;
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
=
(
)
;
IF
(
(
)
)
CONTINUE
;
=
(
INT
)
(
(
CHAR
)
)
;
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
(
,
(
)
)
)
;
}
(
,
)
;
}
VOID
(
INT
)
{
(
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
=
(
(
)
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
INT
,
,
,
;
=
=
=
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
;
INT
;
CHAR
;
INT
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
CONTINUE
;
;
IF
(
)
CONTINUE
;
=
(
)
;
(
,
,
)
;
(
,
,
(
,
(
)
)
)
;
}
(
,
)
;
}
VOID
(
CHAR
)
{
CHAR
;
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
)
;
(
,
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
CONTINUE
;
}
IF
(
(
(
VOID
)
,
,
)
)
(
)
;
}
}
CHAR
(
CHAR
)
{
CHAR
,
;
INT
,
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
}
RETURN
;
}
(
VOID
,
,
CHAR
)
{
INT
;
CHAR
;
;
CHAR
,
;
VOID
;
;
=
(
VOID
)
(
(
INT
)
)
;
SWITCH
(
)
{
CASE
(
)
=
(
(
)
)
;
BREAK
;
CASE
(
FLOAT
)
=
(
)
;
BREAK
;
CASE
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
WHILE
(
)
;
=
;
(
(
FLOAT
)
)
=
(
)
;
=
=
;
}
BREAK
;
CASE
(
INT
)
=
(
(
(
)
)
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
INT
)
=
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
=
;
BREAK
;
DEFAULT
BREAK
;
}
RETURN
;
}
CHAR
(
CHAR
,
)
{
;
;
;
CHAR
;
=
;
IF
(
)
(
,
,
)
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
)
;
IF
(
(
,
)
)
{
(
,
)
;
=
;
}
ELSE
=
;
IF
(
(
,
)
)
(
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
IF
(
)
CONTINUE
;
=
(
)
;
IF
(
)
{
(
,
)
;
CONTINUE
;
}
IF
(
)
{
CHAR
;
(
,
)
;
(
,
,
)
;
}
IF
(
(
(
VOID
)
,
,
)
)
(
)
;
}
IF
(
)
=
;
RETURN
;
}
VOID
(
CHAR
)
{
;
INT
;
;
=
;
=
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
,
)
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
=
(
,
)
;
IF
(
(
(
INT
)
)
)
{
(
)
;
;
CONTINUE
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
CONTINUE
;
}
=
(
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
CONTINUE
;
}
=
(
)
;
(
)
;
(
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
FOR
(
=
;
;
)
=
;
=
(
)
(
)
;
IF
(
)
=
(
)
(
)
;
IF
(
)
(
)
;
(
,
)
;
(
,
,
(
(
)
,
)
)
;
(
,
,
,
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
)
;
=
(
)
(
(
)
)
;
=
(
CHAR
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
=
;
=
(
)
(
(
)
)
;
=
(
FLOAT
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
=
=
=
;
IF
(
(
=
(
)
)
)
=
(
)
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
INT
)
{
IF
(
)
(
,
)
;
RETURN
(
)
(
(
)
(
)
)
;
}
INT
(
)
{
INT
;
=
(
)
(
)
;
=
;
IF
(
)
(
)
;
RETURN
;
}
__E__O__F__
TYPEDEF
STRUCT
{
INT
;
;
}
;
;
INT
;
INT
;
INT
;
;
;
INT
;
INT
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
(
INT
)
;
CHAR
(
INT
)
;
VOID
(
)
{
INT
;
IF
(
(
UNSIGNED
)
(
)
(
)
)
{
(
,
)
;
=
(
)
;
FOR
(
;
;
)
(
)
;
}
IF
(
)
(
,
(
)
,
)
;
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
(
UNSIGNED
)
(
)
)
{
(
,
(
)
)
;
(
,
(
)
)
;
}
ELSE
{
IF
(
)
(
,
(
)
)
;
IF
(
)
(
,
(
)
)
;
IF
(
)
(
,
(
)
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
)
;
}
ELSE
(
,
(
)
,
(
)
)
;
}
}
VOID
(
VOID
)
{
,
;
INT
;
INT
;
INT
;
=
;
DO
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
IF
(
)
(
,
,
(
)
)
;
;
=
;
}
}
WHILE
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
(
)
;
}
INT
(
)
{
INT
,
,
,
;
=
;
=
;
;
IF
(
)
(
)
;
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
(
(
INT
)
)
;
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
(
INT
)
)
=
(
(
INT
)
)
;
;
}
}
=
;
RETURN
;
}
INT
(
VOID
)
{
INT
,
;
IF
(
)
(
)
;
=
;
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
(
(
INT
)
)
=
;
;
=
;
RETURN
;
}
VOID
(
)
{
,
,
;
INT
;
;
,
;
INT
;
INT
;
;
INT
;
;
IF
(
)
{
IF
(
)
(
(
)
)
;
(
)
;
}
=
;
=
;
=
;
=
;
=
(
)
;
WHILE
(
)
{
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
;
=
;
IF
(
)
(
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
INT
)
(
INT
)
;
BREAK
;
CASE
=
(
INT
)
(
INT
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
(
)
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
)
(
)
(
)
;
BREAK
;
CASE
=
(
(
)
,
(
)
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
)
(
)
(
)
;
BREAK
;
CASE
=
(
(
)
,
(
)
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
=
(
)
(
(
)
)
;
=
;
BREAK
;
CASE
=
(
)
(
(
)
)
;
=
;
=
;
=
;
BREAK
;
CASE
=
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
(
(
INT
)
)
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
=
(
)
;
(
)
;
=
(
)
(
(
INT
)
)
;
=
;
BREAK
;
CASE
=
(
)
;
(
)
;
=
(
)
(
(
INT
)
)
;
=
;
=
;
=
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
CASE
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
IF
(
)
(
)
;
(
)
;
BREAK
;
}
=
(
)
;
BREAK
;
CASE
CASE
=
;
=
;
=
;
=
(
)
;
IF
(
)
RETURN
;
BREAK
;
CASE
=
(
)
;
=
;
IF
(
)
{
=
;
}
=
;
BREAK
;
DEFAULT
(
,
)
;
}
}
}
CHAR
;
INT
;
CHAR
(
INT
)
{
IF
(
)
{
RETURN
;
}
RETURN
;
}
INT
(
CHAR
)
{
INT
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
;
=
;
RETURN
;
}
RETURN
(
INT
)
(
)
;
}
__E__O__F__
;
INT
=
,
=
,
=
;
CHAR
=
{
}
;
EXTERN
;
EXTERN
;
VOID
(
VOID
)
{
CHAR
;
INT
;
(
,
,
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
(
(
)
,
)
(
(
)
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
=
(
)
;
(
,
(
)
)
;
(
)
;
=
;
=
;
(
,
,
)
;
}
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
)
{
(
)
;
(
)
;
=
;
RETURN
;
}
(
,
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
{
(
)
;
(
)
;
=
;
RETURN
;
}
FOR
(
=
;
;
)
{
(
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
BREAK
;
}
(
)
;
}
IF
(
)
{
(
)
;
=
;
RETURN
;
}
(
,
)
;
}
(
VOID
)
{
;
INT
;
INT
;
=
(
(
)
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
=
;
RETURN
;
}
}
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
=
(
INT
)
;
IF
(
(
(
INT
)
)
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
;
(
,
,
)
;
}
ELSE
{
=
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
=
(
)
;
=
(
(
)
)
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
(
INT
)
(
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
(
)
)
;
IF
(
(
,
)
)
{
(
,
)
;
(
,
)
;
}
(
,
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
=
(
(
)
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
;
FLOAT
,
,
;
CHAR
;
=
(
)
;
IF
(
)
=
;
=
;
=
(
FLOAT
)
;
(
,
(
)
)
;
(
,
(
INT
)
)
;
(
,
(
INT
)
)
;
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
)
;
(
,
,
(
INT
)
)
;
IF
(
)
(
)
;
ELSE
(
)
;
=
(
)
;
(
,
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
IF
(
)
{
(
)
;
CONTINUE
;
}
(
,
(
INT
)
(
)
,
(
INT
)
(
)
,
)
;
}
}
ELSE
{
(
)
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
(
INT
)
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
IF
(
)
{
(
)
;
CONTINUE
;
}
(
,
(
INT
)
(
)
,
(
INT
)
(
)
,
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
CHAR
;
CHAR
;
IF
(
(
)
)
RETURN
;
(
,
)
;
=
(
)
;
IF
(
)
{
;
(
)
=
;
}
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
CHAR
,
CHAR
)
{
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
}
CHAR
(
CHAR
)
;
VOID
(
VOID
)
{
;
IF
(
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
(
)
,
(
)
,
)
;
=
(
(
)
)
;
IF
(
)
{
(
)
;
=
(
(
)
)
;
=
(
)
;
}
(
(
)
,
(
)
)
;
}
CHAR
(
CHAR
)
;
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
(
)
)
{
(
,
(
,
)
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
(
,
)
(
,
)
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
(
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
IF
(
(
)
)
{
IF
(
)
{
(
,
,
,
)
;
RETURN
;
}
ELSE
(
)
;
}
IF
(
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
ELSE
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
}
CHAR
;
VOID
(
VOID
)
{
CHAR
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
(
,
)
(
,
)
(
,
)
(
,
)
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
,
,
)
;
}
VOID
(
INT
)
{
;
CHAR
;
CHAR
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
)
=
;
(
)
=
;
(
,
,
,
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
,
,
(
)
)
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
=
;
(
,
,
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
__E__O__F__
INT
;
;
VOID
(
,
)
{
INT
;
;
;
FLOAT
;
WHILE
(
)
{
IF
(
)
{
IF
(
)
{
=
(
(
)
,
)
;
FOR
(
=
;
;
)
;
}
RETURN
;
}
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
(
,
)
;
=
;
}
}
}
(
)
{
=
(
)
;
(
,
,
)
;
(
,
)
;
RETURN
;
}
;
INT
;
EXTERN
INT
,
,
;
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
;
RETURN
;
}
VOID
(
)
{
;
INT
,
;
;
INT
,
,
,
,
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
;
=
(
)
(
)
;
=
(
)
;
=
;
=
(
)
(
)
;
=
;
FOR
(
=
;
;
)
(
,
)
;
}
}
VOID
(
,
,
,
)
{
INT
;
INT
;
FLOAT
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
;
}
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
,
,
)
{
;
;
;
INT
,
;
INT
,
;
INT
;
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
}
ELSE
{
=
;
=
;
(
,
)
;
}
=
;
=
;
WHILE
(
)
{
=
;
=
;
IF
(
)
{
(
,
,
,
)
;
;
;
CONTINUE
;
}
IF
(
)
{
=
(
)
;
(
,
,
,
)
;
;
CONTINUE
;
}
IF
(
)
{
(
,
)
;
;
CONTINUE
;
}
}
(
,
)
;
}
VOID
(
,
,
,
)
{
INT
,
;
;
;
INT
;
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
(
)
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
BREAK
;
IF
(
)
CONTINUE
;
}
=
;
IF
(
)
;
FOR
(
=
;
;
)
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
{
;
}
ELSE
IF
(
)
{
(
)
;
IF
(
)
;
}
IF
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
=
;
(
,
)
;
}
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
}
=
;
=
;
(
,
,
)
;
}
FOR
(
=
;
;
)
IF
(
(
)
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
}
VOID
(
,
)
{
INT
,
;
;
;
;
;
;
;
;
=
;
=
;
(
,
,
)
;
=
(
)
;
(
,
,
,
)
;
=
;
=
;
=
;
FOR
(
=
,
=
(
)
;
;
,
=
(
)
)
{
IF
(
(
)
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
BREAK
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
}
(
,
,
)
;
(
)
;
}
__E__O__F__
;
;
CHAR
;
CHAR
;
INT
(
CHAR
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
=
;
=
;
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
)
;
(
,
)
;
=
;
=
;
IF
(
)
{
=
;
=
(
)
;
}
ELSE
{
=
;
=
(
(
)
)
;
}
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
RETURN
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
=
(
)
;
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
,
,
,
,
,
;
INT
;
UNSIGNED
,
;
;
INT
,
;
(
)
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
(
,
(
,
)
,
)
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
;
}
}
}
=
(
)
;
=
;
=
;
=
(
UNSIGNED
)
;
FOR
(
=
;
;
,
,
)
{
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
(
(
)
)
;
IF
(
)
CONTINUE
;
=
(
UNSIGNED
)
;
FOR
(
=
;
;
)
;
}
}
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
(
(
)
)
)
;
}
(
,
,
,
)
;
}
UNSIGNED
(
CHAR
)
{
;
;
UNSIGNED
SHORT
;
=
(
)
(
,
,
(
)
)
;
=
(
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
;
INT
;
(
,
)
;
(
)
;
;
=
;
(
)
;
(
)
;
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
(
,
)
;
(
)
;
=
(
,
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
}
=
;
(
,
)
;
(
,
,
)
;
=
(
,
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
}
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
,
,
,
)
;
(
)
;
}
__E__O__F__
;
;
DOUBLE
;
DOUBLE
;
INT
;
;
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
;
;
VOID
(
,
INT
,
CHAR
)
;
VOID
(
VOID
)
;
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
(
)
;
}
VOID
(
CHAR
,
)
{
;
STATIC
CHAR
;
STATIC
=
;
IF
(
)
(
,
)
;
=
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
(
,
)
)
;
(
)
;
(
,
)
;
}
VOID
(
CHAR
)
{
INT
;
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
(
,
,
)
;
}
VOID
(
)
{
(
,
)
;
IF
(
)
IF
(
)
{
=
(
)
;
(
)
;
}
ELSE
IF
(
)
{
=
(
)
;
(
)
;
}
IF
(
)
(
,
)
;
ELSE
(
,
)
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
(
,
)
;
}
INT
(
)
{
FLOAT
;
INT
;
INT
;
REGISTER
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
;
;
}
}
IF
(
)
RETURN
;
;
RETURN
;
}
VOID
(
,
)
{
INT
;
CHAR
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
,
)
{
(
,
(
)
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
INT
,
;
(
)
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
{
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
=
(
)
;
(
,
,
,
(
INT
)
(
)
,
,
,
(
,
)
,
,
)
;
}
}
(
)
;
}
VOID
(
VOID
)
{
;
=
;
IF
(
(
)
)
{
=
;
;
=
;
=
;
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
IF
(
(
)
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
{
=
;
(
,
,
)
;
RETURN
;
}
(
,
,
(
)
)
;
(
,
,
)
;
(
,
(
CHAR
)
(
(
)
)
)
;
(
(
)
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
(
(
)
)
(
)
;
=
;
=
;
=
;
}
(
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
STATIC
INT
;
;
INT
;
,
;
;
;
INT
;
CHAR
;
INT
,
;
;
INT
;
INT
;
INT
;
=
(
(
)
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
)
;
RETURN
;
}
=
(
(
)
)
;
=
(
(
)
)
;
(
,
(
)
,
(
)
)
;
(
)
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
)
BREAK
;
(
,
,
)
;
RETURN
;
}
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
,
)
;
IF
(
(
,
)
)
{
IF
(
(
,
)
(
,
)
)
{
(
,
(
)
)
;
(
,
,
)
;
RETURN
;
}
(
,
)
;
(
,
,
,
)
;
=
;
}
ELSE
{
=
(
,
)
;
IF
(
(
,
)
(
,
)
)
{
(
,
(
)
)
;
(
,
,
)
;
RETURN
;
}
=
;
(
,
)
;
}
=
;
;
=
;
(
,
,
(
)
)
;
=
;
IF
(
)
{
,
;
FOR
(
=
(
)
,
=
(
)
;
(
)
(
)
;
)
IF
(
)
=
;
}
ELSE
(
,
,
(
)
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
(
)
)
{
IF
(
)
{
(
,
(
)
)
;
;
RETURN
;
}
(
,
(
)
)
;
(
)
;
BREAK
;
}
}
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
;
ELSE
;
}
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
(
(
INT
)
)
(
(
INT
)
)
)
{
(
,
(
)
)
;
(
,
,
)
;
RETURN
;
}
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
(
)
;
FOR
(
=
;
;
)
=
;
=
;
=
;
(
)
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
;
}
INT
(
VOID
)
{
IF
(
(
)
)
RETURN
;
IF
(
(
(
)
,
)
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
IF
(
(
)
)
{
(
,
(
)
,
)
;
(
)
;
(
)
;
}
ELSE
{
(
,
(
)
,
)
;
(
)
;
=
;
FOR
(
=
;
(
)
;
)
{
(
,
(
)
)
;
(
,
)
;
}
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
IF
(
(
,
)
(
(
)
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
(
,
)
)
(
)
;
ELSE
(
,
(
)
,
)
;
}
TYPEDEF
STRUCT
{
UNSIGNED
;
UNSIGNED
;
}
;
;
INT
;
=
{
,
}
;
(
CHAR
,
)
{
CHAR
;
INT
,
;
;
;
FOR
(
=
;
;
)
{
=
;
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
WHILE
(
)
{
=
;
}
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
BREAK
;
;
}
=
(
UNSIGNED
)
;
=
(
UNSIGNED
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
;
}
IF
(
(
(
)
,
)
)
=
;
}
VOID
(
VOID
)
{
;
INT
,
;
IF
(
(
(
)
,
)
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
{
FOR
(
=
;
;
)
=
;
;
(
)
;
RETURN
;
}
(
,
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
;
(
)
;
FOR
(
=
;
;
)
{
(
UNSIGNED
)
=
;
(
,
,
,
,
)
;
}
}
VOID
(
VOID
)
{
;
CHAR
;
;
INT
;
(
,
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
(
UNSIGNED
)
=
;
(
,
,
,
,
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
=
=
=
;
=
;
=
;
(
,
)
;
(
(
)
,
,
)
;
}
(
VOID
)
{
INT
;
UNSIGNED
;
=
(
UNSIGNED
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
;
INT
;
=
;
WHILE
(
(
)
)
{
IF
(
(
)
)
{
(
)
;
CONTINUE
;
}
IF
(
(
INT
)
)
{
(
)
;
CONTINUE
;
}
(
)
;
(
)
;
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
=
;
}
IF
(
(
)
)
{
;
=
;
=
;
IF
(
)
(
)
;
}
BREAK
;
}
IF
(
)
CONTINUE
;
}
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
;
INT
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
IF
(
)
;
IF
(
)
{
(
,
,
)
;
(
)
;
=
;
}
}
IF
(
)
{
=
;
}
}
IF
(
)
{
(
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
(
)
;
}
}
VOID
(
VOID
)
{
STATIC
CHAR
,
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
IF
(
(
,
)
)
;
IF
(
(
,
)
)
;
(
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
(
,
)
,
)
;
}
VOID
(
FLOAT
)
{
STATIC
DOUBLE
,
;
=
(
)
;
;
(
)
;
IF
(
)
{
;
;
}
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
(
,
)
,
)
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
;
;
(
,
,
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
(
,
(
)
)
;
(
(
)
,
,
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
INT
;
(
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
(
,
(
)
)
;
(
(
)
,
,
)
;
}
}
VOID
(
)
{
CHAR
,
,
;
INT
;
;
INT
=
;
CHAR
;
=
(
,
)
;
(
,
,
(
)
)
;
(
)
=
;
FOR
(
=
;
(
)
;
)
;
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
{
FOR
(
=
;
;
=
)
;
=
;
}
FOR
(
=
(
)
;
(
)
;
)
;
=
;
IF
(
(
,
)
)
{
(
,
,
,
)
;
=
(
,
)
;
}
IF
(
(
,
)
)
{
(
,
,
,
)
;
=
(
,
)
;
}
WHILE
(
)
{
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
{
IF
(
(
)
(
)
)
(
)
=
;
=
;
IF
(
)
IF
(
)
=
;
ELSE
IF
(
)
=
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
,
)
;
}
ELSE
BREAK
;
}
IF
(
(
,
,
(
)
)
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
}
IF
(
)
(
,
,
,
)
;
}
(
,
,
(
)
)
;
=
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
=
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
(
,
)
;
}
(
)
;
(
)
;
=
;
}
VOID
(
)
{
(
,
)
;
(
)
;
(
)
;
IF
(
(
)
)
=
;
=
;
IF
(
)
(
,
(
FLOAT
)
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
(
)
;
(
)
;
=
;
(
)
;
(
,
(
)
)
;
(
,
,
(
)
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
__E__O__F__
INT
,
;
(
)
{
,
,
,
;
;
INT
,
;
FLOAT
,
;
(
,
,
)
;
(
,
,
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
GOTO
;
}
;
RETURN
;
;
=
;
=
=
(
)
;
=
=
(
)
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
=
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
=
;
=
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
}
;
RETURN
;
}
(
,
,
)
{
FLOAT
;
,
,
;
;
INT
;
;
(
,
)
;
(
,
,
)
;
IF
(
(
INT
)
(
)
)
{
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
;
IF
(
)
;
}
=
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
(
(
INT
)
)
(
)
)
RETURN
;
(
,
)
;
IF
(
)
(
,
)
;
RETURN
;
}
IF
(
)
BREAK
;
}
RETURN
;
}
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
(
INT
)
)
{
(
,
,
)
;
IF
(
)
(
,
)
;
=
(
INT
)
;
RETURN
;
}
RETURN
;
}
(
,
)
;
IF
(
(
)
)
{
IF
(
(
INT
)
)
{
IF
(
)
(
,
)
;
RETURN
;
}
(
,
)
;
RETURN
;
}
IF
(
(
INT
)
)
{
=
(
INT
)
;
}
=
(
)
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
;
(
,
FLOAT
,
FLOAT
)
{
,
;
FLOAT
;
=
;
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
(
,
)
;
IF
(
(
,
,
)
)
{
=
;
IF
(
)
{
(
,
)
;
}
(
,
)
;
RETURN
;
}
(
,
)
;
RETURN
;
}
VOID
(
)
{
=
(
INT
)
;
}
VOID
(
,
,
FLOAT
)
{
FLOAT
,
;
FLOAT
;
FLOAT
,
,
;
=
(
(
INT
)
(
)
)
;
=
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
(
(
)
)
)
(
)
(
)
)
{
=
;
=
;
=
;
}
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
}
ELSE
{
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
(
)
)
(
)
;
}
(
,
,
FLOAT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
,
;
FLOAT
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
(
INT
)
(
)
)
)
{
(
)
=
;
RETURN
;
}
IF
(
(
)
(
,
,
)
)
RETURN
;
IF
(
(
(
)
)
(
,
,
)
)
{
(
,
,
)
;
}
}
__E__O__F__
VOID
(
,
INT
)
{
IF
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
=
;
=
;
=
(
)
;
=
;
;
}
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
=
;
RETURN
;
}
(
,
,
(
)
)
;
=
;
=
;
=
(
)
;
=
;
;
}
}
}
VOID
(
,
INT
,
INT
)
{
(
,
)
;
(
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
IF
(
)
{
(
,
,
)
;
=
;
}
}
}
VOID
(
,
FLOAT
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
FLOAT
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
INT
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
INT
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
FLOAT
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
FLOAT
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
INT
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
INT
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
CHAR
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
}
VOID
(
,
VOID
,
INT
)
{
IF
(
)
{
(
,
,
)
;
(
)
;
}
ELSE
(
,
,
)
;
}
__E__O__F__
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
VOID
(
)
;
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
(
)
;
}
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
(
,
(
)
)
;
=
;
}
IF
(
(
)
)
{
(
,
(
)
)
;
=
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
}
(
)
{
FLOAT
;
DO
{
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
IF
(
)
RETURN
;
}
WHILE
(
)
;
RETURN
;
}
VOID
(
,
)
{
INT
,
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
(
)
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
(
)
;
}
=
;
=
;
}
INT
(
,
,
,
FLOAT
)
{
FLOAT
;
FLOAT
;
INT
,
;
=
;
IF
(
)
;
IF
(
)
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
}
RETURN
;
}
INT
(
,
FLOAT
,
)
{
INT
,
;
;
FLOAT
;
INT
;
;
,
,
;
INT
,
;
;
;
FLOAT
;
INT
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
=
;
}
IF
(
)
BREAK
;
IF
(
)
(
)
;
IF
(
)
{
;
IF
(
)
{
=
(
INT
)
;
=
(
)
;
}
}
IF
(
)
{
;
IF
(
)
=
;
}
(
,
)
;
IF
(
)
BREAK
;
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
{
(
,
)
;
}
ELSE
{
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
RETURN
;
}
VOID
(
,
FLOAT
)
{
;
}
(
,
)
{
;
;
(
,
,
)
;
IF
(
)
=
(
,
,
,
,
,
)
;
ELSE
IF
(
)
=
(
,
,
,
,
,
)
;
ELSE
=
(
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
RETURN
;
}
(
,
)
{
INT
,
;
,
;
,
;
;
INT
;
;
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
,
)
;
(
,
,
)
;
(
,
)
;
=
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
=
(
)
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
(
(
INT
)
)
(
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
}
(
,
)
;
=
;
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
CONTINUE
;
}
(
,
,
)
;
=
(
)
;
IF
(
)
{
;
CONTINUE
;
}
IF
(
)
{
(
,
)
;
CONTINUE
;
}
IF
(
)
{
=
=
;
(
,
)
;
(
,
)
;
CONTINUE
;
}
(
,
)
;
(
,
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
(
)
;
}
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
RETURN
;
}
RETURN
;
}
VOID
(
,
FLOAT
)
{
INT
;
;
IF
(
)
{
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
IF
(
(
,
)
)
;
}
VOID
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
,
;
FLOAT
;
=
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
}
ELSE
=
;
IF
(
)
{
(
,
)
;
}
IF
(
)
{
(
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
}
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
IF
(
(
)
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
;
=
(
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
,
,
,
,
)
;
}
=
;
=
;
}
ELSE
{
IF
(
)
{
(
,
,
,
,
)
;
}
=
;
=
;
}
}
VOID
(
)
{
;
;
FLOAT
;
IF
(
(
)
)
RETURN
;
IF
(
)
=
(
INT
)
;
IF
(
(
(
INT
)
)
)
RETURN
;
(
)
;
IF
(
)
(
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
IF
(
)
{
IF
(
)
{
=
(
INT
)
;
=
(
)
;
(
,
)
;
(
,
)
;
}
}
(
)
;
}
VOID
(
)
{
;
IF
(
(
(
INT
)
(
)
)
)
{
IF
(
)
=
;
ELSE
=
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
)
;
IF
(
(
INT
)
)
{
IF
(
)
(
,
,
,
,
)
;
}
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
FLOAT
)
)
RETURN
;
=
(
FLOAT
)
;
SWITCH
(
(
INT
)
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
,
(
INT
)
)
;
}
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
STATIC
DOUBLE
;
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
=
;
=
;
(
)
;
=
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
(
,
)
;
IF
(
)
CONTINUE
;
(
)
;
(
)
;
}
IF
(
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
__E__O__F__
CHAR
;
;
EXTERN
;
VOID
(
VOID
)
{
CHAR
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
(
(
)
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
(
)
)
;
(
,
)
;
(
,
)
;
}
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
=
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
{
IF
(
(
)
(
)
(
)
)
(
)
;
(
,
)
;
RETURN
;
}
(
,
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
}
STATIC
VOID
(
,
INT
,
CHAR
)
{
(
,
,
(
)
)
;
(
,
)
;
(
,
)
;
}
VOID
(
,
INT
,
CHAR
,
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
INT
,
CHAR
,
)
{
;
CHAR
;
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
,
INT
)
{
;
;
;
INT
;
INT
;
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
SWITCH
(
)
{
CASE
=
;
CASE
=
;
BREAK
;
CASE
=
;
CASE
=
(
(
)
)
;
BREAK
;
CASE
=
;
CASE
=
(
(
)
)
;
BREAK
;
DEFAULT
=
;
(
,
)
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
;
(
,
,
)
;
IF
(
(
)
)
GOTO
;
}
=
(
,
)
;
IF
(
)
{
=
;
IF
(
(
(
(
)
)
)
)
{
CONTINUE
;
}
}
IF
(
)
{
(
,
)
;
(
,
,
)
;
}
ELSE
(
,
,
)
;
}
(
)
;
}
VOID
(
,
INT
,
CHAR
,
INT
,
FLOAT
)
{
INT
;
INT
;
INT
;
INT
;
;
;
=
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
)
;
IF
(
(
)
)
{
IF
(
)
=
;
=
;
;
}
ELSE
=
;
=
(
)
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
(
,
)
;
}
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
INT
,
,
;
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
IF
(
(
,
)
)
=
;
IF
(
(
,
)
)
=
;
IF
(
(
,
)
)
=
;
}
}
VOID
(
,
)
{
INT
;
;
;
=
;
IF
(
)
{
(
,
)
;
(
,
)
;
=
;
}
IF
(
)
{
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
(
)
)
;
=
;
=
;
}
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
=
;
}
}
VOID
(
)
{
;
INT
;
INT
;
=
;
(
,
,
(
)
)
;
IF
(
)
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
=
(
INT
)
(
(
INT
)
)
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
IF
(
)
{
(
,
,
)
;
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
)
;
(
,
)
;
}
}
}
(
)
{
;
;
=
;
=
(
)
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
,
)
;
(
)
;
IF
(
(
)
)
(
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
(
,
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
;
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
(
,
)
;
}
IF
(
)
{
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
)
;
(
,
)
;
}
=
;
}
=
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
}
=
(
,
)
;
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
}
}
IF
(
)
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
)
;
(
,
,
)
;
IF
(
)
CONTINUE
;
(
,
,
)
;
}
(
)
;
(
)
;
}
(
,
)
VOID
(
VOID
)
{
INT
,
;
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
=
;
CONTINUE
;
}
IF
(
)
{
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
;
}
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
=
;
=
(
)
;
}
}
}
IF
(
)
{
(
)
;
(
)
;
(
,
,
)
;
(
,
)
;
(
)
;
=
;
=
;
}
IF
(
)
CONTINUE
;
=
;
IF
(
(
)
)
{
;
CONTINUE
;
}
IF
(
)
(
)
;
ELSE
(
,
,
)
;
}
}
(
,
)
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
=
;
(
)
;
}
__E__O__F__
;
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
EXTERN
;
EXTERN
INT
,
,
;
EXTERN
CHAR
;
EXTERN
;
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
IF
(
)
{
(
,
,
)
;
=
;
(
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
,
)
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
=
;
(
)
;
}
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
,
)
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
=
;
(
)
;
}
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
,
)
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
UNSIGNED
;
UNSIGNED
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
=
;
IF
(
)
{
=
(
(
)
)
;
IF
(
)
{
(
,
,
,
,
,
,
)
;
(
)
;
RETURN
;
}
=
;
}
IF
(
)
{
(
,
,
)
;
=
;
(
)
;
}
(
,
,
)
;
;
IF
(
)
{
(
,
)
;
(
,
(
,
)
)
;
}
ELSE
{
(
,
)
;
(
,
(
,
,
)
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
FOR
(
=
,
=
;
;
,
)
(
,
)
;
FOR
(
=
;
;
)
{
(
,
,
(
(
)
)
)
;
(
,
(
CHAR
)
)
;
(
,
)
;
}
=
;
(
,
,
)
;
=
(
)
;
=
;
=
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
(
,
,
(
)
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
(
,
)
;
(
,
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
(
)
,
)
)
{
(
,
)
;
RETURN
;
}
}
}
VOID
(
VOID
)
{
UNSIGNED
=
,
=
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
(
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
(
)
=
;
=
;
=
(
)
;
(
)
;
}
}
ELSE
{
FOR
(
=
;
;
)
(
)
=
;
=
;
=
(
)
;
(
)
;
=
;
=
(
)
;
(
)
;
}
=
;
=
;
=
;
=
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
IF
(
)
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
)
;
(
,
,
)
;
}
=
(
(
)
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
=
(
,
,
,
)
;
(
,
,
)
;
(
,
)
;
;
=
;
IF
(
)
=
;
=
;
(
,
)
;
(
,
,
)
;
IF
(
)
RETURN
;
(
)
;
=
;
}
VOID
(
,
CHAR
,
)
{
;
CHAR
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
,
)
;
(
)
;
(
(
)
,
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
INT
;
INT
;
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
)
;
=
(
)
;
(
)
;
;
RETURN
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
(
,
)
;
=
;
RETURN
;
}
(
,
,
)
;
IF
(
)
(
,
,
,
)
;
}
(
,
,
,
)
;
;
(
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
)
;
}
ELSE
{
(
)
;
=
;
(
,
)
;
IF
(
)
{
CHAR
;
IF
(
(
=
(
,
)
)
)
;
ELSE
=
;
(
,
,
,
)
;
}
}
}
VOID
(
VOID
)
{
CHAR
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
INT
;
=
(
)
;
IF
(
(
,
)
(
(
,
,
)
)
(
(
,
,
)
)
(
(
,
,
)
)
(
(
,
,
)
)
(
,
)
)
{
(
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
IF
(
)
{
(
)
;
=
;
}
{
CHAR
;
FOR
(
=
;
;
)
=
(
CHAR
)
(
)
;
}
=
(
,
)
;
=
;
IF
(
(
(
,
,
)
)
)
{
IF
(
)
{
(
)
;
=
;
}
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
(
)
;
(
,
,
)
;
}
VOID
(
)
{
;
INT
,
;
CHAR
;
CHAR
;
CHAR
,
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
(
,
(
,
)
,
)
;
=
;
}
IF
(
(
)
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
{
(
,
,
)
;
}
IF
(
)
{
IF
(
)
{
(
,
,
,
(
INT
)
(
)
)
;
RETURN
;
}
=
;
IF
(
)
=
;
IF
(
(
)
)
{
=
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
RETURN
;
}
;
IF
(
)
=
;
=
;
}
=
(
)
;
IF
(
)
{
;
(
)
=
;
}
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
IF
(
)
CONTINUE
;
}
ELSE
{
=
(
,
)
;
IF
(
(
,
)
)
CONTINUE
;
}
}
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
(
)
;
(
)
;
}
VOID
(
CONST
CHAR
)
{
INT
;
;
;
IF
(
)
(
,
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
CHAR
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
,
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
;
}
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
{
(
,
,
,
(
INT
)
(
)
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
,
,
,
)
;
RETURN
;
}
=
(
(
)
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
IF
(
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
(
,
(
,
(
)
)
)
;
(
,
(
)
,
(
)
,
)
;
IF
(
(
(
,
(
)
)
,
)
)
RETURN
;
(
)
;
=
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
(
,
(
)
)
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
(
,
,
)
;
}
}
TYPEDEF
STRUCT
{
CHAR
;
VOID
(
)
(
VOID
)
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
VOID
(
CHAR
)
{
;
(
)
;
=
;
(
)
;
FOR
(
=
;
;
)
IF
(
(
(
)
,
)
)
{
(
)
;
BREAK
;
}
IF
(
)
(
,
(
)
)
;
(
)
;
}
FLOAT
(
,
)
{
,
,
;
FLOAT
;
FLOAT
;
FLOAT
;
(
,
,
,
)
;
=
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
,
;
VOID
(
)
{
,
;
;
INT
;
INT
;
;
=
(
)
;
FOR
(
=
;
;
=
)
{
=
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
=
;
;
(
,
)
;
=
(
)
;
IF
(
)
=
(
INT
)
(
)
;
ELSE
{
=
;
(
,
)
;
(
,
)
;
}
}
}
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
;
INT
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
=
;
(
,
)
;
=
;
IF
(
)
=
(
INT
)
(
)
;
ELSE
{
=
;
(
,
)
;
(
,
)
;
}
IF
(
)
BREAK
;
}
}
}
(
)
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
VOID
(
)
{
;
INT
,
;
INT
;
=
;
IF
(
)
{
=
;
=
;
(
)
;
=
;
=
;
(
)
;
RETURN
;
}
IF
(
)
(
,
)
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
=
(
,
)
;
}
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
(
)
;
(
)
;
(
)
;
}
FOR
(
=
;
;
)
=
(
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
(
)
;
{
INT
,
;
=
(
)
;
(
)
;
=
(
)
;
IF
(
)
(
,
)
;
}
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
INT
)
;
=
(
(
)
)
;
}
ELSE
=
(
INT
)
;
FOR
(
=
;
;
)
=
(
)
;
FOR
(
=
;
;
)
=
(
INT
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
IF
(
(
(
(
)
)
)
)
CONTINUE
;
=
(
)
;
=
(
)
;
(
)
;
(
)
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
(
)
;
(
)
;
(
)
;
}
ELSE
IF
(
)
{
=
;
=
(
)
;
(
)
;
}
}
VOID
(
)
{
INT
;
CHAR
;
,
,
;
;
;
=
;
INT
;
,
;
INT
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
BREAK
;
SWITCH
(
)
{
DEFAULT
(
)
;
(
)
;
RETURN
;
CASE
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
IF
(
)
RETURN
;
=
;
=
(
)
;
=
(
)
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
BREAK
;
=
(
,
(
)
,
)
;
IF
(
)
{
(
,
,
,
,
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
WHILE
(
)
{
(
)
;
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
(
)
;
(
)
;
}
=
;
=
;
BREAK
;
CASE
=
(
)
;
(
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
(
)
;
BREAK
;
}
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
(
)
(
)
=
{
,
}
;
=
{
,
}
;
;
INT
(
CHAR
)
{
STRUCT
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
)
{
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
,
,
(
)
)
;
}
DOUBLE
(
VOID
)
{
STRUCT
;
STRUCT
;
STATIC
INT
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
RETURN
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
STATIC
CHAR
;
UNSIGNED
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
RETURN
;
FOR
(
=
(
UNSIGNED
CHAR
)
;
;
)
{
;
IF
(
(
)
)
(
,
)
;
ELSE
(
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
STATIC
INT
=
;
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
INT
,
CHAR
)
{
DOUBLE
,
,
;
;
;
EXTERN
INT
;
STRUCT
;
INT
;
(
,
,
(
)
)
;
(
,
)
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
(
INT
)
(
(
)
)
;
IF
(
(
=
(
)
)
)
(
,
)
;
=
;
(
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
=
;
IF
(
(
,
,
,
,
)
)
CONTINUE
;
=
(
,
)
;
=
(
)
;
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
}
__E__O__F__
=
{
,
}
;
INT
(
CHAR
)
{
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
CHAR
)
{
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
)
;
}
DOUBLE
(
VOID
)
{
DOUBLE
;
STRUCT
;
STATIC
INT
;
(
)
;
IF
(
)
=
;
=
(
)
;
RETURN
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
STATIC
INT
;
INT
;
WHILE
(
(
)
)
{
=
(
)
;
(
)
;
IF
(
)
{
=
;
(
)
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
;
=
;
}
CONTINUE
;
}
=
;
;
=
;
IF
(
(
)
)
=
;
}
RETURN
;
}
VOID
(
CHAR
,
)
{
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
CHAR
;
INT
(
INT
,
CHAR
)
{
;
DOUBLE
,
,
;
STATIC
CHAR
;
STRUCT
;
;
INT
;
(
,
)
;
=
;
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
(
)
;
(
,
)
;
=
;
=
;
IF
(
(
,
,
,
,
)
)
CONTINUE
;
=
(
)
;
=
;
=
;
(
)
;
}
RETURN
;
}
__E__O__F__
TYPEDEF
STRUCT
{
,
;
FLOAT
,
;
,
;
FLOAT
,
;
;
INT
;
;
}
;
INT
(
,
INT
,
)
;
STATIC
;
STATIC
;
STATIC
;
VOID
(
VOID
)
{
INT
;
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
}
}
(
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
(
,
,
,
)
{
;
;
,
;
;
IF
(
)
{
IF
(
)
(
)
;
=
(
INT
)
;
IF
(
)
(
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
(
,
)
;
}
RETURN
;
}
;
INT
;
(
INT
,
,
)
{
;
;
,
,
,
;
=
;
;
(
)
;
(
)
;
IF
(
)
{
=
;
=
=
;
RETURN
;
}
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
=
;
=
(
,
,
)
;
=
(
,
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
(
)
)
;
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
=
=
;
}
VOID
(
,
)
{
,
;
;
INT
,
;
FOR
(
=
;
;
=
)
{
=
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
(
)
;
=
;
=
;
}
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
,
)
{
;
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
,
)
{
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
INT
)
)
{
;
;
;
;
}
ELSE
{
;
;
;
;
;
;
}
=
;
IF
(
)
(
,
)
;
IF
(
)
RETURN
;
=
;
WHILE
(
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
BREAK
;
}
IF
(
)
(
,
)
;
ELSE
(
,
)
;
IF
(
)
(
,
)
;
}
INT
(
,
INT
,
)
{
FLOAT
;
;
;
WHILE
(
)
{
IF
(
)
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
INT
(
)
{
RETURN
(
,
,
)
;
}
(
)
{
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
(
)
(
,
INT
,
FLOAT
,
FLOAT
,
,
,
)
{
;
;
FLOAT
,
;
FLOAT
;
INT
;
;
INT
;
FLOAT
;
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
RETURN
;
}
IF
(
)
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
,
)
;
=
(
,
)
;
}
IF
(
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
=
(
)
(
)
;
ELSE
=
(
)
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
IF
(
(
,
,
,
,
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
{
(
,
,
)
;
=
;
}
WHILE
(
(
,
,
)
)
{
;
IF
(
)
{
=
;
(
,
)
;
(
)
;
RETURN
;
}
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
=
;
(
,
)
;
RETURN
;
}
(
,
,
,
,
)
{
;
;
,
;
;
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
=
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
=
;
RETURN
;
}
VOID
(
,
)
{
,
;
;
;
FOR
(
=
;
;
=
)
{
=
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
}
IF
(
(
INT
)
)
=
(
,
,
,
,
)
;
ELSE
=
(
,
,
,
,
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
}
ELSE
IF
(
)
=
;
}
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
,
,
,
,
,
)
{
=
=
=
;
=
=
=
;
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
}
(
,
,
,
,
INT
,
)
{
;
INT
;
(
,
,
(
)
)
;
=
(
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
}
}
ELSE
{
(
,
)
;
(
,
)
;
}
(
,
,
,
,
,
)
;
(
,
)
;
RETURN
;
}
(
,
)
{
;
;
,
;
;
INT
;
=
;
IF
(
(
,
,
)
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
(
,
,
,
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
RETURN
;
}
RETURN
;
}
__E__O__F__
EXTERN
;
(
)
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
STRUCT
{
CHAR
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
INT
;
}
;
STRUCT
{
CHAR
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
INT
;
}
;
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
SHORT
;
CHAR
;
UNION
{
STRUCT
;
STRUCT
;
STRUCT
;
}
;
}
;
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
}
;
STRUCT
{
CHAR
;
INT
;
}
;
STRUCT
{
CHAR
;
CHAR
;
}
;
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
INT
;
}
;
STRUCT
{
CHAR
;
CHAR
;
INT
;
CHAR
;
}
;
STRUCT
{
CHAR
;
SHORT
;
INT
;
INT
;
}
;
STRUCT
{
CHAR
;
}
;
UNION
{
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
}
;
(
)
TYPEDEF
STRUCT
{
INT
;
INT
;
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
;
;
;
}
;
STATIC
STRUCT
;
STATIC
UNION
;
STATIC
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
SHORT
;
STATIC
SHORT
;
STATIC
SHORT
;
STATIC
SHORT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
(
INT
)
{
;
;
;
=
(
)
;
=
(
)
;
=
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
STATIC
INT
(
,
INT
)
{
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
RETURN
(
)
;
}
STATIC
INT
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
{
=
(
)
(
)
;
IF
(
)
=
(
)
(
)
;
}
}
RETURN
;
}
STATIC
INT
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
STATIC
INT
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
STRUCT
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
}
VOID
(
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
}
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
INT
)
(
)
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
)
;
=
;
}
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
,
)
;
=
;
=
;
RETURN
;
}
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
(
)
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
FOR
(
=
;
;
)
{
=
(
,
)
;
(
,
,
,
(
)
,
(
)
)
;
}
IF
(
)
(
,
,
)
;
(
,
)
;
(
)
;
(
,
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
STATIC
DOUBLE
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
)
{
STATIC
DOUBLE
;
IF
(
(
)
)
RETURN
;
=
;
=
(
)
;
IF
(
)
{
(
)
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
}
=
(
INT
)
(
)
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
)
;
=
;
}
(
)
;
}
IF
(
)
{
(
)
;
IF
(
(
)
)
{
=
;
IF
(
)
(
,
)
;
}
}
}
INT
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
(
STRUCT
)
(
UNION
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
STRUCT
)
;
=
(
)
;
=
(
)
;
=
(
UNION
)
(
(
STRUCT
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
IF
(
(
)
)
{
(
)
;
=
;
}
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
}
__E__O__F__
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
FLOAT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
=
;
STATIC
CHAR
=
;
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
}
STATIC
INT
(
VOID
)
{
STRUCT
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
VOID
(
,
)
{
STRUCT
;
STRUCT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
}
=
;
=
;
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
(
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
(
,
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
STRUCT
;
STATIC
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
(
)
;
}
ELSE
{
(
,
)
;
=
;
(
)
;
}
}
IF
(
(
)
)
{
=
(
)
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
(
,
)
;
}
}
}
INT
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
(
=
(
)
)
)
{
(
,
,
(
)
)
;
(
)
=
;
}
IF
(
(
=
(
,
)
)
)
{
(
,
,
)
;
=
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
=
;
}
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
=
;
}
__E__O__F__
VOID
(
,
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
__E__O__F__
EXTERN
;
EXTERN
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
FLOAT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
;
STATIC
VOID
(
VOID
)
{
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
}
STATIC
INT
(
VOID
)
{
;
;
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
VOID
(
,
)
{
;
;
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
}
=
(
,
,
,
)
;
=
(
)
;
=
(
)
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
=
(
,
,
,
(
)
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
,
,
,
)
;
=
(
,
,
,
)
;
=
(
)
;
=
(
,
,
,
(
)
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
(
(
)
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
(
)
(
(
)
)
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
)
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
(
,
)
)
{
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
(
,
)
;
RETURN
;
}
}
(
,
,
,
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
IF
(
)
(
,
)
;
}
BREAK
;
CASE
CASE
BREAK
;
CASE
(
)
;
(
)
;
=
;
BREAK
;
DEFAULT
(
,
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
(
)
;
}
ELSE
{
(
,
)
;
=
;
(
)
;
}
}
}
INT
(
VOID
)
{
;
;
;
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
IF
(
=
(
,
,
,
(
)
(
)
)
)
{
(
,
)
;
(
,
,
,
(
)
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
=
;
}
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
(
,
,
,
(
)
)
)
(
)
;
}
__E__O__F__
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
;
;
;
;
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
,
,
)
{
;
(
,
,
(
)
)
;
(
,
,
,
,
,
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
;
,
,
;
,
;
(
,
,
,
)
;
FOR
(
=
;
;
)
=
;
=
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
=
;
=
(
)
;
(
,
)
;
}
__E__O__F__
VOID
(
VOID
)
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
FLOAT
;
=
(
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
,
)
;
}
(
,
,
,
)
;
(
)
;
}
INT
(
VOID
)
{
INT
,
;
FLOAT
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
RETURN
;
}
}
(
,
,
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
(
,
,
,
)
;
=
(
)
;
}
=
(
)
;
IF
(
)
(
)
;
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
;
}
WHILE
(
)
{
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
ELSE
BREAK
;
}
IF
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
)
;
(
)
;
(
)
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
}
ELSE
=
;
(
,
,
,
(
)
)
;
IF
(
)
(
(
,
(
)
)
,
)
;
(
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
=
;
=
;
=
;
WHILE
(
(
=
(
)
)
)
IF
(
)
=
;
ELSE
=
(
)
;
IF
(
)
=
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
=
;
=
;
}
__E__O__F__
,
;
,
,
,
;
,
,
,
;
,
,
,
,
;
,
;
INT
;
VOID
(
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
;
}
VOID
(
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
{
=
=
;
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
;
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
=
(
(
)
)
;
}
FLOAT
(
)
{
FLOAT
;
,
,
;
=
;
=
;
=
;
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
;
RETURN
;
}
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
VOID
(
VOID
)
{
FLOAT
;
FLOAT
,
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
{
(
)
;
(
)
;
=
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
=
(
)
;
=
(
)
;
;
;
IF
(
)
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
}
IF
(
)
{
;
;
;
}
=
;
}
VOID
(
)
{
INT
;
INT
;
;
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
;
;
IF
(
)
;
;
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
;
;
;
;
;
;
;
INT
;
;
VOID
(
VOID
)
{
INT
;
IF
(
)
(
)
;
(
,
,
(
)
)
;
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
IF
(
)
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
=
;
IF
(
)
(
)
;
}
=
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
(
)
;
}
VOID
(
CHAR
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
=
(
)
;
IF
(
)
(
)
;
(
,
)
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
(
,
)
;
SWITCH
(
)
{
CASE
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
(
,
)
)
;
(
,
)
;
(
,
(
,
(
(
INT
)
)
,
(
(
INT
)
)
)
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
VOID
(
VOID
)
{
CHAR
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
=
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
}
(
,
,
)
;
(
)
;
;
}
VOID
(
VOID
)
{
;
INT
;
FOR
(
=
,
=
;
;
,
)
{
(
,
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
(
,
,
,
,
,
,
,
,
)
;
}
}
VOID
(
INT
)
{
STATIC
INT
;
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
(
)
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
(
)
;
}
}
(
INT
)
{
INT
;
;
IF
(
)
{
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
}
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
,
(
)
)
;
=
;
RETURN
;
}
}
=
;
(
,
,
(
)
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
;
IF
(
)
=
;
}
}
FLOAT
(
VOID
)
{
FLOAT
,
;
=
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
}
=
(
)
;
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
=
;
}
ELSE
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
=
;
}
ELSE
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
INT
,
;
FLOAT
,
,
;
;
FLOAT
;
;
;
=
(
)
;
=
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
;
ELSE
IF
(
)
;
=
;
}
}
=
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
IF
(
)
(
)
;
CONTINUE
;
}
IF
(
)
{
=
;
CONTINUE
;
}
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
;
ELSE
IF
(
)
;
=
;
}
}
IF
(
)
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
{
,
,
;
=
(
)
;
(
,
)
;
;
(
,
,
,
)
;
(
,
,
,
)
;
=
(
(
)
)
;
=
;
=
;
}
IF
(
)
{
=
(
)
;
(
,
)
;
;
=
(
(
)
)
;
=
;
}
IF
(
)
{
=
(
)
;
(
,
)
;
=
(
(
)
)
;
=
;
}
IF
(
)
{
=
(
)
;
(
,
)
;
=
(
(
)
)
;
=
;
=
;
}
IF
(
)
{
=
(
)
;
(
,
)
;
=
;
=
;
}
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
{
(
,
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
}
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
;
}
}
}
INT
(
VOID
)
{
INT
;
=
;
;
DO
{
=
(
)
;
IF
(
)
(
)
;
IF
(
)
BREAK
;
=
;
(
)
;
}
WHILE
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
(
INT
)
{
IF
(
)
{
IF
(
)
(
,
)
;
WHILE
(
)
{
=
;
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
;
INT
,
;
INT
;
INT
;
INT
;
FLOAT
;
INT
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
=
(
)
;
=
(
)
;
=
;
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
STATIC
FLOAT
;
INT
;
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
,
)
;
DO
{
=
(
)
;
SWITCH
(
)
{
DEFAULT
(
)
;
CASE
BREAK
;
CASE
(
)
;
BREAK
;
CASE
IF
(
(
)
)
(
)
;
BREAK
;
}
}
WHILE
(
)
;
=
;
(
,
,
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
,
;
CHAR
;
CHAR
;
(
)
;
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
(
)
,
)
;
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
(
,
,
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
)
;
}
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
)
;
}
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
;
}
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
)
;
}
(
)
;
=
=
;
(
)
;
(
)
;
=
;
}
INT
;
VOID
(
INT
)
{
INT
;
;
INT
;
;
;
INT
;
INT
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
(
)
;
(
)
;
}
IF
(
)
=
(
)
;
ELSE
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
{
=
(
)
;
IF
(
)
(
)
;
}
ELSE
=
;
=
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
=
(
FLOAT
)
(
(
)
)
;
ELSE
=
;
}
ELSE
=
;
IF
(
)
(
)
;
}
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
;
ELSE
{
IF
(
)
(
)
;
=
;
}
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
{
=
;
IF
(
)
(
)
;
}
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
(
,
)
;
(
,
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
}
VOID
(
)
{
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
INT
)
{
INT
,
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
(
)
;
ELSE
=
;
IF
(
(
)
)
=
(
)
;
ELSE
=
;
}
=
(
)
;
IF
(
)
{
(
)
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
(
(
)
)
)
=
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
=
(
)
;
ELSE
=
;
IF
(
)
{
=
;
(
)
;
}
=
(
)
;
IF
(
)
{
=
;
(
)
;
}
=
(
)
;
IF
(
)
{
=
;
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
{
=
;
(
)
;
}
}
=
(
)
;
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
}
ELSE
{
IF
(
(
)
)
{
=
(
)
;
(
)
;
}
}
}
VOID
(
INT
)
{
INT
,
;
INT
,
;
,
;
IF
(
)
(
)
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
(
)
;
(
)
;
FOR
(
=
;
;
,
,
)
{
IF
(
)
(
,
,
)
;
ELSE
FOR
(
=
;
;
)
=
;
IF
(
)
(
,
,
)
;
ELSE
FOR
(
=
;
;
)
=
;
}
}
VOID
(
VOID
)
{
;
INT
;
=
;
IF
(
)
(
)
;
=
;
;
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
,
,
;
INT
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
(
)
IF
(
)
(
,
,
)
;
VOID
(
VOID
)
{
INT
;
INT
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
)
;
=
;
(
)
;
WHILE
(
)
{
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
CONTINUE
;
}
(
)
;
SWITCH
(
)
{
DEFAULT
(
)
;
BREAK
;
CASE
BREAK
;
CASE
=
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
,
,
)
;
BREAK
;
CASE
(
)
;
CASE
(
,
(
)
)
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
CASE
(
(
)
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
CASE
FOR
(
=
;
;
)
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
)
;
(
,
(
)
)
;
=
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
(
)
;
(
,
)
;
BREAK
;
CASE
(
)
;
=
(
)
;
IF
(
)
(
)
;
(
,
(
)
)
;
BREAK
;
CASE
(
)
;
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
BREAK
;
CASE
(
)
;
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
(
)
;
(
(
)
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
{
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
}
}
BREAK
;
CASE
=
(
)
;
IF
(
)
(
,
,
)
;
=
;
(
)
;
BREAK
;
CASE
;
BREAK
;
CASE
;
BREAK
;
CASE
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
(
(
)
,
)
;
ELSE
(
(
)
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
(
(
)
)
;
BREAK
;
CASE
=
;
=
;
=
;
(
(
)
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
}
}
}
__E__O__F__
INT
;
;
;
;
;
;
;
;
;
;
;
;
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
)
{
INT
;
,
;
;
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
RETURN
;
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
RETURN
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
;
INT
;
INT
,
;
=
(
)
;
SWITCH
(
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
{
=
(
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
IF
(
(
)
)
(
,
,
,
,
,
)
;
ELSE
{
=
(
)
;
IF
(
)
(
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
)
;
}
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
(
(
,
)
)
;
BREAK
;
CASE
(
(
,
)
)
;
BREAK
;
CASE
(
(
,
)
)
;
BREAK
;
CASE
(
(
,
)
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
(
)
;
=
(
)
;
(
,
)
;
=
;
=
;
=
;
BREAK
;
DEFAULT
(
)
;
}
}
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
,
,
(
)
)
;
;
=
;
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
,
;
FLOAT
;
;
FLOAT
,
;
FLOAT
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
)
;
}
(
,
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
=
(
)
;
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
(
,
)
;
=
(
)
;
WHILE
(
)
{
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
=
;
=
;
=
;
=
(
)
;
FOR
(
=
;
;
)
;
;
}
}
}
__E__O__F__
VOID
(
VOID
)
;
TYPEDEF
STRUCT
{
STRUCT
;
CHAR
;
CHAR
;
}
;
;
INT
;
INT
;
;
VOID
(
VOID
)
{
=
;
}
;
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
}
VOID
(
CHAR
)
{
CHAR
;
INT
;
=
;
IF
(
)
{
=
(
)
;
(
,
,
)
;
(
)
;
}
ELSE
=
;
(
)
;
IF
(
)
{
(
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
CHAR
;
INT
;
WHILE
(
)
{
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
IF
(
(
)
)
BREAK
;
IF
(
)
BREAK
;
}
(
,
,
)
;
=
;
IF
(
)
=
;
ELSE
{
;
;
(
,
,
)
;
}
(
,
)
;
IF
(
)
{
=
;
BREAK
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
CHAR
,
,
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
)
;
}
IF
(
)
RETURN
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
)
;
IF
(
)
(
,
)
;
}
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
FOR
(
=
;
(
)
(
)
(
)
;
)
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
}
}
IF
(
)
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
CHAR
)
(
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
(
)
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
(
)
;
)
(
,
(
)
)
;
(
)
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
(
(
)
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
CHAR
;
INT
,
;
CHAR
;
IF
(
(
)
)
{
(
)
;
FOR
(
=
;
;
=
)
(
,
,
)
;
RETURN
;
}
=
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
)
;
BREAK
;
}
}
IF
(
)
{
=
(
(
)
)
;
=
;
=
;
}
(
,
)
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
IF
(
)
(
,
)
;
}
(
,
)
;
=
(
)
;
}
TYPEDEF
STRUCT
{
STRUCT
;
CHAR
;
;
}
;
STATIC
INT
;
STATIC
CHAR
;
STATIC
CHAR
=
;
STATIC
CHAR
=
;
;
STATIC
;
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
INT
(
VOID
)
{
RETURN
;
}
CHAR
(
INT
)
{
IF
(
(
UNSIGNED
)
)
RETURN
;
RETURN
;
}
CHAR
(
VOID
)
{
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
(
)
;
=
;
=
;
WHILE
(
)
{
WHILE
(
)
{
;
}
IF
(
)
{
;
BREAK
;
}
IF
(
)
RETURN
;
IF
(
)
=
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
;
}
}
}
VOID
(
CHAR
,
)
{
;
IF
(
)
(
)
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
=
(
(
)
)
;
=
;
=
;
=
;
=
;
}
(
CHAR
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
CHAR
(
CHAR
)
{
;
INT
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
,
)
{
;
;
=
;
(
)
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
}
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
}
IF
(
(
)
)
(
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
,
)
;
IF
(
(
(
)
,
)
)
{
(
,
(
)
)
;
(
,
)
;
}
IF
(
(
)
)
(
,
(
)
)
;
ELSE
(
,
)
;
}
INT
(
CHAR
)
{
INT
;
IF
(
)
(
)
;
FOR
(
=
;
(
)
;
)
IF
(
(
,
(
)
)
)
RETURN
;
RETURN
;
}
__E__O__F__
STATIC
CHAR
;
STATIC
CHAR
=
;
STATIC
CHAR
=
{
,
,
,
,
,
,
}
;
=
{
,
}
;
=
{
,
,
,
}
;
;
;
INT
=
;
=
;
VOID
(
VOID
)
;
CHAR
;
INT
;
CHAR
;
CHAR
;
=
,
,
;
UNSIGNED
SHORT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
)
{
=
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
=
;
}
VOID
(
VOID
,
INT
,
INT
)
{
INT
;
IF
(
(
(
(
LONG
)
)
)
)
{
;
=
(
)
(
)
(
)
;
FOR
(
=
;
;
)
(
(
INT
)
)
=
;
}
ELSE
FOR
(
=
;
;
)
(
(
)
)
=
;
}
VOID
(
VOID
,
VOID
,
INT
)
{
INT
;
IF
(
(
(
(
LONG
)
(
LONG
)
)
)
)
{
;
FOR
(
=
;
;
)
(
(
INT
)
)
=
(
(
INT
)
)
;
}
ELSE
FOR
(
=
;
;
)
(
(
)
)
=
(
(
)
)
;
}
INT
(
VOID
,
VOID
,
INT
)
{
WHILE
(
)
{
;
IF
(
(
(
)
)
(
(
)
)
)
RETURN
;
}
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
WHILE
(
)
{
=
;
}
=
;
}
VOID
(
CHAR
,
CHAR
,
INT
)
{
WHILE
(
)
{
=
;
}
IF
(
)
=
;
}
INT
(
CHAR
)
{
INT
;
=
;
WHILE
(
)
;
RETURN
;
}
CHAR
(
CHAR
,
CHAR
)
{
INT
=
(
)
;
;
WHILE
(
)
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
(
)
;
(
,
)
;
}
INT
(
CHAR
,
CHAR
)
{
WHILE
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
,
INT
)
{
WHILE
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
,
INT
)
{
INT
,
;
WHILE
(
)
{
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
RETURN
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
)
{
RETURN
(
,
,
)
;
}
INT
(
CHAR
)
{
INT
;
INT
;
INT
;
IF
(
)
{
=
;
;
}
ELSE
=
;
=
;
IF
(
(
)
)
{
;
WHILE
(
)
{
=
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
RETURN
;
}
}
IF
(
)
{
RETURN
;
}
WHILE
(
)
{
=
;
IF
(
)
RETURN
;
=
;
}
RETURN
;
}
FLOAT
(
CHAR
)
{
DOUBLE
;
INT
;
INT
;
INT
,
;
IF
(
)
{
=
;
;
}
ELSE
=
;
=
;
IF
(
(
)
)
{
;
WHILE
(
)
{
=
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
RETURN
;
}
}
IF
(
)
{
RETURN
;
}
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
{
=
;
CONTINUE
;
}
IF
(
)
BREAK
;
=
;
;
}
IF
(
)
RETURN
;
WHILE
(
)
{
;
;
}
RETURN
;
}
;
SHORT
(
)
(
SHORT
)
;
SHORT
(
)
(
SHORT
)
;
INT
(
)
(
INT
)
;
INT
(
)
(
INT
)
;
FLOAT
(
)
(
FLOAT
)
;
FLOAT
(
)
(
FLOAT
)
;
SHORT
(
SHORT
)
{
,
;
=
;
=
(
)
;
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
RETURN
;
}
INT
(
INT
)
{
,
,
,
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
(
(
INT
)
)
(
(
INT
)
)
(
(
INT
)
)
;
}
INT
(
INT
)
{
RETURN
;
}
FLOAT
(
FLOAT
)
{
UNION
{
FLOAT
;
;
}
,
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
FLOAT
(
FLOAT
)
{
RETURN
;
}
VOID
(
,
INT
)
{
;
IF
(
)
(
)
;
=
(
,
)
;
=
;
}
VOID
(
,
INT
)
{
;
IF
(
)
(
)
;
=
(
,
)
;
=
;
}
VOID
(
,
INT
)
{
;
IF
(
(
(
SHORT
)
)
(
SHORT
)
)
(
)
;
=
(
,
)
;
=
;
=
;
}
VOID
(
,
INT
)
{
;
=
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
,
FLOAT
)
{
UNION
{
FLOAT
;
INT
;
}
;
=
;
=
(
)
;
(
,
,
)
;
}
VOID
(
,
CHAR
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
)
)
;
}
VOID
(
,
FLOAT
)
{
(
,
(
INT
)
(
)
)
;
}
VOID
(
,
FLOAT
)
{
(
,
(
(
INT
)
)
)
;
}
INT
;
;
VOID
(
VOID
)
{
=
;
=
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
SIGNED
CHAR
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
UNSIGNED
CHAR
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
SHORT
)
(
(
)
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
(
)
(
)
;
;
RETURN
;
}
FLOAT
(
VOID
)
{
UNION
{
;
FLOAT
;
INT
;
}
;
=
;
=
;
=
;
=
;
;
=
(
)
;
RETURN
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
,
;
=
;
DO
{
=
(
)
;
IF
(
)
BREAK
;
=
;
;
}
WHILE
(
(
)
)
;
=
;
RETURN
;
}
FLOAT
(
VOID
)
{
RETURN
(
)
(
)
;
}
FLOAT
(
VOID
)
{
RETURN
(
)
(
)
;
}
VOID
(
,
INT
)
{
IF
(
)
=
;
=
(
,
)
;
=
;
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
VOID
(
,
INT
)
{
VOID
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
,
)
;
=
;
(
)
;
(
)
;
}
=
;
;
RETURN
;
}
VOID
(
,
VOID
,
INT
)
{
(
(
,
)
,
,
)
;
}
VOID
(
,
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
(
(
)
(
,
)
,
,
)
;
ELSE
(
(
)
(
,
)
,
,
)
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
;
WHILE
(
)
{
IF
(
)
=
;
;
}
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
WHILE
(
)
=
;
=
;
}
CHAR
(
CHAR
)
{
STATIC
CHAR
;
INT
;
WHILE
(
)
;
IF
(
)
RETURN
;
;
FOR
(
=
;
;
,
)
=
;
=
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
,
;
=
(
)
;
WHILE
(
)
;
FOR
(
=
;
;
)
;
IF
(
)
(
,
)
;
ELSE
{
;
(
,
,
)
;
=
;
}
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
)
{
IF
(
)
RETURN
;
;
}
(
,
)
;
}
CHAR
(
CHAR
)
{
INT
;
INT
;
=
;
=
;
IF
(
)
RETURN
;
WHILE
(
(
=
)
)
{
IF
(
)
RETURN
;
;
}
IF
(
)
{
WHILE
(
)
;
GOTO
;
}
IF
(
)
{
;
WHILE
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
;
}
}
IF
(
)
{
=
;
;
=
;
RETURN
;
}
DO
{
=
;
;
;
=
;
IF
(
)
BREAK
;
}
WHILE
(
)
;
=
;
RETURN
;
}
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
UNSIGNED
SHORT
;
INT
;
(
,
)
;
=
;
IF
(
)
{
(
)
;
(
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
(
)
;
FOR
(
=
;
;
)
IF
(
(
UNSIGNED
SHORT
)
(
)
)
(
)
;
(
,
)
;
(
,
)
;
=
;
(
)
;
}
VOID
(
VOID
)
;
VOID
(
INT
,
CHAR
)
{
;
INT
,
,
;
=
;
FOR
(
=
;
(
)
(
)
;
)
{
=
;
WHILE
(
(
(
)
)
)
{
=
;
}
IF
(
(
)
)
=
;
ELSE
BREAK
;
}
=
;
=
;
FOR
(
=
;
(
)
(
)
;
)
{
=
;
IF
(
(
,
)
)
=
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
;
}
}
=
;
=
;
IF
(
(
)
)
{
=
;
=
;
}
IF
(
(
)
)
{
=
;
=
;
}
}
VOID
(
CHAR
)
{
=
{
,
}
;
IF
(
(
SHORT
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
}
CHAR
(
CHAR
,
)
{
;
STATIC
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
INT
(
,
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
INT
;
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
CHAR
;
CHAR
;
TYPEDEF
STRUCT
{
CHAR
;
;
STRUCT
;
}
;
;
VOID
(
VOID
)
{
;
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
(
,
,
)
;
}
ELSE
(
,
)
;
}
}
VOID
(
CHAR
,
VOID
,
INT
)
{
INT
;
CHAR
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
CHAR
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
)
;
=
;
}
}
}
VOID
(
CHAR
,
CHAR
)
{
INT
,
;
INT
,
;
CHAR
;
=
(
,
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
,
,
)
;
(
,
,
)
;
;
}
(
)
;
(
)
;
}
INT
(
CHAR
,
INT
,
)
{
;
CHAR
;
CHAR
;
;
INT
;
INT
,
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
IF
(
)
{
IF
(
(
,
)
)
=
;
}
FOR
(
;
;
=
)
{
IF
(
)
{
=
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
(
,
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
ELSE
{
=
(
,
)
;
IF
(
)
(
,
,
)
;
}
=
;
RETURN
;
}
}
ELSE
{
IF
(
)
{
IF
(
(
,
)
(
,
)
)
CONTINUE
;
}
(
,
,
,
)
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
(
,
)
;
ELSE
{
(
)
IF
(
(
(
)
)
(
)
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
ELSE
{
(
)
;
=
(
,
)
;
}
RETURN
;
}
}
(
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
RETURN
;
}
INT
(
CHAR
,
INT
)
{
RETURN
(
,
,
)
;
}
INT
(
CHAR
,
)
{
RETURN
(
,
,
)
;
}
VOID
(
INT
)
{
;
FOR
(
=
;
;
=
)
IF
(
)
RETURN
;
(
)
;
}
;
;
INT
;
(
CHAR
,
INT
)
{
INT
;
;
CHAR
;
INT
;
=
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
=
(
,
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
,
,
)
;
ELSE
IF
(
)
{
IF
(
)
=
(
)
;
ELSE
=
;
}
ELSE
(
)
;
IF
(
)
(
,
)
;
(
(
)
)
=
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
RETURN
;
}
(
CHAR
)
{
RETURN
(
,
)
;
}
(
CHAR
)
{
RETURN
(
,
)
;
}
VOID
(
CHAR
,
STRUCT
)
{
=
;
(
,
)
;
}
(
CHAR
,
VOID
,
INT
)
{
;
=
(
)
;
=
;
=
(
,
)
;
RETURN
;
}
(
CHAR
)
{
;
INT
;
;
INT
;
;
INT
;
;
UNSIGNED
SHORT
;
IF
(
(
,
)
)
{
RETURN
;
}
(
,
(
VOID
)
,
(
)
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
=
;
=
(
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
)
;
(
)
;
FOR
(
=
;
;
)
(
,
(
(
)
)
)
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
(
,
)
;
=
(
)
;
=
(
)
;
}
=
(
(
)
)
;
(
,
)
;
=
;
=
;
=
;
(
,
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
;
;
CHAR
;
(
,
)
;
=
(
(
)
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
=
(
)
;
IF
(
)
BREAK
;
=
(
(
)
)
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
;
=
(
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
=
(
)
;
IF
(
)
{
IF
(
(
)
(
)
)
=
;
}
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
(
,
)
;
}
ELSE
IF
(
)
(
,
)
;
ELSE
=
;
(
(
,
)
)
;
IF
(
(
)
)
(
(
,
)
)
;
IF
(
(
)
)
(
(
,
)
)
;
=
(
)
;
IF
(
)
{
=
;
(
(
,
,
)
)
;
}
=
(
)
;
IF
(
)
{
=
;
=
;
WHILE
(
)
{
IF
(
)
BREAK
;
=
(
(
)
)
;
IF
(
(
(
)
,
)
)
{
=
(
)
;
IF
(
)
(
,
)
;
}
ELSE
(
,
)
;
=
;
=
;
}
}
IF
(
(
)
)
=
;
}
__E__O__F__
;
;
;
;
;
;
(
)
;
(
)
;
VOID
(
)
;
(
INT
)
;
(
INT
)
;
(
,
INT
,
INT
)
;
(
)
;
INT
(
CHAR
)
;
(
,
INT
,
INT
)
;
VOID
(
,
,
)
{
;
;
INT
,
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
(
)
,
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
(
)
{
INT
;
;
;
INT
,
;
=
;
=
;
WHILE
(
)
{
=
(
,
,
,
)
;
IF
(
)
BREAK
;
=
(
INT
)
(
)
;
IF
(
)
{
(
)
;
BREAK
;
}
SWITCH
(
)
{
CASE
=
(
(
)
(
)
)
;
BREAK
;
CASE
=
;
=
;
=
(
(
)
(
)
,
,
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
}
(
)
;
(
)
;
}
RETURN
;
}
(
)
{
;
=
(
,
,
,
,
)
;
RETURN
;
}
VOID
(
)
{
(
)
;
}
(
INT
)
{
;
;
=
(
,
)
;
IF
(
)
=
;
RETURN
;
}
(
INT
)
{
RETURN
(
,
,
)
;
}
(
,
INT
,
INT
)
{
;
;
;
=
;
=
;
=
(
,
,
(
)
,
,
)
;
IF
(
)
=
;
RETURN
;
}
(
)
{
;
;
CHAR
,
;
=
(
)
;
WHILE
(
)
{
IF
(
)
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
)
;
=
;
(
,
,
,
)
;
;
}
RETURN
;
}
INT
(
CHAR
)
{
CHAR
;
=
(
)
;
SWITCH
(
)
{
CASE
RETURN
;
DEFAULT
BREAK
;
}
IF
(
(
)
)
RETURN
(
)
;
IF
(
(
)
)
RETURN
(
)
;
RETURN
;
}
(
,
INT
,
INT
)
{
;
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
,
)
)
RETURN
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
(
,
)
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
(
,
)
)
RETURN
;
}
ELSE
IF
(
)
{
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
}
RETURN
;
}
__E__O__F__
INT
;
FLOAT
=
;
;
INT
;
INT
;
INT
;
INT
;
CHAR
=
;
=
{
,
}
;
FLOAT
;
INT
;
;
EXTERN
CHAR
;
EXTERN
INT
;
EXTERN
INT
;
;
INT
;
EXTERN
VOID
(
VOID
)
;
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
(
)
;
}
}
ELSE
=
;
(
)
;
(
,
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
}
EXTERN
;
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
,
;
CHAR
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
)
=
(
(
)
)
;
}
}
(
)
;
}
=
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
=
;
=
(
)
;
IF
(
)
{
IF
(
(
)
(
(
)
)
)
{
(
,
,
,
)
;
(
)
;
}
}
=
(
,
)
;
(
,
,
)
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
=
;
;
(
(
)
,
,
)
;
}
VOID
(
CHAR
)
{
INT
;
INT
,
;
STATIC
INT
;
INT
;
=
;
IF
(
)
{
=
;
(
)
;
;
}
ELSE
IF
(
)
{
=
;
;
}
ELSE
=
;
WHILE
(
(
=
)
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
(
)
)
=
;
;
IF
(
)
{
;
=
;
}
IF
(
)
{
(
)
;
IF
(
)
=
;
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
=
;
=
;
;
IF
(
)
=
;
BREAK
;
}
}
}
VOID
(
CHAR
,
CHAR
,
)
{
;
STATIC
CHAR
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
=
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
STATIC
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
IF
(
)
(
(
,
)
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
IF
(
)
{
=
;
(
)
;
=
;
}
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
=
;
=
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
;
IF
(
)
RETURN
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
;
)
=
;
IF
(
)
;
=
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
=
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
INT
;
FLOAT
;
EXTERN
CHAR
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
;
}
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
WHILE
(
)
{
(
(
)
,
,
)
;
;
}
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
;
}
IF
(
)
=
;
}
VOID
(
INT
,
)
{
INT
,
,
;
INT
;
CHAR
;
INT
;
IF
(
)
RETURN
;
(
)
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
,
)
{
=
;
IF
(
)
=
;
=
(
)
;
FOR
(
=
;
;
)
(
(
)
,
,
)
;
}
IF
(
)
(
)
;
}
VOID
(
CHAR
)
{
DOUBLE
,
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
DO
{
=
(
)
;
(
)
;
(
)
;
=
(
)
;
;
}
WHILE
(
)
;
(
)
;
=
;
=
;
}
__E__O__F__
STATIC
UNSIGNED
SHORT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
UNSIGNED
SHORT
)
{
=
;
}
VOID
(
UNSIGNED
SHORT
,
)
{
=
(
)
(
)
;
}
UNSIGNED
SHORT
(
UNSIGNED
SHORT
)
{
RETURN
;
}
__E__O__F__
;
CHAR
=
;
(
CHAR
)
{
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
FLOAT
(
CHAR
)
{
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
(
)
;
}
CHAR
(
CHAR
)
{
;
=
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
)
{
;
INT
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
;
;
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
,
)
;
(
)
;
=
(
(
)
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
}
}
VOID
(
CHAR
,
FLOAT
)
{
CHAR
;
(
,
,
)
;
(
,
)
;
}
VOID
(
)
{
CHAR
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
(
(
)
)
;
(
,
)
;
=
(
)
;
=
;
=
;
}
(
VOID
)
{
;
=
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
(
,
(
)
)
;
RETURN
;
}
VOID
(
)
{
;
FOR
(
=
;
;
=
)
IF
(
)
(
,
,
,
)
;
}
__E__O__F__
;
;
VOID
(
)
(
CHAR
,
)
;
STATIC
UNSIGNED
=
;
;
VOID
(
VOID
)
{
IF
(
)
{
IF
(
(
)
)
{
=
;
}
}
}
UNSIGNED
INT
(
VOID
)
{
(
)
;
RETURN
(
INT
)
;
}
VOID
(
UNSIGNED
INT
)
{
(
)
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
UNSIGNED
INT
)
{
RETURN
(
(
(
)
)
(
)
)
;
}
UNSIGNED
INT
(
VOID
)
{
RETURN
(
(
(
)
)
)
(
(
)
)
;
}
INT
(
INT
)
{
RETURN
(
)
;
}
INT
(
INT
)
{
RETURN
(
)
;
}
VOID
(
INT
,
INT
)
{
(
,
)
;
}
VOID
(
INT
,
INT
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
INT
(
INT
)
{
INT
;
=
=
;
=
(
,
(
)
)
;
RETURN
(
)
;
}
INT
(
INT
,
,
)
{
INT
;
(
,
,
(
)
)
;
=
=
;
=
(
,
(
)
)
;
RETURN
(
)
;
}
STATIC
;
VOID
(
INT
)
{
INT
;
;
STATIC
INT
=
;
INT
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
;
RETURN
(
(
INT
)
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
)
{
(
)
;
=
;
BREAK
;
}
}
STATIC
STRUCT
{
INT
;
;
}
;
STATIC
INT
=
;
VOID
(
INT
,
VOID
(
)
(
VOID
)
)
{
;
STRUCT
;
=
;
(
,
)
;
=
;
=
(
INT
)
;
(
)
;
(
,
)
;
;
}
VOID
(
INT
)
{
INT
;
STRUCT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
,
)
;
=
;
BREAK
;
}
}
}
VOID
(
INT
)
{
(
)
;
}
INT
(
VOID
)
{
RETURN
(
)
;
}
INT
(
VOID
,
INT
)
{
;
=
(
LONG
)
;
=
;
IF
(
(
)
)
RETURN
;
ELSE
RETURN
;
}
INT
(
VOID
,
INT
)
{
;
=
(
LONG
)
;
=
;
IF
(
(
)
)
RETURN
;
ELSE
RETURN
;
}
__E__O__F__
TYPEDEF
STRUCT
{
;
INT
;
INT
;
;
INT
;
}
;
STATIC
;
;
;
;
TYPEDEF
STRUCT
{
CHAR
;
;
}
;
;
INT
;
(
CHAR
)
{
RETURN
(
)
;
}
(
CHAR
)
{
;
INT
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
IF
(
)
(
)
;
;
(
,
)
;
}
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
}
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
;
;
UNSIGNED
SHORT
;
INT
;
INT
,
;
;
IF
(
)
RETURN
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
)
;
=
;
=
;
=
(
)
(
)
;
IF
(
)
{
=
;
;
=
;
}
ELSE
=
;
IF
(
)
{
=
;
WHILE
(
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
;
;
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
(
)
(
)
)
;
WHILE
(
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
;
(
)
;
}
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
CHAR
)
{
;
;
INT
;
EXTERN
;
INT
,
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
)
(
)
;
=
;
WHILE
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
;
}
}
VOID
(
INT
,
INT
,
)
{
,
;
UNSIGNED
SHORT
;
INT
,
;
IF
(
(
)
(
)
(
)
(
)
)
{
(
)
;
}
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
;
;
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
}
;
;
}
}
}
VOID
(
INT
,
INT
,
)
{
,
,
;
UNSIGNED
SHORT
;
INT
,
;
IF
(
(
UNSIGNED
)
(
)
(
UNSIGNED
)
(
)
)
{
(
)
;
}
=
;
IF
(
)
{
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
(
=
)
)
=
;
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
}
;
;
}
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
}
}
;
;
}
}
}
VOID
(
INT
,
INT
,
,
)
{
,
,
;
UNSIGNED
SHORT
;
INT
,
;
IF
(
(
UNSIGNED
)
(
)
(
UNSIGNED
)
(
)
)
{
(
)
;
}
=
;
IF
(
)
{
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
(
=
)
)
=
;
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
IF
(
(
=
)
)
=
;
}
;
;
}
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
}
}
;
;
}
}
}
VOID
(
INT
,
)
{
INT
,
;
;
INT
;
INT
;
=
;
=
;
=
(
)
(
)
;
=
;
WHILE
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
;
;
}
}
VOID
(
INT
)
{
INT
,
,
;
,
;
UNSIGNED
SHORT
;
INT
,
;
;
CHAR
;
=
(
)
;
(
,
,
(
FLOAT
)
)
;
=
(
)
;
(
)
(
,
,
(
FLOAT
)
,
(
FLOAT
)
)
;
=
(
)
;
(
)
(
,
,
(
FLOAT
)
,
(
FLOAT
)
)
;
=
(
)
;
=
;
(
,
,
)
;
FOR
(
=
;
(
)
;
)
(
,
(
)
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
IF
(
)
(
,
,
)
;
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
}
ELSE
{
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
,
(
)
)
{
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
}
VOID
(
,
INT
,
,
INT
)
{
;
INT
,
,
,
;
;
=
(
)
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
}
;
;
}
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
(
,
,
)
;
;
;
}
}
}
VOID
(
,
INT
,
,
INT
)
{
;
INT
,
,
,
;
UNSIGNED
SHORT
;
=
(
UNSIGNED
SHORT
)
(
(
)
)
;
=
;
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
}
;
;
}
;
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
;
;
}
;
;
}
}
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
;
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
}
ELSE
{
(
,
,
,
)
;
}
;
;
=
;
}
;
;
=
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
;
UNSIGNED
SHORT
;
UNSIGNED
;
INT
,
;
IF
(
)
{
=
;
FOR
(
=
;
;
,
)
FOR
(
=
;
;
)
=
;
}
ELSE
{
=
;
=
(
UNSIGNED
SHORT
)
(
)
;
FOR
(
=
;
;
,
(
)
)
FOR
(
=
;
;
)
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
INT
;
=
(
)
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
}
}
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
,
)
;
}
__E__O__F__
STATIC
INT
;
FLOAT
;
INT
;
INT
,
,
,
;
INT
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
;
VOID
(
VOID
)
{
}
INT
(
FLOAT
)
{
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
RETURN
;
}
VOID
(
,
INT
)
{
;
;
INT
,
,
;
=
(
)
(
)
(
)
;
FOR
(
=
;
;
=
)
{
=
(
)
;
=
;
=
;
(
(
)
)
=
;
IF
(
)
{
FOR
(
;
;
)
(
(
)
)
=
;
}
ELSE
{
FOR
(
;
;
)
(
(
)
)
=
;
;
FOR
(
;
;
)
(
INT
)
(
(
)
)
=
;
;
FOR
(
;
;
)
(
(
)
)
=
;
}
}
}
VOID
(
)
{
;
FLOAT
;
;
,
;
FLOAT
;
=
;
=
(
FLOAT
)
(
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
}
VOID
(
VOID
)
{
;
;
;
;
;
=
;
(
,
)
;
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
;
=
;
(
,
(
INT
)
)
;
(
)
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
{
(
)
;
}
(
)
;
(
)
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
(
,
(
INT
)
)
;
(
)
;
}
ELSE
IF
(
)
{
=
;
=
;
=
(
)
(
(
)
)
;
=
;
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
}
ELSE
{
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
(
)
;
}
=
;
=
(
)
;
=
(
,
)
;
=
(
)
;
=
;
(
)
;
(
)
(
)
;
(
)
;
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
}
}
}
}
__E__O__F__
VOID
(
,
INT
)
{
INT
,
,
,
;
UNSIGNED
CHAR
;
UNSIGNED
;
=
;
=
;
=
;
=
;
IF
(
)
{
;
=
;
}
IF
(
)
{
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
(
(
)
)
;
IF
(
(
(
)
)
(
(
(
LONG
)
)
)
)
{
=
(
UNSIGNED
)
;
;
;
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
=
(
UNSIGNED
)
(
(
)
)
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
;
}
}
}
__E__O__F__
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
;
;
INT
;
FLOAT
;
STATIC
FLOAT
=
{
,
,
}
;
EXTERN
INT
;
VOID
(
)
(
)
;
VOID
(
VOID
)
{
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
INT
)
{
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
=
;
ELSE
=
(
VOID
)
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
FOR
(
=
;
(
)
;
)
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
}
VOID
(
)
{
(
)
;
}
__E__O__F__
INT
,
,
,
;
INT
,
,
,
;
INT
;
SHORT
;
VOID
(
VOID
)
{
STATIC
=
;
IF
(
)
{
(
(
INT
)
,
(
INT
)
(
INT
)
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
=
;
=
;
=
;
=
;
IF
(
)
=
;
=
(
INT
)
(
(
FLOAT
)
(
)
)
;
=
(
INT
)
(
(
FLOAT
)
)
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
(
)
;
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
(
)
;
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
)
{
,
;
FLOAT
;
;
SHORT
;
INT
,
,
,
,
,
;
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
RETURN
;
}
=
(
)
;
=
;
=
(
INT
)
(
)
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
SWITCH
(
)
{
CASE
=
;
FOR
(
;
;
,
,
)
{
IF
(
)
{
=
;
=
;
}
}
BREAK
;
CASE
=
;
FOR
(
;
;
,
,
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
}
BREAK
;
CASE
=
;
FOR
(
;
;
,
,
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
}
BREAK
;
CASE
=
;
FOR
(
;
;
,
,
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
}
BREAK
;
DEFAULT
=
;
FOR
(
;
;
,
,
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
}
}
BREAK
;
}
}
__E__O__F__
UNSIGNED
CHAR
,
;
,
,
,
;
INT
;
INT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
,
;
INT
,
;
;
INT
;
INT
;
;
(
)
;
INT
(
)
;
FLOAT
,
;
=
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
FOR
(
=
;
;
)
{
=
(
)
(
(
INT
)
(
(
FLOAT
)
(
)
)
)
;
}
FOR
(
=
;
;
)
{
=
(
INT
)
(
(
FLOAT
)
(
)
)
;
}
=
(
(
INT
)
(
)
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
DO
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
)
;
;
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
=
(
(
INT
)
(
)
(
)
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
INT
,
;
UNSIGNED
CHAR
,
;
,
,
,
,
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
DO
{
=
(
(
)
(
)
)
;
;
;
}
WHILE
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
INT
,
,
;
INT
;
SHORT
;
UNSIGNED
;
DOUBLE
;
FLOAT
,
;
=
(
INT
)
(
)
;
DO
{
=
(
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
INT
)
(
)
;
IF
(
(
LONG
)
)
{
=
(
SHORT
)
(
)
;
;
;
}
IF
(
(
=
)
)
{
DO
{
=
;
;
;
;
(
INT
)
=
;
;
}
WHILE
(
)
;
}
IF
(
)
=
(
SHORT
)
(
)
;
}
WHILE
(
(
=
)
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
VOID
;
SHORT
;
INT
;
;
INT
,
,
,
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
}
;
INT
,
,
;
;
INT
;
INT
;
;
=
{
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
}
;
INT
,
,
,
;
INT
,
,
,
,
;
INT
,
;
INT
,
;
;
;
STATIC
INT
;
,
;
SHORT
;
INT
,
,
,
;
INT
,
;
INT
,
,
;
INT
,
,
;
INT
,
;
INT
,
;
INT
,
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
STATIC
=
{
}
;
;
INT
;
;
VOID
(
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
,
INT
,
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
{
(
(
)
(
)
)
;
=
(
)
(
(
(
LONG
)
)
(
)
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
VOID
(
,
INT
)
{
INT
,
;
SHORT
;
FOR
(
=
;
;
,
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
IF
(
)
{
INT
;
=
;
=
;
=
(
(
)
)
(
)
;
=
;
}
}
}
}
VOID
(
VOID
)
{
;
,
,
,
;
INT
;
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
(
(
)
(
)
(
)
(
)
)
)
{
CONTINUE
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
{
INT
,
,
;
=
;
=
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
,
,
)
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
;
,
,
,
;
INT
;
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
=
(
)
(
)
(
)
(
)
;
IF
(
)
{
CONTINUE
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
(
)
;
(
)
;
}
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
INT
;
INT
;
INT
;
SHORT
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
GOTO
;
}
RETURN
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
GOTO
;
IF
(
(
)
(
)
)
GOTO
;
=
;
=
;
IF
(
)
{
INT
;
=
;
=
;
=
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
{
=
;
=
;
=
;
FOR
(
=
;
;
,
)
=
;
}
}
VOID
(
INT
)
{
DO
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
;
IF
(
)
{
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
;
;
;
}
ELSE
{
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
;
;
}
}
WHILE
(
)
;
}
VOID
(
,
,
,
)
{
DOUBLE
,
;
INT
,
;
;
=
;
=
;
=
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
(
(
)
)
(
)
;
=
;
=
;
=
;
}
ELSE
{
=
(
DOUBLE
)
;
=
(
DOUBLE
)
;
(
,
,
,
)
;
=
;
}
}
VOID
(
INT
)
{
FLOAT
,
,
,
;
FLOAT
,
,
,
;
=
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
(
INT
)
(
(
)
)
;
=
(
INT
)
(
(
)
)
;
=
;
=
;
=
;
=
;
=
(
)
(
)
;
}
;
VOID
(
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
=
;
}
}
VOID
(
)
{
INT
;
;
;
INT
,
;
INT
;
INT
;
SHORT
;
DO
{
=
;
;
IF
(
)
{
;
;
}
ELSE
{
;
}
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
DO
{
IF
(
(
)
)
{
=
(
(
)
)
(
)
;
=
;
}
;
;
;
;
;
;
;
;
;
IF
(
)
{
;
;
}
}
WHILE
(
)
;
}
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
;
=
;
WHILE
(
)
{
INT
;
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
DO
{
=
;
}
WHILE
(
)
;
}
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
,
,
,
;
INT
,
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
(
)
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
}
ELSE
{
(
,
,
,
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
IF
(
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
(
)
(
)
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
}
ELSE
{
(
,
,
,
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
(
)
)
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
)
;
}
}
=
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
INT
;
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
ELSE
{
=
;
}
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
;
IF
(
)
;
=
;
}
VOID
(
INT
,
INT
)
{
INT
;
INT
;
INT
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
RETURN
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
{
INT
;
=
;
=
;
=
;
}
(
,
)
;
(
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
INT
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
RETURN
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
}
__E__O__F__
(
)
VOID
(
INT
,
INT
,
,
)
{
FLOAT
,
,
;
;
IF
(
)
=
(
FLOAT
)
;
ELSE
=
(
FLOAT
)
;
=
(
FLOAT
)
(
(
(
INT
)
)
)
;
=
(
FLOAT
)
(
(
(
INT
)
)
)
;
=
;
=
;
=
;
;
(
)
;
=
;
=
(
INT
)
(
(
(
)
)
)
;
=
(
INT
)
(
(
(
)
)
)
;
}
VOID
(
)
{
INT
,
,
,
;
UNSIGNED
CHAR
;
,
,
,
,
,
;
INT
;
=
;
=
;
DO
{
=
(
UNSIGNED
CHAR
)
(
(
)
(
)
)
;
=
;
=
;
=
;
(
,
,
,
)
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
IF
(
)
{
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
}
}
DO
{
=
(
(
)
)
(
(
)
)
;
;
;
}
WHILE
(
)
;
=
;
=
;
}
WHILE
(
)
;
}
WHILE
(
(
=
)
)
;
}
__E__O__F__
STATIC
INT
;
STATIC
INT
,
;
STATIC
;
VOID
(
)
{
INT
,
,
;
INT
;
,
;
,
,
,
,
,
;
FLOAT
,
,
,
,
,
,
;
FLOAT
,
,
;
;
SHORT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
INT
)
(
)
;
DO
{
=
(
)
(
)
;
=
(
)
;
=
;
IF
(
)
GOTO
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
;
=
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
DO
{
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
;
;
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
INT
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
(
)
;
}
}
DO
{
=
(
(
)
(
)
)
;
IF
(
)
{
IF
(
(
)
)
{
=
;
=
;
}
}
;
;
;
;
;
}
WHILE
(
)
;
=
;
=
;
}
WHILE
(
)
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
;
,
;
;
FLOAT
,
,
,
,
;
,
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
=
(
)
;
DO
{
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
(
(
(
)
)
)
)
(
)
;
=
(
INT
)
;
=
(
INT
)
;
FOR
(
=
;
;
)
{
=
;
=
;
;
;
}
}
=
;
;
IF
(
)
=
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
;
,
;
;
FLOAT
,
,
,
,
,
,
,
,
;
,
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
DO
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
(
(
(
)
)
)
)
(
)
;
=
(
INT
)
;
=
(
INT
)
;
FOR
(
=
;
;
)
{
=
(
)
;
;
;
}
}
=
;
=
;
;
IF
(
)
=
;
}
WHILE
(
)
;
=
;
}
VOID
(
VOID
)
{
,
,
,
;
FLOAT
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
(
(
,
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
(
)
(
(
,
)
)
)
(
(
)
)
;
=
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
FLOAT
,
;
;
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
;
}
=
(
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
FLOAT
;
;
INT
;
,
;
INT
(
INT
,
INT
)
{
INT
,
;
IF
(
(
)
)
{
=
(
(
)
)
;
RETURN
;
}
=
;
=
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
VOID
,
INT
)
{
IF
(
)
(
,
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
{
IF
(
)
=
;
}
=
;
=
;
=
;
=
;
}
(
INT
,
INT
)
{
;
;
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
=
(
INT
)
(
(
)
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
IF
(
(
)
(
)
)
{
IF
(
)
{
=
;
}
=
;
}
=
;
IF
(
)
=
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
IF
(
)
=
;
;
=
;
}
IF
(
)
{
=
(
)
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
=
;
=
;
IF
(
)
=
(
(
)
(
)
)
;
=
;
IF
(
)
{
IF
(
(
)
)
=
;
}
ELSE
IF
(
)
{
=
;
}
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
)
;
(
,
,
,
)
;
}
}
INT
(
INT
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
INT
)
{
INT
;
=
;
WHILE
(
)
;
RETURN
;
}
(
,
INT
)
{
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
,
)
;
=
;
=
;
=
;
}
IF
(
)
=
;
ELSE
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
;
(
)
;
RETURN
;
}
__E__O__F__
FLOAT
,
,
;
FLOAT
,
,
;
FLOAT
,
,
;
,
,
,
;
;
INT
;
;
SHORT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
__E__O__F__
VOID
(
VOID
)
{
;
SHORT
;
INT
;
=
(
)
;
=
;
=
(
INT
)
(
)
;
IF
(
)
{
=
;
=
;
}
}
__E__O__F__
TYPEDEF
ENUM
{
,
,
,
,
,
}
;
TYPEDEF
ENUM
{
,
,
}
;
INT
;
INT
,
;
CHAR
;
CHAR
;
=
;
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
INT
;
VOID
(
)
(
VOID
)
;
}
;
VOID
(
VOID
)
;
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
INT
;
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
}
;
INT
=
(
)
(
)
;
VOID
(
INT
,
CHAR
,
INT
)
{
INT
,
,
,
;
INT
;
CHAR
;
CHAR
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
(
,
,
)
;
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
IF
(
(
)
(
)
)
{
=
;
(
)
;
=
;
WHILE
(
(
)
(
)
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
IF
(
)
;
ELSE
IF
(
)
;
(
,
)
;
;
}
}
ELSE
{
;
=
;
FOR
(
=
;
(
)
(
)
;
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
IF
(
)
;
ELSE
IF
(
)
;
}
=
;
IF
(
(
)
(
(
)
(
)
)
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
}
ELSE
IF
(
(
)
(
(
)
(
)
)
)
{
(
,
)
;
}
ELSE
IF
(
(
)
(
)
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
ELSE
IF
(
(
(
)
(
)
)
)
{
;
IF
(
(
)
(
(
)
(
)
)
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
=
(
)
;
IF
(
)
=
;
=
;
WHILE
(
)
{
IF
(
(
)
)
{
(
,
,
)
;
(
)
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
}
ELSE
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
,
)
)
{
(
,
)
;
(
)
;
(
)
;
=
;
BREAK
;
}
}
IF
(
)
{
(
,
,
)
;
(
)
;
}
}
ELSE
IF
(
)
{
;
IF
(
(
)
(
)
)
{
=
;
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
}
}
ELSE
{
=
;
IF
(
(
)
(
(
(
)
)
(
(
)
)
)
)
{
;
DO
{
=
;
}
WHILE
(
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
)
;
;
=
;
}
ELSE
{
=
;
}
}
}
;
}
IF
(
)
=
;
=
;
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
(
)
;
)
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
IF
(
)
{
(
,
)
;
}
ELSE
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
INT
,
,
;
IF
(
)
{
(
,
)
;
}
ELSE
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
)
;
(
,
,
)
;
}
ELSE
IF
(
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
ELSE
{
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
(
)
;
}
}
VOID
(
CHAR
,
CHAR
)
{
INT
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
}
ELSE
IF
(
)
{
IF
(
(
,
)
)
(
,
)
;
ELSE
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
ELSE
{
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
FOR
(
=
;
(
)
;
)
{
(
,
,
)
;
(
)
;
}
(
,
,
)
;
}
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
}
;
INT
=
(
)
(
)
;
VOID
(
VOID
)
{
(
,
,
,
)
;
(
)
;
}
(
CHAR
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
(
)
)
{
RETURN
;
}
RETURN
;
}
INT
(
VOID
)
{
CHAR
;
INT
,
;
;
DO
{
IF
(
(
=
(
)
)
)
RETURN
;
IF
(
(
=
(
)
)
)
RETURN
;
}
WHILE
(
)
;
=
;
=
;
IF
(
)
{
;
=
;
=
;
=
;
=
;
}
IF
(
)
{
DO
{
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
)
;
}
=
;
}
WHILE
(
)
;
}
FOR
(
;
;
)
{
IF
(
(
=
(
)
)
)
{
=
;
RETURN
;
}
IF
(
(
)
)
{
IF
(
(
,
)
)
{
(
,
)
;
(
)
;
}
=
;
RETURN
;
}
IF
(
(
)
)
{
=
;
RETURN
;
}
IF
(
)
{
(
,
)
;
(
)
;
}
=
;
IF
(
)
{
;
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
DO
{
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
)
;
}
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
}
}
WHILE
(
(
)
(
)
)
;
}
}
}
(
VOID
)
{
;
INT
,
,
,
;
INT
;
=
;
=
;
=
;
FOR
(
;
;
)
{
=
;
=
(
)
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
(
)
;
}
(
,
)
;
(
)
(
)
;
=
;
BREAK
;
}
}
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
(
)
;
}
}
IF
(
)
{
IF
(
(
)
)
(
)
;
ELSE
(
)
;
;
}
RETURN
;
CASE
IF
(
)
{
IF
(
(
)
)
{
=
;
IF
(
)
{
(
)
=
;
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
(
)
;
}
=
;
BREAK
;
}
}
=
;
IF
(
)
{
(
,
)
;
(
)
;
}
;
BREAK
;
DEFAULT
(
,
,
)
;
(
)
;
}
}
}
VOID
(
INT
,
CHAR
)
{
;
(
)
;
=
;
=
;
FOR
(
;
;
)
{
=
(
)
;
;
SWITCH
(
)
{
CASE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
(
)
;
(
)
;
CASE
BREAK
;
DEFAULT
(
,
,
)
;
(
)
;
}
}
}
__E__O__F__
EXTERN
UNSIGNED
CHAR
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
;
;
;
INT
;
INT
;
TYPEDEF
STRUCT
{
INT
;
FLOAT
,
,
,
;
}
;
(
)
(
)
;
=
(
)
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
INT
,
;
;
}
;
;
INT
;
VOID
(
INT
)
{
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
(
,
)
;
(
,
)
;
}
INT
;
;
;
INT
;
INT
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
INT
,
;
INT
;
INT
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
}
IF
(
)
{
=
;
=
=
;
}
}
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
;
RETURN
;
}
(
)
;
}
INT
;
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
(
)
;
(
,
,
,
,
)
;
}
=
;
}
TYPEDEF
STRUCT
{
CHAR
;
;
;
}
;
;
INT
;
;
INT
;
INT
;
(
CHAR
)
{
;
;
=
(
)
;
=
(
)
;
IF
(
)
{
INT
,
;
INT
,
,
;
INT
;
=
(
,
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
,
)
(
)
=
;
;
=
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
=
(
)
(
FLOAT
)
;
;
;
}
ELSE
{
=
(
)
;
=
;
=
;
=
;
=
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
)
;
;
(
,
)
;
=
(
)
(
)
;
IF
(
)
(
,
)
;
(
)
;
IF
(
(
,
)
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
INT
,
)
{
INT
,
;
;
INT
;
INT
;
=
;
=
;
=
(
)
(
)
;
=
;
WHILE
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
;
;
}
}
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
VOID
(
VOID
)
{
INT
;
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
IF
(
(
,
(
)
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
(
)
;
(
,
,
)
;
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
INT
;
;
,
;
INT
,
;
CHAR
;
;
INT
;
;
INT
,
;
(
)
;
(
)
;
(
)
;
IF
(
(
(
CHAR
)
,
,
)
(
(
CHAR
)
,
)
)
(
,
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
)
=
;
=
(
,
,
,
,
,
)
;
=
(
)
;
=
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
(
,
,
(
FLOAT
)
,
(
FLOAT
)
,
(
FLOAT
)
)
;
(
,
,
(
FLOAT
)
,
(
FLOAT
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
(
,
(
)
)
;
=
;
=
;
=
=
(
,
)
;
FOR
(
=
;
;
,
)
{
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
=
;
=
;
=
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
=
(
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
;
=
(
)
;
=
(
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
;
;
UNSIGNED
SHORT
;
INT
;
INT
,
;
FLOAT
,
,
;
IF
(
)
RETURN
;
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
CHAR
)
{
}
VOID
(
INT
,
INT
,
,
FLOAT
)
{
,
;
UNSIGNED
SHORT
;
INT
,
;
;
IF
(
)
(
)
;
=
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
}
VOID
(
INT
,
INT
,
)
{
,
;
UNSIGNED
SHORT
;
INT
,
;
;
IF
(
)
(
)
;
=
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
,
INT
,
)
{
,
,
;
UNSIGNED
SHORT
;
INT
,
;
IF
(
(
UNSIGNED
)
(
)
(
UNSIGNED
)
(
)
)
{
(
)
;
}
(
,
,
)
;
}
VOID
(
INT
,
INT
,
,
)
{
INT
,
,
;
UNSIGNED
,
;
;
INT
;
(
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
;
}
}
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
)
{
INT
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
,
(
FLOAT
)
(
)
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
(
,
,
)
;
(
(
INT
)
)
;
(
)
;
(
,
)
;
(
,
)
;
(
(
)
,
)
;
(
,
)
;
(
(
)
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
(
,
,
,
)
;
(
)
;
(
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
}
INT
(
CHAR
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
VOID
(
UNSIGNED
,
INT
,
INT
,
UNSIGNED
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
;
UNSIGNED
,
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
VOID
(
UNSIGNED
CHAR
,
INT
,
INT
,
UNSIGNED
CHAR
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
CHAR
;
UNSIGNED
,
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
}
VOID
(
,
INT
,
INT
)
{
INT
,
;
;
;
;
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
}
VOID
(
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
SHORT
,
,
;
,
,
,
,
;
;
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
,
,
)
{
=
(
)
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
(
)
;
;
=
(
)
;
;
=
(
)
;
;
=
(
)
(
)
(
)
;
}
}
}
VOID
(
UNSIGNED
,
INT
,
INT
,
,
)
{
INT
;
STATIC
UNSIGNED
;
INT
,
;
FOR
(
=
;
;
)
;
FOR
(
=
;
;
)
;
(
INT
)
;
(
INT
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
)
)
(
)
;
=
;
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
,
,
,
,
)
;
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
;
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
)
;
GOTO
;
}
(
,
,
)
;
}
ELSE
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
IF
(
)
{
INT
;
=
;
WHILE
(
)
{
(
(
)
,
,
)
;
;
;
IF
(
)
=
;
IF
(
)
=
;
;
(
,
,
,
,
,
,
,
,
)
;
}
}
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
}
VOID
(
,
INT
,
INT
,
,
)
{
INT
,
;
;
INT
;
STATIC
UNSIGNED
;
INT
;
STATIC
UNSIGNED
CHAR
;
INT
,
;
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
IF
(
)
=
;
}
FOR
(
=
;
;
)
;
FOR
(
=
;
;
)
;
(
INT
)
;
(
INT
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
)
)
(
)
;
=
;
;
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
)
;
GOTO
;
}
(
,
,
)
;
}
ELSE
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
IF
(
)
{
INT
;
=
;
WHILE
(
)
{
(
(
)
,
,
)
;
;
;
IF
(
)
=
;
IF
(
)
=
;
;
(
,
,
,
,
,
,
,
,
)
;
}
}
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
}
VOID
(
,
INT
,
INT
,
,
)
{
STATIC
UNSIGNED
;
INT
,
;
;
INT
;
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
=
;
}
IF
(
)
=
;
}
ELSE
{
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
IF
(
(
)
(
)
)
{
(
,
,
,
,
)
;
RETURN
;
}
(
,
,
,
,
)
;
}
INT
(
CHAR
,
INT
,
INT
,
,
,
)
{
;
INT
,
,
;
;
IF
(
)
{
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
{
IF
(
)
(
)
;
RETURN
;
}
}
}
ELSE
{
=
;
;
}
(
,
)
;
=
;
=
;
=
;
=
;
(
)
;
(
,
,
,
,
)
;
;
RETURN
;
}
INT
(
)
{
RETURN
(
,
,
,
,
,
)
;
}
STATIC
=
;
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
}
__E__O__F__
;
;
;
INT
;
INT
;
INT
;
INT
;
INT
,
;
INT
;
INT
;
INT
;
INT
(
INT
,
INT
)
{
INT
,
;
INT
;
,
;
INT
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
GOTO
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
=
(
)
;
=
;
;
=
;
GOTO
;
}
}
FOR
(
=
;
;
)
IF
(
)
=
;
RETURN
;
}
INT
(
INT
,
INT
)
{
INT
,
;
INT
;
,
;
INT
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
GOTO
;
=
(
)
;
=
;
=
;
;
=
;
GOTO
;
}
}
FOR
(
=
;
;
)
IF
(
)
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
,
;
INT
;
,
;
INT
,
;
INT
;
;
;
FLOAT
,
;
INT
;
INT
,
,
;
INT
;
INT
;
INT
;
=
;
=
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
)
=
(
,
)
;
ELSE
=
(
,
)
;
IF
(
)
{
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
}
}
}
FOR
(
=
;
;
)
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
IF
(
)
;
=
(
)
;
=
(
)
;
(
FLOAT
)
=
;
(
FLOAT
)
=
;
}
}
=
;
(
,
,
,
)
;
;
;
}
VOID
(
,
)
{
INT
,
;
;
INT
;
;
CHAR
,
,
;
;
INT
;
;
=
;
=
;
(
,
)
;
(
(
)
,
(
)
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
)
;
}
ELSE
{
(
,
)
;
(
)
;
(
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
(
)
;
}
}
=
;
=
(
)
;
=
(
)
(
)
;
(
,
,
)
;
=
(
(
)
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
;
}
__E__O__F__
;
CHAR
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
(
,
)
;
;
;
INT
;
=
{
,
,
}
;
VOID
(
VOID
)
{
(
)
;
(
,
,
(
)
)
;
}
VOID
(
)
{
VOID
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
)
{
;
FLOAT
;
;
IF
(
)
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
(
,
)
{
STATIC
;
INT
;
;
INT
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
{
WHILE
(
)
{
=
;
;
}
RETURN
;
}
DO
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
;
WHILE
(
)
{
=
;
;
}
}
WHILE
(
)
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
=
;
}
(
CHAR
)
{
INT
;
;
IF
(
)
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
IF
(
)
(
)
;
(
,
)
;
=
;
;
}
RETURN
;
}
VOID
(
CHAR
)
{
;
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
}
}
(
,
)
{
VOID
;
UNSIGNED
;
;
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
RETURN
;
}
ELSE
RETURN
;
}
IF
(
)
{
}
=
(
UNSIGNED
)
(
,
,
(
)
)
;
IF
(
)
{
IF
(
)
(
,
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
SWITCH
(
(
(
UNSIGNED
)
)
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
RETURN
;
}
(
CHAR
,
)
{
;
=
(
)
;
RETURN
(
,
)
;
}
;
VOID
(
)
{
INT
,
,
,
,
,
;
;
,
;
;
;
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
)
(
(
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
=
;
=
(
(
)
,
)
;
=
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
(
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
(
)
;
ELSE
{
=
;
=
(
,
,
,
(
)
(
)
,
,
)
;
=
;
}
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
=
;
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
;
}
ELSE
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
=
;
=
;
IF
(
)
=
;
}
ELSE
(
,
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
}
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
;
FLOAT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
}
}
}
VOID
(
)
{
FLOAT
,
,
;
INT
,
,
;
;
;
INT
,
;
=
=
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
(
)
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
CONTINUE
;
}
IF
(
(
,
,
)
)
{
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
CONTINUE
;
}
}
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
;
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
(
(
)
)
;
}
}
(
,
)
;
}
VOID
(
)
{
;
;
INT
,
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
;
}
}
}
VOID
(
)
{
,
;
INT
,
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
,
;
;
INT
,
,
;
;
=
;
=
;
=
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
}
}
VOID
(
)
{
INT
,
,
;
SHORT
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
=
;
}
}
VOID
(
)
{
INT
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
=
(
)
;
=
(
)
;
=
;
}
}
FLOAT
(
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
(
)
(
)
(
)
;
}
RETURN
(
)
;
}
VOID
(
,
VOID
)
{
INT
,
;
;
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
(
,
)
;
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
{
CHAR
;
(
,
,
)
;
=
(
)
;
=
;
(
,
)
;
=
;
}
}
}
;
;
;
;
INT
;
;
;
VOID
(
VOID
,
)
{
,
;
INT
,
;
;
=
(
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
)
(
)
;
=
;
;
;
RETURN
(
VOID
)
;
}
VOID
(
VOID
,
)
{
;
INT
,
;
;
VOID
;
=
(
)
;
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
)
(
)
;
=
(
)
;
;
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
)
(
(
)
)
;
;
=
(
)
(
(
)
)
;
}
RETURN
;
}
TYPEDEF
STRUCT
{
SHORT
,
;
}
;
EXTERN
UNSIGNED
;
(
)
(
,
,
)
{
IF
(
)
{
=
;
=
(
)
,
=
(
)
;
=
(
)
;
}
ELSE
IF
(
)
=
;
}
VOID
(
,
INT
,
INT
)
{
=
;
;
INT
=
,
=
;
INT
=
;
INT
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
IF
(
(
)
)
{
=
;
BREAK
;
}
}
IF
(
(
)
(
)
)
{
RETURN
;
}
=
,
=
;
=
(
)
;
WHILE
(
)
{
INT
=
,
=
;
INT
=
;
=
;
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
=
;
}
}
VOID
(
INT
,
)
{
INT
,
,
;
CHAR
;
INT
;
;
;
;
;
INT
;
;
=
(
)
(
)
;
IF
(
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
)
;
=
(
,
)
;
=
(
)
;
(
,
(
)
(
)
,
)
;
(
,
,
,
)
;
=
=
=
=
(
,
,
,
(
)
(
)
,
,
)
;
=
(
)
(
(
)
(
)
)
;
}
ELSE
{
;
=
(
)
;
=
(
)
;
=
(
)
(
)
;
=
(
VOID
)
(
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
IF
(
)
{
=
(
,
)
;
=
(
)
;
(
,
(
)
(
)
,
)
;
}
(
,
,
,
,
)
;
=
(
,
,
,
(
)
(
)
,
,
)
;
=
(
)
(
(
)
(
)
)
;
}
=
;
FOR
(
;
;
)
=
;
}
}
RETURN
(
VOID
)
;
}
VOID
(
,
VOID
)
{
INT
,
;
;
;
;
INT
,
,
;
INT
;
;
;
INT
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
(
(
)
)
(
)
;
=
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
}
=
;
=
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
IF
(
)
{
=
(
)
(
,
)
;
}
ELSE
{
=
(
)
(
,
)
;
}
}
=
;
=
;
=
=
=
;
=
=
=
;
(
,
)
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
,
,
INT
)
{
;
;
INT
,
,
,
,
;
UNSIGNED
SHORT
;
;
CHAR
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
(
,
,
,
(
)
(
)
,
,
)
;
RETURN
(
VOID
)
(
(
)
(
)
)
;
}
VOID
(
VOID
,
,
INT
)
{
;
;
INT
,
;
;
FLOAT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
(
)
(
)
(
)
,
)
;
=
;
=
(
)
;
=
(
)
(
)
;
=
(
(
FLOAT
)
,
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
;
;
}
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
,
,
)
;
}
RETURN
;
}
VOID
(
,
VOID
)
{
INT
;
INT
;
;
;
INT
;
INT
;
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
=
(
)
(
)
(
)
;
=
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
=
;
=
=
;
=
;
=
;
IF
(
)
(
,
)
;
=
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
(
,
,
)
;
}
ELSE
{
=
(
)
(
,
,
)
;
}
}
=
;
}
VOID
(
VOID
)
{
INT
;
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
}
}
__E__O__F__
;
;
,
;
;
VOID
(
)
{
,
,
,
;
=
;
WHILE
(
)
{
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
BREAK
;
}
ELSE
=
;
}
=
;
=
;
=
;
=
;
}
=
;
}
VOID
(
)
{
;
;
;
INT
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
IF
(
)
=
;
=
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
=
;
}
VOID
(
)
{
;
;
;
WHILE
(
(
=
)
)
{
=
;
=
;
SWITCH
(
)
{
CASE
CASE
CASE
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
}
=
;
BREAK
;
DEFAULT
(
,
)
;
}
}
}
__E__O__F__
INT
;
VOID
(
VOID
)
{
INT
,
,
;
=
(
INT
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
=
;
=
;
=
;
}
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
;
=
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
)
{
INT
,
;
FLOAT
;
;
FLOAT
;
=
;
(
,
,
)
;
IF
(
(
)
)
{
(
,
,
,
)
;
RETURN
;
}
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
=
;
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
=
(
)
(
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
)
;
}
(
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
,
INT
,
)
{
;
FLOAT
;
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
}
}
;
;
INT
(
,
,
)
{
INT
;
FLOAT
,
,
;
INT
;
;
;
;
INT
,
,
,
;
INT
;
;
;
UNSIGNED
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
(
)
)
RETURN
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
=
(
,
)
;
=
(
,
)
;
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
;
;
=
;
=
;
IF
(
)
{
(
(
)
)
;
FOR
(
=
;
;
)
{
=
;
;
(
(
)
)
(
(
)
)
;
}
;
}
RETURN
;
}
RETURN
(
,
,
)
;
}
INT
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
=
;
RETURN
;
}
__E__O__F__
;
;
,
;
;
INT
;
INT
;
;
INT
,
;
;
INT
=
;
INT
=
{
,
}
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
FLOAT
;
FLOAT
;
;
,
;
;
INT
;
VOID
(
VOID
)
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
EXTERN
;
(
,
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
VOID
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
(
)
{
;
;
;
INT
,
,
;
FLOAT
,
,
,
;
=
;
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
IF
(
)
{
=
;
}
ELSE
{
=
(
)
;
=
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
}
=
;
}
RETURN
;
}
VOID
(
)
{
;
;
FLOAT
,
;
,
,
;
;
=
(
)
;
=
;
IF
(
)
{
(
,
,
,
)
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
}
FLOAT
=
{
}
;
;
FLOAT
,
;
FLOAT
=
;
FLOAT
=
;
INT
;
VOID
(
,
INT
)
{
FLOAT
,
;
FLOAT
;
INT
,
;
INT
;
,
;
INT
;
INT
;
;
FLOAT
;
INT
;
=
;
=
(
)
(
(
)
)
;
;
=
(
INT
)
(
(
)
)
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
(
)
;
}
ELSE
(
)
;
DO
{
(
(
(
FLOAT
)
)
,
(
(
FLOAT
)
)
)
;
;
=
;
(
,
,
)
;
(
,
,
)
;
;
}
WHILE
(
)
;
(
)
;
}
}
EXTERN
;
VOID
(
,
INT
)
{
FLOAT
,
,
;
INT
,
;
INT
;
,
;
INT
;
INT
;
;
FLOAT
;
FLOAT
,
;
INT
;
=
;
=
;
=
(
)
(
(
)
)
;
;
=
(
INT
)
(
(
)
)
;
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
(
)
;
}
ELSE
(
)
;
DO
{
;
=
;
=
;
=
;
(
)
;
(
)
;
=
;
(
)
;
;
}
WHILE
(
)
;
(
)
;
}
}
VOID
(
INT
,
)
{
INT
,
;
FLOAT
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
=
;
=
;
IF
(
)
{
=
;
(
INT
)
(
)
;
}
(
,
)
;
}
VOID
(
)
{
INT
,
;
INT
;
;
FLOAT
;
;
,
;
;
,
;
INT
;
FLOAT
,
,
;
INT
;
=
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
,
)
)
RETURN
;
(
,
)
;
(
,
,
)
;
=
=
(
)
;
IF
(
)
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
)
;
=
(
)
;
IF
(
)
{
;
;
}
}
}
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
IF
(
)
=
=
;
IF
(
(
,
)
(
,
)
)
=
=
;
=
(
(
INT
)
(
(
)
)
)
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
(
)
;
=
(
)
(
)
;
;
(
)
;
(
)
;
(
)
;
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
=
(
INT
)
(
)
;
(
)
;
IF
(
)
{
=
;
IF
(
)
(
)
;
}
IF
(
)
(
)
;
(
,
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
}
}
}
VOID
(
VOID
)
{
FLOAT
,
;
INT
;
INT
;
;
FLOAT
;
;
INT
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
=
(
)
;
IF
(
)
;
}
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
(
,
(
)
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
INT
(
)
{
INT
,
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
,
(
)
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
(
)
)
;
}
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
,
;
IF
(
)
(
,
)
;
(
)
;
;
(
,
)
;
(
,
,
,
)
;
=
;
=
(
,
)
;
(
)
;
(
)
;
=
;
=
;
=
;
}
VOID
(
,
,
,
)
{
,
,
,
;
=
(
)
;
=
;
=
;
=
;
(
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
INT
;
EXTERN
INT
,
;
INT
,
,
,
,
,
;
(
)
;
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
(
)
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
=
;
=
;
IF
(
)
{
=
=
;
=
=
;
}
(
,
,
,
)
;
=
(
FLOAT
)
;
(
,
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
}
ELSE
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
(
)
;
}
ELSE
IF
(
)
{
STATIC
INT
;
IF
(
)
(
)
;
;
IF
(
)
{
=
;
=
;
(
)
;
}
ELSE
{
=
;
=
;
(
)
;
}
}
ELSE
{
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
(
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
;
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
=
(
,
)
;
(
,
,
,
)
;
=
(
,
)
;
(
,
,
,
)
;
=
(
)
;
=
(
,
)
;
=
;
=
;
IF
(
)
{
=
;
;
}
=
;
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
=
;
FOR
(
;
;
=
)
(
)
;
=
;
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
DOUBLE
,
;
=
{
(
)
,
(
)
,
(
)
,
(
)
}
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
{
(
)
;
=
(
)
;
=
;
=
;
}
=
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
=
(
)
;
(
,
(
INT
)
(
(
)
)
,
,
)
;
}
}
__E__O__F__
VOID
(
VOID
)
{
INT
,
,
;
;
=
(
(
)
,
)
;
=
=
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
(
)
;
)
FOR
(
=
;
(
)
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
=
;
ELSE
=
;
}
}
}
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
}
;
VOID
(
VOID
)
{
INT
,
;
;
=
;
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
}
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
CHAR
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
(
)
)
;
=
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
EXTERN
;
EXTERN
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
;
}
VOID
(
INT
)
{
INT
,
;
;
UNSIGNED
;
INT
,
,
;
;
;
;
UNSIGNED
,
;
UNSIGNED
,
;
INT
,
;
;
UNSIGNED
,
;
EXTERN
;
(
)
;
=
;
=
(
)
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
}
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
(
)
;
=
;
IF
(
)
{
(
,
,
)
;
=
(
)
;
}
ELSE
=
(
)
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
(
,
,
,
,
,
)
;
=
;
=
;
(
INT
)
;
(
INT
)
;
IF
(
(
)
)
{
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
(
(
)
,
,
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
;
=
;
;
=
;
;
}
}
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
=
;
IF
(
(
,
,
)
)
=
;
=
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
,
,
;
INT
;
;
(
)
;
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
(
)
;
}
(
)
;
=
(
)
;
=
;
(
,
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
}
__E__O__F__
INT
;
INT
;
INT
;
UNSIGNED
;
INT
;
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
,
;
}
;
;
;
;
INT
;
;
=
;
=
;
VOID
(
)
;
VOID
(
)
{
INT
;
INT
,
;
FLOAT
,
,
;
,
;
INT
,
;
INT
;
INT
,
;
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
(
,
)
;
(
)
;
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
;
}
=
(
,
)
;
=
(
,
)
;
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
IF
(
)
(
)
;
}
}
}
}
VOID
(
,
,
INT
)
{
INT
,
;
INT
;
INT
,
,
;
;
UNSIGNED
;
INT
;
INT
;
UNSIGNED
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
GOTO
;
}
FOR
(
=
;
;
)
=
;
IF
(
)
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
;
;
}
IF
(
)
(
)
;
SWITCH
(
)
{
CASE
(
)
;
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
;
=
;
;
}
}
BREAK
;
CASE
CASE
CASE
=
;
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
;
=
;
}
}
BREAK
;
DEFAULT
(
)
;
}
}
(
)
{
INT
;
INT
;
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
RETURN
;
=
(
INT
)
(
)
;
=
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
RETURN
;
}
EXTERN
INT
;
EXTERN
INT
;
EXTERN
FLOAT
;
VOID
(
)
;
VOID
(
)
;
=
;
=
;
=
;
VOID
(
)
;
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
(
)
;
=
;
}
}
VOID
(
)
{
;
FLOAT
;
INT
;
;
IF
(
(
(
)
)
)
{
=
;
=
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
}
=
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
;
FLOAT
;
INT
;
;
,
;
FLOAT
,
,
;
FLOAT
,
;
;
IF
(
(
(
)
)
)
{
(
)
;
IF
(
)
{
=
;
=
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
=
;
IF
(
)
{
=
;
=
;
(
,
,
,
,
,
,
,
,
(
)
)
;
=
;
=
;
=
;
=
;
}
(
,
,
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
RETURN
;
}
ELSE
{
=
;
=
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
(
)
;
}
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
RETURN
;
}
(
)
;
IF
(
)
{
=
;
=
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
=
;
IF
(
)
{
=
;
=
;
(
,
,
,
,
,
,
,
,
(
)
)
;
=
;
=
;
=
;
=
;
}
(
,
,
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
,
,
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
;
(
)
;
}
(
)
;
}
ELSE
{
=
;
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
}
VOID
(
)
{
INT
;
FLOAT
;
FLOAT
,
,
,
;
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
;
(
)
;
}
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
FLOAT
,
,
,
;
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
;
(
)
;
}
(
)
;
}
VOID
(
)
{
INT
;
FLOAT
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
FLOAT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
)
;
}
IF
(
)
{
(
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
)
;
IF
(
)
{
=
;
=
;
(
,
,
,
,
,
,
,
,
(
)
)
;
=
;
=
;
=
;
=
;
}
FOR
(
;
;
=
)
{
IF
(
)
(
)
;
ELSE
{
(
)
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
(
)
;
}
(
)
;
}
}
}
(
)
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
}
(
)
;
}
VOID
(
)
{
;
;
INT
;
;
INT
,
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
GOTO
;
IF
(
)
{
IF
(
)
{
=
;
=
;
IF
(
)
{
IF
(
)
;
=
;
}
IF
(
)
{
IF
(
)
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
=
;
;
(
,
,
)
;
}
}
}
VOID
(
)
{
;
;
INT
;
;
INT
,
;
;
IF
(
(
)
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
GOTO
;
IF
(
)
{
IF
(
)
{
=
;
=
;
IF
(
)
{
IF
(
)
;
=
;
}
IF
(
)
{
IF
(
)
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
IF
(
(
)
(
)
)
=
(
)
;
=
;
;
(
,
,
)
;
}
}
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
;
IF
(
)
RETURN
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
)
;
FOR
(
;
;
=
)
(
)
;
=
;
}
(
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
(
)
;
(
,
,
,
)
;
(
,
,
)
;
}
IF
(
)
{
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
{
(
)
;
(
)
;
}
=
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
)
;
FOR
(
;
;
=
)
(
)
;
=
;
}
}
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
=
;
}
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
(
)
;
CONTINUE
;
}
ELSE
{
IF
(
(
)
)
CONTINUE
;
FOR
(
;
;
=
)
(
)
;
}
=
;
}
}
VOID
(
)
{
INT
,
;
,
;
INT
,
;
;
FLOAT
;
;
;
;
=
;
=
;
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
ELSE
{
=
;
(
,
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
RETURN
;
(
,
,
)
;
(
,
,
(
)
)
;
(
,
,
)
;
IF
(
)
{
;
,
,
;
(
,
)
;
(
,
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
CONTINUE
;
(
,
,
)
;
}
}
(
)
;
=
;
(
)
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
IF
(
)
(
)
;
ELSE
(
)
;
}
}
(
)
;
(
)
;
}
VOID
(
)
{
INT
,
,
,
;
,
;
;
,
;
;
DOUBLE
,
;
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
=
(
)
;
=
;
=
;
IF
(
)
{
DO
{
(
)
=
;
;
}
WHILE
(
)
;
}
IF
(
)
(
)
;
RETURN
;
}
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
,
)
;
BREAK
;
}
IF
(
)
=
;
ELSE
=
;
(
)
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
{
FOR
(
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
(
(
)
(
)
)
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
(
)
;
}
}
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
(
,
,
(
)
)
;
=
;
(
,
)
;
=
;
=
;
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
;
=
;
IF
(
)
{
=
;
(
,
,
(
)
)
;
}
ELSE
=
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
=
(
)
;
DO
{
IF
(
)
BREAK
;
=
;
=
;
}
WHILE
(
)
;
}
}
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
INT
,
;
INT
;
INT
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
}
IF
(
)
{
=
;
=
=
;
}
}
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
;
RETURN
;
}
(
)
;
}
;
;
INT
;
VOID
(
)
{
INT
,
,
,
,
;
FLOAT
,
,
,
,
,
,
;
UNSIGNED
;
,
;
,
;
;
INT
,
,
,
;
;
FLOAT
;
FLOAT
,
;
;
=
;
=
;
=
;
=
(
(
)
(
)
(
FLOAT
)
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
,
)
;
;
=
(
,
)
;
;
(
,
)
;
=
;
=
;
=
(
,
)
;
;
;
;
;
=
(
,
)
;
;
;
;
;
=
;
=
;
}
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
,
;
FLOAT
,
,
;
FLOAT
;
=
(
)
;
=
;
=
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
IF
(
(
(
)
)
(
(
)
)
(
(
)
)
)
{
INT
;
FOR
(
=
;
;
)
{
INT
;
FOR
(
=
;
;
)
=
;
}
;
;
;
}
}
}
=
;
}
VOID
(
)
{
INT
,
,
,
,
,
;
;
IF
(
(
)
)
RETURN
;
=
(
)
;
=
(
)
;
=
(
,
,
,
)
;
=
;
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
EXTERN
;
(
,
,
(
)
)
;
=
;
IF
(
)
{
=
;
;
}
=
;
IF
(
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
=
;
=
;
FOR
(
=
;
;
)
{
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
)
;
}
}
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
IF
(
)
(
)
;
}
__E__O__F__
INT
,
,
,
;
INT
;
INT
;
FLOAT
;
FLOAT
;
FLOAT
,
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
EXTERN
;
;
;
;
;
INT
;
INT
;
INT
;
INT
;
;
;
;
;
FLOAT
;
;
VOID
(
VOID
)
;
CHAR
;
FLOAT
;
FLOAT
;
INT
;
INT
;
INT
;
VOID
(
CHAR
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
;
;
}
}
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
INT
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
IF
(
)
RETURN
;
}
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
=
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
}
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
;
FLOAT
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
;
FLOAT
;
INT
;
=
;
=
;
=
;
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
IF
(
)
{
=
;
=
;
=
;
}
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
;
=
;
=
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
(
,
)
;
=
;
}
VOID
(
VOID
)
{
(
,
)
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
STATIC
INT
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
=
(
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
}
ELSE
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
(
,
)
;
=
;
}
ELSE
{
IF
(
)
(
)
;
}
}
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
CHAR
,
;
}
;
VOID
(
VOID
)
{
;
CHAR
;
CHAR
;
INT
,
,
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
(
)
;
}
CHAR
;
;
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
=
;
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
,
)
(
,
,
)
;
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
INT
(
CHAR
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
(
)
;
=
;
(
)
;
DO
{
=
;
(
)
;
}
WHILE
(
)
;
=
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
(
)
)
;
}
}
VOID
(
VOID
)
{
STATIC
FLOAT
;
;
IF
(
)
RETURN
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
ELSE
RETURN
;
}
IF
(
)
RETURN
;
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
IF
(
)
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
(
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
;
;
;
;
;
;
FLOAT
;
}
;
;
VOID
(
VOID
)
{
}
;
(
,
)
{
;
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
(
,
,
,
,
,
,
)
;
=
;
RETURN
;
}
VOID
(
)
{
INT
;
;
;
;
;
;
FLOAT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
BREAK
;
}
IF
(
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
(
)
;
=
(
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
}
VOID
(
)
{
;
INT
,
;
FLOAT
,
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
}
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
(
)
;
}
}
__E__O__F__
STATIC
=
;
(
)
{
,
}
UNSIGNED
SHORT
;
UNSIGNED
;
UNSIGNED
CHAR
;
INT
=
;
STRUCT
{
CHAR
;
INT
;
}
=
{
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
}
;
STATIC
UNSIGNED
CHAR
;
INT
=
(
)
(
)
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
CHAR
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
}
;
INT
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
,
;
=
{
,
}
;
INT
,
;
INT
=
;
INT
=
;
FLOAT
,
;
=
{
,
}
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
VOID
(
)
(
)
;
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
INT
,
CONST
VOID
)
;
STATIC
FLOAT
=
;
=
;
=
;
=
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
INT
(
INT
,
CHAR
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
INT
;
STRUCT
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
INT
)
{
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
}
VOID
(
UNSIGNED
CHAR
)
{
;
UNSIGNED
,
,
;
UNSIGNED
;
INT
,
,
;
INT
,
,
,
;
UNSIGNED
SHORT
;
UNSIGNED
;
;
CHAR
;
INT
,
;
STATIC
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
(
)
(
)
(
)
(
)
;
=
;
}
;
FOR
(
=
;
(
)
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
;
FOR
(
=
,
=
,
=
;
;
,
)
{
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
}
VOID
(
VOID
)
{
VOID
;
IF
(
(
,
)
(
)
)
{
(
)
;
IF
(
(
=
(
,
)
)
)
{
(
)
;
RETURN
;
}
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
=
;
}
ELSE
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
EXTERN
;
=
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
(
)
;
}
}
STATIC
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
(
)
)
{
=
;
=
;
RETURN
;
}
=
;
=
;
RETURN
;
}
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
INT
;
VOID
;
IF
(
(
)
)
RETURN
;
IF
(
(
=
(
,
)
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
(
=
(
,
)
)
)
{
;
CHAR
;
(
)
;
(
)
;
=
(
CHAR
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
}
(
(
)
)
;
=
;
}
ELSE
IF
(
(
,
)
(
=
(
,
)
)
)
{
CHAR
;
CHAR
,
;
(
)
;
(
)
;
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
(
,
,
,
,
,
(
VOID
)
)
;
=
;
}
(
)
;
}
STATIC
VOID
(
UNSIGNED
CHAR
)
{
FLOAT
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
(
=
(
)
)
)
{
IF
(
(
(
,
)
)
(
(
,
)
)
)
=
;
ELSE
=
;
}
ELSE
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
,
,
(
)
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
;
CHAR
;
INT
=
,
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
=
;
;
IF
(
)
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
=
;
=
(
,
(
,
)
,
,
)
;
IF
(
)
(
)
;
(
)
;
=
;
=
;
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
=
;
;
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
}
ELSE
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
=
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
WHILE
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
}
VOID
(
)
{
(
)
;
}
__E__O__F__
STATIC
=
;
STATIC
INT
;
STATIC
;
STATIC
=
;
(
)
(
)
(
)
UNSIGNED
SHORT
;
UNSIGNED
;
UNSIGNED
CHAR
;
=
{
,
,
}
;
STATIC
;
STATIC
;
STATIC
INT
,
;
STATIC
INT
,
;
STATIC
=
{
,
,
}
;
STATIC
=
{
,
,
}
;
STATIC
=
{
,
}
;
=
;
=
;
STATIC
INT
,
;
STATIC
INT
,
;
STATIC
;
STATIC
INT
;
STATIC
INT
;
STATIC
=
;
INT
=
;
INT
=
;
FLOAT
,
;
=
{
,
}
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
INT
,
CONST
VOID
)
;
VOID
(
)
(
)
;
STATIC
FLOAT
=
;
=
;
=
;
=
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
STATIC
INT
(
)
{
INT
;
CHAR
;
;
=
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
UNSIGNED
CHAR
)
;
IF
(
)
=
;
BREAK
;
}
RETURN
;
}
STATIC
(
,
)
{
;
;
;
;
;
=
(
,
,
,
,
)
;
=
;
=
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
(
,
,
(
,
)
)
;
(
,
,
,
,
,
,
,
,
)
;
IF
(
)
{
INT
,
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
}
ELSE
{
=
;
(
,
(
)
,
)
;
(
,
,
,
,
,
,
,
,
)
;
}
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
(
,
,
,
,
,
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
(
)
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
;
;
INT
;
=
;
INT
=
;
INT
=
;
IF
(
)
RETURN
;
WHILE
(
(
)
)
{
(
,
)
;
SWITCH
(
)
{
CASE
CASE
(
(
)
,
)
;
BREAK
;
CASE
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
(
(
INT
)
)
;
(
(
INT
)
)
;
=
;
=
;
IF
(
)
=
;
}
}
BREAK
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
,
)
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
,
)
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
}
IF
(
)
{
(
,
,
,
,
,
,
,
,
)
;
}
}
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
=
;
}
}
STATIC
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
=
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
,
)
;
(
)
;
}
=
;
=
;
=
;
=
;
}
VOID
(
INT
)
{
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
}
VOID
(
UNSIGNED
CHAR
)
{
;
UNSIGNED
,
,
;
UNSIGNED
;
INT
,
,
;
INT
,
,
,
;
UNSIGNED
SHORT
;
UNSIGNED
;
;
CHAR
;
INT
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
(
)
(
)
(
)
(
)
;
=
;
}
;
FOR
(
=
;
(
)
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
;
FOR
(
=
,
=
,
=
;
;
,
)
{
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
INT
)
(
INT
)
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
}
VOID
(
VOID
)
{
VOID
;
IF
(
(
,
)
(
)
)
{
(
)
;
IF
(
(
=
(
,
)
)
)
{
(
)
;
RETURN
;
}
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
=
;
}
ELSE
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
EXTERN
;
=
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
INT
;
VOID
;
IF
(
(
=
(
,
)
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
(
=
(
,
)
)
)
{
;
CHAR
;
(
)
;
(
)
;
=
(
CHAR
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
}
(
(
)
)
;
=
;
}
ELSE
IF
(
(
,
)
(
=
(
,
)
)
)
{
CHAR
;
CHAR
,
;
(
)
;
(
)
;
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
(
,
,
,
,
,
(
VOID
)
)
;
=
;
}
(
)
;
}
STATIC
VOID
(
UNSIGNED
CHAR
)
{
FLOAT
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
(
=
(
)
)
)
{
IF
(
(
(
,
)
)
(
(
,
)
)
)
=
;
ELSE
=
;
}
ELSE
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
,
,
(
)
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
;
INT
=
,
=
;
;
UNSIGNED
LONG
;
;
;
=
;
INT
,
;
INT
,
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
IF
(
(
=
(
)
)
)
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
=
;
;
IF
(
)
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
=
;
IF
(
(
=
(
)
)
)
{
(
,
)
;
(
)
;
}
=
(
)
;
=
(
,
)
;
=
=
;
IF
(
(
,
,
)
)
{
=
;
}
ELSE
{
(
,
,
)
;
=
;
}
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
IF
(
)
{
INT
,
,
,
,
;
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
;
=
(
)
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
(
,
,
)
;
=
;
(
,
,
,
)
;
}
ELSE
=
;
}
}
=
;
=
;
=
(
,
,
,
)
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
(
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
)
;
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
,
,
,
)
;
}
(
)
;
=
(
,
,
,
)
;
(
,
,
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
=
=
;
}
VOID
(
)
{
(
)
;
}
__E__O__F__
(
)
(
)
TYPEDEF
STRUCT
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
}
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
CONST
CHAR
;
;
;
STATIC
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
=
;
STATIC
,
;
STATIC
=
;
STATIC
=
;
STATIC
INT
;
EXTERN
;
STATIC
;
INT
,
;
;
,
;
,
;
INT
=
;
INT
;
INT
=
;
STATIC
INT
;
UNSIGNED
CHAR
;
STATIC
=
;
STATIC
FLOAT
=
;
;
;
;
=
{
,
}
;
(
,
INT
)
;
;
UNSIGNED
SHORT
;
UNSIGNED
;
UNSIGNED
CHAR
;
FLOAT
,
;
=
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
(
,
,
,
)
;
VOID
(
,
)
;
CHAR
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
;
;
;
;
TYPEDEF
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
INT
,
CONST
VOID
)
;
;
=
;
=
;
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
INT
,
,
,
,
,
;
;
VOID
(
)
{
}
VOID
(
INT
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
,
INT
,
INT
,
)
{
;
INT
,
;
=
(
(
)
)
;
=
(
(
)
)
;
IF
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
,
,
)
;
}
(
INT
)
{
;
INT
,
,
;
;
=
;
=
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
(
,
,
,
)
;
(
,
)
;
(
)
;
=
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
RETURN
;
}
(
INT
)
{
;
INT
,
,
;
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
,
)
)
(
)
;
}
=
;
=
;
=
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
(
,
)
;
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
RETURN
;
}
INT
(
INT
,
UNSIGNED
CHAR
)
{
INT
,
;
;
;
;
IF
(
(
(
)
)
(
(
)
)
(
(
)
)
)
{
(
)
;
}
=
;
=
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
{
=
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
=
(
)
;
}
}
ELSE
IF
(
)
{
=
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
}
=
;
=
;
(
)
;
(
)
;
=
;
IF
(
)
{
(
)
;
}
(
)
;
(
)
;
=
;
(
,
(
FLOAT
)
)
;
WHILE
(
(
,
,
,
,
)
)
{
(
)
;
(
)
;
}
(
)
;
(
,
,
,
,
,
,
)
;
(
)
;
(
)
;
IF
(
)
(
,
(
)
)
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
}
;
VOID
(
VOID
)
{
CHAR
;
;
;
=
;
=
(
UNSIGNED
CHAR
)
(
)
;
WHILE
(
)
{
IF
(
(
(
CONST
CHAR
)
,
,
(
)
)
)
=
;
;
}
IF
(
(
)
)
{
=
(
)
;
IF
(
)
(
)
;
=
(
VOID
)
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
(
=
(
)
(
(
)
)
)
)
{
(
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
CHAR
;
=
(
UNSIGNED
CHAR
)
(
)
;
WHILE
(
)
{
IF
(
(
(
CONST
CHAR
)
,
,
(
)
)
)
{
IF
(
(
(
=
(
)
)
)
(
(
=
(
)
)
)
(
(
=
(
)
)
)
(
(
=
(
)
)
)
)
{
(
)
;
RETURN
;
}
RETURN
;
}
;
}
(
)
;
}
INT
=
;
INT
=
;
VOID
(
VOID
)
{
IF
(
(
,
)
(
)
)
{
(
)
;
=
(
VOID
)
(
)
;
=
(
VOID
)
(
)
;
=
;
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
IF
(
(
,
,
)
)
=
;
IF
(
(
,
,
)
)
=
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
EXTERN
;
=
=
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
=
;
}
}
ELSE
{
=
;
IF
(
)
{
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
}
}
IF
(
)
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
;
UNSIGNED
,
,
;
UNSIGNED
;
INT
,
,
;
INT
,
,
,
;
UNSIGNED
SHORT
;
UNSIGNED
;
;
CHAR
;
,
;
FLOAT
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
(
)
(
)
(
)
(
)
;
=
;
}
;
FOR
(
=
;
(
)
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
UNSIGNED
CHAR
)
;
FOR
(
=
,
=
,
=
;
;
,
)
{
=
;
=
;
=
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
}
;
VOID
(
UNSIGNED
CHAR
)
{
EXTERN
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
;
;
IF
(
)
{
=
;
=
(
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
}
(
)
{
STATIC
=
{
(
)
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
,
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
RETURN
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
(
INT
)
{
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
(
,
)
;
}
(
)
;
(
)
;
}
VOID
(
,
)
{
;
;
INT
,
;
STATIC
;
=
;
=
;
IF
(
)
{
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
}
}
ELSE
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
IF
(
)
{
IF
(
)
{
(
)
;
(
)
;
IF
(
)
{
(
,
)
;
=
;
}
}
ELSE
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
}
(
,
,
,
)
{
=
;
INT
,
,
,
,
,
;
EXTERN
UNSIGNED
INT
;
IF
(
)
=
;
SWITCH
(
)
{
CASE
IF
(
)
(
,
)
;
BREAK
;
CASE
BREAK
;
CASE
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
(
)
;
BREAK
;
CASE
CASE
(
(
)
,
)
;
BREAK
;
CASE
CASE
(
(
)
,
)
;
BREAK
;
CASE
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
)
;
BREAK
;
CASE
IF
(
(
SHORT
)
(
)
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
BREAK
;
CASE
IF
(
(
,
,
,
)
)
{
(
)
;
}
BREAK
;
CASE
=
(
)
;
=
(
)
(
)
;
(
(
)
,
)
;
(
)
;
BREAK
;
CASE
{
IF
(
)
(
)
;
(
)
;
}
BREAK
;
CASE
=
(
,
,
,
)
;
BREAK
;
DEFAULT
=
(
,
,
,
)
;
BREAK
;
}
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
(
INT
)
{
IF
(
(
)
(
)
)
RETURN
;
ELSE
RETURN
;
}
CHAR
(
INT
)
{
CHAR
;
;
STATIC
CHAR
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
(
,
,
,
)
;
=
;
}
RETURN
;
}
CHAR
(
INT
)
{
STATIC
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
,
,
)
;
}
ELSE
{
(
,
,
,
)
;
}
}
ELSE
{
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
=
(
(
)
)
;
=
;
=
;
(
,
(
)
)
;
=
;
}
VOID
(
VOID
)
{
INT
,
,
;
CHAR
;
;
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
(
,
,
)
;
}
=
;
}
VOID
(
)
{
;
;
INT
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
=
;
IF
(
(
)
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
=
;
IF
(
(
)
)
=
(
(
)
)
;
ELSE
=
;
IF
(
)
=
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
;
INT
,
,
,
,
,
;
INT
,
,
;
;
=
;
=
;
DO
{
=
(
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
)
;
IF
(
(
)
)
{
IF
(
(
)
)
{
;
=
;
(
,
,
,
,
)
;
}
}
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
;
}
}
}
;
}
WHILE
(
)
;
=
(
)
(
)
;
=
;
=
;
DO
{
FOR
(
=
;
(
)
(
)
;
)
{
=
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
)
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
;
}
}
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
WHILE
(
)
;
IF
(
)
(
)
;
}
(
)
{
RETURN
;
}
VOID
(
)
{
INT
;
CHAR
;
CHAR
,
;
=
(
VOID
)
(
)
;
IF
(
(
,
)
(
)
)
RETURN
;
(
)
;
(
)
;
=
(
CHAR
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
(
,
,
,
,
,
(
VOID
)
)
;
=
;
}
STATIC
VOID
(
UNSIGNED
CHAR
)
{
FLOAT
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
(
=
(
)
)
)
{
IF
(
(
(
,
)
)
(
(
,
)
)
)
=
;
ELSE
=
;
}
ELSE
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
,
,
(
)
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
,
;
INT
,
,
,
,
,
;
;
CHAR
;
;
;
(
,
,
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
,
(
)
)
;
(
)
;
(
)
;
=
=
;
(
)
;
IF
(
(
)
)
{
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
}
(
,
)
;
=
;
=
;
}
ELSE
{
IF
(
)
(
)
;
=
;
IF
(
(
)
)
{
=
(
(
)
)
;
}
ELSE
{
IF
(
(
)
)
{
=
(
)
;
=
(
)
;
=
;
=
;
}
ELSE
{
IF
(
(
)
)
{
=
(
(
)
)
;
}
ELSE
{
=
;
}
IF
(
(
)
)
{
=
(
(
)
)
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
)
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
;
}
}
=
;
DO
{
IF
(
(
)
)
{
=
(
(
)
)
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
=
;
BREAK
;
}
}
}
ELSE
{
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
BREAK
;
}
}
}
IF
(
)
{
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
ELSE
{
=
;
}
}
}
WHILE
(
)
;
IF
(
)
{
(
)
;
}
}
}
}
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
=
;
;
IF
(
)
=
;
=
;
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
=
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
(
)
;
(
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
(
,
)
)
(
)
;
(
)
;
(
,
,
)
;
(
)
;
=
;
(
)
;
=
;
=
;
(
,
)
;
=
;
IF
(
(
)
)
=
;
}
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
INT
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
STATIC
INT
,
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
INT
;
}
;
(
)
(
)
STATIC
;
VOID
(
VOID
)
{
;
CHAR
;
INT
,
,
,
,
,
,
,
;
CHAR
;
;
=
(
)
;
(
(
)
,
,
)
;
=
;
=
(
)
;
FOR
(
=
;
(
)
(
)
;
)
{
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
;
}
IF
(
)
{
(
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
IF
(
(
)
(
)
)
{
=
;
;
}
}
}
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
__E__O__F__
EXTERN
;
INT
;
INT
;
INT
;
FLOAT
;
;
EXTERN
;
VOID
(
INT
,
FLOAT
,
,
)
{
INT
,
;
FLOAT
;
=
=
=
;
=
=
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
,
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
VOID
(
INT
,
FLOAT
)
{
INT
,
,
;
,
;
FLOAT
;
FLOAT
;
,
;
INT
,
;
FLOAT
;
FLOAT
;
;
FLOAT
,
;
IF
(
)
(
,
)
;
(
,
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
,
)
=
;
=
;
;
(
,
)
;
=
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
(
,
)
;
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
)
{
=
(
)
;
FOR
(
=
;
;
)
=
=
(
)
;
;
;
}
}
(
,
)
;
(
,
)
;
RETURN
;
}
=
(
(
)
(
)
(
FLOAT
)
)
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
}
}
VOID
(
)
{
;
INT
;
INT
;
INT
;
FLOAT
;
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
;
}
(
,
)
;
}
FLOAT
=
{
}
;
(
(
)
)
VOID
(
)
{
;
FLOAT
;
INT
;
FLOAT
,
,
,
;
FOR
(
=
;
;
=
)
{
(
)
;
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
(
INT
)
(
(
)
)
;
(
)
;
=
(
INT
)
(
(
)
)
;
(
)
;
(
,
)
;
(
)
;
}
(
)
;
}
}
VOID
(
)
{
;
FLOAT
;
INT
;
FLOAT
,
;
;
FLOAT
;
FOR
(
=
;
;
=
)
{
(
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
;
=
;
=
(
)
;
=
;
;
;
=
(
)
(
)
;
=
(
)
(
)
;
(
,
)
;
(
)
;
}
(
)
;
}
}
VOID
(
)
{
INT
;
INT
;
FLOAT
;
(
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
(
)
;
=
;
(
INT
)
;
(
)
;
(
)
;
}
VOID
(
)
{
;
(
)
;
(
)
;
=
;
(
INT
)
;
FOR
(
=
;
;
=
)
(
)
;
(
)
;
(
)
;
=
;
(
INT
)
;
FOR
(
=
;
;
=
)
(
)
;
(
)
;
}
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
CHAR
;
CHAR
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
CHAR
;
UNSIGNED
;
}
;
;
VOID
(
)
{
,
;
;
;
INT
,
;
INT
,
;
INT
;
(
,
,
(
)
,
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
(
,
,
,
)
;
(
,
(
)
,
)
;
=
(
)
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
)
)
{
=
;
=
(
)
;
}
ELSE
=
;
WHILE
(
)
{
=
;
=
;
=
;
=
;
;
;
}
}
}
}
TYPEDEF
STRUCT
{
UNSIGNED
CHAR
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
CHAR
,
;
}
;
;
;
INT
(
)
{
,
;
=
(
)
;
=
(
)
;
RETURN
(
SHORT
)
(
)
;
}
INT
(
)
{
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
(
)
(
)
(
)
;
}
VOID
(
)
{
INT
,
,
;
;
INT
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
UNSIGNED
CHAR
,
,
,
;
SWITCH
(
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
BREAK
;
}
}
}
}
ELSE
IF
(
)
{
UNSIGNED
CHAR
,
,
,
,
,
,
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
BREAK
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
IF
(
)
;
ELSE
GOTO
;
=
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
SWITCH
(
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
BREAK
;
}
;
IF
(
)
{
=
;
IF
(
)
;
ELSE
GOTO
;
=
;
}
}
}
}
;
}
}
(
)
;
}
CHAR
=
{
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
;
CHAR
;
FOR
(
=
;
;
)
{
(
)
;
(
,
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
CONTINUE
;
}
(
)
;
(
,
,
,
,
,
,
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
}
}
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
;
INT
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
FLOAT
,
;
VOID
(
INT
,
)
{
INT
,
;
,
;
FLOAT
,
,
;
INT
;
FLOAT
;
;
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
(
)
;
}
(
)
;
RETURN
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
FOR
(
=
;
;
,
)
{
=
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
VOID
(
INT
,
,
INT
)
{
FLOAT
;
FLOAT
;
,
;
FLOAT
,
;
FLOAT
;
INT
;
;
INT
;
INT
,
;
IF
(
)
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
=
;
=
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
;
(
,
(
(
)
)
)
;
=
=
;
FOR
(
=
,
=
;
;
,
)
{
SWITCH
(
)
{
CASE
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
;
(
,
)
;
;
BREAK
;
}
IF
(
)
CONTINUE
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
}
;
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
)
{
;
INT
;
;
;
=
;
(
)
;
FOR
(
=
;
;
=
)
{
FOR
(
=
;
;
=
)
{
FOR
(
=
;
;
)
{
(
,
,
)
;
}
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
=
;
=
=
;
}
}
VOID
(
FLOAT
,
FLOAT
,
INT
)
{
,
;
INT
,
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
;
}
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
(
,
)
;
(
)
;
}
INT
=
{
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
,
,
;
;
FLOAT
,
;
(
)
;
(
,
,
)
;
(
,
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
(
)
;
(
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
)
{
INT
,
,
;
;
UNSIGNED
;
UNSIGNED
;
INT
,
,
;
UNSIGNED
;
EXTERN
INT
;
=
(
)
;
=
=
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
(
)
=
;
(
(
)
)
;
(
(
)
)
;
(
(
)
)
;
}
(
(
)
)
=
(
)
;
(
(
)
)
=
(
)
;
(
(
)
)
=
(
)
;
(
(
)
)
=
;
IF
(
)
=
;
(
)
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
)
=
;
ELSE
(
)
=
;
}
IF
(
)
=
;
(
)
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
__E__O__F__
;
;
DOUBLE
;
DOUBLE
;
DOUBLE
;
DOUBLE
;
INT
;
INT
;
INT
;
;
;
;
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
}
;
=
{
,
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
STATIC
=
;
IF
(
)
(
)
;
=
;
(
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
(
)
;
=
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
(
)
;
IF
(
)
{
=
;
IF
(
(
)
)
{
=
(
)
;
}
ELSE
=
;
}
ELSE
=
;
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
(
)
)
=
(
)
;
ELSE
=
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
IF
(
)
=
;
=
(
(
)
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
;
IF
(
)
{
=
(
(
,
)
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
FOR
(
=
;
;
)
IF
(
)
{
(
,
)
;
(
,
)
;
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
;
INT
;
;
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
IF
(
)
{
=
;
=
(
)
;
(
)
;
=
;
}
(
,
)
;
}
(
)
;
=
;
=
;
=
;
=
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
}
VOID
(
)
{
INT
;
INT
;
;
CHAR
;
DOUBLE
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
=
(
)
;
DO
{
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
(
)
;
}
ELSE
{
(
)
;
;
}
}
}
IF
(
(
(
)
)
)
BREAK
;
}
WHILE
(
)
;
=
;
=
;
=
;
(
,
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
=
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
}
(
FLOAT
)
{
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
=
;
ELSE
{
IF
(
)
=
;
IF
(
)
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
(
)
;
}
}
VOID
(
VOID
)
{
=
;
(
)
;
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
=
;
(
)
;
(
)
;
=
=
;
WHILE
(
(
)
)
{
IF
(
)
=
;
ELSE
=
;
;
(
)
;
}
=
;
(
)
;
}
VOID
(
VOID
)
{
=
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
(
)
;
}
VOID
(
FLOAT
)
{
STATIC
DOUBLE
=
;
STATIC
DOUBLE
=
;
STATIC
DOUBLE
=
;
INT
,
,
;
IF
(
(
)
)
RETURN
;
(
)
;
IF
(
(
)
)
RETURN
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
;
IF
(
)
{
(
)
;
}
IF
(
)
=
(
)
;
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
ELSE
(
,
,
,
)
;
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
}
;
}
VOID
(
FLOAT
)
{
DOUBLE
,
;
STATIC
DOUBLE
;
STATIC
INT
;
INT
,
,
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
)
;
=
(
)
;
;
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
}
(
,
,
)
;
}
EXTERN
INT
;
VOID
(
)
{
INT
,
,
;
CHAR
;
IF
(
(
)
)
{
IF
(
)
(
)
;
(
,
)
;
IF
(
)
(
)
;
(
,
,
(
INT
)
)
;
IF
(
)
(
)
;
(
,
,
(
INT
)
)
;
=
(
(
CHAR
)
)
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
INT
)
)
;
=
(
)
;
(
,
,
)
;
=
;
}
;
=
;
=
;
}
IF
(
(
=
(
)
)
)
{
=
(
)
;
=
;
(
,
,
(
INT
)
)
;
=
;
(
,
,
(
INT
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
,
,
(
INT
)
)
;
(
,
,
)
;
CONTINUE
;
}
=
(
)
;
(
,
,
(
INT
)
)
;
(
,
,
)
;
}
}
}
VOID
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
=
;
=
;
IF
(
)
(
,
(
FLOAT
)
)
;
=
;
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
(
)
)
;
(
)
;
IF
(
)
{
=
(
)
(
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
(
,
)
;
=
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
}
}
__E__O__F__
EXTERN
;
INT
;
VOID
(
VOID
)
;
EXTERN
VOID
(
VOID
)
;
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
INT
;
INT
=
;
INT
;
VOID
(
)
(
CHAR
,
)
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
}
ELSE
=
;
(
,
(
)
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
(
INT
)
(
)
;
=
;
IF
(
)
{
(
)
;
=
;
IF
(
)
(
)
;
}
ELSE
=
;
(
,
,
,
(
INT
)
,
,
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
=
(
INT
)
;
IF
(
(
(
INT
)
)
)
(
)
;
ELSE
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
=
(
INT
)
;
IF
(
(
(
INT
)
)
)
(
)
;
ELSE
(
)
;
}
;
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
(
)
;
}
ELSE
{
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
)
;
}
ELSE
{
=
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
FLOAT
;
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
;
;
(
,
(
INT
)
(
)
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
IF
(
)
RETURN
;
=
;
(
)
;
(
)
;
=
;
(
)
;
=
;
FOR
(
=
;
(
)
;
)
{
(
,
(
)
)
;
(
,
)
;
}
(
,
)
;
=
;
(
,
(
)
)
;
(
,
)
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
FOR
(
=
;
(
)
;
)
{
(
,
(
)
)
;
(
,
)
;
}
(
,
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
,
(
)
)
;
IF
(
(
)
)
=
;
ELSE
{
(
,
(
)
)
;
=
;
}
(
)
;
(
,
)
;
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
=
;
IF
(
)
{
(
)
;
(
)
;
}
(
,
(
)
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
)
{
INT
;
CHAR
;
FOR
(
=
;
;
)
=
;
(
,
,
(
)
)
;
(
,
,
,
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
IF
(
)
=
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
;
INT
;
CHAR
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
(
)
,
)
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
(
,
,
,
(
)
)
;
(
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
}
(
)
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
(
)
;
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
CHAR
;
FLOAT
,
;
CHAR
,
;
INT
,
;
;
INT
;
INT
;
FLOAT
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
(
,
,
,
(
)
)
;
(
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
,
)
;
RETURN
;
}
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
)
;
=
(
INT
)
(
)
;
(
,
(
FLOAT
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
(
)
)
;
(
,
)
;
}
=
;
WHILE
(
(
)
)
{
FOR
(
=
;
(
)
;
)
{
=
(
)
;
IF
(
)
BREAK
;
=
;
IF
(
)
{
;
BREAK
;
}
}
IF
(
(
)
)
(
)
;
=
;
=
;
=
(
)
;
IF
(
)
BREAK
;
IF
(
(
,
)
)
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
=
(
)
;
(
,
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
}
;
}
=
;
=
;
(
)
;
FOR
(
=
;
;
)
=
;
IF
(
)
{
(
)
;
(
)
;
}
}
VOID
(
)
{
CHAR
;
;
INT
;
CHAR
;
;
(
,
,
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
INT
)
)
CONTINUE
;
(
,
,
)
;
(
,
)
;
(
)
;
}
(
)
;
(
)
;
}
INT
(
CHAR
,
CHAR
)
{
CHAR
;
;
CHAR
;
FLOAT
,
;
CHAR
,
;
INT
,
;
;
INT
;
INT
;
(
,
,
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
,
)
;
RETURN
;
}
(
,
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
(
)
)
;
(
,
)
;
}
WHILE
(
(
)
)
{
(
,
,
)
;
FOR
(
=
;
(
)
;
)
{
=
(
)
;
IF
(
)
BREAK
;
=
;
IF
(
)
{
;
BREAK
;
}
}
IF
(
(
)
)
(
)
;
=
;
=
;
=
(
)
;
IF
(
)
BREAK
;
IF
(
(
,
)
)
(
)
;
=
(
)
;
(
,
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
}
=
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
CHAR
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
,
(
)
)
;
IF
(
(
)
)
=
;
ELSE
{
(
,
(
)
)
;
=
;
}
(
)
;
(
)
;
IF
(
(
,
)
)
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
IF
(
(
)
)
=
(
)
;
ELSE
=
(
)
;
=
;
IF
(
)
{
IF
(
(
,
)
)
RETURN
;
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
(
,
)
)
IF
(
(
,
)
)
(
,
,
)
;
(
,
)
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
(
(
)
)
(
(
)
,
)
)
{
=
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
=
;
=
(
INT
)
(
)
;
=
;
=
;
}
ELSE
=
;
}
IF
(
(
)
)
RETURN
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
(
)
)
)
{
IF
(
)
{
=
;
=
(
INT
)
(
)
;
=
;
=
;
}
ELSE
=
;
BREAK
;
}
}
}
VOID
(
)
{
;
;
INT
;
CHAR
;
UNSIGNED
CHAR
;
=
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
(
)
;
RETURN
;
}
}
IF
(
(
)
)
RETURN
;
=
;
=
(
)
;
IF
(
)
{
;
(
)
=
;
}
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
=
(
)
(
)
;
IF
(
(
)
)
=
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
(
,
)
;
}
=
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
;
;
INT
;
CHAR
;
CHAR
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
(
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
;
(
)
=
;
}
=
(
)
(
)
;
IF
(
(
)
)
=
;
(
,
)
;
(
,
)
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
(
)
)
)
CONTINUE
;
=
;
(
,
)
;
BREAK
;
}
=
;
}
VOID
(
VOID
)
{
INT
,
;
INT
;
IF
(
(
)
)
{
(
,
(
(
INT
)
)
,
(
(
INT
)
)
)
;
(
)
;
RETURN
;
}
IF
(
(
)
)
=
=
(
(
)
)
;
ELSE
{
=
(
(
)
)
;
=
(
(
)
)
;
}
;
IF
(
)
=
;
;
IF
(
)
=
;
=
;
IF
(
)
{
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
ELSE
{
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
(
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
)
;
(
,
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
=
;
}
ELSE
{
=
;
(
,
,
)
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
(
)
=
;
=
;
=
(
)
;
(
)
;
IF
(
(
(
)
)
)
(
,
)
;
(
)
;
}
(
)
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
FOR
(
=
;
;
)
{
(
,
)
;
(
,
(
CHAR
)
)
;
(
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
(
)
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
=
;
;
INT
;
=
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
ELSE
IF
(
)
RETURN
;
=
;
IF
(
(
)
(
(
)
,
)
)
{
=
(
(
)
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
}
ELSE
{
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
(
)
)
)
BREAK
;
}
}
IF
(
)
{
IF
(
)
IF
(
)
=
;
ELSE
=
;
ELSE
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
(
(
)
)
;
IF
(
)
{
;
WHILE
(
)
;
(
(
)
)
;
}
WHILE
(
)
;
}
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
(
)
;
}
=
;
}
VOID
(
VOID
)
{
CHAR
;
INT
,
;
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
=
(
)
;
=
(
(
)
)
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
IF
(
)
{
IF
(
)
{
IF
(
)
=
(
INT
)
;
ELSE
=
(
INT
)
;
}
ELSE
IF
(
)
=
(
INT
)
;
ELSE
IF
(
)
=
(
INT
)
;
ELSE
IF
(
)
=
(
INT
)
(
(
)
)
;
}
ELSE
{
IF
(
)
=
(
INT
)
(
(
)
)
;
}
BREAK
;
CASE
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
}
=
;
BREAK
;
CASE
IF
(
)
{
=
(
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
}
}
ELSE
{
=
;
}
BREAK
;
CASE
IF
(
)
{
=
(
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
}
}
BREAK
;
CASE
IF
(
)
{
=
(
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
}
}
ELSE
{
=
;
}
BREAK
;
CASE
IF
(
)
{
=
(
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
}
}
BREAK
;
CASE
=
;
BREAK
;
CASE
IF
(
)
{
=
(
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
}
}
ELSE
{
=
;
}
BREAK
;
CASE
IF
(
)
{
=
(
,
)
;
IF
(
)
{
=
;
IF
(
)
=
;
}
}
BREAK
;
}
}
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
,
)
)
RETURN
;
}
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
;
=
(
)
;
IF
(
)
RETURN
;
=
(
(
)
,
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
=
;
(
INT
)
=
;
}
VOID
(
VOID
)
{
;
INT
;
;
=
(
)
;
IF
(
)
RETURN
;
=
(
INT
)
;
=
(
(
)
)
;
IF
(
)
=
;
=
;
}
VOID
(
,
INT
)
{
;
;
=
(
)
(
)
;
IF
(
)
RETURN
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
;
=
(
)
;
IF
(
)
RETURN
;
=
(
INT
)
;
=
;
IF
(
)
=
;
(
,
)
;
}
VOID
(
VOID
)
{
;
;
=
(
)
;
IF
(
)
RETURN
;
=
(
INT
)
;
=
;
IF
(
)
=
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
{
IF
(
)
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
=
;
}
(
,
)
;
FOR
(
=
;
;
)
(
,
(
)
,
(
)
)
;
IF
(
)
{
=
;
(
)
;
}
ELSE
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
LONG
;
CHAR
;
LONG
;
LONG
;
LONG
;
;
FLOAT
;
FLOAT
;
FLOAT
;
LONG
;
}
;
=
{
,
}
;
;
INT
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
=
{
,
}
;
=
{
,
,
}
;
;
INT
;
INT
;
INT
,
,
,
;
INT
,
;
;
;
INT
;
INT
;
INT
;
=
{
,
,
}
;
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
;
(
VOID
)
;
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
IF
(
(
)
)
RETURN
;
=
;
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
=
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
=
(
)
;
IF
(
)
{
=
(
(
)
)
;
(
)
;
}
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
=
;
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
IF
(
)
{
=
(
(
(
)
)
)
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
}
VOID
(
)
{
INT
,
;
IF
(
)
RETURN
;
=
;
(
)
;
=
(
SHORT
)
;
=
(
SHORT
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
}
VOID
(
)
{
FLOAT
,
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
{
IF
(
)
;
ELSE
IF
(
)
;
}
ELSE
{
IF
(
)
;
ELSE
IF
(
)
;
=
(
)
;
}
IF
(
)
{
IF
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
}
ELSE
{
IF
(
)
;
ELSE
IF
(
)
;
}
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
}
(
VOID
)
{
INT
;
INT
;
=
;
=
;
=
;
=
(
)
;
(
,
)
;
WHILE
(
)
{
=
(
)
;
;
(
)
;
IF
(
(
)
)
RETURN
;
}
(
)
;
=
;
RETURN
;
}
(
VOID
)
{
INT
,
;
=
;
DO
{
=
;
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
=
(
(
(
)
)
)
;
IF
(
)
{
=
;
CONTINUE
;
}
}
WHILE
(
)
;
DO
{
=
;
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
=
(
(
(
)
)
)
;
IF
(
)
{
=
;
CONTINUE
;
}
}
WHILE
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
(
)
;
=
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
{
=
;
(
)
;
RETURN
;
}
(
)
;
(
)
;
IF
(
(
)
)
RETURN
;
(
)
;
=
;
=
;
(
)
;
IF
(
(
)
)
RETURN
;
(
)
;
=
(
)
;
=
(
)
;
(
)
;
IF
(
(
)
)
RETURN
;
(
)
;
=
(
)
;
=
(
)
;
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
=
;
(
,
)
;
(
,
,
)
;
=
;
=
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
(
)
;
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
)
{
}
__E__O__F__
EXTERN
;
EXTERN
INT
,
,
;
EXTERN
INT
,
;
EXTERN
INT
;
EXTERN
,
;
EXTERN
;
EXTERN
;
EXTERN
INT
,
;
=
{
,
,
}
;
INT
,
;
INT
,
;
STATIC
INT
,
,
;
STATIC
=
;
VOID
(
VOID
)
{
(
)
;
IF
(
)
RETURN
;
(
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
{
=
;
(
)
;
IF
(
(
,
,
,
)
)
(
)
;
(
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
)
;
(
)
;
=
=
;
=
=
;
}
ELSE
IF
(
(
)
)
{
(
)
;
=
;
IF
(
(
,
,
,
,
,
)
)
(
)
;
(
,
)
;
(
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
(
,
,
,
,
,
)
)
(
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
)
{
STATIC
INT
,
;
STATIC
LONG
LONG
;
LONG
LONG
,
(
)
;
INT
,
;
(
)
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
=
;
;
;
IF
(
)
{
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
(
)
;
RETURN
;
}
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
}
__E__O__F__
(
,
,
,
)
(
,
,
,
)
(
)
(
,
,
,
)
;
=
{
,
}
;
INT
;
INT
;
;
INT
,
,
,
,
,
;
STATIC
;
STATIC
INT
,
=
{
,
,
}
;
UNSIGNED
INT
;
;
;
STATIC
,
;
STATIC
=
;
STATIC
;
STATIC
UNSIGNED
INT
;
ENUM
{
=
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
;
;
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
,
,
;
,
;
INT
;
;
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
TYPEDEF
STRUCT
{
;
;
;
;
;
;
;
}
;
STATIC
=
{
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
{
,
(
,
)
,
,
,
}
,
}
;
(
(
)
(
)
)
STATIC
=
{
(
)
,
(
)
,
,
(
)
,
,
,
}
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
}
ELSE
{
RETURN
;
}
}
ELSE
{
IF
(
)
=
(
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
}
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
}
}
ELSE
{
IF
(
)
(
,
,
,
)
;
(
)
;
(
)
;
}
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
(
)
;
(
)
;
}
(
VOID
)
{
;
=
{
{
(
)
,
(
)
,
,
,
}
,
,
}
;
IF
(
)
{
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
)
{
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
=
(
,
,
,
)
;
IF
(
(
)
)
{
RETURN
;
}
=
(
,
,
,
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
,
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
(
)
)
{
=
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
IF
(
)
{
=
(
,
,
,
)
;
IF
(
)
{
IF
(
(
)
)
=
;
IF
(
(
)
)
{
=
;
=
;
}
IF
(
(
)
)
{
=
;
=
;
=
;
}
}
}
=
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
INT
)
{
INT
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
}
VOID
(
)
{
INT
,
;
;
INT
;
;
;
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
FOR
(
;
;
)
{
=
;
=
(
,
(
)
,
,
,
)
;
IF
(
(
)
(
)
)
{
=
;
(
)
;
BREAK
;
}
IF
(
(
)
)
{
BREAK
;
}
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
BREAK
;
CASE
IF
(
)
;
ELSE
;
BREAK
;
CASE
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
CASE
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
}
}
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
ELSE
{
(
)
;
=
;
=
;
=
;
=
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
IF
(
)
{
(
,
)
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
IF
(
)
{
IF
(
)
{
(
)
;
;
;
(
,
)
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
;
=
;
IF
(
(
)
)
RETURN
;
IF
(
(
=
(
)
)
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
IF
(
(
=
(
,
)
)
)
BREAK
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
(
)
)
;
IF
(
(
=
(
,
,
(
)
)
)
)
{
(
,
)
;
RETURN
;
}
=
;
=
;
=
=
;
=
;
=
;
(
)
;
}
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
}
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
(
,
)
)
{
(
,
)
;
}
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
,
;
IF
(
)
{
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
=
(
)
;
(
,
)
;
}
}
=
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
IF
(
(
(
)
)
(
(
)
)
)
{
(
,
)
;
}
}
=
;
}
}
(
VOID
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
IF
(
(
,
)
)
{
IF
(
)
{
;
}
RETURN
;
}
ELSE
{
RETURN
;
}
}
VOID
(
)
{
FLOAT
,
;
FLOAT
,
;
INT
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
{
RETURN
;
}
IF
(
(
)
)
{
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
{
=
(
FLOAT
)
;
;
IF
(
)
{
IF
(
)
{
=
(
(
)
,
)
;
IF
(
)
=
;
=
(
)
;
}
}
;
SWITCH
(
)
{
CASE
IF
(
(
)
(
)
)
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
(
)
;
}
ELSE
{
IF
(
)
(
)
;
}
}
ELSE
{
IF
(
(
)
)
{
(
)
;
}
}
BREAK
;
CASE
IF
(
(
)
)
{
(
)
;
}
BREAK
;
CASE
IF
(
(
)
(
(
)
)
)
{
IF
(
(
)
)
{
(
)
;
}
}
ELSE
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
}
BREAK
;
CASE
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
(
)
;
}
ELSE
{
IF
(
)
(
)
;
}
}
BREAK
;
DEFAULT
BREAK
;
}
}
IF
(
)
=
;
IF
(
)
=
;
}
__E__O__F__
CHAR
;
INT
;
INT
=
;
INT
;
INT
=
;
INT
=
;
;
INT
;
CHAR
;
;
;
INT
;
INT
;
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
VOID
(
INT
)
{
CHAR
;
IF
(
)
{
(
)
;
(
)
;
(
,
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
)
{
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
(
,
)
;
=
(
)
;
=
;
;
=
;
RETURN
;
}
}
IF
(
)
{
IF
(
)
;
RETURN
;
}
IF
(
)
{
DO
{
=
(
)
;
}
WHILE
(
)
;
IF
(
)
=
(
)
;
(
,
)
;
=
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
DO
{
=
(
)
;
}
WHILE
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
(
,
)
;
=
(
)
;
}
RETURN
;
}
IF
(
)
{
;
IF
(
(
)
)
=
(
)
;
RETURN
;
}
IF
(
)
{
;
IF
(
)
=
;
RETURN
;
}
IF
(
)
{
=
(
)
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
;
=
;
}
}
CHAR
;
=
;
VOID
(
INT
)
{
STATIC
INT
=
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
;
=
;
}
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
;
}
INT
(
CHAR
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
CHAR
(
INT
)
{
;
STATIC
CHAR
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
RETURN
;
}
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
INT
,
CHAR
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
=
;
}
=
(
)
;
=
(
)
;
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
CHAR
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
,
(
)
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
(
)
,
)
;
ELSE
(
,
(
)
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
)
;
(
,
(
)
)
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
IF
(
)
(
,
,
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
INT
,
)
{
CHAR
;
CHAR
;
=
;
IF
(
)
=
;
=
;
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
;
IF
(
)
{
RETURN
;
}
IF
(
)
(
,
(
)
)
;
}
IF
(
)
=
;
IF
(
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
)
;
}
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
}
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
(
(
)
)
)
{
=
;
IF
(
)
{
IF
(
)
{
(
,
,
,
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
}
}
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
;
}
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
__E__O__F__
VOID
(
CHAR
,
)
;
=
{
,
,
}
;
INT
=
;
(
)
(
)
VOID
(
,
CONST
,
CONST
)
{
FLOAT
;
;
FLOAT
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
CONST
)
{
INT
;
INT
;
FLOAT
=
;
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
)
{
=
;
=
(
)
;
}
}
=
=
=
;
=
;
(
,
,
)
;
(
)
;
}
(
,
)
VOID
(
,
CONST
,
CONST
,
FLOAT
)
{
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
INT
;
,
,
;
=
;
=
;
=
;
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
=
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
}
}
(
,
)
FLOAT
(
FLOAT
)
{
IF
(
)
(
INT
)
(
)
;
ELSE
(
(
INT
)
(
)
)
;
=
(
)
(
(
INT
)
(
(
)
)
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
}
INT
(
,
,
)
{
FLOAT
,
;
INT
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
=
=
;
(
)
;
BREAK
;
}
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
IF
(
)
;
=
;
IF
(
)
=
;
IF
(
)
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
,
,
,
)
{
FLOAT
;
FLOAT
,
,
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
}
INT
(
,
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
FLOAT
,
,
)
{
=
;
=
;
=
;
}
(
,
)
{
RETURN
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
DOUBLE
(
DOUBLE
)
;
(
)
{
INT
;
FLOAT
;
=
;
FOR
(
=
;
;
)
;
=
(
)
;
RETURN
;
}
FLOAT
(
)
{
FLOAT
,
;
=
;
=
(
)
;
IF
(
)
{
=
;
;
;
;
}
RETURN
;
}
VOID
(
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
INT
(
INT
)
{
INT
=
;
WHILE
(
)
;
RETURN
;
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
FLOAT
,
FLOAT
,
FLOAT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
DOUBLE
,
DOUBLE
,
INT
,
INT
)
{
INT
,
;
DOUBLE
;
IF
(
)
(
,
)
;
IF
(
)
{
=
(
)
;
=
(
INT
)
;
=
(
INT
)
(
(
)
)
;
}
ELSE
{
=
(
)
;
=
(
INT
)
;
=
(
INT
)
(
(
)
)
;
IF
(
)
{
;
=
(
INT
)
;
}
}
=
;
=
;
}
INT
(
INT
,
INT
)
{
IF
(
)
{
IF
(
)
RETURN
(
)
;
RETURN
(
,
)
;
}
ELSE
{
IF
(
)
RETURN
(
)
;
RETURN
(
,
)
;
}
}
(
)
{
IF
(
)
RETURN
(
)
;
RETURN
(
)
(
(
(
DOUBLE
)
(
DOUBLE
)
(
DOUBLE
)
)
)
;
}
__E__O__F__
VOID
(
)
(
VOID
)
;
VOID
(
)
(
INT
)
;
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
;
;
INT
;
;
CHAR
;
(
)
(
)
(
)
(
)
(
)
(
)
VOID
(
VOID
)
;
VOID
(
INT
,
INT
,
INT
)
{
(
(
(
)
)
,
,
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
(
)
)
;
;
;
}
}
VOID
(
INT
,
INT
,
CHAR
)
{
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
INT
,
INT
,
)
{
(
(
(
)
)
,
,
)
;
}
VOID
(
INT
,
INT
,
)
{
(
(
(
)
)
,
,
)
;
}
;
;
VOID
(
INT
,
INT
)
{
INT
;
,
;
FOR
(
=
;
;
)
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
FOR
(
=
;
;
)
=
;
IF
(
)
(
,
,
)
;
ELSE
FOR
(
=
;
;
)
=
;
}
VOID
(
INT
,
INT
,
)
{
(
(
(
)
)
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
;
INT
,
;
INT
;
=
;
=
;
=
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
;
(
,
,
)
;
}
=
(
)
;
(
,
,
)
;
;
WHILE
(
)
{
=
;
=
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
;
IF
(
)
=
(
)
;
(
,
,
)
;
}
=
(
)
;
(
,
,
)
;
;
;
}
=
;
=
(
)
;
(
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
;
(
,
,
)
;
}
=
(
)
;
(
,
,
)
;
}
INT
;
VOID
(
VOID
)
{
=
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
INT
;
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
(
INT
)
(
)
;
(
,
,
(
(
,
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
=
;
=
;
=
;
IF
(
)
(
)
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
}
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
(
INT
)
(
)
;
(
,
,
(
(
,
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
=
;
SWITCH
(
)
{
CASE
IF
(
)
IF
(
(
)
)
BREAK
;
=
;
IF
(
)
(
)
;
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
}
INT
;
CHAR
;
INT
;
VOID
(
VOID
)
{
INT
,
;
CHAR
;
;
INT
;
FOR
(
=
;
;
)
{
(
,
)
;
=
;
(
,
,
,
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
IF
(
)
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
(
(
)
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
(
(
INT
)
(
)
)
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
(
(
)
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
(
(
INT
)
(
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
IF
(
)
RETURN
;
=
;
=
;
(
)
;
(
(
,
)
)
;
RETURN
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
}
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
=
;
=
;
(
(
,
)
)
;
RETURN
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
}
}
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
(
INT
)
(
)
;
(
,
,
(
(
,
)
)
)
;
IF
(
)
RETURN
;
(
(
)
(
(
)
)
,
,
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
=
;
SWITCH
(
)
{
CASE
IF
(
)
(
)
;
BREAK
;
CASE
IF
(
)
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
}
INT
=
;
INT
=
{
,
,
,
,
}
;
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
(
,
)
;
(
,
)
;
=
=
(
(
INT
)
)
;
=
=
(
(
INT
)
)
;
}
VOID
(
VOID
)
{
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
(
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
}
VOID
(
INT
)
{
INT
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
RETURN
;
(
)
;
IF
(
)
=
;
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
RETURN
;
(
)
;
IF
(
)
=
;
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
RETURN
;
IF
(
)
GOTO
;
IF
(
(
,
)
)
(
(
,
)
)
;
IF
(
(
,
)
)
(
,
)
;
IF
(
)
(
(
,
,
)
)
;
=
;
(
)
;
BREAK
;
CASE
IF
(
)
{
IF
(
(
)
)
(
)
=
;
}
IF
(
)
{
IF
(
(
)
)
(
)
=
;
}
BREAK
;
DEFAULT
IF
(
)
BREAK
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
INT
;
INT
;
INT
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
IF
(
)
=
;
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
=
;
IF
(
)
{
=
(
)
;
}
ELSE
{
=
;
=
(
)
;
}
IF
(
)
(
,
,
)
;
;
IF
(
)
{
=
(
)
;
}
ELSE
{
=
;
=
(
)
;
}
IF
(
)
(
,
,
)
;
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
(
,
,
)
;
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
(
,
,
)
;
IF
(
)
{
;
=
(
)
;
(
,
,
)
;
}
=
(
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
INT
)
(
)
;
(
,
,
(
(
,
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
IF
(
)
=
;
BREAK
;
CASE
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
BREAK
;
}
}
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
}
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
IF
(
(
)
(
)
)
{
=
;
}
}
VOID
(
INT
)
{
(
)
;
SWITCH
(
)
{
CASE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
;
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
}
}
VOID
(
INT
,
INT
,
FLOAT
)
{
INT
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
)
;
(
(
)
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
(
,
,
(
(
INT
)
(
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
=
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
(
)
;
BREAK
;
}
RETURN
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
IF
(
(
)
(
)
)
{
IF
(
)
=
;
ELSE
=
;
}
}
CHAR
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
(
(
)
(
)
)
INT
;
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
CHAR
,
INT
)
{
INT
;
INT
;
INT
;
CHAR
;
=
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
{
=
;
;
IF
(
)
BREAK
;
}
}
}
VOID
(
CHAR
)
{
INT
;
INT
;
CHAR
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
CHAR
;
INT
,
;
;
=
(
)
;
(
(
)
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
(
,
,
)
;
=
(
)
;
(
,
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
{
=
(
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
(
)
)
;
}
}
}
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
(
INT
)
(
)
)
)
;
}
VOID
(
INT
)
{
CHAR
;
INT
;
IF
(
)
{
(
)
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
(
,
,
(
)
,
)
;
(
)
;
}
=
;
RETURN
;
}
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
,
)
;
(
)
;
IF
(
)
(
)
;
=
;
BREAK
;
CASE
CASE
(
)
;
(
)
;
BREAK
;
}
}
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
(
)
;
}
VOID
(
INT
)
{
(
)
(
)
;
}
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
,
,
(
(
,
)
)
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
CASE
=
;
IF
(
)
=
;
BREAK
;
CASE
CASE
=
;
IF
(
)
=
;
BREAK
;
}
}
INT
;
INT
;
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
CASE
CASE
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
BREAK
;
CASE
CASE
=
;
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
(
)
;
=
;
}
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
INT
;
INT
=
{
,
,
,
,
,
}
;
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
,
,
}
;
INT
=
{
,
,
,
,
,
}
;
INT
;
INT
;
INT
;
CHAR
;
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
(
)
(
,
,
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
=
;
=
;
}
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
;
INT
;
CHAR
;
CHAR
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
(
,
,
(
,
,
)
)
;
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
(
,
)
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
(
,
)
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
(
,
)
)
;
IF
(
)
{
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
}
}
IF
(
)
{
(
,
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
,
)
;
(
,
,
)
;
}
(
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
INT
)
{
INT
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
BREAK
;
(
)
;
IF
(
)
{
;
IF
(
)
=
;
=
;
}
IF
(
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
IF
(
)
{
;
IF
(
)
=
;
}
BREAK
;
CASE
IF
(
)
BREAK
;
(
)
;
IF
(
)
{
;
IF
(
)
=
;
=
;
}
IF
(
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
IF
(
)
{
;
IF
(
)
=
;
}
BREAK
;
CASE
IF
(
)
GOTO
;
=
;
IF
(
)
{
(
)
(
,
,
,
,
)
;
(
)
;
BREAK
;
}
IF
(
)
{
=
;
BREAK
;
}
(
)
(
,
,
,
,
)
;
(
)
;
IF
(
)
{
(
)
;
BREAK
;
}
=
;
=
;
=
;
=
;
IF
(
)
(
(
,
)
)
;
ELSE
(
)
;
BREAK
;
CASE
IF
(
)
{
IF
(
(
)
)
(
)
=
;
}
BREAK
;
DEFAULT
IF
(
)
BREAK
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
}
IF
(
(
)
)
IF
(
)
=
;
ELSE
=
;
IF
(
)
IF
(
)
=
;
ELSE
=
;
}
INT
;
INT
=
{
,
,
,
,
}
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
VOID
(
VOID
)
{
=
;
=
;
=
;
(
)
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
(
(
INT
)
(
)
)
)
;
}
VOID
(
INT
)
{
INT
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
CASE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
=
;
}
IF
(
)
{
(
)
(
,
(
,
)
,
,
,
)
;
=
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
(
)
)
(
)
=
;
}
IF
(
)
{
IF
(
(
)
)
(
)
=
;
}
IF
(
)
{
IF
(
(
)
)
(
)
=
;
}
BREAK
;
DEFAULT
IF
(
)
BREAK
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
}
}
INT
=
;
INT
=
{
,
,
}
;
INT
;
CHAR
;
CHAR
;
VOID
(
VOID
)
{
=
;
=
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
INT
;
CHAR
;
CHAR
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
(
,
,
(
,
,
)
)
;
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
,
)
;
(
,
,
)
;
}
(
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
(
(
)
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
INT
)
{
INT
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
BREAK
;
=
;
(
)
;
IF
(
)
{
IF
(
)
{
(
)
;
BREAK
;
}
(
)
;
BREAK
;
}
IF
(
)
{
=
;
=
;
=
;
=
;
(
(
,
)
)
;
BREAK
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
(
)
)
(
)
=
;
}
IF
(
)
{
IF
(
(
)
)
(
)
=
;
}
BREAK
;
DEFAULT
IF
(
)
BREAK
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
BREAK
;
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
}
IF
(
)
IF
(
)
=
;
ELSE
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
}
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
;
INT
;
INT
;
=
;
DOUBLE
;
VOID
(
VOID
)
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
}
INT
=
{
,
,
,
,
,
,
,
,
}
;
INT
;
VOID
(
VOID
)
{
;
INT
;
(
,
,
(
)
)
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
(
,
)
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
CHAR
;
SWITCH
(
(
INT
)
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
;
BREAK
;
}
(
,
,
)
;
}
ELSE
{
CHAR
;
SWITCH
(
(
INT
)
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
;
BREAK
;
}
(
,
,
)
;
}
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
,
(
INT
)
)
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
,
(
INT
)
)
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
(
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
{
IF
(
(
)
)
{
=
(
)
;
(
,
,
,
)
;
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
=
;
}
}
}
VOID
(
INT
)
{
INT
;
SWITCH
(
)
{
CASE
;
IF
(
)
{
=
;
=
;
=
;
}
IF
(
)
=
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
IF
(
)
=
;
ELSE
=
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
BREAK
;
CASE
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
BREAK
;
CASE
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
BREAK
;
CASE
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
BREAK
;
CASE
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
BREAK
;
CASE
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
=
;
BREAK
;
}
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
BREAK
;
(
)
;
(
)
;
BREAK
;
CASE
IF
(
)
BREAK
;
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
IF
(
)
{
IF
(
)
(
)
;
(
)
;
(
(
,
)
)
;
(
)
;
IF
(
)
(
(
,
)
)
;
ELSE
IF
(
)
(
(
,
)
)
;
ELSE
(
(
,
)
)
;
RETURN
;
}
(
)
;
BREAK
;
}
}
=
;
DOUBLE
;
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
(
(
)
,
,
)
;
=
(
)
(
(
)
)
;
(
,
,
,
)
;
(
,
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
(
)
(
(
)
)
,
,
)
;
IF
(
(
)
)
RETURN
;
(
)
;
}
VOID
(
INT
)
{
}
INT
;
;
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
IF
(
)
{
IF
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
}
}
=
;
}
=
(
)
;
(
(
)
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
,
,
,
)
;
ELSE
(
,
,
,
)
;
(
,
,
)
;
}
(
,
,
(
(
INT
)
(
)
)
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
=
;
=
;
=
;
=
;
=
;
(
(
,
)
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
ELSE
(
)
;
=
;
}
ELSE
{
=
;
}
SWITCH
(
)
{
CASE
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
IF
(
)
{
(
)
;
=
;
}
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
RETURN
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
(
)
;
}
IF
(
)
=
;
}
__E__O__F__
;
CHAR
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
VOID
(
,
VOID
)
;
(
,
)
;
;
;
INT
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
}
VOID
(
)
{
VOID
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
(
,
)
{
;
FLOAT
;
;
IF
(
)
(
)
;
=
;
WHILE
(
)
{
IF
(
)
RETURN
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
(
,
)
{
STATIC
;
INT
;
;
INT
;
=
(
)
;
=
;
IF
(
)
{
WHILE
(
)
{
=
;
;
}
RETURN
;
}
DO
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
;
WHILE
(
)
{
=
;
;
}
}
WHILE
(
)
;
RETURN
;
}
(
,
)
{
IF
(
)
RETURN
;
RETURN
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
=
;
IF
(
)
=
;
}
}
(
CHAR
)
{
INT
;
;
=
;
IF
(
)
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
BREAK
;
IF
(
)
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
IF
(
(
)
)
(
)
;
}
ELSE
(
)
;
}
ELSE
;
(
,
)
;
=
;
}
RETURN
;
}
VOID
(
CHAR
)
{
;
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
}
}
(
,
)
{
UNSIGNED
;
;
IF
(
)
{
IF
(
(
)
)
{
=
;
RETURN
;
}
}
ELSE
{
IF
(
)
RETURN
;
}
=
(
UNSIGNED
)
(
,
,
(
)
)
;
IF
(
)
{
IF
(
)
(
,
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
SWITCH
(
(
(
UNSIGNED
)
)
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
RETURN
;
}
(
CHAR
,
)
{
;
=
(
)
;
RETURN
(
,
)
;
}
;
VOID
(
)
{
INT
,
,
,
,
,
;
;
,
;
;
;
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
)
(
(
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
=
;
=
(
(
)
,
)
;
=
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
(
)
;
(
,
,
)
;
IF
(
(
,
,
)
)
(
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
=
;
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
;
}
ELSE
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
=
;
IF
(
)
;
IF
(
)
{
;
=
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
=
;
=
;
IF
(
)
=
;
}
ELSE
(
,
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
}
}
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
{
=
;
RETURN
;
}
=
(
,
)
;
(
,
,
)
;
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
;
FLOAT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
=
;
}
}
}
}
VOID
(
)
{
FLOAT
,
,
;
INT
,
,
;
;
;
INT
,
;
=
=
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
(
)
)
(
)
;
}
}
VOID
(
)
{
;
;
INT
,
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
;
=
;
=
(
)
;
(
)
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
{
(
)
;
CONTINUE
;
}
IF
(
(
,
,
)
)
{
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
CONTINUE
;
}
}
}
VOID
(
,
)
{
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
;
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
(
(
)
)
;
}
}
(
,
)
;
}
VOID
(
)
{
;
;
INT
,
,
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
=
;
}
}
VOID
(
)
{
,
;
INT
,
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
,
;
;
INT
,
,
;
;
=
;
=
;
=
;
=
(
(
)
,
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
}
}
VOID
(
)
{
INT
,
,
;
SHORT
;
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
=
;
}
}
VOID
(
)
{
INT
,
;
INT
,
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
)
{
INT
,
;
;
;
INT
;
INT
;
=
(
VOID
)
(
)
;
IF
(
(
)
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
;
}
=
(
)
;
=
(
)
;
=
;
}
}
FLOAT
(
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
(
)
(
)
(
)
;
}
RETURN
(
)
;
}
VOID
(
,
VOID
)
{
INT
,
;
;
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
(
,
)
;
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
{
CHAR
;
(
,
,
)
;
=
(
)
;
=
;
(
,
)
;
=
;
}
}
}
VOID
(
VOID
,
INT
,
INT
,
,
,
,
CHAR
)
{
,
;
INT
,
;
;
=
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
)
(
)
;
=
(
(
)
,
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
INT
;
=
;
FOR
(
=
;
;
)
{
=
;
}
}
;
RETURN
(
VOID
)
;
}
VOID
(
VOID
,
INT
,
INT
,
,
,
,
CHAR
)
{
;
;
INT
,
;
;
FLOAT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
(
)
(
)
(
)
,
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
)
(
)
;
=
(
)
(
)
;
=
(
(
FLOAT
)
,
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
;
;
}
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
,
,
,
,
,
,
)
;
}
RETURN
;
}
VOID
(
VOID
,
INT
,
INT
,
)
{
INT
;
,
;
UNSIGNED
SHORT
;
=
(
,
)
;
=
(
)
;
=
(
)
(
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
=
;
}
ELSE
{
(
,
)
;
}
;
RETURN
(
(
VOID
)
)
;
}
VOID
(
VOID
,
INT
,
INT
,
)
{
;
;
INT
,
;
;
FLOAT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
(
)
(
)
(
)
,
)
;
=
;
=
(
)
(
)
;
=
(
)
(
)
;
=
(
(
FLOAT
)
,
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
;
;
}
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
,
,
,
)
;
}
RETURN
;
}
VOID
(
,
VOID
)
{
INT
;
,
;
,
;
;
;
;
INT
,
,
;
INT
;
;
;
;
INT
;
INT
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
(
(
)
)
(
)
(
)
(
)
(
)
(
)
(
)
;
=
(
,
)
;
=
(
)
(
(
)
(
(
)
)
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
;
=
;
IF
(
)
(
)
;
=
(
)
(
)
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
(
)
,
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
(
,
,
,
)
;
}
ELSE
{
=
(
)
(
,
,
,
)
;
}
}
=
(
)
;
=
(
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
INT
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
}
IF
(
)
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
(
,
,
,
,
,
,
)
;
}
ELSE
{
=
(
)
(
,
,
,
,
,
,
)
;
}
}
=
;
=
=
=
;
=
=
=
;
=
(
)
;
=
;
(
,
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
,
)
{
;
;
INT
,
,
,
,
;
UNSIGNED
SHORT
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
(
)
,
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
,
(
)
(
)
,
)
;
}
ELSE
IF
(
)
{
=
(
)
(
)
;
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
=
;
}
ELSE
{
(
,
)
;
}
RETURN
(
VOID
)
(
(
)
(
)
)
;
}
VOID
(
VOID
,
)
{
;
;
INT
,
;
;
FLOAT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
(
)
(
)
(
)
,
)
;
=
;
=
(
)
;
=
(
)
(
)
;
=
(
(
FLOAT
)
,
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
;
;
}
=
(
VOID
)
;
FOR
(
=
;
;
)
{
=
(
,
)
;
}
RETURN
;
}
VOID
(
,
VOID
)
{
INT
;
INT
;
;
;
INT
;
INT
;
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
=
(
)
;
=
(
)
(
)
(
)
;
=
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
=
;
=
=
;
=
;
=
;
IF
(
)
(
,
)
;
=
;
=
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
;
=
(
)
;
=
;
IF
(
)
{
=
(
)
(
,
)
;
}
ELSE
{
=
(
)
(
,
)
;
}
}
=
;
}
VOID
(
VOID
)
{
INT
;
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
,
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
}
}
__E__O__F__
TYPEDEF
UNSIGNED
CHAR
;
TYPEDEF
UNSIGNED
SHORT
;
TYPEDEF
UNSIGNED
LONG
;
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
STRUCT
{
;
;
;
;
;
;
;
;
;
}
;
STRUCT
{
;
;
}
;
(
,
)
;
INT
(
INT
,
,
)
;
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
;
=
;
=
;
=
;
(
,
,
)
;
}
INT
(
VOID
)
{
;
=
;
(
,
,
)
;
RETURN
;
}
INT
(
INT
)
{
;
=
;
=
;
(
,
,
)
;
RETURN
;
}
(
INT
,
INT
)
{
;
=
;
=
;
=
;
(
,
,
)
;
RETURN
(
)
;
}
(
INT
)
{
;
=
;
=
;
(
,
,
)
;
RETURN
(
)
;
}
(
UNSIGNED
)
{
;
=
;
(
,
,
)
;
=
;
RETURN
(
)
;
}
(
INT
,
INT
)
{
;
=
;
=
;
=
;
(
,
,
)
;
RETURN
(
)
;
}
INT
(
UNSIGNED
,
UNSIGNED
)
{
;
=
;
=
;
=
;
(
,
,
)
;
RETURN
;
}
INT
(
VOID
)
{
;
=
;
(
,
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
=
;
(
,
,
)
;
}
__E__O__F__
TYPEDEF
UNSIGNED
CHAR
;
TYPEDEF
UNSIGNED
SHORT
;
TYPEDEF
UNSIGNED
LONG
;
TYPEDEF
STRUCT
{
SHORT
;
SHORT
;
SHORT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
SHORT
;
SHORT
;
SHORT
;
SHORT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
;
LONG
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
CHAR
;
}
;
TYPEDEF
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
STRUCT
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
STRUCT
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
;
INT
;
INT
;
STRUCT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
INT
;
STRUCT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
;
}
;
STRUCT
{
;
;
;
;
;
;
;
;
;
}
;
STRUCT
{
;
;
}
;
(
,
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
INT
(
INT
)
;
(
INT
,
INT
)
;
(
INT
)
;
(
UNSIGNED
)
;
(
INT
,
INT
)
;
INT
(
UNSIGNED
,
UNSIGNED
)
;
INT
(
VOID
)
;
EXTERN
SHORT
;
(
)
(
(
(
UNSIGNED
LONG
)
)
)
(
)
(
(
(
UNSIGNED
LONG
)
)
)
(
)
(
(
(
UNSIGNED
LONG
)
)
)
(
,
)
(
(
(
UNSIGNED
LONG
)
,
(
UNSIGNED
LONG
)
)
)
(
,
)
(
(
(
UNSIGNED
LONG
)
,
(
UNSIGNED
CHAR
)
)
)
INT
=
{
,
,
,
,
,
}
;
INT
=
;
;
STRUCT
;
CHAR
;
CHAR
;
CHAR
;
STRUCT
;
STRUCT
;
VOID
(
VOID
,
CONST
VOID
,
INT
)
{
(
(
)
,
(
UNSIGNED
)
,
,
(
UNSIGNED
)
,
)
;
}
VOID
(
VOID
,
CONST
VOID
,
INT
)
{
(
,
(
UNSIGNED
)
,
(
)
,
(
UNSIGNED
)
,
)
;
}
VOID
(
CHAR
,
CONST
CHAR
)
{
WHILE
(
)
{
(
,
)
;
;
;
}
(
,
)
;
}
VOID
(
CHAR
,
CONST
CHAR
,
INT
)
{
WHILE
(
)
{
(
,
)
;
;
;
;
}
(
,
)
;
}
VOID
(
CHAR
,
CONST
CHAR
)
{
WHILE
(
(
)
)
{
=
(
)
;
;
;
}
=
;
}
VOID
(
CHAR
,
CONST
CHAR
,
INT
)
{
WHILE
(
(
)
)
{
=
(
)
;
;
;
;
}
=
;
}
VOID
(
VOID
)
{
=
(
)
;
=
(
)
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
)
;
RETURN
(
VOID
)
(
)
;
}
}
RETURN
;
}
VOID
(
INT
)
{
INT
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
}
}
VOID
(
)
{
(
(
)
,
)
;
(
(
)
,
)
;
(
(
)
,
)
;
}
INT
(
,
CONST
STRUCT
,
INT
)
{
=
(
)
;
;
;
;
INT
;
(
)
;
=
;
=
(
)
(
)
;
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
IF
(
(
)
)
{
RETURN
;
}
=
(
)
;
(
,
)
;
RETURN
;
}
INT
(
)
{
=
(
)
;
;
;
INT
;
(
)
;
=
;
=
(
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
IF
(
(
)
)
{
RETURN
;
}
=
(
)
;
(
,
)
;
RETURN
;
}
VOID
(
)
{
}
VOID
(
STRUCT
,
VOID
)
{
STRUCT
=
(
STRUCT
)
;
INT
;
CHAR
;
=
;
(
,
(
CHAR
)
(
)
,
)
;
=
;
=
;
=
(
CHAR
)
(
)
;
FOR
(
=
;
(
)
(
)
;
,
)
{
=
;
=
;
}
=
;
=
(
)
;
=
(
)
;
IF
(
(
)
(
STRUCT
)
)
{
(
)
;
(
)
;
}
=
(
CHAR
)
;
=
(
CHAR
)
(
)
;
FOR
(
=
;
(
)
(
)
;
,
)
{
=
(
CHAR
)
(
)
;
(
,
(
VOID
)
(
)
,
)
;
}
=
;
}
INT
(
,
STRUCT
,
INT
)
{
=
(
)
;
;
;
;
INT
;
=
;
(
)
;
=
(
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
IF
(
(
)
)
{
RETURN
;
}
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
=
(
)
;
(
,
)
;
RETURN
;
}
INT
(
CHAR
,
INT
)
{
;
;
;
;
INT
;
CHAR
;
(
)
;
=
;
=
(
)
(
)
;
=
(
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
(
(
)
)
)
)
(
)
;
=
(
)
(
)
;
IF
(
(
)
)
{
RETURN
;
}
=
(
)
;
=
(
)
;
=
;
(
,
,
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
(
,
)
;
RETURN
;
}
STRUCT
(
CONST
CHAR
)
{
=
(
)
;
;
;
STRUCT
;
(
)
;
=
;
=
(
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
=
(
STRUCT
)
;
IF
(
(
)
)
{
=
;
}
ELSE
{
(
)
;
(
,
(
VOID
)
)
;
=
;
}
(
,
)
;
RETURN
;
}
STRUCT
(
CONST
CHAR
,
INT
,
INT
)
{
=
(
)
;
;
;
;
STRUCT
;
=
;
(
)
;
=
(
)
(
)
;
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
=
(
STRUCT
)
;
IF
(
(
)
)
{
=
;
}
ELSE
{
(
)
;
(
,
(
VOID
)
)
;
=
;
}
(
,
)
;
RETURN
;
}
(
INT
,
INT
,
INT
)
{
=
(
)
;
;
;
;
INT
;
(
)
;
=
;
=
(
)
(
)
;
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
IF
(
(
)
)
{
RETURN
;
}
=
(
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
=
(
)
;
;
=
;
=
(
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
(
,
)
;
}
INT
(
,
CHAR
,
INT
,
INT
,
STRUCT
,
INT
)
{
INT
;
;
;
INT
;
=
;
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
BREAK
;
}
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
=
;
RETURN
;
}
=
(
)
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
(
STRUCT
)
)
;
}
IF
(
)
{
=
(
)
;
}
(
,
,
)
;
IF
(
(
)
)
{
(
)
;
}
RETURN
;
}
INT
(
,
CONST
CHAR
,
INT
,
INT
,
CONST
STRUCT
,
INT
)
{
INT
;
INT
;
;
=
;
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
BREAK
;
}
}
IF
(
)
{
=
;
RETURN
;
}
=
;
IF
(
(
)
)
{
=
;
RETURN
;
}
=
(
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
}
(
,
)
;
(
,
,
)
;
(
,
)
;
RETURN
;
}
INT
(
,
LONG
,
UNSIGNED
LONG
)
{
=
(
)
;
;
;
;
INT
;
=
;
(
)
;
=
(
)
(
)
;
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
DEFAULT
RETURN
;
}
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
=
(
)
;
(
,
)
;
RETURN
;
}
INT
(
,
INT
,
INT
,
CONST
CHAR
,
INT
)
{
=
(
)
;
;
;
;
INT
;
=
;
(
)
;
=
(
)
(
)
;
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
=
(
)
;
(
,
)
;
RETURN
;
}
INT
(
VOID
)
{
=
(
)
;
;
;
INT
;
(
)
;
IF
(
)
{
INT
=
;
=
;
RETURN
;
}
=
(
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
=
(
)
;
(
,
)
;
RETURN
;
}
UNSIGNED
LONG
(
CONST
CHAR
)
{
INT
;
UNSIGNED
INT
,
,
,
;
UNSIGNED
LONG
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
=
(
)
(
)
(
)
;
RETURN
;
=
(
)
;
;
;
INT
;
=
;
(
)
;
=
(
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
WHILE
(
(
=
(
)
)
)
(
)
;
=
(
)
(
)
;
IF
(
(
)
)
{
RETURN
;
}
=
(
)
;
(
,
)
;
RETURN
;
}
CHAR
(
STRUCT
)
{
STATIC
CHAR
;
(
,
,
,
,
,
)
;
RETURN
;
}
__E__O__F__
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
INT
=
;
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
INT
=
;
__E__O__F__
STRUCT
{
UNION
{
STRUCT
{
UNSIGNED
CHAR
,
,
,
;
}
;
STRUCT
{
UNSIGNED
SHORT
,
;
}
;
UNSIGNED
LONG
;
}
;
}
;
STRUCT
{
SHORT
;
UNSIGNED
SHORT
;
STRUCT
;
CHAR
;
}
;
STRUCT
{
CHAR
;
CHAR
;
INT
;
INT
;
CHAR
;
}
;
CHAR
(
STRUCT
)
;
(
)
TYPEDEF
STRUCT
{
CHAR
;
SHORT
;
STRUCT
;
CHAR
;
CHAR
;
SHORT
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
UNSIGNED
SHORT
;
CHAR
;
STRUCT
;
}
;
TYPEDEF
STRUCT
{
SHORT
;
CHAR
;
UNSIGNED
SHORT
;
CHAR
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
SHORT
;
UNSIGNED
SHORT
;
STRUCT
;
CHAR
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
SHORT
;
;
;
;
SHORT
;
SHORT
;
SHORT
;
;
INT
;
SHORT
;
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
;
CHAR
;
}
;
(
)
STATIC
UNSIGNED
CHAR
;
STATIC
INT
;
STATIC
INT
;
STATIC
;
STATIC
INT
;
STATIC
STRUCT
;
EXTERN
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
(
INT
,
CHAR
,
INT
)
{
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
RETURN
;
RETURN
;
}
STATIC
INT
(
INT
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
}
RETURN
;
}
STATIC
INT
(
VOID
)
{
INT
;
(
(
CHAR
)
,
)
;
=
;
=
;
=
;
IF
(
(
)
)
RETURN
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
(
)
;
=
=
;
=
;
=
;
IF
(
(
)
)
RETURN
;
(
,
,
)
;
=
;
=
;
(
)
;
RETURN
;
}
INT
(
VOID
)
{
STRUCT
;
CHAR
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
(
)
;
IF
(
(
=
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
)
;
(
,
(
)
)
;
=
(
,
)
;
IF
(
)
=
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
=
(
)
)
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
)
;
=
;
}
INT
(
INT
)
{
INT
;
INT
;
INT
=
;
STATIC
INT
=
;
STATIC
CHAR
=
{
,
}
;
STATIC
CHAR
=
{
,
,
}
;
STATIC
CHAR
=
{
,
}
;
(
(
CHAR
)
,
)
;
=
;
=
;
=
;
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
(
)
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
SHORT
)
=
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
RETURN
;
}
DO
{
=
;
IF
(
)
=
;
;
(
SHORT
)
=
;
=
(
,
,
)
;
}
WHILE
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
INT
)
{
=
;
=
;
IF
(
(
)
)
{
(
,
,
(
)
)
;
RETURN
;
}
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
RETURN
;
}
INT
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
;
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
=
;
=
;
=
;
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
=
(
)
;
=
(
)
(
)
;
IF
(
)
{
=
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
(
)
;
}
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
)
;
RETURN
;
}
INT
(
INT
,
,
INT
)
{
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
(
)
;
=
=
;
=
;
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
RETURN
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
=
(
)
;
=
(
(
STRUCT
)
)
;
=
(
(
(
STRUCT
)
)
)
;
=
;
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
(
)
;
=
=
;
=
;
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
RETURN
;
}
CHAR
(
STRUCT
)
{
STATIC
CHAR
;
(
,
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
(
STRUCT
)
)
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
INT
,
,
,
,
;
INT
;
(
,
,
,
,
,
,
)
;
=
(
)
(
)
(
)
;
=
;
(
(
STRUCT
)
)
=
(
)
;
(
(
STRUCT
)
)
=
(
(
SHORT
)
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
=
;
=
;
=
(
)
;
=
;
=
;
(
)
;
=
;
(
(
STRUCT
)
)
=
(
(
)
)
;
(
(
STRUCT
)
)
=
(
(
(
)
)
)
;
RETURN
;
}
INT
(
STRUCT
,
CHAR
)
{
(
,
(
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
(
,
)
;
IF
(
)
;
=
;
=
;
WHILE
(
)
{
;
=
;
=
;
WHILE
(
(
)
)
{
=
;
IF
(
)
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
;
=
(
)
;
}
=
(
)
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
(
(
STRUCT
)
)
=
(
(
SHORT
)
)
;
(
(
STRUCT
)
)
=
(
(
)
)
;
RETURN
;
}
INT
(
STRUCT
,
STRUCT
)
{
IF
(
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
RETURN
;
}
INT
(
STRUCT
)
{
RETURN
(
(
(
STRUCT
)
)
)
;
}
INT
(
STRUCT
,
INT
)
{
(
(
STRUCT
)
)
=
(
)
;
RETURN
;
}
__E__O__F__
(
)
TYPEDEF
STRUCT
{
VOLATILE
INT
;
VOLATILE
INT
;
VOLATILE
;
}
;
(
)
(
(
(
)
)
)
(
)
(
)
(
,
)
(
=
,
=
(
)
)
(
,
)
(
=
,
=
(
)
)
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
;
EXTERN
CHAR
;
(
)
STATIC
INT
=
{
,
,
,
}
;
STATIC
INT
=
{
,
,
,
}
;
TYPEDEF
STRUCT
{
STRUCT
;
;
;
INT
;
VOLATILE
;
;
;
;
;
VOLATILE
;
;
;
;
;
;
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
;
DOUBLE
;
;
;
;
;
;
CHAR
;
CHAR
;
}
;
=
;
;
STATIC
INT
(
,
CHAR
)
;
STATIC
CHAR
(
)
;
STATIC
VOID
(
)
;
INT
(
VOID
)
;
VOID
(
VOID
)
;
INT
(
INT
)
;
VOID
(
INT
)
;
INT
(
INT
)
;
INT
(
INT
,
)
;
VOID
(
INT
)
;
INT
(
INT
,
CHAR
)
;
VOID
(
INT
)
;
(
INT
)
;
(
INT
)
;
(
INT
)
;
(
INT
)
;
STATIC
VOID
(
)
{
=
;
;
(
)
;
WHILE
(
(
=
(
)
)
)
{
SWITCH
(
)
{
CASE
=
(
)
;
IF
(
(
)
)
{
(
,
)
;
}
ELSE
{
;
=
;
}
BREAK
;
CASE
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
(
)
)
;
=
;
BREAK
;
CASE
=
(
)
;
=
;
BREAK
;
}
=
(
)
;
}
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
)
{
INT
;
;
;
(
)
;
WHILE
(
(
=
(
)
)
)
{
SWITCH
(
)
{
CASE
DO
{
=
(
)
;
IF
(
(
)
)
{
(
,
)
;
}
ELSE
{
;
=
;
}
}
WHILE
(
(
)
)
;
BREAK
;
CASE
=
;
WHILE
(
(
(
)
)
)
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
(
)
)
;
=
;
BREAK
;
CASE
=
(
)
;
=
;
BREAK
;
}
=
(
)
;
}
IF
(
(
)
)
{
=
;
WHILE
(
(
(
)
)
)
{
(
,
)
;
(
,
)
;
}
}
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
STATIC
VOID
(
VOID
)
{
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
)
{
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
)
{
;
FLOAT
;
IF
(
)
{
IF
(
)
=
;
IF
(
)
=
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
(
,
(
FLOAT
)
)
;
(
,
(
FLOAT
)
)
;
(
,
(
FLOAT
)
)
;
(
,
)
;
}
VOID
(
INT
,
CHAR
,
CHAR
,
CHAR
,
CHAR
)
{
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
INT
,
CHAR
,
CHAR
,
CHAR
,
CHAR
)
{
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
=
;
=
=
;
}
STATIC
VOID
(
)
{
VOID
(
)
(
VOID
)
;
INT
;
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
WHILE
(
(
(
)
)
)
(
)
;
=
(
(
)
)
;
=
(
)
;
DO
{
=
(
)
;
IF
(
)
(
)
;
}
WHILE
(
(
)
)
;
IF
(
)
{
(
,
)
;
=
(
)
;
IF
(
(
)
)
=
;
ELSE
=
;
}
(
,
)
;
IF
(
)
{
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
=
(
INT
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
)
;
(
,
(
)
(
)
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
STATIC
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
,
(
)
(
)
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
=
;
}
STATIC
INT
(
)
{
INT
=
;
IF
(
)
{
=
;
IF
(
(
)
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
}
IF
(
(
)
)
{
IF
(
(
)
)
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
)
)
(
)
;
=
;
}
}
RETURN
;
}
STATIC
VOID
(
)
{
DOUBLE
;
CHAR
;
(
)
;
(
,
)
;
=
(
)
;
WHILE
(
(
(
)
)
)
;
(
,
)
;
=
(
)
;
WHILE
(
(
(
)
)
)
;
IF
(
)
{
(
,
)
;
=
(
)
;
WHILE
(
)
{
IF
(
(
(
)
)
)
{
(
)
;
=
;
GOTO
;
}
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
BREAK
;
IF
(
(
,
,
)
)
{
=
;
GOTO
;
}
}
}
IF
(
)
{
(
,
)
;
=
(
)
;
WHILE
(
)
{
IF
(
(
(
)
)
)
{
(
)
;
=
;
GOTO
;
}
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
BREAK
;
IF
(
(
,
,
)
)
{
=
;
GOTO
;
}
}
}
=
;
RETURN
;
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
}
RETURN
;
}
VOID
(
INT
)
{
;
=
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
)
;
}
INT
(
INT
)
{
RETURN
;
}
VOID
(
INT
)
{
;
DOUBLE
;
=
;
=
(
)
;
WHILE
(
(
(
)
)
)
IF
(
(
)
)
BREAK
;
IF
(
)
{
IF
(
)
(
)
;
}
}
INT
(
INT
)
{
INT
;
;
=
;
IF
(
(
=
(
)
)
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
,
)
;
RETURN
(
)
;
}
INT
(
INT
,
)
{
;
=
;
IF
(
(
)
)
RETURN
;
(
,
)
;
RETURN
;
}
VOID
(
INT
)
{
;
;
=
;
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
}
INT
(
INT
,
CHAR
)
{
DOUBLE
;
;
CHAR
=
;
;
;
;
=
;
IF
(
(
)
)
{
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
)
)
(
)
;
(
)
;
RETURN
;
}
WHILE
(
(
)
)
(
,
)
;
(
)
;
IF
(
)
{
=
;
=
;
=
;
(
)
;
(
,
,
,
)
;
(
,
)
;
=
(
)
;
WHILE
(
)
{
IF
(
(
(
)
)
)
{
(
)
;
BREAK
;
}
(
)
;
IF
(
)
{
IF
(
)
{
=
;
CONTINUE
;
}
(
)
;
WHILE
(
(
(
)
)
)
;
(
)
;
=
=
;
=
=
;
(
,
(
)
)
;
(
)
;
=
(
)
;
WHILE
(
(
(
)
)
)
;
(
,
(
)
)
;
=
;
BREAK
;
}
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
=
;
=
=
;
=
=
;
(
)
;
=
;
=
;
=
;
RETURN
;
}
IF
(
(
,
,
)
)
BREAK
;
IF
(
(
,
,
)
)
BREAK
;
IF
(
(
,
,
)
)
BREAK
;
IF
(
(
,
,
)
)
BREAK
;
IF
(
(
,
,
)
)
BREAK
;
IF
(
(
,
,
)
)
BREAK
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
}
RETURN
;
}
=
;
RETURN
;
}
VOID
(
INT
)
{
;
=
;
IF
(
)
(
)
;
}
(
INT
)
{
;
=
;
(
)
;
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
RETURN
;
IF
(
(
,
,
)
)
{
(
,
)
;
=
;
=
;
}
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
(
)
;
=
;
=
=
;
=
=
;
(
)
;
(
)
;
RETURN
;
}
RETURN
;
}
IF
(
(
)
)
RETURN
;
RETURN
;
}
(
INT
)
{
RETURN
;
}
(
INT
)
{
RETURN
;
}
(
INT
)
{
RETURN
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
INT
;
INT
;
=
(
(
)
)
;
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
(
)
)
;
(
,
(
)
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
ELSE
(
)
;
RETURN
;
}
IF
(
(
)
)
{
IF
(
)
(
)
;
=
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
(
)
;
ELSE
=
;
}
IF
(
(
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
}
IF
(
(
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
}
IF
(
(
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
}
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
=
(
)
)
)
{
(
,
(
)
,
)
;
}
IF
(
(
=
(
)
)
)
{
(
,
(
)
,
)
;
=
;
}
IF
(
(
=
(
)
)
)
{
(
,
(
)
,
)
;
}
IF
(
(
)
)
{
;
;
}
IF
(
(
)
)
{
(
)
;
=
(
(
)
)
;
}
IF
(
(
)
)
{
;
;
}
IF
(
(
)
)
{
(
)
;
=
(
(
)
)
;
}
IF
(
(
)
)
{
;
;
}
IF
(
(
)
)
{
(
)
;
=
(
(
)
)
;
}
IF
(
(
)
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
INT
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
(
(
)
,
)
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
(
,
)
;
(
)
;
}
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
WHILE
(
)
(
)
;
(
)
;
}
}
}
STATIC
INT
(
,
CHAR
)
{
;
IF
(
(
)
)
RETURN
;
(
)
;
=
=
;
=
=
;
(
)
;
=
;
WHILE
(
)
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
STATIC
CHAR
(
)
{
;
IF
(
(
)
)
RETURN
;
WHILE
(
(
)
)
{
(
,
)
;
IF
(
(
(
)
)
)
=
;
IF
(
)
{
=
;
(
,
)
;
(
)
;
=
;
RETURN
;
}
IF
(
)
CONTINUE
;
=
;
;
}
RETURN
;
}
STATIC
VOID
(
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
)
;
STATIC
VOID
(
)
{
(
)
;
(
)
;
=
;
=
=
;
=
=
;
(
,
(
)
)
;
(
)
;
=
;
=
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
,
(
)
)
;
(
,
)
;
=
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
,
)
;
=
;
(
,
)
;
}
STATIC
VOID
(
)
{
(
)
;
(
)
;
=
;
}
__E__O__F__
(
)
(
)
STRUCT
{
UNION
{
STRUCT
{
UNSIGNED
CHAR
,
,
,
;
}
;
STRUCT
{
UNSIGNED
SHORT
,
;
}
;
UNSIGNED
LONG
;
}
;
}
;
STRUCT
{
SHORT
;
UNSIGNED
SHORT
;
STRUCT
;
CHAR
;
}
;
CHAR
(
STRUCT
)
;
UNSIGNED
LONG
(
CONST
CHAR
)
;
STATIC
INT
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
;
STATIC
INT
;
STRUCT
{
UNSIGNED
INT
;
UNSIGNED
INT
;
;
}
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
;
EXTERN
CHAR
;
CHAR
(
STRUCT
)
{
STATIC
CHAR
;
=
(
)
;
INT
;
FOR
(
=
;
;
)
(
,
,
)
;
RETURN
;
}
UNSIGNED
LONG
=
;
UNSIGNED
LONG
=
;
VOID
(
VOID
)
{
CHAR
;
CHAR
;
VOID
(
)
(
CHAR
,
)
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
;
}
ELSE
{
IF
(
)
RETURN
;
=
;
}
SWITCH
(
(
)
)
{
CASE
IF
(
(
(
STRUCT
)
)
)
{
(
,
(
(
STRUCT
)
)
)
;
(
,
(
(
STRUCT
)
)
)
;
(
,
,
)
;
}
ELSE
(
)
;
BREAK
;
CASE
IF
(
(
(
)
,
)
)
=
;
ELSE
=
(
(
)
)
;
=
;
BREAK
;
CASE
=
(
(
)
)
;
=
(
(
)
)
;
BREAK
;
DEFAULT
(
)
;
BREAK
;
}
}
INT
(
,
)
{
UNSIGNED
INT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
)
;
(
,
,
)
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
(
(
)
)
;
=
(
)
;
(
,
,
)
;
=
;
IF
(
(
,
(
)
,
,
)
)
RETURN
;
=
;
;
RETURN
;
}
INT
(
)
{
UNSIGNED
INT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
(
(
)
)
;
=
(
)
;
(
,
,
)
;
=
;
IF
(
(
,
(
)
,
,
)
)
RETURN
;
=
;
;
RETURN
;
}
INT
(
)
{
UNSIGNED
INT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
(
(
)
)
;
=
(
)
;
(
,
,
)
;
=
;
IF
(
(
,
(
)
,
,
)
)
RETURN
;
=
;
;
RETURN
;
}
(
)
{
IF
(
)
(
)
;
RETURN
;
}
(
)
{
RETURN
;
}
INT
(
,
)
{
INT
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
=
;
=
(
)
;
=
(
)
;
(
,
,
)
;
IF
(
(
,
(
)
,
,
)
)
RETURN
;
;
RETURN
;
}
INT
(
)
{
UNSIGNED
INT
;
UNSIGNED
INT
;
INT
=
;
STRUCT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
IF
(
)
IF
(
(
)
)
(
)
;
WHILE
(
)
{
=
(
,
(
)
,
,
)
;
IF
(
)
BREAK
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
(
,
(
)
)
;
(
,
(
)
)
;
CONTINUE
;
}
IF
(
)
{
;
CONTINUE
;
}
=
(
)
;
=
(
)
;
;
IF
(
)
CONTINUE
;
=
(
)
;
;
IF
(
)
{
IF
(
)
{
(
)
;
=
;
BREAK
;
}
IF
(
)
{
=
;
;
(
,
)
;
}
=
;
;
(
)
;
(
,
,
)
;
=
;
BREAK
;
}
IF
(
)
{
IF
(
(
)
)
{
(
)
;
CONTINUE
;
}
IF
(
)
{
;
IF
(
)
(
)
;
}
ELSE
{
(
)
;
CONTINUE
;
}
;
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
{
=
;
=
;
}
CONTINUE
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
(
,
(
)
,
,
)
;
IF
(
)
{
;
CONTINUE
;
}
;
;
IF
(
)
{
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
=
;
BREAK
;
}
(
,
,
)
;
;
CONTINUE
;
}
}
IF
(
)
(
)
;
RETURN
;
}
VOID
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
ELSE
IF
(
(
(
)
,
)
)
{
FOR
(
=
;
;
=
)
(
)
;
FOR
(
=
;
;
=
)
(
)
;
}
ELSE
{
FOR
(
=
;
;
=
)
IF
(
(
(
)
,
)
)
BREAK
;
IF
(
)
FOR
(
=
;
;
=
)
IF
(
(
(
)
,
)
)
BREAK
;
IF
(
)
RETURN
;
(
)
;
}
}
STATIC
=
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
VOID
(
VOID
)
;
=
{
,
,
}
;
STATIC
VOID
(
VOID
)
{
STRUCT
;
INT
;
INT
;
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
;
=
;
WHILE
(
)
{
=
(
,
,
,
)
;
IF
(
(
INT
)
)
BREAK
;
=
;
(
)
;
=
(
(
(
INT
)
)
)
;
(
)
;
IF
(
)
BREAK
;
IF
(
(
(
)
)
)
BREAK
;
IF
(
(
)
)
BREAK
;
IF
(
(
)
)
(
)
;
=
(
)
;
(
,
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
(
)
)
;
(
,
,
,
,
,
,
)
;
}
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
)
;
=
;
}
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
=
;
STRUCT
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
IF
(
)
CONTINUE
;
=
;
=
;
(
,
,
(
STRUCT
)
)
;
BREAK
;
}
IF
(
)
GOTO
;
}
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
}
(
)
;
(
,
)
;
}
STATIC
=
;
STATIC
INT
;
STATIC
INT
;
STATIC
VOID
(
VOID
)
;
=
{
,
,
}
;
STATIC
VOID
(
VOID
)
{
STRUCT
;
INT
;
INT
;
CHAR
;
CHAR
;
=
;
=
;
=
(
,
,
,
)
;
IF
(
(
INT
)
)
GOTO
;
=
;
(
)
;
=
(
(
(
INT
)
)
)
;
(
)
;
IF
(
)
GOTO
;
IF
(
(
(
)
)
)
GOTO
;
IF
(
(
)
)
GOTO
;
IF
(
(
)
)
GOTO
;
(
,
(
)
)
;
IF
(
)
GOTO
;
(
,
(
)
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
RETURN
;
(
)
;
(
)
;
=
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
CHAR
;
INT
;
STRUCT
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
IF
(
)
CONTINUE
;
=
;
(
,
,
(
STRUCT
)
)
;
BREAK
;
}
IF
(
)
GOTO
;
}
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
(
,
)
;
}
INT
(
VOID
)
{
INT
;
INT
;
=
;
(
,
)
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
=
;
}
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
;
=
;
}
}
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
)
;
}
STATIC
(
VOID
)
{
STRUCT
;
STRUCT
;
INT
;
INT
;
;
;
INT
;
INT
;
INT
;
INT
;
=
(
)
;
IF
(
)
RETURN
;
(
)
;
=
(
,
,
,
)
;
IF
(
(
INT
)
)
RETURN
;
=
;
(
)
;
=
(
(
(
INT
)
)
)
;
(
)
;
IF
(
)
RETURN
;
IF
(
(
(
)
)
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
)
{
IF
(
(
(
)
,
)
)
RETURN
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
IF
(
)
{
INT
;
INT
;
INT
;
;
=
(
)
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
;
IF
(
)
BREAK
;
}
}
IF
(
)
RETURN
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
INT
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
IF
(
)
{
CHAR
;
;
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
RETURN
;
=
;
}
ELSE
=
;
WHILE
(
)
{
IF
(
)
BREAK
;
=
;
}
(
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
(
)
,
)
)
RETURN
;
IF
(
(
)
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
IF
(
)
{
UNSIGNED
LONG
;
=
(
(
STRUCT
)
)
;
IF
(
(
)
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
}
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
{
IF
(
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
(
)
;
RETURN
;
}
}
=
(
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
;
(
,
(
)
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
RETURN
;
}
(
VOID
)
{
=
;
FOR
(
=
;
;
)
IF
(
)
IF
(
(
=
(
)
)
)
BREAK
;
RETURN
;
}
STATIC
VOID
(
)
{
INT
;
INT
;
INT
;
STRUCT
;
STRUCT
;
INT
;
(
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
)
;
(
)
;
}
WHILE
(
(
=
(
,
,
,
)
)
)
{
IF
(
(
INT
)
)
CONTINUE
;
=
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
)
;
=
(
(
(
INT
)
)
)
;
(
)
;
IF
(
)
CONTINUE
;
IF
(
(
(
)
)
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
(
(
)
,
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
CONTINUE
;
;
(
,
(
)
)
;
(
,
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
(
,
)
;
=
;
(
,
)
;
(
,
)
;
}
(
,
,
(
STRUCT
)
)
;
=
;
=
;
(
,
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
;
=
;
}
}
}
}
VOID
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
(
)
;
}
}
STATIC
(
CHAR
)
{
STRUCT
;
STRUCT
;
;
INT
;
INT
;
INT
;
DOUBLE
;
INT
;
CHAR
;
IF
(
(
,
)
)
RETURN
;
=
(
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
GOTO
;
=
;
=
;
IF
(
(
,
)
)
GOTO
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
(
INT
)
)
=
(
(
)
)
;
(
,
,
,
)
;
(
)
;
DO
{
=
(
,
,
,
)
;
IF
(
)
{
IF
(
(
,
)
)
{
(
)
;
(
,
(
)
)
;
(
,
(
)
)
;
(
)
;
=
;
CONTINUE
;
}
IF
(
(
INT
)
)
{
=
;
CONTINUE
;
}
=
;
(
)
;
=
(
(
(
INT
)
)
)
;
(
)
;
IF
(
)
{
=
;
CONTINUE
;
}
IF
(
(
(
)
)
)
{
=
;
CONTINUE
;
}
IF
(
(
)
)
{
=
;
CONTINUE
;
}
}
}
WHILE
(
(
(
)
)
)
;
IF
(
)
BREAK
;
(
)
;
(
)
;
=
(
)
;
}
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
GOTO
;
}
IF
(
)
{
=
;
(
,
)
;
(
,
)
;
GOTO
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
(
)
;
(
,
,
)
;
GOTO
;
}
IF
(
)
{
(
,
,
(
STRUCT
)
)
;
(
,
(
)
)
;
}
ELSE
{
=
;
(
,
)
;
(
,
)
;
GOTO
;
}
(
,
)
;
(
)
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
(
,
)
;
(
,
)
;
GOTO
;
}
=
;
RETURN
;
(
)
;
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
RETURN
;
}
(
CHAR
)
{
=
;
FOR
(
=
;
;
)
IF
(
)
IF
(
(
=
(
)
)
)
BREAK
;
RETURN
;
}
__E__O__F__
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
INT
=
;
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
INT
=
;
__E__O__F__
(
)
TYPEDEF
STRUCT
{
;
;
SHORT
;
}
;
STRUCT
{
SHORT
;
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
SHORT
;
SHORT
;
;
;
;
;
}
;
TYPEDEF
STRUCT
{
STRUCT
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
;
;
SHORT
;
;
;
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
}
;
(
)
TYPEDEF
STRUCT
{
;
;
INT
;
CHAR
;
}
;
(
)
(
(
)
(
)
)
(
)
TYPEDEF
STRUCT
{
CHAR
;
;
}
;
STATIC
INT
;
STATIC
;
STATIC
INT
;
STATIC
INT
;
STATIC
;
STATIC
CHAR
;
STATIC
INT
;
STATIC
INT
;
STATIC
UNSIGNED
SHORT
;
STATIC
UNSIGNED
SHORT
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
VOID
(
VOID
)
;
STATIC
=
{
,
,
}
;
STATIC
VOID
(
)
{
=
;
=
;
=
;
=
;
=
;
(
(
)
)
;
(
,
,
)
;
}
STATIC
INT
(
,
)
{
=
;
=
;
=
;
=
;
=
;
=
(
)
;
(
,
,
(
)
)
;
(
(
)
)
;
IF
(
)
RETURN
;
(
,
(
)
,
)
;
RETURN
;
}
STATIC
VOID
(
)
{
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
(
)
)
;
}
STATIC
VOID
(
VOID
)
{
=
;
=
;
=
;
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
}
STATIC
VOID
(
INT
)
{
INT
;
;
;
FOR
(
=
;
;
)
{
IF
(
)
{
FOR
(
=
,
=
;
;
=
)
{
IF
(
(
(
)
)
)
BREAK
;
=
;
}
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
=
;
}
}
}
INT
(
VOID
)
{
INT
;
INT
;
STRUCT
;
CHAR
;
IF
(
(
)
)
RETURN
;
=
;
(
,
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
(
INT
)
;
}
}
IF
(
(
=
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
(
,
(
)
)
;
=
(
,
)
;
IF
(
)
=
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
=
(
)
)
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
)
;
=
;
}
INT
(
INT
)
{
INT
;
INT
;
UNSIGNED
SHORT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
)
;
(
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
(
)
;
}
;
RETURN
;
}
}
(
)
;
RETURN
;
}
INT
(
INT
)
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
(
(
)
)
;
=
;
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
;
(
,
(
(
STRUCT
)
)
,
(
)
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
;
;
INT
;
(
)
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
{
(
,
)
;
=
(
)
(
INT
)
;
(
)
;
GOTO
;
}
=
(
)
;
=
(
)
(
(
INT
)
(
)
)
;
IF
(
)
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
(
(
STRUCT
)
)
=
;
(
(
(
STRUCT
)
)
,
,
(
)
)
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
}
(
,
,
)
;
=
(
)
(
INT
)
;
(
)
;
RETURN
;
}
INT
(
INT
,
,
INT
)
{
STRUCT
;
INT
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
,
,
,
(
STRUCT
)
)
;
RETURN
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
WHILE
(
)
(
)
;
SWITCH
(
)
{
CASE
CASE
BREAK
;
CASE
DEFAULT
(
,
)
;
BREAK
;
CASE
CASE
(
)
;
IF
(
(
,
)
)
RETURN
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
(
)
)
;
RETURN
;
}
=
(
)
(
INT
)
;
=
;
(
,
(
(
STRUCT
)
)
,
(
)
)
;
=
;
;
(
,
,
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
(
)
)
;
RETURN
;
}
CHAR
(
STRUCT
)
{
STATIC
CHAR
;
(
,
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
(
STRUCT
)
)
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
INT
;
CHAR
;
=
;
(
,
,
(
STRUCT
)
)
;
=
;
(
,
)
=
;
=
;
IF
(
(
,
,
)
)
RETURN
;
(
(
STRUCT
)
)
=
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
(
STRUCT
)
)
=
(
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
(
,
,
(
STRUCT
)
)
;
=
;
(
(
(
STRUCT
)
)
)
;
(
(
STRUCT
)
)
=
;
RETURN
;
}
INT
(
STRUCT
,
CHAR
)
{
(
,
(
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
(
,
)
;
}
IF
(
)
{
(
,
,
,
)
;
RETURN
(
,
)
;
}
IF
(
)
RETURN
(
,
)
;
RETURN
;
}
INT
(
STRUCT
,
STRUCT
)
{
IF
(
)
RETURN
;
IF
(
(
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
)
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
RETURN
;
}
INT
(
STRUCT
)
{
RETURN
(
(
(
STRUCT
)
)
)
;
}
INT
(
STRUCT
,
INT
)
{
(
(
STRUCT
)
)
=
(
)
;
RETURN
;
}
__E__O__F__
=
;
=
;
=
;
INT
(
VOID
)
{
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
)
{
}
VOID
(
)
{
IF
(
)
RETURN
;
=
;
IF
(
(
,
)
)
(
,
)
;
ELSE
(
,
)
;
(
,
)
;
=
;
=
;
=
;
(
,
)
;
}
(
CHAR
)
{
IF
(
(
,
)
)
RETURN
;
=
;
IF
(
)
{
IF
(
(
=
(
)
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
}
=
;
=
;
=
;
IF
(
)
{
IF
(
(
=
(
)
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
}
=
;
=
;
=
;
=
(
VOID
)
;
=
(
VOID
)
;
RETURN
;
}
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
STATIC
INT
(
INT
)
{
RETURN
(
(
(
INT
)
)
)
(
(
(
INT
)
)
)
;
}
INT
(
)
{
INT
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
)
;
(
)
;
(
,
,
)
;
=
(
)
;
;
IF
(
)
(
,
,
)
;
IF
(
)
(
(
)
)
=
;
RETURN
;
}
INT
(
,
)
{
;
INT
;
IF
(
)
RETURN
;
=
(
(
)
)
;
IF
(
(
)
)
(
)
;
=
(
(
)
)
;
=
;
=
;
=
;
;
(
,
,
)
;
=
(
)
;
=
;
RETURN
;
}
INT
(
,
)
{
;
INT
;
IF
(
)
RETURN
;
=
(
(
)
)
;
IF
(
(
(
)
(
SHORT
)
)
)
RETURN
;
=
(
(
)
)
;
=
;
=
;
=
;
;
(
,
,
)
;
=
(
)
;
RETURN
;
}
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
RETURN
;
}
VOID
(
)
{
IF
(
)
(
(
)
)
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
}
__E__O__F__
=
;
=
;
INT
=
;
=
;
=
;
=
;
INT
;
INT
=
;
CHAR
;
CHAR
;
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
)
;
VOID
(
)
(
INT
,
INT
,
INT
,
INT
,
)
;
VOID
(
)
(
INT
,
CHAR
,
CHAR
,
CHAR
,
CHAR
)
;
VOID
(
)
(
INT
,
CHAR
,
CHAR
,
CHAR
,
CHAR
)
;
STATIC
=
;
=
;
=
;
=
;
STATIC
DOUBLE
;
STATIC
INT
;
STATIC
VOID
(
VOID
)
;
STATIC
VOID
(
VOID
)
;
=
{
,
,
}
;
=
{
,
,
}
;
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
=
{
,
}
;
=
{
,
}
;
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
INT
=
;
=
;
INT
;
DOUBLE
;
DOUBLE
(
VOID
)
{
=
(
)
;
RETURN
;
}
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
;
IF
(
)
=
;
ELSE
{
FOR
(
=
;
;
=
)
IF
(
)
{
=
;
BREAK
;
}
IF
(
)
(
)
;
}
=
;
=
;
=
;
}
STATIC
VOID
(
VOID
)
{
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
=
(
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
)
;
}
}
STATIC
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
=
;
IF
(
)
{
=
;
(
,
)
;
}
IF
(
(
)
)
(
)
;
IF
(
(
)
(
)
)
(
)
;
=
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
=
(
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
IF
(
)
{
(
)
;
(
)
;
}
}
STATIC
VOID
(
VOID
)
{
(
)
;
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
,
,
)
;
ELSE
(
,
,
)
;
}
=
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
(
)
;
}
=
;
=
(
)
;
(
,
)
;
(
,
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
)
;
}
IF
(
(
(
)
)
)
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
)
;
}
IF
(
)
(
)
;
IF
(
(
(
)
)
)
{
(
,
)
;
RETURN
;
}
IF
(
)
(
)
;
=
;
=
;
=
;
}
INT
=
;
;
(
CHAR
)
{
;
INT
;
INT
=
;
(
)
;
IF
(
)
=
;
IF
(
)
{
IF
(
(
,
)
)
{
=
;
GOTO
;
}
IF
(
)
{
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
=
;
BREAK
;
}
IF
(
)
GOTO
;
}
}
=
;
(
)
;
WHILE
(
)
(
)
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
(
,
,
)
;
}
IF
(
)
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
=
;
BREAK
;
}
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
RETURN
;
}
STRUCT
{
DOUBLE
;
INT
;
LONG
;
}
;
(
VOID
)
{
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
(
)
;
IF
(
)
{
IF
(
)
{
=
;
=
;
=
(
LONG
)
;
(
,
,
(
)
)
;
(
,
,
)
;
}
RETURN
;
}
}
IF
(
)
{
=
;
=
;
=
;
(
,
,
(
)
)
;
}
RETURN
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
(
)
;
(
)
;
}
STRUCT
{
DOUBLE
;
INT
;
LONG
;
INT
;
INT
;
}
;
EXTERN
VOID
(
)
;
INT
(
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
;
ELSE
IF
(
)
;
}
IF
(
)
{
=
;
=
;
=
(
LONG
)
;
=
;
=
;
(
,
,
)
;
(
,
,
)
;
}
}
ELSE
{
IF
(
)
{
=
;
=
;
=
(
LONG
)
;
=
;
(
,
,
)
;
}
}
RETURN
;
}
STRUCT
{
DOUBLE
;
INT
;
LONG
;
INT
;
}
;
INT
(
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
,
)
;
IF
(
)
;
IF
(
)
{
=
;
=
;
=
(
LONG
)
;
=
;
(
,
,
)
;
}
RETURN
;
}
INT
(
,
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
,
)
;
IF
(
)
;
IF
(
)
{
=
;
=
;
=
(
LONG
)
;
=
;
(
,
,
)
;
}
RETURN
;
}
(
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
(
LONG
)
;
=
;
(
,
,
)
;
}
RETURN
;
}
INT
(
,
INT
)
{
DOUBLE
;
INT
;
INT
=
;
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
=
;
CONTINUE
;
}
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
=
(
)
;
WHILE
(
)
{
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
IF
(
(
)
)
{
=
;
(
,
)
;
}
ELSE
{
(
)
;
}
;
CONTINUE
;
}
IF
(
)
{
IF
(
(
)
)
{
=
;
}
ELSE
{
(
)
;
}
;
CONTINUE
;
}
}
IF
(
(
(
)
)
)
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
;
IF
(
(
)
)
{
=
;
=
;
}
IF
(
(
)
)
=
;
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
IF
(
)
=
(
)
;
ELSE
(
)
;
}
=
;
IF
(
(
)
)
=
;
=
;
IF
(
)
;
(
)
;
FOR
(
=
;
;
)
{
=
(
)
(
(
)
,
)
;
=
;
=
;
=
;
}
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
(
)
;
}
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
;
(
)
;
FOR
(
=
;
;
=
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
;
=
;
}
}
IF
(
)
{
(
)
;
(
)
;
}
}
STATIC
=
;
VOID
(
VOID
)
{
;
;
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
(
INT
)
,
(
INT
)
,
(
INT
)
,
)
;
(
,
,
,
,
)
;
}
=
;
}
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
BREAK
;
=
;
(
)
;
}
}
VOID
(
,
DOUBLE
)
{
,
;
=
(
)
;
FOR
(
=
,
=
;
;
=
)
{
IF
(
)
BREAK
;
=
;
}
IF
(
)
{
=
;
=
;
RETURN
;
}
=
;
=
;
}
(
STRUCT
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
(
(
INT
)
)
)
)
RETURN
;
RETURN
;
}
__E__O__F__
SHORT
;
INT
(
VOID
)
;
VOID
(
VOID
)
;
EXTERN
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
INT
=
;
STATIC
STRUCT
;
STATIC
UNSIGNED
LONG
;
INT
(
VOID
)
{
INT
;
STRUCT
=
;
CHAR
;
STRUCT
;
CHAR
;
IF
(
(
)
)
RETURN
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
=
(
)
;
IF
(
)
{
=
(
INT
)
;
IF
(
(
,
)
)
{
FOR
(
=
;
;
)
IF
(
(
)
)
BREAK
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
;
}
(
,
)
;
}
}
IF
(
(
=
(
)
)
)
(
)
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
(
)
;
(
,
)
;
(
,
(
)
)
;
=
(
,
)
;
IF
(
)
=
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
=
(
)
)
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
)
;
=
;
}
INT
(
INT
)
{
INT
;
STRUCT
;
=
;
IF
(
(
=
(
,
,
)
)
)
RETURN
;
IF
(
(
,
,
)
)
GOTO
;
=
;
=
;
=
(
)
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
GOTO
;
RETURN
;
(
)
;
RETURN
;
}
INT
(
INT
)
{
IF
(
)
=
;
RETURN
(
)
;
}
STATIC
INT
(
CHAR
,
STRUCT
)
{
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
=
;
(
,
)
;
IF
(
)
;
=
;
=
;
WHILE
(
)
{
;
=
;
=
;
WHILE
(
(
)
)
{
=
;
IF
(
)
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
;
=
(
)
;
}
IF
(
)
=
(
)
;
ELSE
=
;
=
;
(
(
STRUCT
)
)
=
(
(
SHORT
)
)
;
(
(
STRUCT
)
)
=
(
(
)
)
(
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
RETURN
;
}
INT
(
VOID
)
{
CHAR
;
IF
(
)
RETURN
;
IF
(
(
,
,
,
,
,
)
)
RETURN
;
RETURN
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
INT
=
(
STRUCT
)
;
INT
;
=
(
,
,
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
INT
=
(
)
;
IF
(
)
RETURN
;
}
RETURN
;
}
INT
(
INT
)
{
INT
=
;
IF
(
(
,
,
,
(
CHAR
)
,
(
)
)
)
RETURN
;
=
;
RETURN
;
}
INT
(
INT
,
,
INT
)
{
INT
;
IF
(
)
{
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
RETURN
(
,
,
,
)
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
INT
;
=
(
,
,
,
,
(
STRUCT
)
,
(
STRUCT
)
)
;
IF
(
)
IF
(
(
)
)
RETURN
;
(
)
;
RETURN
;
}
CHAR
(
STRUCT
)
{
STATIC
CHAR
;
INT
;
=
(
(
(
STRUCT
)
)
)
;
(
,
,
(
)
,
(
)
,
(
)
,
,
(
(
(
STRUCT
)
)
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
INT
,
,
,
,
;
INT
;
(
,
,
,
,
,
,
)
;
=
(
)
(
)
(
)
;
=
;
(
(
STRUCT
)
)
=
(
)
;
(
(
STRUCT
)
)
=
(
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
INT
=
(
STRUCT
)
;
UNSIGNED
INT
;
(
,
,
(
STRUCT
)
)
;
(
,
(
STRUCT
)
,
)
;
=
(
(
STRUCT
)
)
;
IF
(
(
)
)
(
(
STRUCT
)
)
=
;
RETURN
;
}
INT
(
STRUCT
,
CHAR
)
{
STRUCT
;
=
(
(
CHAR
)
(
(
STRUCT
)
)
,
(
STRUCT
)
,
)
;
IF
(
)
{
(
,
(
CHAR
)
,
)
;
RETURN
;
}
(
,
(
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
STRUCT
;
IF
(
)
RETURN
(
,
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
(
(
STRUCT
)
)
=
(
)
;
(
(
STRUCT
)
)
=
(
INT
)
;
RETURN
;
}
INT
(
STRUCT
,
STRUCT
)
{
IF
(
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
RETURN
;
}
INT
(
STRUCT
)
{
RETURN
(
(
(
STRUCT
)
)
)
;
}
INT
(
STRUCT
,
INT
)
{
(
(
STRUCT
)
)
=
(
)
;
RETURN
;
}
__E__O__F__
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
INT
=
;
;
INT
=
;
__E__O__F__
STATIC
=
;
TYPEDEF
STRUCT
{
STRUCT
;
;
INT
;
INT
;
INT
;
;
;
;
DOUBLE
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
;
;
;
;
}
;
;
INT
;
STATIC
VOID
(
,
)
;
STATIC
VOID
(
)
{
=
;
=
;
=
;
=
;
=
;
}
STATIC
INT
(
)
{
INT
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
CONTINUE
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
IF
(
)
{
=
;
=
;
CONTINUE
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
CONTINUE
;
}
IF
(
)
{
=
;
=
;
(
)
;
CONTINUE
;
}
SWITCH
(
)
{
CASE
(
,
)
;
(
,
)
;
IF
(
)
{
=
(
)
;
;
}
ELSE
(
,
,
)
;
BREAK
;
CASE
=
(
)
;
;
BREAK
;
CASE
(
,
)
;
IF
(
)
{
=
(
)
;
=
;
}
ELSE
(
,
,
)
;
BREAK
;
CASE
;
BREAK
;
}
=
;
=
;
CONTINUE
;
}
IF
(
)
{
=
;
(
)
;
CONTINUE
;
}
=
;
}
=
;
IF
(
)
{
(
,
)
;
=
;
}
IF
(
)
{
(
,
)
;
=
;
}
SWITCH
(
)
{
CASE
(
)
;
(
,
)
;
IF
(
)
{
IF
(
(
)
)
{
=
;
(
)
;
BREAK
;
}
}
ELSE
{
IF
(
(
)
)
{
=
;
(
)
;
BREAK
;
}
;
}
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
;
}
BREAK
;
CASE
=
;
(
,
)
;
IF
(
)
=
;
ELSE
=
;
BREAK
;
CASE
=
;
(
,
)
;
=
;
BREAK
;
CASE
;
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
ELSE
IF
(
)
{
=
;
(
,
)
;
}
ELSE
{
=
;
IF
(
)
{
(
SHORT
)
=
;
;
}
}
BREAK
;
CASE
=
;
;
(
,
)
;
IF
(
)
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
;
IF
(
(
)
)
{
=
;
}
ELSE
{
=
;
(
)
;
}
BREAK
;
CASE
=
;
(
)
;
BREAK
;
CASE
BREAK
;
}
}
RETURN
;
}
INT
(
VOID
)
{
INT
;
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
)
{
=
(
)
;
(
)
;
}
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
}
(
)
;
}
VOID
(
)
{
=
;
}
(
)
{
RETURN
;
}
(
)
{
RETURN
(
(
(
)
)
)
;
}
INT
(
,
)
{
;
INT
;
UNSIGNED
SHORT
;
;
=
(
)
;
(
)
;
=
;
IF
(
)
;
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
(
,
,
)
;
=
;
=
;
RETURN
;
}
STATIC
VOID
(
)
{
;
(
)
;
=
;
=
;
=
;
(
,
)
;
}
INT
(
,
)
{
;
INT
;
UNSIGNED
SHORT
;
;
=
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
IF
(
)
;
(
,
)
;
(
,
)
;
=
;
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
RETURN
;
}
STATIC
VOID
(
,
)
{
UNSIGNED
SHORT
;
;
(
)
;
=
;
IF
(
)
;
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
STATIC
VOID
(
,
)
{
UNSIGNED
SHORT
;
INT
;
;
(
)
;
=
;
IF
(
)
;
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
STATIC
INT
(
)
{
;
SHORT
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
(
SHORT
)
;
IF
(
)
=
;
(
)
;
(
,
,
)
;
;
;
IF
(
)
(
,
,
)
;
RETURN
;
}
INT
(
)
{
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
;
IF
(
)
IF
(
(
)
)
{
(
)
;
=
;
}
RETURN
;
}
VOID
(
)
{
=
(
)
;
(
)
;
(
)
;
}
CHAR
=
{
,
}
;
UNSIGNED
=
{
,
,
,
,
}
;
VOID
(
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
)
)
BREAK
;
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
RETURN
;
(
,
,
)
;
(
,
)
;
=
;
=
;
=
;
(
,
)
;
;
RETURN
;
}
STATIC
(
CHAR
,
)
{
INT
;
DOUBLE
;
DOUBLE
;
=
;
IF
(
(
,
)
)
RETURN
;
=
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
(
)
;
=
;
(
)
;
(
,
)
;
(
,
)
;
DO
{
(
)
;
IF
(
(
)
)
{
(
,
)
;
=
;
(
)
;
(
)
;
}
=
(
)
;
}
WHILE
(
(
)
)
;
IF
(
)
{
(
)
;
GOTO
;
}
IF
(
)
{
(
)
;
GOTO
;
}
(
)
;
=
(
)
;
IF
(
)
{
(
(
)
)
;
GOTO
;
}
IF
(
)
{
(
)
;
GOTO
;
}
=
;
=
;
(
)
;
RETURN
;
(
)
;
RETURN
;
}
(
CHAR
)
{
INT
;
=
;
IF
(
)
;
FOR
(
=
;
(
)
;
)
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
)
)
IF
(
(
=
(
,
)
)
)
BREAK
;
RETURN
;
}
STATIC
(
)
{
INT
;
=
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
{
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
(
)
)
{
=
;
(
)
;
RETURN
;
}
}
=
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
IF
(
)
{
IF
(
(
(
)
,
)
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
(
)
,
)
)
RETURN
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
=
;
=
;
(
,
,
(
INT
)
(
(
)
)
)
;
RETURN
;
}
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
IF
(
(
)
)
IF
(
(
=
(
)
)
)
BREAK
;
RETURN
;
}
__E__O__F__
EXTERN
INT
(
CHAR
,
INT
)
;
EXTERN
INT
(
INT
)
;
EXTERN
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
INT
=
;
STATIC
STRUCT
;
STATIC
UNSIGNED
LONG
;
INT
(
VOID
)
{
STRUCT
;
CHAR
;
STRUCT
;
CHAR
;
IF
(
(
)
)
RETURN
;
(
,
)
;
=
(
)
;
=
(
INT
)
;
IF
(
(
,
)
)
{
=
;
(
,
)
;
}
IF
(
(
=
(
)
)
)
(
)
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
(
)
;
(
,
)
;
(
,
(
)
)
;
=
(
,
)
;
IF
(
)
=
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
=
(
)
)
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
)
;
=
;
}
INT
(
INT
)
{
INT
;
STRUCT
;
=
;
IF
(
(
=
(
,
,
)
)
)
RETURN
;
IF
(
(
,
,
(
CHAR
)
)
)
GOTO
;
=
;
=
;
=
(
)
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
GOTO
;
RETURN
;
(
)
;
RETURN
;
}
INT
(
INT
)
{
IF
(
)
=
;
RETURN
(
)
;
}
STATIC
INT
(
CHAR
,
STRUCT
)
{
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
=
;
(
,
)
;
IF
(
)
;
=
;
=
;
WHILE
(
)
{
;
=
;
=
;
WHILE
(
(
)
)
{
=
;
IF
(
)
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
;
=
(
)
;
}
IF
(
)
=
(
)
;
ELSE
=
;
=
;
(
(
STRUCT
)
)
=
(
(
SHORT
)
)
;
(
(
STRUCT
)
)
=
(
(
)
)
(
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
RETURN
;
}
INT
(
VOID
)
{
UNSIGNED
LONG
;
IF
(
)
RETURN
;
IF
(
(
,
,
)
)
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
INT
=
(
STRUCT
)
;
INT
;
=
(
,
,
,
,
(
STRUCT
)
,
)
;
IF
(
(
)
)
RETURN
;
RETURN
;
}
INT
(
INT
)
{
INT
=
;
IF
(
(
,
,
,
(
CHAR
)
,
(
)
)
)
RETURN
;
=
;
RETURN
;
}
INT
(
INT
,
,
INT
)
{
INT
;
IF
(
)
{
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
RETURN
(
,
,
,
)
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
INT
;
=
(
,
,
,
,
(
STRUCT
)
,
(
STRUCT
)
)
;
IF
(
)
RETURN
;
RETURN
;
}
CHAR
(
STRUCT
)
{
STATIC
CHAR
;
INT
;
=
(
(
(
STRUCT
)
)
)
;
(
,
,
(
)
,
(
)
,
(
)
,
,
(
(
(
STRUCT
)
)
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
INT
,
,
,
,
;
INT
;
(
,
,
,
,
,
,
)
;
=
(
)
(
)
(
)
;
=
;
(
(
STRUCT
)
)
=
(
)
;
(
(
STRUCT
)
)
=
(
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
INT
=
(
STRUCT
)
;
UNSIGNED
INT
;
(
,
,
(
STRUCT
)
)
;
(
,
(
STRUCT
)
,
)
;
=
(
(
STRUCT
)
)
;
IF
(
(
)
)
(
(
STRUCT
)
)
=
;
RETURN
;
}
INT
(
STRUCT
,
CHAR
)
{
STRUCT
;
=
(
(
CHAR
)
(
(
STRUCT
)
)
,
(
STRUCT
)
,
)
;
IF
(
)
{
(
,
(
CHAR
)
,
)
;
RETURN
;
}
(
,
(
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
STRUCT
;
IF
(
)
RETURN
(
,
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
(
(
STRUCT
)
)
=
(
)
;
(
(
STRUCT
)
)
=
(
INT
)
;
RETURN
;
}
INT
(
STRUCT
,
STRUCT
)
{
IF
(
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
RETURN
;
}
INT
(
STRUCT
)
{
RETURN
(
(
(
STRUCT
)
)
)
;
}
INT
(
STRUCT
,
INT
)
{
(
(
STRUCT
)
)
=
(
)
;
RETURN
;
}
__E__O__F__
EXTERN
INT
;
STATIC
STRUCT
{
DOUBLE
;
INT
;
LONG
;
}
;
INT
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
(
,
,
(
)
)
)
{
=
;
(
)
;
}
IF
(
)
(
)
;
}
VOID
(
)
{
}
VOID
(
VOID
)
{
}
INT
(
)
{
INT
;
IF
(
(
LONG
)
(
)
)
(
)
;
(
,
,
(
INT
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
(
INT
)
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
INT
(
,
)
{
INT
;
IF
(
(
LONG
)
(
)
)
(
)
;
(
,
,
(
INT
)
)
;
(
)
;
RETURN
;
}
(
)
{
;
IF
(
(
LONG
)
(
)
)
(
)
;
(
,
,
(
INT
)
)
;
(
)
;
RETURN
;
}
VOID
(
)
{
}
VOID
(
)
{
}
(
CHAR
)
{
RETURN
;
}
(
VOID
)
{
;
IF
(
)
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
LONG
)
(
)
=
;
(
,
,
)
;
(
)
;
RETURN
;
}
__E__O__F__
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
INT
=
;
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
INT
=
;
__E__O__F__
EXTERN
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
INT
=
;
STATIC
STRUCT
;
STATIC
UNSIGNED
LONG
;
;
INT
(
)
(
,
)
;
INT
(
)
(
VOID
)
;
INT
(
)
(
VOID
)
;
(
)
(
INT
,
INT
,
INT
)
;
INT
(
)
(
,
LONG
,
)
;
INT
(
)
(
,
INT
,
INT
,
CONST
CHAR
,
INT
)
;
INT
(
)
(
,
CHAR
,
INT
,
INT
,
STRUCT
,
INT
)
;
INT
(
)
(
,
CONST
CHAR
,
INT
,
INT
,
CONST
STRUCT
,
INT
)
;
INT
(
)
(
)
;
INT
(
)
(
CHAR
,
INT
)
;
STRUCT
(
)
(
CONST
CHAR
)
;
STRUCT
(
)
(
CONST
CHAR
,
INT
,
INT
)
;
INT
(
)
(
,
STRUCT
,
INT
)
;
INT
=
;
;
STATIC
DOUBLE
;
(
VOID
)
{
;
;
IF
(
(
(
)
)
)
{
(
)
;
RETURN
;
}
=
(
)
(
,
,
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
RETURN
;
}
VOID
(
)
{
STRUCT
=
;
CHAR
;
UNSIGNED
LONG
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
IF
(
)
RETURN
;
=
(
INT
)
;
=
(
)
;
(
,
,
(
)
,
(
)
,
(
)
,
)
;
}
INT
(
VOID
)
{
INT
;
CHAR
;
CHAR
;
INT
;
;
;
=
(
)
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
=
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
(
,
)
;
=
(
(
,
)
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
;
IF
(
(
,
)
)
{
(
)
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
FOR
(
=
;
;
)
IF
(
(
)
)
BREAK
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
;
}
(
,
)
;
}
=
(
)
;
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
}
ELSE
{
(
)
;
}
}
ELSE
{
=
;
(
,
)
;
}
IF
(
(
=
(
)
)
)
{
(
)
;
IF
(
)
(
)
;
RETURN
;
}
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
;
(
(
STRUCT
)
)
=
(
(
UNSIGNED
SHORT
)
)
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
(
=
(
)
)
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
)
;
=
;
}
INT
(
INT
)
{
INT
;
STRUCT
;
=
;
IF
(
(
=
(
,
,
)
)
)
RETURN
;
IF
(
(
,
,
)
)
GOTO
;
=
;
=
;
=
(
(
UNSIGNED
SHORT
)
)
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
RETURN
;
(
,
(
(
STRUCT
)
)
)
;
(
)
;
RETURN
;
}
INT
(
INT
)
{
IF
(
)
=
;
RETURN
(
)
;
}
STATIC
INT
(
CHAR
,
STRUCT
)
{
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
=
;
(
,
)
;
IF
(
)
;
=
;
=
;
WHILE
(
)
{
;
=
;
=
;
WHILE
(
(
)
)
{
=
;
IF
(
)
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
;
=
(
)
;
}
IF
(
)
=
(
)
;
ELSE
=
;
=
;
(
(
STRUCT
)
)
=
(
(
SHORT
)
)
;
(
(
STRUCT
)
)
=
(
(
)
)
(
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
RETURN
;
}
INT
(
VOID
)
{
CHAR
;
IF
(
)
RETURN
;
IF
(
(
,
,
(
)
,
,
,
)
)
{
RETURN
;
}
RETURN
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
INT
=
(
STRUCT
)
;
INT
;
=
(
,
,
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
INT
=
(
)
;
IF
(
)
RETURN
;
}
RETURN
;
}
INT
(
INT
)
{
INT
=
;
IF
(
(
,
,
,
(
CHAR
)
,
(
)
)
)
RETURN
;
=
;
RETURN
;
}
INT
(
INT
,
,
INT
)
{
INT
;
IF
(
)
{
IF
(
)
(
)
;
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
RETURN
(
,
,
,
)
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
INT
;
=
(
,
,
,
,
(
STRUCT
)
,
(
STRUCT
)
)
;
IF
(
)
IF
(
(
)
)
RETURN
;
RETURN
;
}
CHAR
(
STRUCT
)
{
STATIC
CHAR
;
INT
;
=
(
(
(
STRUCT
)
)
)
;
(
,
,
(
)
,
(
)
,
(
)
,
,
(
(
(
STRUCT
)
)
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
INT
,
,
,
,
;
INT
;
(
,
,
,
,
,
,
)
;
=
(
)
(
)
(
)
;
=
;
(
(
STRUCT
)
)
=
(
)
;
(
(
STRUCT
)
)
=
(
(
UNSIGNED
SHORT
)
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
INT
=
(
STRUCT
)
;
UNSIGNED
INT
;
(
,
,
(
STRUCT
)
)
;
(
,
(
STRUCT
)
,
)
;
=
(
(
STRUCT
)
)
;
IF
(
(
)
)
(
(
STRUCT
)
)
=
;
RETURN
;
}
INT
(
STRUCT
,
CHAR
)
{
STRUCT
;
=
(
(
CHAR
)
(
(
STRUCT
)
)
,
(
STRUCT
)
,
)
;
IF
(
)
{
(
,
(
CHAR
)
,
)
;
RETURN
;
}
(
,
(
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
STRUCT
;
IF
(
)
RETURN
(
,
)
;
=
(
)
;
IF
(
)
RETURN
;
=
;
(
(
STRUCT
)
)
=
(
(
UNSIGNED
SHORT
)
)
;
(
(
STRUCT
)
)
=
(
INT
)
;
RETURN
;
}
INT
(
STRUCT
,
STRUCT
)
{
IF
(
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
RETURN
;
}
INT
(
STRUCT
)
{
RETURN
(
(
(
STRUCT
)
)
)
;
}
INT
(
STRUCT
,
INT
)
{
(
(
STRUCT
)
)
=
(
(
UNSIGNED
SHORT
)
)
;
RETURN
;
}
__E__O__F__
EXTERN
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
STRUCT
;
EXTERN
;
EXTERN
;
STATIC
INT
;
STATIC
INT
;
INT
(
VOID
)
{
INT
;
CHAR
;
STRUCT
;
CHAR
;
INT
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
,
)
;
=
(
(
,
)
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
;
FOR
(
=
;
;
)
=
;
IF
(
(
,
)
)
{
IF
(
(
,
)
)
{
FOR
(
=
;
;
)
IF
(
(
)
)
BREAK
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
;
}
(
,
)
;
}
}
IF
(
(
=
(
)
)
)
{
(
)
;
IF
(
)
(
)
;
RETURN
;
}
(
(
STRUCT
)
)
=
;
(
(
(
STRUCT
)
)
,
,
)
;
(
(
(
STRUCT
)
)
,
,
)
;
(
(
STRUCT
)
)
=
(
(
UNSIGNED
SHORT
)
)
;
(
,
)
;
(
,
(
)
)
;
=
(
,
)
;
IF
(
)
=
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
=
(
)
)
)
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
)
;
=
;
}
INT
(
INT
)
{
INT
;
INT
;
STRUCT
;
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
RETURN
;
IF
(
(
=
(
,
,
)
)
)
RETURN
;
IF
(
(
,
,
)
)
GOTO
;
IF
(
(
,
,
,
(
CHAR
)
,
(
)
)
)
GOTO
;
=
;
(
,
,
)
;
(
,
,
)
;
;
=
(
(
UNSIGNED
SHORT
)
)
;
IF
(
(
,
(
VOID
)
,
(
)
)
)
{
=
;
=
;
RETURN
;
}
(
)
;
(
)
;
RETURN
;
}
INT
(
INT
)
{
INT
=
;
INT
;
=
(
)
;
=
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
RETURN
;
}
INT
(
VOID
)
{
UNSIGNED
LONG
;
IF
(
)
RETURN
;
IF
(
(
,
,
)
)
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
STATIC
;
INT
(
INT
,
,
INT
,
STRUCT
)
{
INT
=
(
STRUCT
)
;
INT
=
;
INT
;
=
(
,
,
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
INT
=
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
RETURN
;
;
(
,
,
)
;
RETURN
;
}
INT
(
INT
,
,
INT
)
{
RETURN
(
,
,
,
)
;
}
INT
(
INT
,
,
INT
,
STRUCT
)
{
INT
=
;
INT
;
(
INT
)
(
)
=
;
;
(
,
,
)
;
;
=
(
,
,
,
,
(
STRUCT
)
,
(
STRUCT
)
)
;
IF
(
)
IF
(
(
)
)
RETURN
;
RETURN
;
}
CHAR
(
STRUCT
)
{
STATIC
CHAR
;
(
,
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
(
(
(
STRUCT
)
)
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
INT
;
CHAR
;
=
;
(
,
,
(
STRUCT
)
)
;
=
;
(
,
)
=
;
=
;
IF
(
(
,
,
)
)
RETURN
;
(
(
STRUCT
)
)
=
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
(
STRUCT
)
)
=
(
(
UNSIGNED
SHORT
)
)
;
RETURN
;
}
INT
(
INT
,
STRUCT
)
{
INT
=
;
INT
=
(
STRUCT
)
;
UNSIGNED
INT
;
(
,
,
(
STRUCT
)
)
;
IF
(
(
,
(
STRUCT
)
,
)
)
{
INT
=
(
)
;
}
RETURN
;
}
INT
(
STRUCT
,
CHAR
)
{
(
,
(
)
)
;
RETURN
;
}
INT
(
CHAR
,
STRUCT
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
RETURN
(
,
)
;
}
IF
(
)
{
(
,
,
,
)
;
RETURN
(
,
)
;
}
IF
(
)
RETURN
(
,
)
;
RETURN
;
}
INT
(
STRUCT
,
STRUCT
)
{
IF
(
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
IF
(
(
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
)
)
RETURN
;
IF
(
(
(
(
STRUCT
)
)
,
(
(
STRUCT
)
)
,
)
)
RETURN
;
IF
(
(
(
STRUCT
)
)
(
(
STRUCT
)
)
)
RETURN
;
RETURN
;
}
INT
(
STRUCT
)
{
RETURN
(
(
(
STRUCT
)
)
)
;
}
INT
(
STRUCT
,
INT
)
{
(
(
STRUCT
)
)
=
(
(
UNSIGNED
SHORT
)
)
;
RETURN
;
}
__E__O__F__
__E__O__F__
VOID
(
)
{
}
VOID
(
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
(
)
(
(
(
INT
)
)
=
(
)
)
CHAR
(
INT
)
{
INT
;
STATIC
CHAR
;
=
;
FOR
(
=
;
;
)
{
(
,
(
(
)
)
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
(
)
,
,
,
)
;
}
VOID
(
VOID
)
{
;
FLOAT
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
,
FLOAT
,
FLOAT
,
)
{
FLOAT
;
,
;
FLOAT
;
FLOAT
,
;
FLOAT
;
,
;
INT
,
,
,
;
FOR
(
=
;
;
)
IF
(
)
(
)
;
=
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
=
=
=
;
=
=
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
}
}
}
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
FLOAT
,
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
;
CHAR
,
;
;
INT
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
(
,
)
;
=
;
=
;
=
(
INT
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
;
INT
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
;
;
FLOAT
;
=
(
)
;
=
;
=
(
)
;
IF
(
)
=
=
=
;
ELSE
{
=
;
=
;
=
;
=
;
}
(
,
(
)
)
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
=
(
)
;
=
;
=
(
)
;
(
)
=
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
=
(
)
;
IF
(
)
=
;
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
(
)
=
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
FLOAT
,
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
=
(
)
;
=
(
INT
)
(
(
,
)
)
;
IF
(
)
;
}
(
)
=
;
(
)
=
;
(
)
=
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
(
)
)
(
(
FLOAT
)
)
;
(
)
=
;
}
VOID
(
VOID
)
{
FLOAT
,
;
FLOAT
;
FLOAT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
FLOAT
;
FLOAT
,
;
INT
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
;
INT
;
FLOAT
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
INT
)
=
;
}
VOID
(
VOID
)
{
FLOAT
,
;
;
INT
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
}
EXTERN
(
,
)
;
VOID
(
VOID
)
{
;
;
;
=
(
)
;
=
(
)
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
}
VOID
(
VOID
)
{
}
;
INT
(
INT
)
{
INT
;
;
;
;
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
;
;
)
{
IF
(
)
=
;
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
INT
)
)
CONTINUE
;
BREAK
;
}
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
(
)
)
;
RETURN
;
}
INT
,
;
VOID
(
VOID
)
{
,
;
;
INT
;
;
IF
(
)
{
=
(
)
;
=
;
}
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
(
,
)
;
=
(
)
;
IF
(
(
)
(
(
(
)
)
)
)
{
;
(
)
;
RETURN
;
}
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
CHAR
,
;
=
(
)
;
=
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
,
;
FLOAT
;
FLOAT
;
;
INT
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
(
(
)
)
;
IF
(
(
)
)
CONTINUE
;
=
(
)
;
=
;
}
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
CHAR
;
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
IF
(
(
INT
)
)
(
,
,
(
INT
)
)
;
ELSE
(
,
,
)
;
(
)
=
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
(
,
,
(
)
,
(
)
,
(
)
)
;
(
)
=
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
(
)
=
;
}
VOID
(
VOID
)
{
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
,
;
;
;
;
;
=
=
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
FOR
(
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
IF
(
(
)
)
=
;
ELSE
IF
(
(
)
)
=
;
=
(
)
;
=
;
}
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
(
)
;
=
(
(
)
)
;
IF
(
)
=
(
)
;
}
(
)
;
}
{
INT
;
INT
;
CHAR
,
;
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
FOR
(
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
}
(
)
;
}
VOID
(
CHAR
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
=
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
(
)
;
=
(
)
;
(
)
=
(
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
}
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
IF
(
)
(
)
;
=
(
)
;
(
)
=
(
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
(
,
)
;
RETURN
;
}
IF
(
(
,
)
)
RETURN
;
}
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
(
(
)
)
;
}
VOID
(
VOID
)
{
;
FLOAT
,
;
;
;
INT
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
(
INT
)
(
)
)
)
{
(
)
=
;
RETURN
;
}
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
(
)
=
(
,
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
;
=
(
)
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
(
)
=
;
ELSE
{
(
,
)
;
(
,
)
;
=
(
INT
)
;
=
(
)
;
(
)
=
;
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
INT
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
IF
(
)
(
)
=
(
INT
)
(
)
;
ELSE
(
)
=
(
INT
)
(
)
;
}
VOID
(
VOID
)
{
(
)
=
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
=
(
(
)
)
;
}
VOID
(
VOID
)
{
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
(
)
=
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
WHILE
(
)
{
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
}
=
{
,
}
;
VOID
(
VOID
)
{
,
,
;
,
,
,
;
INT
,
;
;
FLOAT
,
;
FLOAT
;
=
(
)
;
=
(
)
;
(
,
)
;
;
(
,
)
;
(
,
,
,
)
;
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
{
(
,
(
)
)
;
RETURN
;
}
(
,
)
;
=
;
=
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
=
(
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
=
;
(
)
;
(
,
(
)
)
;
}
ELSE
{
(
,
(
)
)
;
}
}
VOID
(
VOID
)
{
;
FLOAT
,
,
,
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
=
(
)
;
}
VOID
(
VOID
)
{
;
FLOAT
,
,
,
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
=
(
)
;
}
(
VOID
)
{
INT
;
INT
;
;
=
(
)
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
RETURN
;
CASE
RETURN
;
CASE
RETURN
;
DEFAULT
(
)
;
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
(
(
)
,
(
)
)
;
}
VOID
(
VOID
)
{
(
(
)
,
(
)
)
;
}
INT
(
CHAR
)
;
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
=
;
}
VOID
(
VOID
)
{
CHAR
,
;
IF
(
)
RETURN
;
=
;
=
(
)
;
=
(
)
;
IF
(
(
INT
)
(
)
)
(
(
,
,
)
)
;
ELSE
(
(
,
,
)
)
;
CHAR
;
IF
(
)
RETURN
;
=
;
=
(
)
;
(
(
,
)
)
;
}
VOID
(
VOID
)
{
;
INT
;
INT
;
INT
;
FLOAT
;
FLOAT
=
;
=
(
)
;
IF
(
)
{
=
;
(
)
=
;
RETURN
;
}
IF
(
)
{
(
)
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
(
INT
)
;
=
(
INT
)
;
=
(
INT
)
;
IF
(
(
(
)
)
)
IF
(
(
(
)
(
)
)
(
)
)
{
IF
(
)
IF
(
)
{
=
;
IF
(
)
=
;
=
;
=
;
}
}
ELSE
{
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
=
;
=
;
}
IF
(
)
{
IF
(
)
{
(
,
,
,
,
)
;
=
(
FLOAT
)
(
)
;
}
=
;
(
)
=
;
RETURN
;
}
IF
(
)
{
IF
(
(
(
)
)
)
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
=
(
FLOAT
)
(
)
;
}
}
ELSE
IF
(
)
{
IF
(
(
(
)
)
)
IF
(
)
{
=
;
=
(
FLOAT
)
(
)
;
}
}
IF
(
(
)
)
{
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
=
(
FLOAT
)
(
)
;
=
;
}
IF
(
(
)
)
{
(
,
,
,
)
;
}
(
)
=
;
}
VOID
(
VOID
)
{
(
)
=
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
=
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
=
(
(
)
)
;
}
VOID
(
VOID
)
{
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
;
INT
=
(
)
(
)
;
__E__O__F__
;
;
CHAR
;
;
;
;
;
FLOAT
;
INT
;
UNSIGNED
SHORT
;
INT
=
{
,
(
)
,
,
,
,
,
(
)
,
(
VOID
)
}
;
(
INT
)
;
(
VOID
,
,
CHAR
)
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
TYPEDEF
STRUCT
{
;
CHAR
;
}
;
STATIC
=
{
{
,
}
,
{
,
}
}
;
VOID
(
)
{
(
,
,
)
;
=
;
}
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
IF
(
)
(
)
;
;
=
(
)
;
(
)
;
RETURN
;
}
VOID
(
)
{
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
}
(
INT
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
}
RETURN
;
}
(
INT
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
(
CHAR
)
{
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
(
,
CHAR
)
{
=
;
INT
;
STATIC
INT
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
;
GOTO
;
}
}
=
(
)
;
IF
(
(
)
)
{
=
;
(
,
)
;
;
}
IF
(
)
RETURN
;
RETURN
(
)
(
(
CHAR
)
)
;
}
CHAR
(
,
)
{
STATIC
CHAR
;
;
;
;
SWITCH
(
)
{
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
(
(
)
)
)
;
BREAK
;
CASE
=
;
(
,
,
)
;
BREAK
;
CASE
=
(
)
;
(
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
RETURN
;
}
CHAR
(
,
)
{
STATIC
CHAR
;
;
;
;
SWITCH
(
)
{
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
(
(
)
)
)
;
BREAK
;
CASE
=
;
(
,
,
)
;
BREAK
;
CASE
=
(
)
;
(
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
,
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
RETURN
;
}
CHAR
(
INT
)
{
CHAR
;
INT
;
;
VOID
;
STATIC
CHAR
;
=
(
VOID
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
{
=
(
,
)
;
(
,
,
,
,
)
;
}
=
(
)
;
FOR
(
;
;
)
(
,
)
;
(
,
)
;
RETURN
;
}
CHAR
(
INT
)
{
INT
;
;
STATIC
CHAR
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
,
)
;
=
(
)
;
FOR
(
;
;
)
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
)
{
INT
;
;
INT
;
INT
,
;
CHAR
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
CONTINUE
;
=
(
INT
)
(
(
CHAR
)
)
;
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
(
,
)
;
=
(
)
;
WHILE
(
)
(
)
;
(
,
(
,
(
)
)
)
;
}
}
VOID
(
,
)
{
;
INT
;
INT
,
;
CHAR
;
INT
;
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
CONTINUE
;
=
(
INT
)
(
(
CHAR
)
)
;
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
(
,
(
)
)
)
;
}
(
,
)
;
}
VOID
(
INT
)
{
(
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
(
,
)
;
FOR
(
=
;
;
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
(
)
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
INT
,
,
,
;
=
=
=
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
;
INT
;
CHAR
;
INT
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
CONTINUE
;
;
IF
(
)
CONTINUE
;
=
;
(
,
,
)
;
(
,
,
(
,
(
)
)
)
;
}
(
,
)
;
}
VOID
(
CHAR
)
{
CHAR
;
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
)
;
(
,
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
CONTINUE
;
}
IF
(
(
(
VOID
)
,
,
)
)
(
)
;
}
}
CHAR
(
CHAR
)
{
CHAR
,
;
INT
,
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
}
RETURN
;
}
(
VOID
,
,
CHAR
)
{
INT
;
CHAR
;
;
CHAR
,
;
VOID
;
;
=
(
VOID
)
(
(
INT
)
)
;
SWITCH
(
)
{
CASE
(
)
=
(
)
;
BREAK
;
CASE
(
FLOAT
)
=
(
)
;
BREAK
;
CASE
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
WHILE
(
)
;
=
;
(
(
FLOAT
)
)
=
(
)
;
=
=
;
}
BREAK
;
CASE
(
INT
)
=
(
(
(
)
)
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
INT
)
=
(
)
;
BREAK
;
CASE
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
)
=
;
BREAK
;
DEFAULT
BREAK
;
}
RETURN
;
}
CHAR
(
CHAR
,
)
{
;
;
;
CHAR
;
INT
;
=
;
IF
(
)
(
,
,
)
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
)
;
IF
(
(
,
)
)
{
(
,
)
;
=
;
}
ELSE
=
;
IF
(
(
,
)
)
(
,
)
;
(
,
)
;
=
(
)
;
WHILE
(
)
{
=
;
;
}
=
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
IF
(
)
CONTINUE
;
=
(
)
;
IF
(
)
{
(
,
)
;
CONTINUE
;
}
IF
(
)
{
CHAR
;
(
,
)
;
(
,
,
)
;
}
IF
(
(
(
VOID
)
,
,
)
)
(
)
;
}
IF
(
)
=
;
RETURN
;
}
VOID
(
CHAR
)
{
;
INT
;
;
=
;
=
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
,
)
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
=
(
,
)
;
IF
(
)
{
IF
(
(
(
INT
)
)
)
{
(
)
;
;
CONTINUE
;
}
}
ELSE
IF
(
(
(
(
INT
)
)
)
(
(
(
INT
)
)
)
(
(
(
INT
)
)
)
)
{
(
)
;
;
CONTINUE
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
CONTINUE
;
}
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
CONTINUE
;
}
=
(
)
;
(
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
(
)
;
=
(
)
(
)
;
IF
(
)
(
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
(
(
)
)
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
)
;
=
(
)
(
(
)
)
;
=
(
CHAR
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
=
(
FLOAT
)
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
INT
)
{
IF
(
)
(
,
)
;
RETURN
(
)
(
(
)
(
)
)
;
}
INT
(
)
{
INT
;
=
(
)
(
)
;
=
;
IF
(
)
(
)
;
RETURN
;
}
__E__O__F__
TYPEDEF
STRUCT
{
INT
;
;
}
;
;
INT
;
INT
;
INT
;
;
;
INT
;
INT
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
(
INT
)
;
CHAR
(
INT
)
;
VOID
(
)
{
INT
;
IF
(
(
UNSIGNED
)
(
)
(
)
)
{
(
,
)
;
=
(
)
;
FOR
(
;
;
)
(
)
;
}
IF
(
)
(
,
(
)
,
)
;
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
(
UNSIGNED
)
(
)
)
{
(
,
(
)
)
;
(
,
(
)
)
;
}
ELSE
{
IF
(
)
(
,
(
)
)
;
IF
(
)
(
,
(
)
)
;
IF
(
)
(
,
(
)
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
)
;
}
ELSE
(
,
,
)
;
}
}
VOID
(
VOID
)
{
,
;
INT
;
INT
;
INT
;
=
;
DO
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
IF
(
)
(
,
,
)
;
;
=
;
}
}
WHILE
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
(
)
;
}
INT
(
)
{
INT
,
,
,
;
=
;
=
;
;
IF
(
)
(
)
;
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
(
(
INT
)
)
;
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
(
INT
)
)
=
(
(
INT
)
)
;
;
}
}
=
;
RETURN
;
}
INT
(
VOID
)
{
INT
,
;
IF
(
)
(
)
;
=
;
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
(
(
INT
)
)
=
;
;
=
;
RETURN
;
}
VOID
(
)
{
,
,
;
INT
;
;
,
;
INT
;
INT
;
;
INT
;
;
IF
(
)
{
IF
(
)
(
(
)
)
;
(
)
;
}
=
;
=
;
=
;
=
;
=
(
)
;
WHILE
(
)
{
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
;
=
;
IF
(
)
(
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
INT
)
(
INT
)
;
BREAK
;
CASE
=
(
INT
)
(
INT
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
(
)
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
)
(
)
(
)
;
BREAK
;
CASE
=
(
,
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
)
(
)
(
)
;
BREAK
;
CASE
=
(
,
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
=
(
)
(
(
)
)
;
=
;
BREAK
;
CASE
=
(
)
(
(
)
)
;
=
;
=
;
=
;
BREAK
;
CASE
=
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
(
(
INT
)
)
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
=
(
)
;
(
)
;
=
(
)
(
(
INT
)
)
;
=
;
BREAK
;
CASE
=
(
)
;
(
)
;
=
(
)
(
(
INT
)
)
;
=
;
=
;
=
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
CASE
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
IF
(
)
(
)
;
(
)
;
BREAK
;
}
=
(
)
;
BREAK
;
CASE
CASE
=
;
=
;
=
;
=
(
)
;
IF
(
)
RETURN
;
BREAK
;
CASE
=
(
)
;
=
;
=
;
IF
(
)
{
=
;
}
=
;
BREAK
;
DEFAULT
(
,
)
;
}
}
}
__E__O__F__
STATIC
;
STATIC
;
VOID
(
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
;
VOID
(
,
,
)
{
FLOAT
;
,
,
;
=
;
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
(
,
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
VOID
(
,
,
)
{
FLOAT
;
INT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
INT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
INT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
VOID
(
,
,
)
{
FLOAT
;
INT
;
IF
(
)
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
INT
(
,
,
INT
,
INT
,
VOID
(
)
(
,
,
)
)
{
INT
,
,
;
INT
,
;
=
;
=
;
FOR
(
=
;
;
=
,
)
{
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
;
}
IF
(
)
{
=
;
;
}
}
RETURN
;
}
VOID
(
)
{
INT
,
,
;
;
UNSIGNED
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
;
}
}
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
RETURN
;
;
}
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
(
)
;
}
}
__E__O__F__
;
;
VOID
;
;
;
;
INT
;
FLOAT
;
;
;
;
STATIC
FLOAT
;
STATIC
;
STATIC
,
,
;
STATIC
;
INT
;
INT
;
INT
;
FLOAT
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
STATIC
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
FLOAT
=
{
}
;
VOID
(
,
)
;
VOID
(
INT
)
;
VOID
(
,
)
;
VOID
(
,
,
,
)
;
VOID
(
,
)
;
(
VOID
)
{
INT
,
,
,
;
;
FLOAT
,
,
,
,
;
,
,
;
,
,
;
;
,
;
UNSIGNED
,
;
INT
;
=
;
=
;
=
(
)
;
=
(
)
(
(
)
)
;
(
)
;
=
;
IF
(
(
)
(
)
)
{
(
,
,
)
;
=
;
}
=
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
=
=
=
(
FLOAT
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
)
=
;
=
;
=
;
}
}
IF
(
)
{
RETURN
;
}
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
;
}
}
}
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
;
;
}
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
(
(
)
)
)
{
;
}
}
RETURN
;
}
VOID
(
,
)
{
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
;
;
;
=
(
)
(
(
)
)
;
=
;
=
;
=
;
FOR
(
=
;
;
,
,
,
,
)
{
(
,
,
,
)
;
IF
(
)
;
ELSE
{
(
,
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
}
=
;
=
(
)
(
(
)
)
;
FOR
(
=
;
;
,
)
{
=
;
=
;
=
;
IF
(
(
)
)
CONTINUE
;
IF
(
(
(
)
(
)
)
)
{
=
;
=
;
(
)
;
}
ELSE
{
(
)
;
}
}
}
VOID
(
INT
)
{
INT
;
FLOAT
,
;
STATIC
FLOAT
;
STATIC
FLOAT
;
;
=
;
=
;
=
;
(
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
=
;
=
;
=
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
(
(
FLOAT
)
)
)
;
(
(
(
FLOAT
)
)
)
;
(
(
FLOAT
)
)
;
}
}
}
VOID
(
,
,
,
)
{
INT
;
FLOAT
,
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
IF
(
)
{
(
INT
)
(
)
;
IF
(
)
=
;
}
=
;
}
VOID
(
,
)
{
INT
,
;
FLOAT
,
,
;
;
=
;
FOR
(
=
;
;
,
,
,
)
{
=
(
(
,
)
)
;
=
;
=
(
(
(
,
)
)
)
;
=
(
(
(
,
)
)
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
IF
(
)
{
(
INT
)
(
)
;
IF
(
)
=
;
}
=
;
}
}
VOID
(
,
)
{
FLOAT
;
=
;
=
;
=
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
;
;
=
(
)
(
(
)
)
;
=
;
=
;
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
(
)
(
(
)
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
,
;
;
FLOAT
,
;
FLOAT
,
;
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
=
(
(
)
(
(
)
)
)
;
=
;
IF
(
)
{
=
(
)
(
(
)
)
;
=
(
FLOAT
)
(
(
)
)
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
}
=
;
}
=
;
=
(
VOID
)
(
(
)
)
;
=
;
=
(
)
;
=
;
}
VOID
(
)
{
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
=
;
IF
(
)
=
;
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
,
;
;
FLOAT
,
,
,
;
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
IF
(
)
{
=
(
)
(
(
)
)
;
RETURN
;
}
=
(
)
(
(
)
)
;
=
(
FLOAT
)
(
(
)
)
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
}
=
(
)
(
(
)
)
;
}
VOID
(
)
{
(
(
)
(
)
)
;
;
;
=
(
)
(
(
(
LONG
)
)
(
)
)
;
=
;
=
(
)
(
)
;
=
(
)
(
(
)
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
=
;
IF
(
)
=
(
FLOAT
)
(
FLOAT
)
;
ELSE
=
(
FLOAT
)
(
FLOAT
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
__E__O__F__
;
;
,
;
;
FLOAT
;
;
INT
;
TYPEDEF
ENUM
{
,
,
}
;
STATIC
;
STATIC
;
STATIC
INT
,
;
STATIC
,
;
STATIC
;
VOID
(
)
{
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
FLOAT
,
,
,
,
,
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
,
,
)
{
,
,
;
INT
,
,
;
FLOAT
,
,
;
,
;
,
,
;
;
=
=
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
FOR
(
;
;
=
)
{
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
RETURN
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
=
;
=
;
}
}
IF
(
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
}
}
ELSE
{
(
,
,
)
;
}
}
}
}
}
VOID
(
)
{
INT
,
,
;
;
;
INT
;
;
;
,
;
,
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
;
=
;
=
=
;
IF
(
)
{
=
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
}
=
;
}
=
;
(
,
,
)
;
}
ELSE
{
(
)
;
}
}
}
}
VOID
(
,
INT
)
{
INT
;
;
;
INT
;
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
(
(
)
)
;
(
,
)
;
}
}
}
VOID
(
,
INT
)
{
INT
,
,
,
;
,
;
;
,
;
;
DOUBLE
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
,
)
;
;
IF
(
)
RETURN
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
,
)
;
;
IF
(
)
(
)
;
}
}
IF
(
)
{
=
(
)
;
=
;
=
;
IF
(
)
{
DO
{
(
)
=
;
;
}
WHILE
(
)
;
}
IF
(
)
{
(
)
;
}
=
;
;
}
ELSE
{
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
,
)
;
BREAK
;
}
IF
(
)
=
;
ELSE
=
;
(
,
)
;
=
;
IF
(
)
{
=
;
IF
(
)
{
DO
{
IF
(
(
)
(
)
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
;
}
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
}
}
;
}
WHILE
(
)
;
}
ELSE
IF
(
)
{
DO
{
IF
(
(
)
(
)
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
;
}
}
ELSE
{
(
,
)
;
}
}
ELSE
{
(
,
)
;
}
}
;
}
WHILE
(
)
;
}
;
}
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
=
;
=
;
(
,
)
;
=
;
=
;
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
)
;
}
}
}
__E__O__F__
UNSIGNED
INT
;
INT
;
;
;
;
;
;
;
,
;
STATIC
,
;
;
INT
;
INT
;
,
;
,
;
TYPEDEF
STRUCT
{
FLOAT
,
;
INT
;
}
;
INT
;
FLOAT
;
FLOAT
,
,
;
INT
;
;
VOID
(
,
)
{
,
;
INT
;
FLOAT
,
;
,
;
FLOAT
;
INT
,
,
;
FLOAT
,
,
,
;
INT
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
INT
)
(
)
;
}
=
;
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
;
=
(
INT
)
(
)
;
IF
(
)
{
IF
(
)
{
=
(
)
;
}
RETURN
;
}
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
FLOAT
)
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
FLOAT
)
)
;
}
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
WHILE
(
)
=
;
=
;
=
;
}
=
;
=
;
}
VOID
(
,
,
)
{
FLOAT
,
,
;
;
IF
(
)
{
DO
{
=
(
,
)
;
=
(
,
)
;
IF
(
)
{
IF
(
)
{
CONTINUE
;
}
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
(
,
,
)
;
RETURN
;
}
ELSE
{
IF
(
)
{
IF
(
)
=
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
(
,
,
)
;
RETURN
;
}
}
WHILE
(
(
=
)
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
;
=
(
)
(
(
UNSIGNED
LONG
)
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
;
}
VOID
(
,
INT
)
{
INT
,
;
UNSIGNED
;
;
FLOAT
;
;
,
;
;
IF
(
(
)
)
{
;
RETURN
;
}
IF
(
(
)
)
{
;
RETURN
;
}
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
{
=
;
CONTINUE
;
}
}
ELSE
{
IF
(
(
(
(
UNSIGNED
LONG
)
(
UNSIGNED
LONG
)
)
)
(
(
(
)
(
(
UNSIGNED
LONG
)
)
)
)
)
{
(
)
;
=
;
CONTINUE
;
}
}
}
=
(
)
(
)
;
=
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
ELSE
{
=
;
=
;
IF
(
)
{
IF
(
)
{
IF
(
(
)
)
{
=
;
CONTINUE
;
}
}
ELSE
{
IF
(
(
(
(
UNSIGNED
LONG
)
(
UNSIGNED
LONG
)
)
)
(
(
(
)
(
(
UNSIGNED
LONG
)
)
)
)
)
{
(
)
;
=
;
CONTINUE
;
}
}
}
=
(
)
(
)
;
=
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
=
;
(
,
,
)
;
}
IF
(
)
RETURN
;
;
=
(
VOID
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
(
,
)
)
;
=
;
=
;
=
;
;
}
VOID
(
,
)
{
INT
;
UNSIGNED
;
;
FLOAT
;
;
;
;
IF
(
)
{
;
RETURN
;
}
IF
(
(
)
)
{
;
RETURN
;
}
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
=
;
=
;
FOR
(
;
;
=
)
{
=
=
;
(
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
}
IF
(
)
{
=
;
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
(
,
,
)
;
}
IF
(
)
RETURN
;
;
=
(
VOID
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
(
,
)
)
;
=
;
=
;
=
;
;
}
VOID
(
,
INT
)
{
INT
,
,
,
,
;
FLOAT
,
,
,
,
,
,
;
UNSIGNED
;
,
;
;
;
;
;
;
INT
,
,
,
;
;
=
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
WHILE
(
)
{
=
;
=
(
,
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
(
)
(
)
)
{
=
(
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
;
}
IF
(
)
{
=
;
;
=
;
}
=
;
=
;
}
IF
(
(
)
)
RETURN
;
=
;
;
=
;
}
=
;
SWITCH
(
)
{
CASE
CASE
=
;
=
;
BREAK
;
CASE
CASE
=
;
=
;
BREAK
;
CASE
CASE
=
;
=
;
BREAK
;
}
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
INT
,
;
;
FLOAT
;
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
(
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
{
(
,
)
;
}
}
}
__E__O__F__
,
FOR
,
(
)
;
,
,
;
,
,
;
;
;
,
;
INT
;
EXTERN
INT
;
INT
;
INT
,
;
STATIC
VOID
(
)
(
VOID
)
;
;
;
;
;
FLOAT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
,
)
;
VOID
(
VOID
)
{
;
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
FOR
(
=
;
;
)
{
=
=
;
}
}
VOID
(
,
)
{
;
DO
{
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
=
;
GOTO
;
=
;
=
;
=
;
=
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
DO
{
=
;
=
;
}
WHILE
(
(
=
)
)
;
}
VOID
(
)
{
,
;
WHILE
(
)
{
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
;
IF
(
)
GOTO
;
=
;
GOTO
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
;
INT
;
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
DO
{
=
;
=
;
}
WHILE
(
)
;
}
VOID
(
)
{
;
,
;
INT
;
=
;
IF
(
)
{
=
;
IF
(
)
GOTO
;
IF
(
(
)
)
{
GOTO
;
}
DO
{
=
;
}
WHILE
(
)
;
IF
(
)
{
IF
(
)
GOTO
;
}
GOTO
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
,
)
{
;
INT
;
IF
(
)
{
IF
(
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
}
=
;
=
;
}
}
VOID
(
)
{
;
,
;
INT
;
DOUBLE
,
,
,
,
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
)
;
=
;
IF
(
)
GOTO
;
IF
(
(
)
)
{
=
(
FLOAT
)
(
)
(
)
;
=
;
=
;
=
;
IF
(
)
{
GOTO
;
}
=
;
IF
(
)
{
IF
(
)
{
GOTO
;
}
}
}
DO
{
=
;
}
WHILE
(
)
;
IF
(
)
{
IF
(
)
GOTO
;
=
(
FLOAT
)
(
)
(
)
;
=
;
=
;
=
;
IF
(
)
{
GOTO
;
}
=
;
IF
(
)
{
IF
(
)
{
GOTO
;
}
}
GOTO
;
}
GOTO
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
;
;
=
;
=
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
=
;
(
,
)
;
IF
(
)
CONTINUE
;
}
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
=
;
=
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
)
;
IF
(
)
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
(
)
;
;
;
=
(
)
(
(
LONG
)
(
)
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
FLOAT
)
;
=
;
IF
(
)
{
(
,
)
;
}
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
FOR
(
=
;
;
)
=
;
=
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
=
;
=
(
FLOAT
)
;
=
;
IF
(
)
(
,
)
;
(
)
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
__E__O__F__
;
;
,
;
;
VOID
(
)
{
,
,
,
;
=
;
WHILE
(
)
{
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
BREAK
;
}
ELSE
=
;
}
=
;
=
;
=
;
=
;
}
=
;
}
VOID
(
)
{
;
;
;
INT
;
IF
(
)
{
RETURN
;
}
IF
(
)
{
IF
(
)
=
;
=
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
=
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
=
;
}
VOID
(
)
{
;
;
;
WHILE
(
(
=
)
)
{
=
;
=
;
SWITCH
(
)
{
CASE
CASE
CASE
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
}
=
;
BREAK
;
DEFAULT
(
,
)
;
}
}
}
__E__O__F__
INT
;
VOID
(
VOID
)
{
INT
,
,
;
=
(
INT
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
CONTINUE
;
}
=
;
=
;
=
;
=
;
}
}
VOID
(
,
INT
,
)
{
;
FLOAT
;
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
}
}
INT
(
,
,
)
{
INT
;
FLOAT
,
,
;
INT
;
;
;
;
INT
,
,
,
;
INT
;
;
;
UNSIGNED
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
(
)
)
RETURN
(
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
=
(
,
)
;
=
(
,
)
;
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
;
;
=
;
=
;
IF
(
)
{
(
(
)
)
;
FOR
(
=
;
;
)
{
=
;
;
(
(
)
)
(
(
)
)
;
}
;
}
RETURN
;
}
RETURN
(
,
,
)
;
}
INT
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
RETURN
;
}
__E__O__F__
VOID
;
;
=
{
,
,
}
;
FLOAT
;
INT
;
;
;
;
=
;
INT
=
;
FLOAT
=
;
INT
;
INT
;
,
,
;
INT
;
;
;
INT
;
INT
,
,
;
;
INT
;
;
;
;
,
;
,
;
,
;
;
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
;
FLOAT
,
,
,
;
INT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
,
;
;
INT
=
;
INT
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
INT
;
INT
;
INT
;
INT
=
;
,
;
;
FLOAT
,
;
INT
;
FLOAT
,
,
,
,
,
;
FLOAT
,
,
,
,
,
;
VOID
(
VOID
)
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
EXTERN
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
,
,
;
;
=
(
(
)
,
)
;
=
=
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
(
)
;
)
FOR
(
=
;
(
)
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
=
;
ELSE
=
;
}
}
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
(
FLOAT
)
)
;
(
,
(
FLOAT
)
)
;
=
;
=
;
=
=
=
;
=
=
=
;
=
;
=
;
(
)
;
(
(
LONG
)
,
(
LONG
)
(
LONG
)
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
=
;
IF
(
)
=
;
IF
(
)
{
=
(
(
)
,
)
;
=
;
=
;
=
;
;
(
)
;
}
ELSE
{
=
;
}
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
}
ELSE
{
=
(
(
)
,
)
;
}
=
;
=
;
(
)
;
}
VOID
(
,
,
INT
)
{
INT
;
FLOAT
;
=
;
IF
(
)
{
=
;
=
;
}
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
;
=
;
IF
(
)
=
;
;
=
(
)
;
=
(
)
;
{
IF
(
)
{
;
;
}
}
}
VOID
(
,
INT
,
FLOAT
)
{
INT
;
FLOAT
;
=
;
(
,
,
)
;
=
(
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
)
(
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
)
(
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
FLOAT
)
)
;
=
;
=
(
(
FLOAT
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
(
)
;
=
(
(
DOUBLE
)
(
)
(
)
)
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
(
LONG
)
,
(
LONG
)
(
LONG
)
)
;
=
;
(
)
;
}
ELSE
{
(
(
LONG
)
,
(
LONG
)
(
LONG
)
)
;
=
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
;
INT
;
IF
(
)
RETURN
;
;
=
;
=
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
=
(
)
;
DO
{
IF
(
)
BREAK
;
=
;
=
;
}
WHILE
(
)
;
}
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
;
FLOAT
=
{
,
,
}
;
;
FLOAT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
SWITCH
(
)
{
CASE
(
,
)
;
(
,
,
)
;
(
)
;
BREAK
;
CASE
(
,
)
;
(
,
,
)
;
IF
(
(
)
)
{
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
)
;
=
(
)
;
IF
(
)
;
}
}
IF
(
)
=
;
IF
(
)
=
;
(
)
;
}
BREAK
;
DEFAULT
BREAK
;
}
}
}
VOID
(
VOID
)
{
FLOAT
=
{
,
,
}
;
INT
;
INT
;
;
FLOAT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
=
(
)
;
IF
(
)
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
,
)
;
=
(
)
;
IF
(
)
;
}
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
(
)
;
}
INT
(
,
FLOAT
)
{
INT
,
,
;
,
;
DOUBLE
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
(
,
)
;
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
(
,
)
;
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
)
;
;
IF
(
)
(
)
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
,
,
;
;
;
FLOAT
;
IF
(
)
RETURN
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
(
,
)
;
=
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
{
CONTINUE
;
}
(
,
,
)
;
}
}
IF
(
)
{
(
)
;
}
ELSE
{
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
(
)
;
}
ELSE
{
(
,
)
;
}
=
;
}
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
BREAK
;
DEFAULT
BREAK
;
}
}
=
;
}
VOID
(
VOID
)
{
(
(
)
(
)
)
;
(
(
)
(
)
)
;
IF
(
)
{
=
;
}
ELSE
{
=
(
)
(
(
(
LONG
)
)
(
)
)
;
}
IF
(
)
{
=
(
)
(
(
(
LONG
)
)
(
)
)
;
=
;
;
(
)
;
}
(
)
;
IF
(
)
{
=
(
)
;
}
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
;
=
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
;
}
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
(
)
;
IF
(
)
=
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
(
)
;
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
LONG
)
(
)
)
(
)
;
IF
(
(
LONG
)
(
)
)
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
(
)
;
)
{
=
(
)
;
=
(
)
;
}
}
__E__O__F__
VOID
(
VOID
)
{
STATIC
FLOAT
;
IF
(
)
{
=
;
(
)
;
}
}
VOID
(
VOID
)
{
;
=
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
,
,
;
INT
;
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
=
(
)
;
=
;
(
,
,
)
;
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
;
INT
;
;
;
=
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
,
)
{
=
;
(
)
=
;
}
FOR
(
;
;
,
)
{
=
;
(
)
=
;
}
}
EXTERN
FLOAT
,
;
VOID
(
VOID
)
{
STATIC
INT
;
INT
;
FLOAT
;
STATIC
;
INT
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
(
)
;
DO
{
(
,
,
)
;
IF
(
)
BREAK
;
;
;
IF
(
)
=
;
}
WHILE
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
;
=
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
=
;
}
VOID
(
VOID
)
{
FLOAT
,
,
,
,
,
,
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
(
INT
)
,
,
(
INT
)
,
,
(
INT
)
,
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
)
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
,
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
(
,
)
;
}
}
VOID
(
,
)
{
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
,
FLOAT
,
FLOAT
)
{
FLOAT
;
=
(
,
)
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
=
;
;
}
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
,
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
IF
(
(
)
)
=
;
(
,
,
,
)
;
}
IF
(
)
{
=
;
IF
(
)
=
;
(
,
,
,
)
;
}
=
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
(
)
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
=
;
=
(
,
)
;
=
;
=
(
)
;
IF
(
(
)
)
{
IF
(
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
=
;
(
,
,
)
;
}
ELSE
{
=
;
=
;
IF
(
)
{
(
FLOAT
)
;
=
;
}
IF
(
)
{
=
;
(
FLOAT
)
;
}
=
;
=
;
=
(
INT
)
;
=
(
INT
)
;
(
,
(
INT
)
(
(
FLOAT
)
(
(
FLOAT
)
)
)
,
(
)
(
(
FLOAT
)
(
FLOAT
)
)
)
;
}
}
ELSE
{
=
;
=
;
=
;
=
;
(
,
,
)
;
}
=
;
}
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
__E__O__F__
INT
=
{
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
}
;
,
;
;
INT
;
,
,
;
VOID
(
VOID
)
{
INT
;
=
(
)
;
IF
(
)
{
=
(
INT
)
(
(
)
)
;
IF
(
)
=
;
}
ELSE
{
=
;
}
=
(
)
(
(
)
,
)
;
}
VOID
(
)
{
INT
,
,
;
;
FLOAT
;
;
;
=
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
=
(
(
)
)
;
(
,
,
)
;
}
}
EXTERN
FLOAT
;
;
FLOAT
=
;
=
{
,
,
}
;
FLOAT
=
;
FLOAT
=
;
VOID
(
)
{
INT
;
INT
;
;
FLOAT
;
FLOAT
,
,
,
,
,
;
;
FLOAT
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
(
(
)
)
;
}
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
FOR
(
=
;
;
)
=
;
=
;
}
VOID
(
VOID
)
{
;
;
INT
;
INT
;
;
CHAR
;
(
,
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
=
;
FOR
(
;
;
)
{
=
(
,
,
,
,
)
;
IF
(
)
BREAK
;
;
IF
(
)
{
(
)
;
BREAK
;
}
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
(
,
)
;
(
,
)
;
}
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
,
;
INT
,
,
,
;
FOR
(
=
;
;
)
=
(
)
;
FOR
(
=
;
;
)
=
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
}
VOID
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
ELSE
{
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
}
}
VOID
(
,
INT
,
INT
)
{
INT
,
;
;
INT
=
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
;
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
}
VOID
(
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
IF
(
)
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
ELSE
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
}
}
VOID
(
,
,
INT
,
INT
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
ELSE
{
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
(
(
)
)
;
}
}
}
ELSE
{
=
(
(
)
)
;
=
(
)
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
(
(
)
)
)
;
=
;
}
}
}
}
VOID
(
)
{
INT
,
,
;
;
FLOAT
;
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
;
=
(
(
)
)
;
(
)
;
=
(
(
)
)
;
(
,
,
)
;
}
}
VOID
(
)
{
INT
,
,
;
;
FLOAT
;
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
=
(
(
)
)
;
(
,
,
)
;
}
}
VOID
(
,
,
INT
)
{
;
FLOAT
;
INT
;
;
INT
;
STATIC
INT
;
(
,
,
)
;
=
(
)
;
IF
(
)
=
;
ELSE
{
=
;
;
}
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
SWITCH
(
)
{
CASE
=
(
(
)
)
;
=
(
INT
)
;
=
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
BREAK
;
CASE
=
(
(
)
)
;
=
(
INT
)
;
=
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
BREAK
;
CASE
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
BREAK
;
CASE
CASE
=
;
=
;
IF
(
)
=
(
(
)
)
;
ELSE
=
(
(
)
)
;
;
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
BREAK
;
CASE
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
;
BREAK
;
CASE
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
=
(
(
(
)
)
)
;
BREAK
;
}
(
,
,
)
;
}
}
EXTERN
;
VOID
(
VOID
)
{
,
;
FLOAT
;
INT
;
FLOAT
,
;
FLOAT
;
FLOAT
;
FLOAT
;
,
;
FLOAT
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
CONTINUE
;
}
BREAK
;
}
FOR
(
=
;
;
=
)
{
FOR
(
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
CONTINUE
;
}
BREAK
;
}
=
(
)
(
)
(
)
;
IF
(
)
=
;
ELSE
=
;
(
(
)
(
INT
)
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
,
)
;
(
)
;
;
;
;
SWITCH
(
)
{
CASE
BREAK
;
CASE
;
IF
(
)
=
;
ELSE
=
(
INT
)
;
;
BREAK
;
CASE
;
IF
(
)
=
;
ELSE
=
(
INT
)
;
FOR
(
=
;
;
)
;
;
BREAK
;
CASE
;
IF
(
)
=
;
ELSE
=
(
INT
)
;
FOR
(
=
;
;
)
;
;
BREAK
;
CASE
FOR
(
=
;
;
)
;
;
BREAK
;
CASE
FOR
(
=
;
;
)
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
BREAK
;
}
}
(
)
;
(
)
;
(
,
,
)
;
(
)
;
}
__E__O__F__
INT
=
;
INT
=
;
FLOAT
,
;
FLOAT
;
;
INT
;
INT
;
;
;
;
VOID
(
)
{
INT
,
;
;
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
)
=
;
}
}
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
(
)
=
(
)
;
(
)
=
;
}
ELSE
{
(
)
=
;
(
)
=
;
}
}
}
=
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
INT
,
;
UNSIGNED
;
STATIC
INT
=
,
=
;
=
;
=
;
IF
(
(
)
(
)
)
RETURN
;
=
;
=
;
=
(
UNSIGNED
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
(
(
(
UNSIGNED
)
)
)
(
UNSIGNED
)
)
(
UNSIGNED
)
;
;
}
FOR
(
=
;
;
)
{
=
(
(
)
)
;
(
)
=
(
(
(
)
)
(
)
)
(
)
;
=
(
UNSIGNED
)
(
(
)
)
;
}
(
UNSIGNED
)
;
}
=
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
INT
,
;
UNSIGNED
;
UNSIGNED
;
=
;
=
;
=
(
UNSIGNED
)
;
=
(
UNSIGNED
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
(
(
(
UNSIGNED
)
)
)
(
UNSIGNED
)
)
(
UNSIGNED
)
;
;
;
}
FOR
(
=
;
;
)
{
=
(
(
)
)
;
(
)
=
(
(
(
)
)
(
)
)
(
)
;
=
(
UNSIGNED
)
(
(
)
)
;
=
(
UNSIGNED
)
(
(
)
)
;
}
(
UNSIGNED
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
INT
,
;
;
UNSIGNED
SHORT
;
=
;
=
;
=
(
)
;
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
(
)
(
)
)
(
)
;
;
;
}
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
FLOAT
;
=
;
=
;
=
(
,
)
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
=
;
}
__E__O__F__
STATIC
INT
;
STATIC
;
STATIC
INT
,
;
;
VOID
(
FLOAT
)
{
;
IF
(
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
INT
(
INT
,
)
{
INT
,
;
FLOAT
;
FLOAT
,
,
;
FLOAT
,
,
,
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
=
;
FOR
(
=
;
;
,
(
)
(
FLOAT
)
)
{
=
(
,
)
;
}
=
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
(
)
(
FLOAT
)
)
{
IF
(
)
{
(
,
,
(
)
)
;
(
)
(
FLOAT
)
;
;
}
IF
(
)
CONTINUE
;
IF
(
(
)
(
)
)
CONTINUE
;
=
(
)
;
=
(
)
(
FLOAT
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
(
FLOAT
)
;
;
}
RETURN
;
}
VOID
(
)
{
INT
,
;
FLOAT
,
,
;
;
,
,
,
,
,
;
,
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
}
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
(
)
(
)
;
}
=
;
=
;
(
)
;
}
(
)
{
;
;
INT
,
,
;
FLOAT
,
,
,
;
=
;
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
IF
(
)
{
=
;
}
ELSE
{
=
(
)
;
=
;
=
;
=
;
=
;
=
(
(
INT
)
(
)
)
;
FOR
(
=
;
(
)
;
)
{
IF
(
)
BREAK
;
}
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
;
FLOAT
,
,
,
;
=
;
=
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
(
)
;
=
;
IF
(
(
)
(
)
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
}
ELSE
IF
(
)
{
=
;
IF
(
(
)
(
)
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
(
,
,
,
)
;
}
ELSE
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
}
ELSE
{
(
,
)
;
}
(
)
;
(
)
;
}
__E__O__F__
;
INT
,
,
,
;
INT
,
;
INT
,
,
,
;
UNSIGNED
;
VOID
;
UNSIGNED
CHAR
;
INT
;
UNSIGNED
;
INT
;
INT
;
INT
,
;
UNSIGNED
CHAR
,
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
=
{
,
,
,
}
;
UNSIGNED
;
VOID
(
VOID
)
{
;
INT
;
INT
,
;
FLOAT
,
,
;
,
;
INT
,
;
INT
;
INT
,
;
;
=
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
;
=
(
,
)
;
(
)
;
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
;
}
=
(
,
)
;
=
(
,
)
;
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
IF
(
)
{
UNSIGNED
;
=
(
)
;
=
;
IF
(
)
;
ELSE
{
IF
(
)
;
ELSE
=
;
}
}
(
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
INT
,
;
;
UNSIGNED
;
INT
;
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
IF
(
)
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
;
;
}
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
(
INT
)
)
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
}
}
(
)
{
INT
;
INT
;
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
RETURN
;
=
(
INT
)
(
)
;
=
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
UNSIGNED
CHAR
;
INT
,
,
;
INT
;
INT
,
,
;
INT
;
UNSIGNED
CHAR
;
VOID
(
)
(
VOID
)
;
;
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
(
)
(
)
)
;
=
(
(
(
(
)
(
)
)
)
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
(
)
(
)
;
=
;
IF
(
)
=
;
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
(
UNSIGNED
CHAR
)
)
(
)
;
;
}
;
;
;
;
}
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
UNSIGNED
CHAR
;
INT
,
,
;
UNSIGNED
SHORT
;
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
{
UNSIGNED
SHORT
;
UNSIGNED
CHAR
;
INT
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
;
;
;
}
;
;
;
=
(
UNSIGNED
SHORT
)
(
(
LONG
)
)
;
}
=
;
}
VOID
(
,
VOID
)
{
INT
;
INT
,
,
,
;
;
=
(
(
INT
)
(
)
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
)
;
}
}
}
VOID
(
,
VOID
)
{
INT
;
INT
,
,
,
;
UNSIGNED
SHORT
;
=
(
(
INT
)
(
)
(
)
)
;
=
(
UNSIGNED
SHORT
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
)
)
;
}
}
}
VOID
(
,
VOID
)
{
IF
(
)
{
IF
(
)
{
(
(
)
(
(
)
)
,
)
;
}
ELSE
{
(
(
)
(
(
)
)
,
)
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
}
}
ELSE
{
(
)
;
}
}
__E__O__F__
INT
;
__E__O__F__
INT
;
;
,
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
INT
;
;
;
;
;
;
;
INT
=
{
,
,
,
}
;
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
,
INT
,
)
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
(
(
,
)
)
;
=
(
(
,
)
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
}
=
(
)
;
=
(
)
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
INT
,
INT
,
)
{
IF
(
)
(
,
(
)
,
)
;
ELSE
(
(
(
)
)
,
(
)
,
)
;
}
VOID
(
INT
,
INT
,
)
{
IF
(
)
(
,
(
)
,
)
;
ELSE
(
(
(
)
)
,
(
)
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
IF
(
)
(
,
,
)
;
ELSE
(
(
(
)
)
,
,
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
IF
(
)
(
,
,
)
;
ELSE
(
(
(
)
)
,
,
)
;
}
INT
(
INT
,
CHAR
)
{
CHAR
;
INT
;
INT
;
=
;
IF
(
)
{
=
;
=
;
}
FOR
(
=
;
;
)
;
DO
{
;
=
;
=
;
;
}
WHILE
(
)
;
=
;
RETURN
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
CHAR
;
CHAR
;
INT
,
;
=
(
,
)
;
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
;
;
}
}
INT
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
VOID
(
VOID
)
{
INT
,
,
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
;
}
}
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
=
;
}
}
INT
(
INT
)
{
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
;
(
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
,
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
CHAR
;
INT
,
,
,
;
INT
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
(
,
,
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
(
)
;
INT
,
,
;
INT
,
;
INT
;
INT
,
;
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
IF
(
)
CONTINUE
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
(
(
)
)
,
,
,
,
)
;
(
(
(
)
)
,
,
,
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
(
)
,
,
)
;
}
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
FLOAT
;
INT
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
}
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
=
;
=
(
INT
)
(
(
)
)
;
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
ELSE
=
(
)
;
(
,
,
)
;
IF
(
)
=
;
}
}
IF
(
)
{
INT
=
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
=
;
=
(
INT
)
(
(
)
)
;
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
ELSE
=
(
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
(
,
,
)
;
}
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
}
}
ELSE
(
,
,
)
;
}
ELSE
(
(
)
,
,
)
;
IF
(
)
=
;
}
}
}
IF
(
)
{
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
(
(
)
,
,
)
;
}
}
}
}
FOR
(
=
;
;
)
{
(
,
,
)
;
IF
(
)
(
(
)
,
,
)
;
IF
(
)
(
(
)
,
,
)
;
IF
(
)
(
(
)
,
,
)
;
}
=
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
{
=
;
IF
(
)
{
=
;
}
ELSE
{
IF
(
(
)
)
{
(
,
,
)
;
}
}
IF
(
)
=
;
}
IF
(
)
{
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
{
=
;
IF
(
)
{
=
;
}
ELSE
{
(
,
,
)
;
}
IF
(
)
=
;
}
}
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
=
;
IF
(
)
{
=
;
}
ELSE
{
(
,
,
)
;
}
IF
(
)
=
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
{
=
;
IF
(
)
{
=
;
}
ELSE
(
,
,
)
;
IF
(
)
=
;
}
}
}
}
VOID
(
VOID
)
{
INT
,
,
;
INT
,
;
INT
,
,
;
INT
;
CHAR
;
;
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
=
;
(
,
,
)
;
(
(
)
,
,
)
;
(
(
)
,
,
)
;
(
(
)
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
(
)
,
,
)
;
}
;
}
}
VOID
(
VOID
)
{
INT
,
;
IF
(
(
)
(
)
(
)
)
{
INT
,
;
INT
;
CHAR
;
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
(
(
)
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
=
;
(
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
RETURN
;
}
IF
(
(
(
)
)
(
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
;
IF
(
)
(
,
,
,
)
;
IF
(
)
{
(
)
;
IF
(
)
(
)
;
}
IF
(
)
{
(
,
,
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
}
IF
(
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
ELSE
{
IF
(
)
{
(
,
,
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
}
ELSE
{
(
,
,
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
}
}
(
)
;
(
,
,
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
}
ELSE
{
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
}
(
,
,
,
,
)
;
}
IF
(
)
{
IF
(
)
(
)
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
CHAR
;
CHAR
;
INT
,
;
=
(
,
)
;
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
;
;
}
}
VOID
(
VOID
)
{
;
INT
,
,
;
INT
,
;
INT
,
,
;
CHAR
;
;
=
;
=
;
=
(
)
;
(
(
)
,
,
)
;
(
)
;
=
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
{
INT
;
INT
,
,
,
;
=
;
=
(
INT
)
;
=
;
=
;
=
;
(
,
,
,
,
)
;
(
,
,
)
;
}
(
,
,
)
;
;
}
}
VOID
(
VOID
)
{
;
INT
,
,
;
INT
,
;
INT
,
,
;
CHAR
;
;
INT
;
IF
(
)
RETURN
;
=
;
=
;
(
)
;
=
;
=
;
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
FOR
(
;
;
)
{
=
;
=
;
IF
(
)
CONTINUE
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
{
INT
;
INT
,
,
,
;
=
;
=
(
INT
)
;
=
;
=
;
=
;
(
,
,
,
,
)
;
(
,
,
)
;
}
(
,
,
)
;
;
}
}
VOID
(
VOID
)
{
;
INT
;
INT
;
=
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
;
(
,
,
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
)
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
;
=
;
=
(
)
;
(
(
)
,
,
)
;
}
__E__O__F__
INT
;
INT
;
FLOAT
;
FLOAT
;
FLOAT
,
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
;
;
;
;
INT
;
INT
;
INT
;
;
;
;
;
;
FLOAT
;
;
;
VOID
(
VOID
)
;
CHAR
;
FLOAT
;
FLOAT
;
INT
;
INT
;
INT
;
VOID
(
CHAR
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
;
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
INT
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
,
)
{
(
,
,
)
;
IF
(
)
RETURN
;
}
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
=
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
}
FLOAT
(
FLOAT
,
FLOAT
,
FLOAT
)
{
FLOAT
;
FLOAT
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
;
FLOAT
;
=
;
=
;
(
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
=
;
=
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
=
;
}
VOID
(
VOID
)
{
(
,
)
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
STATIC
INT
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
=
(
)
;
(
(
)
,
(
)
,
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
IF
(
)
{
=
;
(
,
(
INT
)
,
,
(
INT
)
)
;
(
)
;
}
ELSE
IF
(
)
{
=
;
(
,
,
,
)
;
}
ELSE
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
(
,
)
;
=
;
}
ELSE
{
IF
(
)
(
)
;
}
}
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
UNSIGNED
SHORT
,
,
,
;
UNSIGNED
SHORT
,
;
UNSIGNED
CHAR
;
CHAR
;
CHAR
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
CHAR
;
UNSIGNED
CHAR
;
}
;
VOID
(
CHAR
,
,
INT
,
INT
,
INT
,
)
{
INT
,
,
;
;
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
SHORT
)
(
)
)
;
=
(
(
SHORT
)
(
)
)
;
=
(
(
SHORT
)
)
;
=
(
(
SHORT
)
)
;
(
,
,
(
)
)
;
=
;
=
(
(
SHORT
)
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
ELSE
{
=
;
=
;
}
}
;
}
=
;
FOR
(
=
;
;
)
=
;
=
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
CHAR
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
,
,
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
(
)
;
}
CHAR
;
;
VOID
(
VOID
)
{
CHAR
;
INT
;
INT
;
INT
,
;
=
;
=
;
DO
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
(
)
;
FOR
(
=
;
;
,
)
(
,
,
)
;
;
WHILE
(
)
;
IF
(
)
BREAK
;
;
}
WHILE
(
)
;
}
INT
(
CHAR
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
(
)
;
=
;
(
)
;
DO
{
=
;
(
)
;
}
WHILE
(
)
;
=
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
FLOAT
;
STATIC
FLOAT
;
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
ELSE
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
(
)
;
}
(
)
;
IF
(
)
{
=
;
(
,
,
,
)
;
(
)
;
}
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
IF
(
)
{
(
)
;
}
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
=
;
(
)
;
}
__E__O__F__
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
VOID
)
;
;
INT
;
INT
=
;
STATIC
=
;
=
;
VOLATILE
=
;
VOLATILE
;
;
;
;
;
=
;
INT
;
INT
;
;
INT
;
;
INT
=
;
INT
=
;
INT
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
;
INT
=
;
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
}
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
=
;
(
)
;
(
)
;
=
(
(
)
,
)
;
=
;
IF
(
)
{
=
(
VOID
)
(
(
)
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
,
)
;
}
(
,
)
;
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
=
;
=
;
=
;
IF
(
)
{
(
)
;
}
}
(
CHAR
)
{
INT
;
;
IF
(
)
(
)
;
IF
(
(
)
)
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
RETURN
;
}
IF
(
)
(
)
;
=
;
(
,
)
;
;
RETURN
;
}
VOID
(
CHAR
)
{
;
IF
(
)
RETURN
;
=
(
)
;
(
)
;
}
(
CHAR
)
{
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
(
)
;
RETURN
;
}
(
INT
,
INT
)
{
INT
;
INT
;
INT
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
=
;
BREAK
;
}
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
;
IF
(
)
=
;
RETURN
;
}
VOID
(
)
{
;
,
,
;
,
,
;
;
;
IF
(
)
{
=
;
=
;
RETURN
;
}
=
;
(
,
,
)
;
=
(
)
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
=
(
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
}
VOID
(
INT
,
INT
,
,
,
FLOAT
,
FLOAT
)
{
,
;
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
(
,
)
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
(
)
(
INT
)
(
)
;
IF
(
)
=
;
;
;
BREAK
;
}
}
}
VOID
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
RETURN
;
}
}
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
(
,
,
(
)
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
)
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
;
;
INT
;
;
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
(
,
,
)
;
(
,
,
,
,
)
;
}
ELSE
{
(
,
,
)
;
}
}
VOID
(
,
,
FLOAT
,
FLOAT
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
;
(
,
)
;
=
;
=
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
;
FLOAT
;
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
=
=
;
}
}
VOID
(
,
,
,
)
{
INT
,
;
INT
;
;
;
IF
(
(
)
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
;
;
=
=
;
CONTINUE
;
}
=
;
FOR
(
=
;
;
,
)
IF
(
)
BREAK
;
IF
(
)
{
=
;
}
ELSE
{
IF
(
)
{
;
;
=
=
;
}
CONTINUE
;
}
}
}
IF
(
)
{
=
;
=
;
FOR
(
=
;
;
,
)
IF
(
(
)
)
{
;
}
(
,
)
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
STATIC
INT
;
STATIC
INT
;
INT
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
{
;
IF
(
)
{
=
;
=
;
(
)
;
}
}
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
RETURN
;
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
;
INT
;
IF
(
(
)
)
RETURN
;
(
)
;
IF
(
)
{
=
;
}
=
;
=
(
)
;
IF
(
)
=
;
{
;
IF
(
)
{
IF
(
(
,
)
)
(
)
;
IF
(
)
(
)
;
IF
(
(
)
)
(
,
,
,
)
;
}
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
STATIC
INT
=
;
INT
;
CHAR
;
;
=
;
WHILE
(
(
)
)
{
IF
(
(
(
)
,
)
)
{
(
,
(
)
)
;
(
,
)
;
}
ELSE
(
,
(
)
)
;
=
(
)
;
(
,
,
,
,
,
)
;
;
}
}
VOID
(
VOID
)
{
STATIC
INT
=
;
INT
;
FLOAT
;
CHAR
;
;
=
;
WHILE
(
(
)
)
{
IF
(
(
(
)
,
)
)
{
(
,
(
)
)
;
(
,
)
;
}
ELSE
(
,
(
)
)
;
=
(
)
;
=
(
(
)
)
;
(
,
,
,
,
,
)
;
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
INT
,
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
(
)
;
;
IF
(
)
(
)
;
ELSE
(
)
;
(
,
,
,
)
;
}
(
,
)
;
}
VOID
(
CHAR
)
{
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
,
,
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
__E__O__F__
INT
(
VOID
)
;
(
VOID
)
;
INT
(
VOID
)
;
VOID
(
VOID
)
;
SHORT
=
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
INT
;
INT
;
INT
=
;
VOID
(
)
{
INT
;
CHAR
;
FOR
(
=
;
;
)
=
(
(
(
(
)
)
)
)
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
(
,
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
(
,
(
)
)
;
}
INT
(
VOID
)
{
CHAR
;
CHAR
;
=
(
)
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
(
,
,
)
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
=
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
IF
(
)
(
,
,
)
;
RETURN
;
}
INT
(
VOID
)
{
VOLATILE
INT
;
(
,
)
;
FOR
(
=
;
;
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
RETURN
;
ELSE
RETURN
;
}
INT
(
VOID
)
{
WHILE
(
(
(
)
)
)
;
RETURN
(
)
;
}
VOID
(
INT
)
{
WHILE
(
(
(
)
)
)
;
(
,
)
;
}
INT
(
INT
)
{
(
,
)
;
RETURN
(
)
;
}
VOID
(
INT
,
INT
)
{
(
,
)
;
(
,
)
;
}
INT
;
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
(
)
)
;
(
(
)
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
=
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
(
)
;
=
(
(
)
)
;
(
)
;
(
)
;
(
,
(
)
)
;
(
)
;
(
(
)
)
;
(
(
)
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
=
(
(
)
)
;
(
)
;
(
)
;
(
)
;
(
(
)
)
;
(
(
)
)
;
(
)
;
}
}
STATIC
INT
=
{
,
,
,
,
,
,
,
}
;
STATIC
INT
=
{
,
,
,
,
,
,
,
}
;
STATIC
INT
=
{
,
,
,
,
,
,
,
}
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
VOID
)
{
INT
;
INT
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
}
(
,
)
;
=
(
)
(
)
(
)
(
)
(
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
(
)
)
;
(
,
(
)
)
;
(
,
)
;
(
,
(
(
)
)
)
;
(
,
(
(
)
)
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
(
,
(
)
)
;
}
(
,
)
;
(
,
)
;
}
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
=
;
}
=
;
=
;
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
)
;
=
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
(
)
;
=
(
SHORT
)
(
)
;
=
;
(
,
,
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
(
)
;
(
)
;
RETURN
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
{
(
,
)
;
=
(
)
;
(
)
;
IF
(
)
;
=
(
)
;
}
ELSE
{
(
,
)
;
=
(
(
)
)
;
(
(
)
)
;
IF
(
)
;
=
(
)
;
}
=
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
}
ELSE
IF
(
)
{
(
)
;
(
,
)
;
}
ELSE
{
}
(
)
;
(
)
;
(
,
)
;
}
TYPEDEF
ENUM
{
,
,
}
;
;
(
VOID
)
{
IF
(
(
)
)
{
=
;
RETURN
;
}
IF
(
(
)
)
{
=
;
RETURN
;
}
=
;
RETURN
;
}
INT
(
VOID
)
{
SWITCH
(
)
{
CASE
RETURN
(
)
;
CASE
RETURN
(
)
;
CASE
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
BREAK
;
}
=
;
RETURN
;
}
VOID
(
VOID
)
{
}
__E__O__F__
(
CONST
CHAR
,
CONST
CHAR
)
;
INT
(
)
;
VOID
(
,
CONST
CHAR
,
CONST
CHAR
,
CHAR
)
;
STRUCT
{
LONG
;
CHAR
;
}
;
STRUCT
{
LONG
;
INT
;
CHAR
;
}
;
STATIC
=
;
STATIC
INT
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
STRUCT
;
STATIC
STRUCT
;
STATIC
CHAR
(
CHAR
)
{
IF
(
)
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
=
;
}
STATIC
INT
(
CHAR
,
CONST
CHAR
)
{
INT
=
;
IF
(
(
,
)
)
=
;
WHILE
(
)
;
IF
(
)
RETURN
(
)
;
;
WHILE
(
)
{
IF
(
)
IF
(
(
)
(
)
)
RETURN
(
)
;
;
IF
(
)
;
}
IF
(
)
IF
(
)
RETURN
(
)
;
WHILE
(
)
;
IF
(
)
RETURN
(
)
;
RETURN
(
)
;
}
STATIC
INT
(
CHAR
,
CONST
CHAR
)
{
INT
=
;
IF
(
(
,
)
)
=
;
WHILE
(
)
;
WHILE
(
)
{
IF
(
)
IF
(
(
)
(
)
)
RETURN
(
)
;
;
IF
(
)
;
}
IF
(
)
IF
(
)
RETURN
(
)
;
WHILE
(
)
;
IF
(
)
RETURN
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
CHAR
,
CHAR
)
{
INT
=
;
WHILE
(
)
;
IF
(
)
{
=
;
RETURN
;
}
;
WHILE
(
)
{
IF
(
)
{
=
;
;
}
;
}
IF
(
)
{
=
;
RETURN
;
}
WHILE
(
)
;
=
;
}
STATIC
VOID
(
CHAR
,
CHAR
)
{
INT
=
;
WHILE
(
)
;
WHILE
(
)
{
IF
(
)
{
=
;
;
}
;
}
IF
(
)
{
=
;
RETURN
;
}
WHILE
(
)
;
=
;
}
STATIC
VOID
(
CHAR
,
CHAR
)
{
INT
=
;
WHILE
(
)
;
IF
(
)
;
WHILE
(
)
;
WHILE
(
(
)
)
{
=
;
;
;
}
=
;
}
STATIC
INT
(
CHAR
,
LONG
)
{
INT
;
CHAR
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
(
)
;
;
IF
(
)
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
(
,
)
;
=
;
RETURN
(
)
;
}
STATIC
VOID
(
CHAR
,
INT
,
LONG
)
{
INT
;
CHAR
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
)
IF
(
(
,
)
)
RETURN
;
;
IF
(
)
=
;
(
,
)
;
=
;
=
;
}
STATIC
CHAR
(
CHAR
,
INT
,
)
{
INT
=
;
IF
(
(
,
,
)
)
RETURN
(
)
;
WHILE
(
)
;
=
;
RETURN
(
)
;
}
(
CONST
CHAR
,
CONST
CHAR
)
{
RETURN
(
(
,
)
)
;
}
INT
(
)
{
IF
(
)
(
)
;
RETURN
(
(
)
)
;
}
VOID
(
,
CONST
CHAR
,
CONST
CHAR
,
CHAR
)
{
INT
;
LONG
,
;
CHAR
;
IF
(
)
(
)
;
=
;
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
BREAK
;
IF
(
)
{
IF
(
)
{
=
;
(
,
,
)
;
}
}
ELSE
{
IF
(
(
)
)
(
)
;
=
(
)
;
WHILE
(
)
{
(
,
,
)
;
IF
(
(
,
)
)
=
(
,
(
)
)
;
IF
(
(
,
)
)
BREAK
;
IF
(
(
)
)
(
)
;
IF
(
(
)
)
RETURN
;
}
}
FOR
(
=
;
;
)
IF
(
)
IF
(
(
,
,
)
)
BREAK
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
)
;
}
ELSE
{
IF
(
(
)
)
(
,
,
)
;
=
(
)
;
WHILE
(
)
{
=
(
)
;
(
,
,
)
;
IF
(
(
,
)
)
(
,
,
)
;
IF
(
(
,
)
)
{
(
,
)
;
BREAK
;
}
IF
(
(
)
(
,
)
)
(
,
,
)
;
IF
(
(
)
)
RETURN
;
}
}
}
UNSIGNED
CHAR
UNSIGNED
SHORT
UNSIGNED
LONG
STRUCT
{
;
;
}
;
STRUCT
{
;
;
}
;
EXTERN
SHORT
;
STATIC
=
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
=
{
,
,
,
,
,
,
,
}
;
STATIC
=
{
,
,
,
,
,
,
,
}
;
STATIC
=
{
,
,
,
,
,
,
,
}
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
STRUCT
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
STATIC
STRUCT
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
VOID
(
,
)
{
(
,
)
;
(
,
)
;
}
VOID
(
,
)
{
(
,
)
;
(
,
)
;
}
(
)
{
(
,
)
;
RETURN
(
(
)
)
;
}
(
)
{
(
,
)
;
RETURN
(
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
(
)
;
}
(
)
{
RETURN
(
(
(
)
)
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
;
(
)
;
}
STATIC
(
VOID
)
{
CHAR
,
;
;
INT
,
,
;
=
(
)
;
IF
(
)
RETURN
(
)
;
=
(
,
)
;
IF
(
)
RETURN
(
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
RETURN
(
)
;
=
;
=
;
=
;
=
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
BREAK
;
IF
(
)
RETURN
(
)
;
(
,
)
;
IF
(
(
(
)
)
)
RETURN
(
)
;
IF
(
(
(
)
)
)
RETURN
(
)
;
=
;
(
)
;
RETURN
(
)
;
}
STATIC
(
VOID
)
{
CHAR
,
;
INT
;
INT
,
,
,
,
;
INT
,
,
,
;
;
=
(
)
;
=
(
)
;
IF
(
)
RETURN
(
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
IF
(
(
)
)
RETURN
(
)
;
(
,
)
;
IF
(
(
)
)
RETURN
(
)
;
=
(
(
)
)
;
IF
(
)
;
IF
(
)
;
(
,
)
;
=
;
=
;
=
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
BREAK
;
IF
(
)
RETURN
(
)
;
(
,
)
;
IF
(
(
(
)
)
)
RETURN
(
)
;
IF
(
(
(
)
)
)
RETURN
(
)
;
=
;
(
)
;
RETURN
(
)
;
}
STATIC
(
VOID
)
{
CHAR
;
INT
,
,
,
,
,
;
=
(
)
;
IF
(
)
RETURN
(
)
;
(
,
,
,
,
,
,
)
;
=
;
(
,
)
;
IF
(
(
)
)
RETURN
(
)
;
(
,
)
;
IF
(
(
)
)
RETURN
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
)
;
(
,
)
;
(
,
)
;
=
;
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
,
SHORT
,
INT
)
{
INT
;
INT
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
=
;
=
;
(
,
)
;
=
(
)
(
)
(
)
(
)
(
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
(
,
(
)
)
;
}
ELSE
{
(
,
)
;
(
,
(
)
)
;
(
,
(
)
)
;
(
,
)
;
(
,
(
(
)
)
)
;
(
,
(
(
)
)
)
;
}
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
INT
,
)
{
INT
,
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
)
;
FOR
(
=
,
=
;
;
)
IF
(
(
(
)
)
)
;
FOR
(
=
;
;
)
{
(
,
)
;
IF
(
(
)
(
)
)
BREAK
;
}
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
(
,
)
;
IF
(
(
(
)
)
)
BREAK
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
STATIC
VOID
(
INT
,
)
{
,
,
,
;
(
,
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
VOID
)
{
INT
;
INT
;
,
;
STRUCT
;
STRUCT
;
IF
(
(
)
)
IF
(
(
)
)
IF
(
(
)
)
RETURN
(
)
;
=
;
IF
(
)
{
=
;
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
BREAK
;
}
}
}
=
;
=
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
(
)
;
=
(
SHORT
)
(
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
(
,
,
)
;
(
,
)
;
}
ELSE
{
=
;
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
BREAK
;
}
}
}
=
;
=
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
(
)
;
=
(
SHORT
)
(
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
(
,
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
,
)
;
}
RETURN
(
)
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
(
)
;
(
)
;
IF
(
)
;
=
(
)
;
}
ELSE
{
(
,
)
;
=
(
)
;
(
)
;
IF
(
)
;
=
(
)
;
}
}
ELSE
{
(
,
)
;
=
(
(
)
)
;
IF
(
(
)
)
{
(
,
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
}
=
(
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
(
,
)
;
}
__E__O__F__
INT
;
INT
;
STATIC
INT
=
{
,
,
,
}
;
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
CHAR
;
STRUCT
;
INT
;
=
;
=
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
(
=
(
)
)
)
=
(
)
;
IF
(
)
{
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
(
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
(
=
(
)
)
)
=
(
)
;
ELSE
{
FOR
(
=
;
(
)
;
)
IF
(
(
,
,
)
)
BREAK
;
=
;
}
=
(
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
(
=
(
)
)
)
=
;
ELSE
IF
(
(
=
(
)
)
)
=
;
ELSE
=
;
=
(
)
;
=
;
=
(
UNSIGNED
CHAR
)
(
,
,
,
,
,
)
;
IF
(
(
UNSIGNED
CHAR
)
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
IF
(
)
=
;
ELSE
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
IF
(
)
{
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
ELSE
IF
(
)
{
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
ELSE
{
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
RETURN
;
}
INT
(
VOID
)
{
STRUCT
;
IF
(
)
RETURN
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
=
;
RETURN
;
}
=
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
}
__E__O__F__
INT
;
(
INT
)
;
VOID
(
,
INT
,
INT
,
)
{
INT
;
INT
;
FLOAT
;
INT
;
INT
,
,
;
;
=
(
)
;
IF
(
)
RETURN
;
=
(
FLOAT
)
;
=
;
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
(
(
SIGNED
CHAR
)
)
=
(
INT
)
(
(
UNSIGNED
CHAR
)
(
)
)
;
}
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
IF
(
)
=
(
(
(
SHORT
)
)
)
;
ELSE
=
(
INT
)
(
(
UNSIGNED
CHAR
)
(
)
)
;
IF
(
)
(
(
SHORT
)
)
=
;
ELSE
(
(
SIGNED
CHAR
)
)
=
;
}
}
}
(
)
{
CHAR
;
;
;
INT
;
FLOAT
;
;
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
=
(
,
,
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
FLOAT
)
;
=
;
=
;
=
(
,
(
)
,
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
RETURN
;
}
;
;
;
;
INT
;
SHORT
(
VOID
)
{
SHORT
=
;
=
;
=
(
(
)
)
;
;
RETURN
;
}
INT
(
VOID
)
{
INT
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
;
RETURN
;
}
VOID
(
CHAR
)
{
WHILE
(
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
=
;
RETURN
;
}
;
=
(
(
)
)
;
IF
(
(
,
,
)
)
RETURN
;
}
}
VOID
(
CHAR
)
{
=
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
=
;
=
;
DO
{
(
,
,
)
;
;
=
(
)
;
(
,
(
INT
)
(
)
,
,
)
;
(
)
;
}
WHILE
(
)
;
}
(
CHAR
,
,
INT
)
{
;
INT
;
INT
;
INT
;
(
,
,
(
)
)
;
IF
(
)
RETURN
;
=
;
=
;
(
)
;
IF
(
(
(
,
,
)
)
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
;
=
(
)
;
(
)
;
IF
(
)
{
;
=
(
)
;
(
)
;
IF
(
)
{
IF
(
(
,
,
)
)
{
;
=
(
)
;
=
;
}
}
}
ELSE
=
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
;
=
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
}
ELSE
=
;
=
;
RETURN
;
}
__E__O__F__
UNSIGNED
LONG
;
INT
;
INT
,
,
;
SHORT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
ELSE
=
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
ELSE
=
;
}
}
VOID
(
INT
)
{
INT
;
INT
;
;
INT
;
,
;
;
;
=
;
=
(
INT
)
;
=
;
IF
(
)
{
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
}
ELSE
{
=
(
)
;
}
WHILE
(
)
{
=
(
(
)
)
;
=
(
SHORT
)
(
)
;
=
(
)
;
IF
(
)
=
;
;
(
)
;
;
(
)
;
}
IF
(
)
(
,
,
,
,
)
;
}
VOID
(
INT
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
INT
;
,
;
;
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
INT
)
;
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
}
ELSE
{
=
(
)
;
}
IF
(
)
{
SHORT
=
(
SHORT
)
;
WHILE
(
)
{
=
(
)
;
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
=
;
=
(
)
;
}
}
ELSE
IF
(
)
{
UNSIGNED
CHAR
=
(
UNSIGNED
CHAR
)
;
WHILE
(
)
{
=
(
)
;
;
IF
(
)
=
;
ELSE
IF
(
(
SHORT
)
)
=
(
SHORT
)
;
=
(
)
;
=
(
)
;
}
}
IF
(
)
{
,
;
INT
=
;
INT
=
;
;
(
,
,
,
,
)
;
(
,
,
)
;
}
}
VOID
(
,
,
INT
)
;
VOID
(
,
,
INT
)
;
VOID
(
INT
)
{
INT
;
INT
;
;
;
INT
,
;
WHILE
(
)
{
=
;
IF
(
)
=
;
(
,
,
(
)
(
)
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
(
)
;
IF
(
)
CONTINUE
;
=
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
}
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
BREAK
;
}
}
}
}
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
(
(
SIGNED
CHAR
)
)
;
}
VOID
(
,
,
INT
)
{
INT
;
INT
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
(
SIGNED
CHAR
)
;
FOR
(
=
;
;
)
{
=
;
;
;
}
;
}
VOID
(
,
,
INT
)
{
INT
;
INT
,
;
INT
,
;
SIGNED
SHORT
;
INT
;
=
;
=
;
=
(
SIGNED
SHORT
)
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
(
)
;
;
;
}
;
}
__E__O__F__
EXTERN
INT
;
EXTERN
INT
;
(
VOID
)
{
INT
;
=
(
)
;
=
(
)
;
(
(
VOID
)
,
,
)
;
=
(
CHAR
)
(
)
;
=
;
=
;
=
;
=
(
)
;
=
;
RETURN
;
}
INT
(
VOID
)
{
=
(
INT
)
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
}
__E__O__F__
=
{
,
,
}
;
=
{
,
,
}
;
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
CHAR
)
{
}
VOID
(
VOID
)
{
}
VOID
(
,
,
FLOAT
,
FLOAT
)
{
}
VOID
(
INT
,
INT
,
,
,
FLOAT
,
FLOAT
)
{
}
VOID
(
INT
,
INT
)
{
}
(
CHAR
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
,
,
,
)
{
}
VOID
(
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
CHAR
)
{
}
__E__O__F__
INT
;
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
;
UNSIGNED
CHAR
;
UNSIGNED
CHAR
;
INT
;
STATIC
INT
=
;
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
CHAR
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
=
;
=
(
,
)
;
IF
(
)
{
IF
(
)
{
(
)
;
}
(
)
;
(
)
;
RETURN
(
)
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
,
,
)
)
{
=
;
=
;
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
)
;
=
;
=
;
}
ELSE
{
(
)
;
=
;
=
;
}
=
;
=
(
)
(
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
RETURN
;
}
INT
(
VOID
)
{
IF
(
)
RETURN
(
)
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
=
;
RETURN
(
)
;
}
RETURN
(
(
)
)
;
}
INT
(
VOID
)
{
IF
(
)
RETURN
(
)
;
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
(
)
;
=
;
RETURN
(
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
,
;
STATIC
UNSIGNED
CHAR
;
UNSIGNED
CHAR
;
INT
;
INT
=
;
EXTERN
INT
;
IF
(
)
=
;
=
(
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
(
)
;
=
;
}
=
;
=
(
)
(
)
;
FOR
(
=
;
;
)
{
=
;
=
(
)
(
)
;
}
=
;
IF
(
(
,
,
)
)
(
)
;
}
__E__O__F__
(
,
,
)
(
,
,
)
(
)
(
,
,
)
;
TYPEDEF
ENUM
{
,
,
}
;
STATIC
;
STATIC
;
STATIC
;
STATIC
=
,
,
;
STATIC
;
STATIC
INT
;
STATIC
INT
,
;
;
,
;
;
;
;
;
;
;
;
,
;
;
(
VOID
)
;
(
VOID
)
;
VOID
(
VOID
)
{
IF
(
)
{
;
IF
(
)
{
(
)
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
{
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
(
)
)
{
(
)
;
}
IF
(
)
{
(
,
,
)
;
(
)
;
}
IF
(
)
{
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
(
,
,
(
)
)
;
}
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
}
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
VOID
)
{
;
;
,
;
;
,
;
;
INT
;
(
(
VOID
)
,
,
(
)
)
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
VOID
)
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
WHILE
(
(
=
(
,
,
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
,
)
)
{
(
)
;
RETURN
;
}
}
=
(
)
;
IF
(
(
,
)
)
{
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
(
)
;
=
;
IF
(
(
)
)
{
IF
(
(
,
,
,
)
)
{
=
;
IF
(
(
,
)
)
{
IF
(
)
(
)
;
}
ELSE
{
IF
(
)
(
)
;
=
;
}
}
}
IF
(
(
)
)
{
(
,
,
(
)
)
;
=
(
)
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
(
,
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
(
)
;
}
ELSE
{
IF
(
(
,
,
)
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
=
;
(
)
;
}
(
,
,
,
)
;
IF
(
)
(
,
,
,
)
;
=
;
=
;
WHILE
(
(
=
(
,
,
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
(
,
,
)
;
(
,
,
,
,
)
;
=
;
(
)
;
(
,
,
)
;
(
,
,
,
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
=
;
RETURN
;
}
(
VOID
)
{
;
INT
;
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
WHILE
(
(
=
(
(
)
,
,
,
,
,
)
)
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
,
)
)
{
(
)
;
RETURN
;
}
}
=
;
=
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
,
)
;
=
(
,
(
)
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
=
(
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
,
,
(
)
)
)
{
(
)
;
(
)
;
RETURN
;
}
}
=
;
=
;
=
(
)
;
=
;
=
;
=
(
UNSIGNED
CHAR
)
;
=
(
)
;
=
;
RETURN
;
}
INT
(
VOID
)
{
;
IF
(
(
)
)
=
;
=
=
;
=
;
IF
(
)
{
IF
(
)
{
=
(
)
;
;
IF
(
)
{
=
;
IF
(
)
(
)
;
}
ELSE
{
=
;
(
)
;
}
}
}
IF
(
(
)
)
{
IF
(
)
{
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
}
ELSE
{
(
)
;
}
}
}
=
;
IF
(
)
{
IF
(
)
(
)
;
RETURN
;
}
RETURN
;
}
INT
(
VOID
)
{
;
INT
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
}
ELSE
IF
(
)
{
=
;
}
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
RETURN
;
WHILE
(
)
{
IF
(
)
{
(
)
;
BREAK
;
}
IF
(
(
)
)
{
BREAK
;
}
;
}
WHILE
(
(
(
)
)
)
{
=
(
)
;
;
=
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
}
}
VOID
(
VOID
)
{
(
)
;
}
__E__O__F__
;
;
CHAR
;
VOID
(
VOID
)
{
INT
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
(
,
,
)
;
}
VOID
(
,
,
INT
,
INT
)
{
INT
,
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
(
,
)
;
}
(
,
)
;
(
,
)
;
}
VOID
(
,
INT
,
CHAR
,
INT
,
FLOAT
)
{
INT
;
INT
;
INT
;
INT
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
;
IF
(
)
;
IF
(
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
(
)
)
;
}
VOID
(
)
{
CHAR
;
CHAR
;
(
,
)
;
(
,
,
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
)
;
=
;
=
;
}
VOID
(
INT
)
{
;
;
INT
;
STRUCT
;
INT
;
FLOAT
;
=
;
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
)
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
IF
(
)
(
,
,
(
)
)
;
ELSE
{
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
STRUCT
;
INT
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
(
)
;
=
;
(
)
;
;
}
}
VOID
(
VOID
)
{
(
)
;
}
INT
;
;
VOID
(
,
)
{
INT
;
;
;
FLOAT
;
WHILE
(
)
{
IF
(
)
{
IF
(
)
{
=
(
(
)
,
)
;
FOR
(
=
;
;
)
;
}
RETURN
;
}
=
;
=
(
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
(
,
)
;
=
;
}
}
}
(
)
{
=
(
)
;
(
,
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
,
)
{
INT
,
;
INT
;
;
;
FLOAT
;
;
(
,
,
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
BREAK
;
IF
(
)
CONTINUE
;
}
IF
(
)
{
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
;
}
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
=
(
INT
)
;
}
}
VOID
(
,
)
{
INT
;
INT
;
;
INT
;
;
IF
(
)
{
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
(
)
)
;
=
;
=
;
}
(
)
;
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
=
;
}
=
;
IF
(
)
;
IF
(
)
;
=
(
INT
)
(
(
INT
)
)
;
=
(
,
)
;
IF
(
)
=
(
INT
)
(
(
INT
)
)
;
ELSE
=
(
INT
)
(
(
INT
)
)
;
;
IF
(
(
INT
)
)
;
IF
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
}
IF
(
)
;
IF
(
)
;
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
(
,
)
;
IF
(
(
)
)
(
,
)
;
}
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
}
ELSE
{
FOR
(
=
;
;
)
{
IF
(
(
(
INT
)
)
(
)
)
{
(
,
)
;
BREAK
;
}
}
}
}
(
)
{
;
;
=
;
=
(
)
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
,
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
)
;
(
,
)
;
(
,
)
;
}
=
;
}
}
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
}
(
)
;
}
VOID
(
)
{
;
;
=
;
=
(
)
;
=
;
(
,
)
;
IF
(
(
,
)
)
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
(
)
)
CONTINUE
;
}
ELSE
{
IF
(
)
{
IF
(
)
(
)
;
CONTINUE
;
}
}
IF
(
)
{
(
)
;
=
;
CONTINUE
;
}
IF
(
)
{
IF
(
(
)
)
{
CONTINUE
;
}
IF
(
)
(
)
;
ELSE
{
IF
(
(
,
)
)
(
)
;
(
)
;
=
;
=
;
}
}
}
(
)
;
}
INT
(
CHAR
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
(
,
)
;
(
,
)
;
=
;
=
;
IF
(
)
{
=
;
=
(
)
;
}
ELSE
{
=
;
=
(
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
}
}
VOID
(
VOID
)
{
CHAR
;
;
=
;
=
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
(
)
;
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
EXTERN
FLOAT
;
VOID
(
CHAR
,
CHAR
)
VOID
(
CHAR
)
{
;
INT
;
IF
(
)
(
,
)
;
=
;
(
,
)
;
=
;
IF
(
)
{
(
)
;
}
IF
(
)
(
,
)
;
=
(
INT
)
(
)
;
IF
(
)
=
;
IF
(
)
=
;
(
,
(
FLOAT
)
)
;
(
)
;
(
,
,
(
)
)
;
(
,
)
;
IF
(
)
(
,
)
;
(
)
;
=
;
=
(
,
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
}
=
;
=
;
=
;
(
,
)
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
=
;
RETURN
;
}
=
;
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
}
=
(
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
(
)
;
(
)
;
}
__E__O__F__
INT
,
;
(
)
{
,
,
,
;
;
INT
,
;
FLOAT
,
;
(
,
,
)
;
(
,
,
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
GOTO
;
}
;
RETURN
;
;
=
;
=
=
(
)
;
=
=
(
)
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
=
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
=
;
=
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
}
;
RETURN
;
}
(
,
,
)
{
FLOAT
;
,
,
;
;
INT
;
;
(
,
)
;
(
,
,
)
;
IF
(
(
INT
)
(
)
)
{
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
;
IF
(
)
;
}
=
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
(
(
INT
)
)
(
)
)
RETURN
;
(
,
)
;
IF
(
)
(
,
)
;
RETURN
;
}
IF
(
)
BREAK
;
}
RETURN
;
}
;
(
,
)
;
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
(
INT
)
)
{
(
,
,
)
;
IF
(
)
(
,
)
;
=
(
INT
)
;
RETURN
;
}
RETURN
;
}
(
,
)
;
IF
(
(
)
)
{
IF
(
(
INT
)
)
{
IF
(
)
(
,
)
;
RETURN
;
}
(
,
)
;
RETURN
;
}
IF
(
(
INT
)
)
{
=
(
INT
)
;
}
=
(
)
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
;
(
,
FLOAT
,
FLOAT
)
{
,
;
FLOAT
;
=
;
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
(
,
)
;
IF
(
(
,
,
)
)
{
=
;
IF
(
)
{
(
,
)
;
}
(
,
)
;
RETURN
;
}
(
,
)
;
RETURN
;
}
VOID
(
)
{
=
(
INT
)
;
}
VOID
(
,
,
FLOAT
)
{
FLOAT
,
;
FLOAT
;
FLOAT
,
,
;
=
(
(
INT
)
(
)
)
;
=
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
(
(
)
)
)
(
)
(
)
)
{
=
;
=
;
=
;
}
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
}
ELSE
{
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
(
)
)
(
)
;
}
(
,
,
FLOAT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
,
;
FLOAT
;
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
(
INT
)
(
)
)
)
{
(
)
=
;
RETURN
;
}
=
(
)
;
IF
(
(
,
,
)
)
IF
(
(
)
(
,
,
)
)
RETURN
;
IF
(
(
(
)
)
(
,
,
)
)
{
(
,
,
)
;
}
}
__E__O__F__
=
{
,
,
,
}
;
=
{
,
}
;
=
{
,
,
,
}
;
=
{
,
}
;
=
{
,
}
;
STATIC
=
{
,
,
}
;
VOID
(
)
;
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
(
)
;
}
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
(
,
)
;
=
;
}
IF
(
(
)
)
{
(
,
)
;
=
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
}
(
)
{
FLOAT
;
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
RETURN
;
}
VOID
(
,
)
{
INT
,
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
(
)
;
}
IF
(
)
{
=
(
)
;
=
(
)
;
(
)
;
}
=
;
=
;
}
INT
(
,
,
,
FLOAT
)
{
FLOAT
;
FLOAT
;
INT
,
;
=
;
IF
(
)
;
IF
(
)
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
}
RETURN
;
}
INT
(
,
FLOAT
,
)
{
INT
,
;
;
FLOAT
;
INT
;
;
,
,
;
INT
,
;
;
;
FLOAT
;
INT
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
FOR
(
=
;
;
)
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
(
,
)
;
=
;
}
IF
(
)
BREAK
;
IF
(
)
(
)
;
IF
(
)
{
;
IF
(
)
{
=
(
INT
)
;
=
(
)
;
}
}
IF
(
)
{
;
IF
(
)
=
;
}
(
,
)
;
IF
(
)
BREAK
;
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
{
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
{
(
,
)
;
}
ELSE
{
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
}
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
}
RETURN
;
}
VOID
(
)
{
FLOAT
;
IF
(
)
=
;
ELSE
=
;
;
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
;
}
(
,
)
{
;
;
(
,
,
)
;
IF
(
)
=
(
,
,
,
,
,
)
;
ELSE
IF
(
)
=
(
,
,
,
,
,
)
;
ELSE
=
(
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
,
FLOAT
)
{
INT
,
;
,
;
,
,
;
,
;
INT
;
;
;
IF
(
)
{
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
(
,
)
;
(
,
,
)
;
;
(
,
)
;
=
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
(
(
INT
)
)
(
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
}
IF
(
)
=
(
INT
)
;
(
,
)
;
(
,
)
;
=
;
;
=
;
(
,
)
;
=
;
=
(
)
;
IF
(
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
=
;
(
,
)
;
CONTINUE
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
;
IF
(
)
{
=
(
)
;
=
(
)
;
(
)
;
}
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
RETURN
;
}
}
}
VOID
(
,
FLOAT
)
{
INT
,
;
,
;
,
,
;
,
;
INT
;
;
;
,
;
,
,
;
IF
(
)
{
;
RETURN
;
}
FOR
(
=
;
;
)
=
;
(
,
,
)
;
(
,
,
,
)
;
(
,
)
;
(
,
,
)
;
;
(
,
)
;
=
;
=
(
)
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
(
(
INT
)
)
(
)
)
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
}
IF
(
)
=
(
INT
)
;
(
,
)
;
(
,
)
;
=
;
;
(
,
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
=
;
(
,
)
;
=
;
=
(
)
;
IF
(
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
=
;
(
,
)
;
CONTINUE
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
;
IF
(
)
{
=
(
)
;
=
(
)
;
(
)
;
}
FOR
(
=
;
;
)
{
(
,
)
;
(
,
,
)
;
(
,
)
;
}
RETURN
;
}
ELSE
{
(
,
,
)
;
}
}
}
VOID
(
)
{
FLOAT
;
FLOAT
;
FLOAT
;
=
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
}
ELSE
=
;
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
IF
(
)
{
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
INT
,
;
INT
;
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
(
,
)
;
IF
(
(
)
)
{
(
)
;
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
(
,
)
;
RETURN
;
}
}
(
,
)
;
(
)
;
}
(
)
{
;
INT
;
INT
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
(
)
;
IF
(
)
=
;
}
IF
(
)
{
STATIC
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
(
,
,
,
)
;
}
}
RETURN
;
}
VOID
(
,
)
{
,
,
;
FLOAT
,
;
,
;
(
,
,
,
)
;
=
(
,
)
;
;
IF
(
)
RETURN
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
=
(
)
;
}
INT
(
,
)
{
INT
;
;
;
INT
;
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
(
,
)
;
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
(
)
(
)
)
{
RETURN
;
}
(
,
)
;
}
(
,
)
;
RETURN
;
}
VOID
(
)
{
,
;
,
;
,
;
INT
;
INT
;
,
;
=
(
INT
)
;
=
(
INT
)
;
(
,
)
;
(
,
)
;
=
(
,
,
)
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
INT
)
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
{
IF
(
(
)
(
)
)
{
=
(
,
)
;
}
}
IF
(
)
(
,
)
;
=
(
,
)
;
IF
(
)
{
IF
(
)
{
=
(
INT
)
;
=
(
)
;
}
}
ELSE
{
(
,
)
;
(
,
)
;
}
}
VOID
(
,
INT
)
{
IF
(
)
RETURN
;
=
;
=
(
)
;
(
)
;
(
)
;
SWITCH
(
(
INT
)
)
{
CASE
IF
(
(
)
)
RETURN
;
BREAK
;
CASE
IF
(
(
)
)
RETURN
;
IF
(
(
)
(
(
INT
)
)
)
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
CASE
IF
(
(
)
)
RETURN
;
(
,
,
)
;
BREAK
;
CASE
IF
(
(
)
)
RETURN
;
(
,
,
,
)
;
BREAK
;
DEFAULT
(
,
(
INT
)
)
;
}
(
,
)
;
=
;
=
(
)
;
(
)
;
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
(
)
;
(
(
)
,
,
)
;
(
,
)
;
}
VOID
(
)
{
IF
(
(
)
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
;
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
,
,
,
,
)
;
}
=
;
=
;
}
ELSE
{
IF
(
)
{
(
,
,
,
,
)
;
}
=
;
=
;
}
}
VOID
(
)
{
;
;
FLOAT
;
;
=
(
)
;
IF
(
(
INT
)
)
(
,
,
)
;
ELSE
(
,
)
;
(
)
;
IF
(
(
)
)
RETURN
;
IF
(
)
=
(
INT
)
;
IF
(
(
(
INT
)
)
)
IF
(
(
,
)
)
RETURN
;
(
)
;
IF
(
(
(
INT
)
)
)
(
)
;
IF
(
(
(
INT
)
)
)
RETURN
;
(
)
;
IF
(
)
(
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
,
)
;
IF
(
)
{
IF
(
(
)
)
IF
(
)
{
=
(
INT
)
;
=
(
)
;
(
,
)
;
(
,
)
;
}
}
(
)
;
}
VOID
(
)
{
;
;
=
;
FLOAT
;
FLOAT
,
,
;
FLOAT
;
;
=
(
)
;
IF
(
(
INT
)
)
(
,
,
)
;
ELSE
(
,
)
;
=
;
=
(
)
;
(
)
;
(
)
;
=
(
INT
)
;
=
(
)
;
IF
(
)
IF
(
(
(
INT
)
)
)
IF
(
(
(
(
INT
)
)
(
)
)
)
{
IF
(
)
=
;
IF
(
)
(
)
;
}
IF
(
(
,
)
(
,
)
)
{
=
(
INT
)
;
IF
(
)
IF
(
(
(
)
)
)
{
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
IF
(
)
=
;
;
=
;
=
;
}
}
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
{
,
,
;
INT
,
;
(
,
,
)
;
(
,
,
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
)
)
{
=
(
INT
)
;
BREAK
;
}
}
}
(
,
)
;
IF
(
(
INT
)
)
IF
(
)
IF
(
)
(
,
,
,
,
)
;
}
(
)
;
(
)
;
}
VOID
(
)
{
;
IF
(
(
(
INT
)
(
)
)
)
{
IF
(
)
=
;
ELSE
=
;
(
)
;
(
)
;
(
,
,
)
;
(
,
)
;
IF
(
(
INT
)
)
{
IF
(
)
(
,
,
,
,
)
;
}
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
=
(
)
;
=
;
(
)
;
=
;
FOR
(
=
;
;
,
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
)
;
}
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
,
(
INT
)
)
;
}
IF
(
)
;
;
}
(
,
)
{
,
;
;
;
;
DOUBLE
;
=
;
=
;
(
,
,
(
)
)
;
=
;
WHILE
(
)
{
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
)
IF
(
)
BREAK
;
}
=
;
RETURN
;
}
__E__O__F__
;
EXTERN
;
=
{
,
}
;
EXTERN
;
STATIC
,
,
;
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
;
;
=
{
,
}
;
VOID
(
VOID
)
{
FLOAT
,
,
;
;
,
;
FLOAT
;
INT
,
;
INT
,
,
;
IF
(
(
(
INT
)
)
)
RETURN
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
}
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
RETURN
;
;
=
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
}
VOID
(
VOID
)
{
FLOAT
;
FLOAT
,
,
;
,
;
FLOAT
;
;
=
;
=
(
)
;
IF
(
)
RETURN
;
=
=
;
=
=
;
=
;
=
;
=
(
,
,
,
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
IF
(
)
=
;
;
=
;
=
;
=
;
}
=
{
,
,
,
}
;
=
{
,
}
;
VOID
(
)
{
INT
;
FLOAT
,
;
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
)
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
,
,
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
}
VOID
(
)
{
INT
;
FLOAT
,
,
,
;
=
(
)
;
IF
(
)
=
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
)
;
;
IF
(
)
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
,
,
,
,
;
(
,
,
,
)
;
FOR
(
=
;
;
)
=
;
IF
(
)
;
ELSE
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
(
,
,
)
;
}
ELSE
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
(
)
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
(
INT
)
;
=
;
}
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
FLOAT
,
;
(
,
,
,
)
;
=
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
=
;
IF
(
(
INT
)
)
=
;
ELSE
=
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
(
)
;
}
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
=
(
INT
)
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
=
;
=
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
IF
(
(
INT
)
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
}
VOID
(
)
{
INT
;
;
INT
;
=
(
)
;
;
FOR
(
=
;
;
)
=
(
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
=
(
)
;
}
(
VOID
)
{
INT
;
INT
;
CHAR
;
DO
{
=
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
)
;
WHILE
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
SWITCH
(
)
{
CASE
GOTO
;
DEFAULT
(
)
;
RETURN
;
CASE
BREAK
;
CASE
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
,
)
;
ELSE
(
,
,
)
;
BREAK
;
CASE
RETURN
;
CASE
(
)
;
BREAK
;
}
}
}
WHILE
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
(
)
)
{
(
)
;
CONTINUE
;
}
IF
(
)
{
(
,
,
(
)
)
;
CONTINUE
;
}
IF
(
(
)
)
(
)
;
}
}
__E__O__F__
(
)
INT
;
,
,
;
STATIC
INT
;
STATIC
UNSIGNED
CHAR
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
;
INT
;
STATIC
DOUBLE
=
;
STATIC
DOUBLE
=
;
STATIC
DOUBLE
=
;
STATIC
;
STATIC
INT
;
FLOAT
;
EXTERN
CHAR
(
)
;
EXTERN
;
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
(
)
=
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
)
BREAK
;
(
,
)
;
IF
(
)
(
)
;
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
=
(
)
;
(
,
)
;
=
(
)
(
)
;
}
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
(
)
(
)
VOID
(
VOID
)
{
;
=
;
(
,
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
;
=
;
}
}
VOID
(
INT
)
{
;
;
INT
;
VOID
;
INT
;
INT
,
,
,
;
STATIC
CHAR
=
;
INT
,
;
;
=
;
=
;
=
;
IF
(
)
{
IF
(
(
)
)
{
(
,
,
)
;
}
}
(
)
;
IF
(
)
{
=
;
}
ELSE
{
=
;
}
;
;
DO
{
;
=
(
)
;
}
WHILE
(
(
VOID
)
)
;
=
(
(
UNSIGNED
)
(
)
)
;
IF
(
)
{
(
)
;
;
}
=
;
IF
(
)
{
=
;
WHILE
(
(
)
)
{
;
;
(
)
;
}
}
ELSE
{
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
(
(
INT
)
(
(
)
)
)
;
IF
(
(
)
)
=
;
}
ELSE
{
=
;
}
IF
(
)
{
=
;
GOTO
;
}
(
,
,
(
)
)
;
FOR
(
=
;
(
)
;
)
{
=
;
IF
(
(
)
)
GOTO
;
(
,
,
)
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
GOTO
;
}
(
,
)
;
;
;
=
(
INT
)
;
(
(
INT
)
(
)
)
;
}
IF
(
)
{
(
)
;
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
(
INT
)
;
(
INT
)
;
}
}
;
(
(
)
)
;
=
;
RETURN
;
}
INT
(
CHAR
)
{
STRUCT
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
)
{
(
,
)
;
}
VOID
(
VOID
)
{
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
STATIC
INT
=
;
CHAR
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
(
)
;
SWITCH
(
)
{
CASE
(
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
BREAK
;
CASE
(
)
;
IF
(
)
{
;
(
)
;
}
BREAK
;
DEFAULT
=
;
=
(
)
;
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
IF
(
)
{
(
,
(
INT
)
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
WHILE
(
)
{
=
;
(
)
;
IF
(
)
CONTINUE
;
=
(
)
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
)
;
CONTINUE
;
}
IF
(
(
)
(
)
)
{
IF
(
(
)
(
)
)
CONTINUE
;
;
;
}
IF
(
(
)
(
)
)
CONTINUE
;
=
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
;
;
CHAR
;
INT
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
IF
(
)
(
,
,
(
)
)
;
(
,
,
)
;
FOR
(
=
;
;
)
=
;
(
)
;
IF
(
)
{
(
(
VOID
)
(
)
,
,
)
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
}
INT
(
CHAR
,
INT
)
{
INT
;
STRUCT
;
=
(
,
,
)
;
=
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
,
)
;
RETURN
;
}
INT
(
CHAR
)
{
INT
;
(
)
;
=
(
,
,
)
;
IF
(
)
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
INT
)
{
(
)
;
}
VOID
(
INT
,
INT
)
{
(
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
)
;
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
}
DOUBLE
(
VOID
)
{
INT
;
UNSIGNED
,
;
DOUBLE
,
;
STATIC
INT
;
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
(
,
)
;
=
(
)
;
(
)
;
=
(
)
;
=
(
UNSIGNED
SHORT
)
(
)
;
IF
(
(
)
(
)
)
=
;
=
(
DOUBLE
)
(
(
)
)
;
=
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
;
}
;
IF
(
)
{
;
IF
(
)
{
;
=
;
}
}
ELSE
{
=
;
}
=
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
=
;
=
(
)
;
IF
(
)
{
=
(
DOUBLE
)
(
(
)
)
;
}
ELSE
{
=
;
}
=
;
}
VOID
(
VOID
)
{
INT
,
;
=
(
)
;
IF
(
)
{
=
(
INT
)
(
(
)
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
}
(
,
,
)
;
IF
(
(
)
)
{
=
(
(
)
)
;
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
INT
,
;
=
(
INT
)
(
)
;
IF
(
)
{
IF
(
(
(
VOID
)
,
(
INT
)
)
)
(
)
;
}
IF
(
)
{
(
(
VOID
)
,
(
INT
)
)
;
(
,
(
(
INT
)
)
)
;
}
ELSE
IF
(
)
{
(
,
(
(
INT
)
)
)
;
}
ELSE
{
(
,
(
(
INT
)
)
)
;
}
FOR
(
=
;
;
)
{
FOR
(
=
(
INT
)
;
(
)
;
)
{
(
INT
)
;
(
INT
)
(
)
;
}
}
}
VOID
(
INT
)
{
(
)
;
(
)
;
}
VOID
(
INT
)
{
}
INT
(
INT
,
CHAR
)
{
DOUBLE
,
,
;
EXTERN
VOID
(
)
(
CHAR
,
)
;
STATIC
CHAR
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
;
(
,
)
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
(
)
=
;
=
;
=
(
(
)
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
=
(
)
;
=
;
IF
(
(
)
)
CONTINUE
;
(
)
;
=
;
}
}
__E__O__F__
;
INT
=
;
CHAR
=
;
CHAR
=
;
=
{
,
}
;
VOID
(
INT
,
INT
)
{
}
VOID
(
CHAR
,
)
{
;
CHAR
;
UNSIGNED
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
RETURN
;
FOR
(
=
(
UNSIGNED
CHAR
)
;
;
)
{
;
IF
(
(
)
)
(
,
)
;
ELSE
(
,
)
;
}
}
STATIC
CHAR
=
;
STATIC
CHAR
=
;
VOID
(
VOID
)
{
(
)
;
(
,
,
(
,
,
)
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
,
(
,
,
)
)
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
}
INT
(
CHAR
)
{
STRUCT
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
CHAR
)
{
(
,
)
;
}
INT
(
CHAR
,
INT
)
{
INT
;
STRUCT
;
=
(
,
,
)
;
=
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
(
,
)
;
RETURN
;
}
INT
(
CHAR
)
{
INT
;
(
)
;
=
(
,
,
)
;
IF
(
)
(
,
,
(
)
)
;
RETURN
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
)
;
}
VOID
(
INT
)
{
(
)
;
}
VOID
(
INT
,
INT
)
{
(
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
)
;
}
VOID
(
CHAR
,
CHAR
,
)
{
;
STATIC
CHAR
;
INT
;
(
,
)
;
(
,
,
)
;
(
)
;
=
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
}
VOID
(
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
=
(
)
;
IF
(
(
,
)
)
{
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
;
(
,
,
,
)
;
(
)
;
}
}
DOUBLE
(
VOID
)
{
STRUCT
;
STRUCT
;
STATIC
INT
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
RETURN
(
)
;
}
STATIC
VOLATILE
INT
;
VOID
(
INT
)
{
=
;
}
VOID
(
VOID
)
{
}
VOID
(
INT
)
{
(
,
)
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
;
STRUCT
;
IF
(
)
{
(
)
;
(
,
)
;
=
;
=
;
IF
(
(
,
,
,
,
)
(
,
)
)
RETURN
;
=
(
,
,
(
)
)
;
IF
(
)
RETURN
;
=
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
INT
(
INT
,
CHAR
)
{
DOUBLE
,
,
;
;
EXTERN
INT
;
EXTERN
INT
;
INT
;
(
,
)
;
(
,
,
(
)
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
(
INT
)
(
(
)
)
;
=
(
)
;
=
;
(
,
,
(
,
,
)
)
;
(
)
;
(
)
;
IF
(
(
)
)
=
;
ELSE
{
(
,
,
(
,
,
)
)
;
(
,
)
;
}
=
(
)
;
WHILE
(
)
{
=
(
)
;
=
;
IF
(
)
{
IF
(
(
)
)
{
(
)
;
CONTINUE
;
}
=
;
}
IF
(
)
=
;
ELSE
;
(
)
;
IF
(
)
(
)
;
}
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
;
INT
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
(
)
;
RETURN
;
}
INT
(
)
{
INT
;
INT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
INT
(
CHAR
,
INT
)
{
;
INT
;
=
(
)
;
=
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
RETURN
(
)
;
}
INT
(
CHAR
)
{
;
INT
;
=
(
)
;
=
(
,
)
;
IF
(
)
(
,
,
(
)
)
;
=
;
RETURN
;
}
VOID
(
INT
)
{
(
)
;
=
;
}
VOID
(
INT
,
INT
)
{
(
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
,
)
;
}
INT
(
CHAR
)
{
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
CHAR
)
{
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
}
VOID
(
CHAR
,
)
{
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
DOUBLE
(
VOID
)
{
STATIC
DOUBLE
;
;
RETURN
;
}
CHAR
(
VOID
)
{
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
INT
,
CHAR
)
{
STATIC
;
=
;
=
(
)
;
=
;
(
,
)
;
=
;
=
;
(
)
;
(
)
;
WHILE
(
)
{
(
)
;
}
}
__E__O__F__
;
TYPEDEF
STRUCT
{
;
CHAR
;
INT
;
INT
;
}
;
;
INT
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
(
)
;
RETURN
;
}
INT
(
)
{
INT
;
INT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
INT
(
CHAR
,
INT
)
{
;
INT
;
=
(
)
;
=
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
(
)
;
=
;
=
(
,
,
,
,
(
)
,
)
;
IF
(
(
(
CHAR
)
)
)
{
(
,
)
;
=
;
}
=
;
RETURN
(
)
;
}
INT
(
CHAR
)
{
;
INT
;
=
(
)
;
=
(
,
)
;
IF
(
)
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
INT
)
{
IF
(
)
IF
(
(
,
)
)
(
,
)
;
(
)
;
=
;
}
VOID
(
INT
,
INT
)
{
IF
(
)
{
=
;
}
ELSE
(
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
IF
(
)
{
INT
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
=
;
RETURN
(
)
;
}
ELSE
RETURN
(
,
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
IF
(
)
(
,
)
;
RETURN
(
,
,
,
)
;
}
INT
(
CHAR
)
{
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
CHAR
)
{
(
,
)
;
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
INT
;
UNSIGNED
LONG
;
INT
=
(
)
;
=
(
(
)
)
;
=
(
(
CHAR
)
,
,
)
;
IF
(
)
(
)
;
}
VOID
(
CHAR
,
)
{
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
}
DOUBLE
(
VOID
)
{
STRUCT
;
STRUCT
;
STATIC
INT
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
RETURN
(
)
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
;
INT
;
STRUCT
;
=
;
=
;
(
)
;
(
,
)
;
=
(
,
,
,
,
)
;
IF
(
)
{
=
(
,
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
(
)
;
}
INT
(
INT
,
CHAR
)
{
STATIC
;
FLOAT
,
,
;
=
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
=
(
)
;
(
)
;
=
;
}
RETURN
;
}
__E__O__F__
INT
;
,
;
;
STATIC
DOUBLE
;
STATIC
DOUBLE
=
;
STATIC
DOUBLE
=
;
STATIC
INT
;
;
STATIC
=
;
,
;
STATIC
CHAR
=
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOLATILE
INT
;
VOID
(
VOID
,
INT
)
{
;
INT
,
,
;
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
(
INT
)
;
(
INT
)
;
}
}
}
;
INT
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
(
)
;
RETURN
;
}
INT
(
)
{
INT
;
INT
;
INT
;
=
(
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
INT
(
CHAR
,
INT
)
{
;
INT
,
;
INT
;
=
(
)
;
=
(
)
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
=
(
)
;
}
(
)
;
RETURN
;
}
INT
(
CHAR
)
{
;
INT
;
INT
;
=
(
)
;
=
(
)
;
=
(
,
)
;
IF
(
)
(
,
,
(
)
)
;
=
;
(
)
;
RETURN
;
}
VOID
(
INT
)
{
INT
;
=
(
)
;
(
)
;
=
;
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
=
(
)
;
(
,
,
)
;
(
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
INT
,
;
=
(
)
;
=
(
,
,
,
)
;
(
)
;
RETURN
;
}
INT
(
INT
,
VOID
,
INT
)
{
INT
,
;
=
(
)
;
=
(
,
,
,
)
;
(
)
;
RETURN
;
}
INT
(
CHAR
)
{
;
INT
,
;
=
(
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
=
;
}
ELSE
{
=
;
}
(
)
;
RETURN
;
}
VOID
(
CHAR
)
{
(
)
;
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
;
IF
(
(
(
)
,
,
,
)
)
(
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
;
UNSIGNED
INT
,
;
;
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
=
(
UNSIGNED
INT
)
;
=
(
UNSIGNED
INT
)
;
=
;
WHILE
(
(
)
)
{
;
;
(
)
;
;
}
=
(
DOUBLE
)
;
(
)
;
=
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
)
(
)
)
{
(
)
;
}
IF
(
)
=
;
ELSE
=
;
}
VOID
(
CHAR
,
)
{
;
CHAR
,
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
;
DOUBLE
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
=
;
IF
(
)
{
=
;
(
)
;
}
(
,
)
;
(
,
,
)
;
(
)
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
(
)
,
,
)
;
(
,
,
(
)
,
,
)
;
(
,
,
(
)
,
,
)
;
(
,
,
(
)
,
,
)
;
(
,
,
(
)
,
,
)
;
=
(
)
;
=
;
WHILE
(
(
)
(
(
(
)
)
)
)
{
}
}
ELSE
{
IF
(
)
{
=
;
(
)
;
(
,
,
,
)
;
}
ELSE
{
(
,
,
,
)
;
}
}
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
(
)
,
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
}
DOUBLE
(
VOID
)
{
STATIC
INT
;
STATIC
UNSIGNED
INT
;
STATIC
INT
=
;
;
UNSIGNED
INT
,
;
DOUBLE
;
(
)
;
(
)
;
=
(
(
UNSIGNED
INT
)
)
(
(
UNSIGNED
INT
)
(
)
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
IF
(
(
)
(
(
)
)
)
{
=
;
}
ELSE
{
=
;
=
(
DOUBLE
)
;
=
;
;
IF
(
)
{
;
IF
(
)
{
;
=
;
}
}
ELSE
{
=
;
}
=
;
}
}
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
=
(
)
;
IF
(
)
{
=
(
DOUBLE
)
(
(
)
)
;
}
ELSE
{
=
;
}
=
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
STATIC
INT
;
;
INT
;
INT
,
;
INT
,
,
;
IF
(
)
RETURN
;
FOR
(
;
;
)
{
IF
(
(
,
)
)
(
)
;
IF
(
)
BREAK
;
IF
(
(
,
,
,
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
{
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
(
,
,
,
,
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
ELSE
IF
(
)
{
=
;
=
;
RETURN
;
}
BREAK
;
CASE
(
,
,
,
,
)
;
IF
(
)
{
;
}
BREAK
;
DEFAULT
IF
(
)
{
(
,
,
,
,
)
;
=
;
=
(
)
;
}
BREAK
;
}
}
}
}
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
;
WHILE
(
(
,
,
,
,
)
)
{
=
;
IF
(
(
,
,
,
)
)
(
)
;
(
)
;
(
)
;
}
}
VOID
(
INT
)
{
(
,
,
,
,
)
;
}
;
INT
;
CHAR
;
STATIC
CHAR
=
;
;
INT
(
,
,
,
INT
)
{
;
;
DOUBLE
,
,
;
;
STATIC
CHAR
;
INT
;
;
IF
(
)
RETURN
;
=
;
=
;
=
(
)
;
(
)
;
IF
(
(
(
)
,
)
)
(
)
;
IF
(
(
)
)
(
)
=
;
=
;
=
;
=
;
=
;
WHILE
(
(
)
)
{
WHILE
(
(
(
)
(
)
)
)
;
IF
(
)
{
=
;
;
WHILE
(
(
(
)
(
)
)
)
;
IF
(
)
{
=
;
;
}
}
}
=
;
(
,
)
;
=
;
=
;
=
(
(
)
)
;
IF
(
)
{
=
(
,
(
)
,
,
)
;
IF
(
)
{
IF
(
(
,
)
)
{
IF
(
(
)
)
{
(
,
,
(
)
(
(
)
)
,
,
,
,
)
;
}
}
(
,
)
;
(
)
;
(
)
;
}
}
=
;
IF
(
)
=
;
IF
(
(
)
)
=
;
IF
(
)
=
;
IF
(
(
)
)
{
=
(
)
;
IF
(
)
=
(
)
;
}
=
(
)
;
IF
(
)
(
)
;
(
,
)
;
=
(
,
,
,
)
;
IF
(
)
(
)
;
IF
(
)
{
IF
(
(
)
)
{
(
)
;
}
=
(
)
;
=
(
)
;
IF
(
(
=
(
)
)
)
{
IF
(
)
=
(
)
(
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
=
(
)
(
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
=
(
)
(
)
;
}
(
,
,
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
IF
(
)
{
=
(
)
;
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
}
}
ELSE
{
IF
(
(
(
)
)
)
{
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
}
=
(
)
;
=
;
}
(
)
;
=
;
}
RETURN
;
}
__E__O__F__
;
INT
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
(
)
;
RETURN
;
}
INT
(
)
{
INT
;
INT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
INT
(
CHAR
,
INT
)
{
;
INT
;
=
(
)
;
=
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
RETURN
(
)
;
}
INT
(
CHAR
)
{
;
INT
;
=
(
)
;
=
(
,
)
;
IF
(
)
(
,
,
(
)
)
;
=
;
RETURN
;
}
VOID
(
INT
)
{
(
)
;
=
;
}
VOID
(
INT
,
INT
)
{
(
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
,
)
;
}
INT
(
INT
,
VOID
,
INT
)
{
RETURN
(
,
,
,
)
;
}
INT
(
CHAR
)
{
;
=
(
,
)
;
IF
(
)
{
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
CHAR
)
{
}
VOID
(
UNSIGNED
LONG
,
UNSIGNED
LONG
)
{
}
VOID
(
CHAR
,
CHAR
,
)
{
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
CHAR
,
)
{
;
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
DOUBLE
(
VOID
)
{
DOUBLE
;
STRUCT
;
STATIC
INT
;
(
)
;
IF
(
)
=
;
=
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
STATIC
INT
;
;
INT
;
INT
;
INT
;
WHILE
(
(
)
)
{
=
(
)
;
(
)
;
IF
(
)
{
=
;
(
)
;
=
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
;
=
;
CONTINUE
;
}
=
;
;
=
;
IF
(
(
)
)
=
;
}
RETURN
;
}
CHAR
;
INT
(
INT
,
CHAR
)
{
;
;
DOUBLE
,
;
STATIC
CHAR
;
(
,
,
(
)
)
;
=
;
=
(
)
;
(
,
(
)
)
;
IF
(
(
)
)
(
)
=
;
=
;
(
,
)
;
IF
(
(
)
)
{
(
,
,
)
;
=
;
;
=
;
(
,
)
;
}
=
;
=
;
(
)
;
(
)
;
=
(
)
;
WHILE
(
)
{
=
(
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
(
)
;
=
;
}
RETURN
;
}
__E__O__F__
INT
;
=
;
INT
,
;
DOUBLE
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
INT
=
;
INT
;
;
STATIC
INT
=
;
EXTERN
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
;
STATIC
=
;
UNSIGNED
SHORT
;
UNSIGNED
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
(
)
)
(
)
;
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
}
(
INT
)
{
;
=
;
IF
(
)
(
)
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
}
RETURN
;
}
INT
(
)
{
RETURN
(
)
;
}
CHAR
(
INT
,
CHAR
)
{
STATIC
CHAR
=
;
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
RETURN
;
}
ELSE
{
IF
(
)
=
;
RETURN
;
}
}
INT
(
INT
,
UNSIGNED
CHAR
)
{
INT
;
,
;
IF
(
(
)
(
)
)
{
(
,
(
FLOAT
)
)
;
=
;
(
,
)
;
=
;
IF
(
)
{
=
;
}
ELSE
{
RETURN
;
}
}
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
(
,
)
;
IF
(
)
{
IF
(
)
{
IF
(
(
,
)
)
(
)
;
(
,
)
;
RETURN
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
ELSE
{
(
)
;
}
}
(
)
(
,
,
)
;
=
;
(
,
(
FLOAT
)
)
;
=
;
(
,
(
,
)
)
;
=
;
=
;
RETURN
;
}
VOID
(
UNSIGNED
CHAR
)
{
IF
(
)
(
,
,
)
;
(
)
(
,
,
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
VOID
)
{
=
;
=
;
(
)
;
=
;
}
VOID
(
)
{
IF
(
)
{
IF
(
)
(
,
)
;
=
;
(
,
)
;
}
(
)
(
,
,
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
}
}
ELSE
{
IF
(
)
{
(
(
INT
)
,
)
;
(
,
(
FLOAT
)
)
;
=
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
IF
(
)
(
,
(
)
)
;
ELSE
(
,
(
)
)
;
}
VOID
(
VOID
)
{
(
,
(
,
)
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
(
)
)
;
(
,
(
,
)
)
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
,
;
;
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
IF
(
(
,
,
,
(
)
)
)
{
(
,
,
)
;
}
ELSE
{
(
,
)
;
=
;
}
}
IF
(
)
{
(
)
;
}
}
CHAR
(
INT
)
{
CHAR
,
;
;
=
(
)
;
=
(
,
)
;
IF
(
(
,
,
,
(
)
)
)
{
RETURN
;
}
ELSE
{
RETURN
;
}
}
VOID
(
VOID
)
{
INT
;
DOUBLE
;
IF
(
)
{
=
(
(
)
)
;
IF
(
(
,
)
)
{
=
;
=
(
(
)
)
;
IF
(
)
=
;
=
;
}
}
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
(
)
(
)
)
RETURN
;
IF
(
)
RETURN
;
(
)
(
,
,
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
(
)
(
)
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
(
)
(
,
,
,
,
,
)
;
}
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
INT
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
STATIC
INT
,
,
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
INT
;
}
;
(
)
STATIC
;
VOID
(
VOID
)
{
;
CHAR
;
INT
,
,
,
,
,
;
CHAR
;
=
;
=
(
)
;
=
(
)
;
(
(
)
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
{
=
(
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
)
{
=
;
=
;
IF
(
)
=
;
}
ELSE
{
=
;
}
BREAK
;
}
}
IF
(
)
{
=
;
=
;
=
;
IF
(
)
=
;
;
}
}
}
}
}
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
IF
(
(
)
(
)
)
{
;
=
;
}
}
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
(
INT
)
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
(
,
,
)
;
=
(
)
;
=
(
)
;
(
,
,
(
(
INT
)
(
)
)
)
;
}
}
VOID
(
INT
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
;
IF
(
)
{
(
(
(
)
)
)
;
WHILE
(
)
;
}
BREAK
;
CASE
(
)
;
;
IF
(
)
{
(
(
(
)
)
)
;
WHILE
(
)
;
}
BREAK
;
CASE
(
)
;
(
,
)
;
BREAK
;
CASE
CASE
(
)
;
IF
(
(
,
)
)
{
=
;
=
;
}
BREAK
;
CASE
CASE
(
)
;
=
;
(
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
__E__O__F__
TYPEDEF
STRUCT
{
INT
;
INT
;
VOID
;
;
}
;
STATIC
=
{
{
,
,
}
}
;
STATIC
;
STATIC
CHAR
;
EXTERN
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
;
STATIC
INT
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
,
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
}
;
STATIC
;
TYPEDEF
STRUCT
{
;
;
;
;
;
;
;
;
;
;
;
;
}
;
STATIC
INT
;
STATIC
;
,
;
(
INT
)
;
INT
(
,
)
;
VOID
(
,
,
)
;
VOID
(
,
STRUCT
,
INT
,
INT
,
,
INT
,
INT
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
(
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
,
STRUCT
,
INT
,
INT
,
INT
,
INT
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
(
)
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
,
,
UNSIGNED
CHAR
)
{
INT
;
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
;
}
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
INT
)
;
RETURN
(
(
(
)
)
(
)
)
;
}
VOID
(
)
{
WHILE
(
(
(
)
)
)
;
}
(
UNSIGNED
,
UNSIGNED
)
{
INT
;
DOUBLE
,
;
=
(
)
;
DO
{
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
RETURN
;
}
=
(
)
;
}
WHILE
(
(
)
)
;
RETURN
;
}
(
UNSIGNED
)
{
INT
,
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
RETURN
;
}
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
SHORT
;
;
;
=
(
(
)
)
;
(
LONG
)
=
(
)
(
)
(
)
;
=
;
=
(
)
;
=
(
)
;
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
(
(
)
)
)
;
=
(
UNSIGNED
SHORT
)
;
=
(
SHORT
)
(
(
)
)
;
=
;
WHILE
(
(
)
(
)
)
{
IF
(
(
)
)
{
=
;
IF
(
)
{
IF
(
)
{
(
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
)
;
=
;
}
}
ELSE
{
IF
(
)
{
(
,
,
,
)
;
=
;
}
ELSE
{
(
,
,
,
)
;
=
;
}
}
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
INT
)
;
=
;
IF
(
(
)
)
GOTO
;
=
(
)
;
}
ELSE
{
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
}
=
;
;
}
;
}
IF
(
)
{
=
;
=
;
;
=
(
)
;
}
(
)
;
}
(
INT
)
{
CHAR
;
INT
;
=
(
)
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
IF
(
)
{
RETURN
;
}
ELSE
{
=
;
=
(
CHAR
)
(
)
;
=
(
)
;
=
(
SHORT
)
(
)
;
=
(
SHORT
)
(
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
RETURN
;
}
=
(
SHORT
)
;
IF
(
(
(
)
)
(
)
)
{
RETURN
;
}
IF
(
(
)
)
{
IF
(
(
)
(
)
)
RETURN
;
}
=
(
SHORT
)
(
)
;
=
;
IF
(
)
RETURN
;
=
(
UNSIGNED
CHAR
)
(
)
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
{
=
;
}
IF
(
(
CHAR
)
(
)
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
;
}
ELSE
IF
(
(
CHAR
)
(
)
)
{
=
(
UNSIGNED
SHORT
)
(
)
;
=
;
}
=
(
SHORT
)
(
)
;
=
(
SHORT
)
(
)
;
=
(
CHAR
)
(
)
;
=
(
)
;
=
(
UNSIGNED
CHAR
)
(
)
;
=
(
CHAR
)
(
)
;
=
(
CHAR
)
(
)
;
=
(
CHAR
)
(
)
;
=
(
CHAR
)
(
)
;
=
(
CHAR
)
(
)
;
=
(
CHAR
)
(
)
;
=
(
CHAR
)
(
)
;
=
(
LONG
)
(
)
;
(
,
)
;
(
,
)
;
(
,
(
UNSIGNED
CHAR
)
(
)
)
;
(
,
(
UNSIGNED
CHAR
)
(
)
)
;
(
,
(
INT
)
)
;
(
,
(
INT
)
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
)
;
RETURN
;
}
INT
(
,
)
{
;
INT
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
{
(
,
(
FLOAT
)
)
;
=
;
=
;
}
ELSE
{
IF
(
(
)
(
)
)
{
(
,
(
FLOAT
)
)
;
=
=
;
}
ELSE
{
(
,
(
FLOAT
)
)
;
=
;
IF
(
)
=
;
ELSE
=
;
}
}
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
=
;
=
;
=
;
(
)
;
=
;
}
ELSE
{
=
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
RETURN
;
}
VOID
(
,
,
)
{
INT
;
(
)
;
(
)
;
=
;
IF
(
)
{
=
;
IF
(
)
{
IF
(
(
)
)
(
)
;
=
;
}
ELSE
{
=
;
}
=
;
=
;
(
)
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
(
)
;
}
ELSE
{
=
;
=
;
=
;
}
=
;
}
ELSE
{
IF
(
(
)
)
{
(
)
;
}
WHILE
(
)
{
(
(
)
,
(
)
,
,
,
,
)
;
=
;
}
}
}
__E__O__F__
;
;
SHORT
;
;
UNSIGNED
SHORT
;
UNSIGNED
;
VOID
(
UNSIGNED
CHAR
)
{
}
VOID
(
UNSIGNED
CHAR
)
{
}
VOID
(
UNSIGNED
CHAR
)
{
=
=
=
;
=
=
=
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
=
=
;
=
=
;
=
;
(
,
(
)
)
;
}
VOID
(
VOID
)
{
}
VOID
(
)
{
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
__E__O__F__
=
{
,
,
}
;
;
INT
=
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
;
INT
;
=
;
INT
,
,
,
,
;
;
TYPEDEF
STRUCT
{
LONG
;
LONG
;
LONG
;
LONG
;
}
;
(
)
TYPEDEF
STRUCT
{
INT
;
INT
;
CHAR
;
}
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
INT
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
INT
;
EXTERN
INT
,
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
;
UNSIGNED
SHORT
;
INT
=
;
INT
=
;
INT
;
(
)
=
;
=
;
INT
,
,
;
INT
,
;
INT
=
;
,
;
=
;
INT
,
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
=
;
STATIC
=
;
STATIC
INT
;
STATIC
=
;
INT
(
)
;
INT
(
)
;
INT
;
STATIC
=
{
,
}
;
STATIC
;
STATIC
INT
=
;
STATIC
;
TYPEDEF
UNSIGNED
SHORT
;
TYPEDEF
UNSIGNED
LONG
;
STATIC
;
STATIC
;
STATIC
INT
=
;
STATIC
LONG
,
,
;
STATIC
UNSIGNED
LONG
,
,
;
VOID
(
)
{
UNSIGNED
INT
;
=
;
=
;
=
;
FOR
(
=
,
=
;
;
=
)
;
FOR
(
=
,
=
;
;
=
)
;
FOR
(
=
,
=
;
;
=
)
;
=
;
}
(
INT
,
INT
,
INT
)
{
;
IF
(
)
(
)
;
=
;
IF
(
)
{
=
(
(
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
RETURN
;
}
(
INT
,
INT
,
INT
)
{
;
IF
(
)
(
)
;
=
;
IF
(
)
{
=
(
(
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
RETURN
;
}
VOID
(
,
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
CHAR
;
;
REGISTER
INT
,
;
IF
(
(
)
(
)
)
RETURN
;
FOR
(
=
;
(
)
;
)
{
=
;
=
;
=
(
)
;
=
(
(
)
)
;
;
SWITCH
(
)
{
CASE
DO
{
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
}
WHILE
(
)
;
}
}
}
VOID
(
,
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
CHAR
;
;
REGISTER
INT
,
;
IF
(
(
)
(
)
)
RETURN
;
FOR
(
=
;
(
)
;
)
{
=
;
=
;
=
(
)
;
=
(
(
)
)
;
;
SWITCH
(
)
{
CASE
DO
{
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
}
WHILE
(
)
;
}
}
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
;
VOID
(
VOID
)
{
FLOAT
,
,
;
INT
;
IF
(
(
)
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
)
;
=
;
}
}
VOID
(
INT
)
{
(
)
;
(
,
)
;
}
STATIC
(
,
)
{
;
;
;
;
;
=
(
,
,
,
,
)
;
=
;
=
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
IF
(
)
{
(
)
;
(
)
;
}
=
;
IF
(
)
=
;
=
(
(
)
)
;
=
(
SHORT
)
(
(
)
,
)
;
=
(
,
,
,
,
,
(
)
,
,
,
,
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
=
(
)
;
INT
;
=
(
(
)
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
}
=
(
,
,
,
,
,
,
,
)
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
(
)
,
,
)
;
IF
(
)
(
)
;
=
(
VOID
)
(
,
,
)
;
(
,
,
(
INT
)
)
;
=
;
IF
(
(
,
)
)
(
)
;
(
,
)
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
;
CHAR
;
INT
,
,
,
,
;
CHAR
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
)
{
(
)
;
}
;
VOID
(
,
CHAR
)
{
;
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
(
,
,
,
,
,
,
,
,
)
;
(
)
;
=
(
,
,
)
;
(
,
,
,
)
;
}
(
)
{
;
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
RETURN
(
)
;
}
=
;
=
;
(
,
,
,
,
,
,
(
UNSIGNED
CHAR
)
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
RETURN
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
,
;
;
INT
;
INT
;
(
,
)
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
(
)
)
;
ELSE
(
)
;
}
=
(
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
;
=
;
(
,
,
,
)
;
=
(
,
)
;
IF
(
)
{
STRUCT
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
=
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
;
}
ELSE
{
INT
;
=
(
)
;
=
(
(
,
)
)
;
=
;
}
=
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
(
INT
)
(
)
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
IF
(
)
{
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
)
;
}
=
;
{
INT
=
;
;
;
=
(
,
(
,
)
,
,
)
;
=
;
=
;
=
;
=
(
,
(
,
)
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
,
)
;
}
IF
(
)
{
IF
(
)
{
=
(
,
,
,
)
;
(
)
;
(
,
,
)
;
}
}
(
,
)
;
{
;
INT
=
;
=
;
=
(
,
,
,
)
;
}
(
,
)
;
{
;
DO
{
(
,
)
;
IF
(
)
=
;
}
WHILE
(
)
;
}
IF
(
(
)
)
{
CHAR
;
=
;
=
(
CHAR
)
(
)
;
IF
(
)
{
CHAR
=
;
WHILE
(
(
)
)
;
IF
(
)
=
;
IF
(
(
(
,
)
)
)
=
;
}
}
IF
(
)
{
=
(
)
;
(
)
;
}
ELSE
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
(
)
)
;
=
;
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
,
,
)
;
=
(
,
,
)
;
}
IF
(
)
{
IF
(
)
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
}
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
}
(
)
;
}
INT
(
)
{
INT
;
CHAR
;
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
;
BREAK
;
}
RETURN
;
}
STRUCT
{
INT
;
INT
;
}
;
INT
=
;
INT
=
;
INT
=
;
INT
;
INT
;
VOID
(
VOID
)
{
;
(
,
)
;
SWITCH
(
)
{
CASE
(
(
)
,
)
;
BREAK
;
CASE
(
(
)
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
IF
(
)
{
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
(
)
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
=
(
FLOAT
)
(
)
;
=
;
=
;
}
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
IF
(
)
(
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
{
=
;
(
,
,
,
,
,
,
,
,
)
;
(
,
,
(
,
)
)
;
}
ELSE
IF
(
(
)
)
{
=
;
(
,
)
;
(
,
)
;
}
}
}
VOID
(
)
{
STATIC
INT
;
STATIC
LONG
LONG
;
LONG
LONG
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
=
;
(
,
(
(
DOUBLE
)
(
(
)
)
)
)
;
=
(
)
;
}
IF
(
)
{
(
)
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
IF
(
)
{
WHILE
(
)
{
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
IF
(
(
,
,
,
,
,
,
,
,
,
,
)
)
(
)
;
=
;
WHILE
(
)
(
)
;
=
;
}
=
;
=
;
=
;
(
,
)
;
}
ELSE
{
WHILE
(
)
{
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
,
)
;
=
;
}
(
,
)
;
}
}
STATIC
INT
;
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
INT
)
{
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
(
)
;
WHILE
(
)
{
(
,
)
;
=
(
)
;
}
}
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
;
INT
;
STRUCT
;
=
;
=
;
(
)
;
(
,
)
;
=
(
,
,
,
,
)
;
IF
(
)
{
=
(
,
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
(
)
)
RETURN
;
=
=
;
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
}
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
=
=
;
}
__E__O__F__
=
{
,
,
}
;
=
{
,
,
}
;
FLOAT
;
TYPEDEF
STRUCT
{
LONG
;
LONG
;
LONG
;
LONG
;
}
;
(
)
TYPEDEF
STRUCT
{
INT
;
INT
;
CHAR
;
}
;
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
INT
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
INT
;
;
INT
=
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
;
INT
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
;
UNSIGNED
SHORT
;
INT
=
;
INT
=
;
INT
;
(
)
INT
,
,
,
,
;
;
=
;
=
;
INT
,
,
;
INT
,
;
INT
=
;
,
;
=
;
INT
,
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
INT
=
;
STATIC
;
=
{
,
,
}
;
INT
=
;
(
)
(
INT
)
(
(
)
(
(
)
)
(
)
)
(
)
(
INT
)
(
(
)
(
(
)
)
(
)
)
STATIC
INT
;
STATIC
;
STATIC
=
;
STATIC
=
;
STATIC
INT
=
;
STATIC
INT
=
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
;
VOID
(
VOID
)
{
FLOAT
,
,
;
INT
;
IF
(
(
)
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
)
;
=
;
}
}
(
VOID
)
{
INT
;
INT
,
;
;
;
UNSIGNED
INT
;
INT
;
IF
(
(
=
(
INT
)
)
)
{
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
(
,
)
;
IF
(
(
,
,
)
)
RETURN
;
(
,
,
(
)
)
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
INT
)
{
(
)
;
(
,
)
;
}
STATIC
(
,
)
{
;
;
;
;
;
=
(
,
,
,
,
)
;
=
;
=
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
CHAR
;
INT
,
,
,
,
;
CHAR
;
=
(
)
;
(
(
)
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
)
{
(
)
;
}
;
VOID
(
,
CHAR
)
{
;
;
=
(
UNSIGNED
CHAR
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
(
,
,
,
,
,
,
,
,
)
;
(
)
;
=
(
,
,
)
;
(
,
,
,
)
;
}
(
)
{
;
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
RETURN
(
)
;
}
=
;
=
;
(
,
,
,
,
,
,
(
UNSIGNED
CHAR
)
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
RETURN
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
,
;
;
INT
;
INT
;
INT
,
;
INT
=
,
=
;
(
,
)
;
(
)
;
IF
(
(
)
)
(
)
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
(
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
(
)
)
;
ELSE
(
)
;
}
=
(
)
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
;
=
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
=
;
=
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
;
}
ELSE
{
INT
;
=
(
)
;
=
(
(
,
)
)
;
=
;
}
=
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
(
INT
)
(
)
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
IF
(
)
{
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
)
;
}
=
;
IF
(
)
(
,
)
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
(
(
)
)
(
)
)
(
(
)
)
)
{
=
;
(
)
;
}
{
INT
=
;
;
;
=
(
,
(
,
)
,
,
)
;
=
;
=
;
=
;
=
(
,
(
,
)
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
,
)
;
}
IF
(
)
{
IF
(
)
{
=
(
,
,
,
)
;
(
)
;
(
,
,
)
;
}
}
(
,
)
;
(
,
,
(
,
)
)
;
{
;
INT
=
;
=
;
=
(
,
,
,
)
;
}
(
,
)
;
(
,
)
;
{
;
DO
{
(
,
)
;
IF
(
)
=
;
}
WHILE
(
)
;
}
=
(
)
;
IF
(
)
{
(
)
;
}
=
;
(
)
;
(
,
(
)
)
;
=
;
=
;
}
(
)
{
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
=
(
,
,
)
;
=
(
,
,
,
,
)
;
(
)
;
IF
(
(
,
)
)
(
)
;
(
,
)
;
(
)
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
(
(
)
(
)
(
)
)
;
}
(
)
{
;
(
)
;
;
VOID
(
)
;
(
,
,
)
;
=
;
=
(
,
,
)
;
IF
(
)
IF
(
(
,
,
,
,
,
)
)
(
)
;
=
(
)
;
(
)
;
(
)
;
=
(
(
)
(
)
(
)
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
;
IF
(
)
{
IF
(
)
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
}
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
(
)
;
}
INT
(
)
{
INT
;
CHAR
;
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
UNSIGNED
CHAR
)
;
BREAK
;
}
RETURN
;
}
STRUCT
{
INT
;
INT
;
}
;
INT
=
;
INT
=
;
INT
=
;
INT
;
INT
;
VOID
(
VOID
)
{
;
INT
;
(
,
)
;
SWITCH
(
)
{
CASE
(
(
)
,
)
;
BREAK
;
CASE
(
(
)
,
)
;
BREAK
;
CASE
IF
(
)
{
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
(
)
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
=
(
FLOAT
)
(
)
;
=
;
=
;
}
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
IF
(
)
(
)
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
}
}
VOID
(
)
{
VOID
(
)
;
IF
(
)
{
STATIC
INT
;
STATIC
LONG
LONG
;
LONG
LONG
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
LONG
LONG
=
(
)
;
=
;
(
,
(
(
DOUBLE
)
(
)
)
)
;
=
;
}
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
INT
,
;
;
UNSIGNED
INT
;
=
;
=
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
IF
(
)
{
=
=
;
;
}
IF
(
)
{
=
=
;
;
}
IF
(
)
(
,
,
,
)
;
}
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
WHILE
(
)
{
;
(
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
,
,
(
FLOAT
)
,
(
FLOAT
)
)
;
(
)
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
=
;
}
}
VOID
(
)
{
(
)
;
IF
(
)
{
INT
,
;
;
UNSIGNED
INT
;
=
;
=
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
IF
(
)
{
=
=
;
;
}
IF
(
)
{
=
=
;
;
}
IF
(
)
(
,
,
,
)
;
}
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
=
(
)
;
}
(
)
{
;
;
IF
(
)
IF
(
(
,
,
(
)
)
(
)
)
{
(
)
;
(
)
;
}
(
)
;
=
(
,
,
,
,
)
;
IF
(
(
,
,
(
)
)
(
)
)
(
)
;
=
(
,
,
,
,
)
;
(
)
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
(
)
;
}
(
)
{
;
;
IF
(
(
,
,
(
)
)
(
)
)
(
)
;
IF
(
(
,
,
(
)
)
(
)
)
(
)
;
(
)
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
RETURN
(
)
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
WHILE
(
(
,
,
(
)
)
(
)
)
{
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
ELSE
(
,
,
,
(
FLOAT
)
,
(
FLOAT
)
)
;
IF
(
(
,
,
(
)
)
(
)
)
(
)
;
}
}
STATIC
INT
;
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
INT
)
{
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
(
)
;
WHILE
(
)
{
(
,
)
;
=
(
)
;
}
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
(
)
)
RETURN
;
=
=
;
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
}
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
=
=
;
}
__E__O__F__
(
)
{
,
}
UNSIGNED
SHORT
;
STATIC
;
STATIC
INT
;
INT
;
;
INT
;
INT
=
;
STRUCT
{
CHAR
;
INT
;
}
=
{
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
(
)
,
}
;
STATIC
UNSIGNED
CHAR
;
STATIC
;
INT
=
(
)
(
)
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
CHAR
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
}
;
INT
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
,
;
=
{
,
}
;
STATIC
;
INT
,
,
,
,
;
;
VOID
(
VOID
)
;
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
INT
,
,
,
,
,
,
,
,
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
(
)
(
)
=
(
)
(
)
;
(
)
(
)
=
(
)
(
)
;
}
}
}
}
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
;
IF
(
(
)
)
{
=
;
(
)
;
}
(
(
)
,
,
)
;
(
,
(
)
,
)
;
}
}
}
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
,
,
,
,
,
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
(
)
(
)
=
(
)
(
)
;
}
}
}
}
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
;
IF
(
(
)
)
{
=
;
(
)
;
}
(
,
(
)
,
)
;
}
}
}
}
VOID
(
VOID
)
{
FLOAT
,
,
;
UNSIGNED
CHAR
;
INT
;
IF
(
(
)
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
=
(
(
)
)
;
IF
(
(
)
(
)
)
(
,
)
;
(
,
,
,
)
;
IF
(
)
(
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
(
,
,
,
)
;
IF
(
)
(
)
;
ELSE
(
,
)
;
}
}
INT
(
)
{
INT
,
=
;
FOR
(
=
;
;
)
(
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
(
,
(
)
,
(
)
)
;
ELSE
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
=
;
}
}
INT
(
CHAR
,
INT
,
INT
,
INT
)
{
INT
;
INT
,
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
{
(
,
)
;
=
;
}
}
ELSE
{
FOR
(
=
;
;
)
IF
(
)
{
=
(
)
(
)
(
)
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
{
(
,
,
,
)
;
=
;
}
}
RETURN
;
}
INT
(
INT
,
CHAR
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
INT
)
{
INT
;
STRUCT
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
)
{
STATIC
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
(
,
,
(
)
)
;
IF
(
(
)
)
{
=
;
FOR
(
=
;
;
)
(
)
=
(
)
;
IF
(
(
)
)
(
,
,
)
;
}
}
INT
(
INT
,
UNSIGNED
CHAR
)
{
INT
,
,
;
IF
(
(
)
(
)
)
{
(
,
(
FLOAT
)
)
;
(
,
)
;
RETURN
;
}
(
,
(
FLOAT
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
(
)
;
=
(
(
(
INT
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
)
;
(
)
;
=
;
=
;
}
=
;
=
(
,
)
;
=
(
)
;
=
(
)
;
=
(
,
)
;
=
(
(
)
)
;
=
=
(
)
(
(
(
)
)
)
;
(
,
)
;
(
)
;
(
)
;
=
=
=
(
CHAR
)
(
)
;
IF
(
)
(
)
;
(
)
;
=
;
=
;
RETURN
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
INT
,
,
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
=
=
;
IF
(
(
)
)
=
(
(
)
,
,
,
)
;
ELSE
IF
(
(
)
)
=
(
(
)
,
,
,
)
;
ELSE
IF
(
(
)
(
)
(
)
)
{
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
=
(
,
,
,
)
;
}
ELSE
=
;
(
,
)
;
(
)
;
(
)
;
}
IF
(
(
)
)
=
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
(
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
)
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
INT
=
;
INT
;
FOR
(
=
;
;
)
{
(
)
;
(
,
,
(
(
)
(
)
)
)
;
}
}
ELSE
{
INT
;
INT
;
INT
=
;
(
)
;
WHILE
(
)
{
=
;
=
;
WHILE
(
)
{
REGISTER
INT
=
;
IF
(
(
)
)
{
=
;
(
)
;
}
IF
(
)
{
(
,
,
)
;
(
)
;
(
,
,
)
;
}
ELSE
(
,
,
)
;
;
}
=
;
}
}
IF
(
)
(
(
INT
)
,
)
;
}
STATIC
INT
;
VOID
(
VOID
)
{
IF
(
)
{
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
=
;
;
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
INT
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
)
)
=
(
(
)
)
;
IF
(
(
,
,
)
)
{
(
)
;
=
;
}
ELSE
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
IF
(
(
)
(
)
)
(
,
)
;
ELSE
IF
(
(
)
(
)
)
(
,
)
;
=
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
WHILE
(
(
)
)
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
}
VOID
(
)
{
(
)
;
}
CHAR
(
INT
)
{
STATIC
CHAR
=
;
STATIC
CHAR
;
IF
(
)
{
(
,
,
,
,
)
;
RETURN
(
)
;
}
ELSE
{
RETURN
(
)
;
}
}
__E__O__F__
EXTERN
;
INT
,
,
,
;
;
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
;
INT
;
INT
;
(
(
)
(
)
)
VOID
(
VOID
)
;
STATIC
;
VOID
(
,
STRUCT
,
INT
,
INT
,
,
INT
,
INT
)
{
INT
,
,
,
,
,
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
(
)
(
)
=
(
)
(
)
;
(
)
(
)
=
(
)
(
)
;
}
}
}
}
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
)
,
(
(
)
)
,
)
;
(
(
(
)
)
,
(
)
,
)
;
}
}
}
}
VOID
(
,
STRUCT
,
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
,
,
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
FOR
(
=
;
(
)
;
)
{
(
)
(
)
=
(
)
(
)
;
}
}
}
}
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
(
)
)
,
(
)
,
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
(
)
;
)
{
=
;
}
=
;
=
;
;
}
VOID
(
VOID
)
{
WHILE
(
(
(
)
)
)
;
}
VOID
(
INT
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
}
(
,
,
)
;
}
(
,
INT
)
{
INT
,
;
IF
(
)
{
=
(
(
)
)
(
(
)
)
;
}
ELSE
{
=
(
)
;
}
=
(
,
)
;
;
IF
(
(
)
)
{
(
)
;
=
;
RETURN
;
}
=
;
=
;
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
(
)
;
=
(
,
)
;
=
(
)
(
)
;
IF
(
)
{
=
(
VOID
)
(
(
)
)
;
=
;
}
RETURN
;
}
(
INT
,
INT
,
INT
,
INT
)
{
INT
;
=
(
)
;
IF
(
)
{
(
(
)
)
;
}
(
,
)
;
IF
(
(
)
)
{
RETURN
;
}
RETURN
;
}
INT
(
,
)
{
;
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
)
;
=
;
=
;
(
)
;
=
(
VOID
)
(
)
;
=
(
)
;
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
{
(
,
(
FLOAT
)
)
;
}
ELSE
{
(
,
(
FLOAT
)
)
;
}
(
,
)
;
RETURN
;
}
VOID
(
,
,
UNSIGNED
CHAR
)
{
INT
=
;
INT
;
(
)
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
}
VOID
(
,
,
)
{
(
)
;
IF
(
)
{
(
)
;
}
ELSE
{
WHILE
(
)
{
(
(
)
,
(
)
,
,
,
,
)
;
=
;
}
}
}
VOID
(
,
,
)
{
(
)
;
IF
(
)
(
)
;
(
,
,
)
;
}
__E__O__F__
;
EXTERN
INT
;
;
(
,
INT
)
;
INT
,
;
;
;
,
;
INT
,
,
,
,
,
;
;
STATIC
;
STATIC
=
,
;
STATIC
INT
=
;
STATIC
=
,
;
STATIC
INT
;
STATIC
INT
;
STATIC
,
,
,
;
STATIC
INT
,
;
STATIC
,
,
,
,
;
STATIC
;
;
(
)
(
)
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
}
;
INT
=
;
INT
,
;
DOUBLE
;
INT
=
;
STATIC
INT
;
=
;
STATIC
;
STATIC
INT
;
STATIC
INT
;
UNSIGNED
CHAR
;
UNSIGNED
SHORT
;
UNSIGNED
;
INT
=
,
;
=
,
=
;
=
,
=
,
=
,
=
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
}
;
STATIC
;
STATIC
INT
;
STATIC
;
INT
;
INT
;
INT
=
;
STATIC
;
STATIC
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
(
,
,
,
)
;
VOID
(
,
)
;
VOID
(
VOID
)
{
;
IF
(
(
,
)
)
{
IF
(
(
(
)
)
(
(
)
)
(
)
(
)
)
{
(
,
(
FLOAT
)
)
;
(
,
(
FLOAT
)
)
;
}
}
}
VOID
(
VOID
)
{
IF
(
(
(
INT
)
(
(
)
)
)
(
(
INT
)
(
(
)
)
)
(
(
INT
)
)
(
(
INT
)
)
)
{
(
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
(
,
)
;
}
(
)
;
(
)
;
}
(
INT
,
INT
)
{
INT
;
=
(
)
;
(
,
)
;
IF
(
(
)
)
{
RETURN
;
}
RETURN
;
}
(
INT
,
INT
)
{
INT
,
;
=
(
)
;
=
(
,
)
;
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
(
)
;
=
(
,
)
;
=
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
(
(
)
)
)
;
(
)
;
}
INT
(
,
)
{
IF
(
)
{
IF
(
)
{
RETURN
;
}
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
RETURN
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
RETURN
;
}
}
VOID
(
VOID
)
{
(
,
)
;
IF
(
)
{
(
,
)
;
IF
(
(
)
)
(
,
)
;
}
IF
(
)
{
(
,
)
;
}
}
VOID
(
VOID
)
{
(
,
)
;
}
VOID
(
)
{
INT
,
,
,
,
,
,
,
;
INT
,
,
;
;
IF
(
(
)
(
)
(
)
)
{
=
;
}
IF
(
(
)
(
)
(
)
)
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
=
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
IF
(
)
=
;
IF
(
(
)
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
=
;
=
;
}
IF
(
(
)
(
(
)
)
)
{
=
;
=
;
}
}
;
}
IF
(
)
{
=
;
=
;
=
;
}
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
}
ELSE
{
=
;
}
=
;
=
;
=
;
(
,
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
;
;
(
,
,
,
)
;
}
=
;
=
;
IF
(
(
,
,
)
)
{
(
)
;
}
}
(
)
;
}
(
INT
)
{
;
;
INT
;
IF
(
(
)
)
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
(
)
)
{
IF
(
)
{
=
;
}
}
IF
(
(
=
(
)
)
)
RETURN
;
IF
(
(
(
)
)
(
)
)
{
(
)
;
=
;
}
ELSE
{
=
(
(
)
,
(
)
,
,
)
;
(
)
;
}
IF
(
)
{
=
;
}
ELSE
{
=
;
IF
(
)
{
(
,
=
)
;
(
,
=
,
)
;
}
IF
(
)
=
;
}
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
VOID
(
)
{
;
;
INT
;
=
(
,
(
)
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
=
;
=
;
IF
(
(
)
)
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
(
,
)
)
(
)
)
{
=
;
}
ELSE
{
=
;
}
=
;
(
,
)
;
=
;
=
;
}
VOID
(
)
{
;
INT
,
,
,
,
,
,
;
INT
,
,
;
INT
,
,
;
;
=
;
=
;
=
;
DO
{
=
(
,
,
)
;
IF
(
(
)
(
)
(
)
(
)
)
{
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
{
IF
(
(
)
)
{
;
=
;
(
,
,
,
)
;
}
}
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
=
;
;
}
}
}
;
}
WHILE
(
)
;
IF
(
)
{
=
;
=
;
(
)
;
DO
{
=
(
,
,
)
;
IF
(
(
(
(
)
(
)
)
(
(
)
(
(
)
)
(
(
)
)
)
)
(
)
(
)
)
{
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
IF
(
(
)
)
{
IF
(
(
)
)
{
;
=
;
(
,
,
,
)
;
}
}
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
)
{
IF
(
)
=
;
=
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
=
;
;
}
}
}
;
}
WHILE
(
)
;
}
=
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
}
WHILE
(
)
{
FOR
(
=
;
(
)
(
)
;
)
{
=
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
=
;
;
}
}
}
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
IF
(
)
{
FOR
(
=
,
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
{
=
;
=
;
=
;
}
}
IF
(
(
)
)
=
;
IF
(
)
{
FOR
(
=
(
)
;
;
)
=
;
;
=
;
=
;
;
;
=
;
(
,
,
,
)
;
}
}
IF
(
)
=
;
ELSE
(
)
;
}
INT
(
VOID
)
{
RETURN
;
}
(
INT
)
{
IF
(
(
)
(
)
)
RETURN
;
ELSE
RETURN
;
}
VOID
(
INT
)
{
INT
,
,
;
IF
(
)
{
=
(
INT
)
;
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
=
(
INT
)
;
=
(
INT
)
;
(
,
,
,
)
;
=
;
=
;
}
}
CHAR
(
INT
)
{
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
(
)
;
=
(
)
;
=
;
IF
(
(
,
)
)
{
RETURN
;
}
ELSE
{
RETURN
;
}
}
CHAR
(
INT
)
{
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
(
)
;
=
(
)
;
=
;
RETURN
;
}
CHAR
(
INT
)
{
STATIC
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
}
RETURN
;
}
CHAR
(
INT
)
{
STATIC
CHAR
;
;
IF
(
(
)
(
)
)
RETURN
;
(
)
;
=
(
)
;
IF
(
)
{
(
,
,
,
(
)
)
;
}
ELSE
IF
(
)
{
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
}
}
(
INT
)
{
;
;
;
INT
;
;
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
;
}
(
)
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
IF
(
(
)
)
(
)
;
=
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
;
;
}
=
;
=
;
(
,
,
,
)
;
IF
(
)
{
=
(
,
,
,
,
,
,
,
,
,
,
,
)
;
IF
(
)
(
)
;
(
)
;
=
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
IF
(
(
,
,
,
,
,
,
)
)
{
(
)
;
}
IF
(
)
RETURN
;
(
)
;
(
,
,
(
INT
)
,
(
INT
)
,
,
,
)
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
(
)
;
=
;
=
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
(
=
(
)
)
)
(
)
;
IF
(
(
=
(
,
,
,
)
)
)
(
)
;
(
)
;
=
=
=
;
=
=
;
=
;
=
;
=
;
=
=
;
=
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
RETURN
;
}
(
INT
)
{
=
;
(
)
;
(
)
;
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
IF
(
(
=
(
(
INT
)
)
)
)
{
RETURN
;
}
=
;
=
;
=
=
=
;
=
;
=
;
=
=
=
;
=
=
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
=
;
=
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
(
,
)
;
RETURN
;
}
(
INT
)
{
;
;
INT
;
=
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
=
;
IF
(
(
)
)
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
=
;
=
=
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
,
,
,
,
,
,
)
)
{
(
)
;
}
(
,
,
,
,
,
,
)
;
(
,
)
;
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
(
,
)
;
IF
(
(
=
(
)
)
)
(
)
;
IF
(
(
=
(
,
,
,
)
)
)
(
)
;
(
)
;
=
=
=
;
=
=
;
=
;
=
;
=
;
=
=
;
=
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
INT
)
{
STATIC
=
;
IF
(
)
RETURN
;
=
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
IF
(
(
,
)
)
(
)
;
}
=
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
(
)
;
}
INT
(
INT
,
UNSIGNED
CHAR
)
{
INT
,
,
;
;
;
;
WHILE
(
(
)
(
)
)
{
IF
(
)
{
IF
(
)
{
=
;
}
ELSE
{
=
;
}
(
,
(
FLOAT
)
)
;
}
ELSE
{
(
,
(
FLOAT
)
)
;
RETURN
;
}
}
IF
(
(
)
)
RETURN
;
=
;
=
;
=
;
(
)
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
{
=
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
=
(
)
;
}
}
ELSE
IF
(
)
{
=
(
)
;
(
)
;
(
)
;
}
ELSE
{
=
(
)
;
(
)
;
(
)
;
}
=
;
=
;
(
)
;
(
)
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
(
)
;
=
(
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
(
)
;
(
,
)
;
=
;
(
,
(
FLOAT
)
)
;
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
(
,
)
;
WHILE
(
(
,
,
,
,
)
)
{
(
)
;
(
)
;
}
(
)
;
IF
(
)
{
(
,
,
,
,
,
,
)
;
(
)
;
}
(
)
;
IF
(
)
(
,
(
)
)
;
(
)
;
=
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
=
=
=
;
=
=
;
}
ELSE
IF
(
)
{
=
=
=
;
=
=
;
}
IF
(
)
=
;
ELSE
=
(
VOID
)
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
(
)
;
=
=
=
=
;
}
INT
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
=
;
}
ELSE
{
=
;
(
)
;
}
RETURN
;
}
VOID
(
INT
)
{
IF
(
)
{
=
;
(
)
;
}
=
;
}
VOID
(
UNSIGNED
CHAR
)
{
;
;
;
IF
(
)
{
=
;
=
(
)
;
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
=
;
=
;
}
}
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
IF
(
)
{
IF
(
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
(
,
,
,
)
;
}
ELSE
{
IF
(
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
,
)
;
}
}
}
(
,
,
(
)
)
;
IF
(
)
{
(
,
,
(
)
,
(
)
)
;
=
;
}
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
VOID
)
{
(
,
(
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
(
)
)
;
(
,
(
)
)
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
;
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
(
,
)
)
{
(
,
,
)
;
}
ELSE
{
(
,
)
;
=
;
}
}
IF
(
)
{
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
DOUBLE
;
IF
(
)
{
=
(
(
)
)
;
IF
(
(
,
)
)
{
=
;
=
(
(
)
)
;
IF
(
)
=
;
=
;
}
}
}
VOID
(
VOID
)
{
(
(
INT
)
,
)
;
}
VOID
(
VOID
)
{
(
(
INT
)
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
DOUBLE
;
IF
(
)
{
=
(
(
)
)
;
=
;
(
,
)
;
=
;
}
}
VOID
(
UNSIGNED
CHAR
)
{
INT
,
,
,
,
,
,
;
INT
;
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
(
)
)
=
;
(
)
;
=
;
IF
(
)
(
)
;
IF
(
(
(
)
(
(
(
)
)
)
)
(
)
)
{
(
)
;
}
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
(
)
(
)
(
)
;
IF
(
)
{
=
;
=
;
IF
(
)
BREAK
;
}
}
FOR
(
=
,
=
;
(
(
)
)
;
,
)
{
IF
(
)
=
;
}
IF
(
(
)
)
{
=
;
=
;
}
IF
(
)
(
)
;
=
;
(
,
)
;
=
;
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
(
)
;
=
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
IF
(
)
{
IF
(
)
(
,
)
;
(
,
,
(
)
,
(
)
)
;
(
,
,
(
)
,
(
)
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
=
;
=
;
}
}
VOID
(
)
{
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
WHILE
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
(
)
,
(
)
)
;
}
ELSE
{
(
,
,
,
,
(
)
,
(
)
,
,
,
)
;
}
=
;
}
}
IF
(
)
{
=
(
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
}
}
}
ELSE
{
;
=
(
)
;
IF
(
)
{
(
,
)
;
WHILE
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
(
)
,
(
)
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
=
;
}
}
(
,
)
;
}
}
VOID
(
)
{
;
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
IF
(
)
{
IF
(
)
{
(
,
)
;
IF
(
(
(
INT
)
)
(
(
INT
)
)
)
{
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
(
)
;
(
,
,
(
INT
)
,
(
INT
)
,
,
,
)
;
}
}
IF
(
(
)
(
(
)
)
)
{
=
;
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
}
IF
(
(
)
(
)
)
{
(
,
)
;
}
(
,
)
;
}
}
(
)
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
}
}
ELSE
{
IF
(
(
INT
)
)
{
(
(
INT
)
,
)
;
(
,
(
FLOAT
)
)
;
=
;
}
}
IF
(
)
{
IF
(
(
INT
)
)
{
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
}
=
(
INT
)
;
}
}
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
INT
,
,
,
;
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
)
,
(
(
)
)
,
)
;
(
(
(
)
)
,
(
)
,
)
;
}
}
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
{
IF
(
)
(
)
;
(
,
)
;
(
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
)
,
(
)
(
(
)
)
,
)
;
(
(
)
(
(
)
)
,
(
)
,
)
;
}
}
(
)
;
(
,
)
;
IF
(
)
(
)
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
;
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
(
)
)
,
(
)
,
)
;
}
}
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
}
ELSE
{
IF
(
)
(
)
;
(
,
)
;
(
)
;
FOR
(
=
;
(
)
;
)
{
FOR
(
=
;
;
)
{
(
(
)
(
(
)
)
,
(
)
,
)
;
}
}
(
)
;
(
,
)
;
IF
(
)
(
)
;
}
}
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
(
INT
)
{
=
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
)
{
;
INT
,
;
STATIC
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
}
(
,
)
;
IF
(
)
{
=
(
)
;
IF
(
(
,
)
)
{
IF
(
)
{
IF
(
(
)
(
)
)
{
IF
(
(
)
)
{
(
,
)
;
=
;
=
;
}
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
{
(
,
)
;
=
;
}
=
;
}
}
IF
(
)
(
)
;
=
;
(
,
)
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
=
;
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
(
,
)
;
=
;
=
;
=
;
(
,
)
;
=
;
}
(
)
;
(
)
;
}
ELSE
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
}
(
)
;
(
)
;
}
ELSE
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
}
}
VOID
(
)
{
IF
(
(
)
)
{
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
}
}
}
(
,
,
,
)
;
(
,
,
,
)
{
=
;
INT
,
,
,
,
,
;
;
;
STATIC
INT
;
SWITCH
(
)
{
CASE
BREAK
;
CASE
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
(
,
)
;
=
;
}
(
(
INT
)
,
)
;
BREAK
;
CASE
CASE
IF
(
)
{
BREAK
;
}
DEFAULT
IF
(
)
{
(
)
;
(
)
;
}
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
}
}
BREAK
;
CASE
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
BREAK
;
CASE
=
;
IF
(
(
)
)
{
IF
(
)
=
;
}
BREAK
;
CASE
BREAK
;
CASE
=
(
)
;
=
(
)
(
)
;
(
(
)
,
)
;
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
(
)
;
}
BREAK
;
CASE
=
(
,
)
;
IF
(
)
(
)
;
(
,
)
;
BREAK
;
CASE
CASE
IF
(
)
(
(
)
,
)
;
BREAK
;
CASE
CASE
IF
(
)
(
(
)
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
IF
(
)
{
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
(
SHORT
)
(
)
)
{
(
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
}
BREAK
;
CASE
IF
(
(
)
)
BREAK
;
CASE
=
(
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
(
,
)
;
=
;
IF
(
(
,
)
)
{
(
)
;
(
,
,
)
;
=
;
}
BREAK
;
CASE
IF
(
(
)
)
{
=
;
(
,
)
;
=
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
(
,
,
,
)
)
{
(
)
;
}
}
BREAK
;
CASE
=
(
,
,
,
)
;
BREAK
;
DEFAULT
=
(
,
,
,
)
;
BREAK
;
}
RETURN
;
}
EXTERN
VOID
(
VOID
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
CHAR
)
;
EXTERN
VOID
(
INT
,
INT
,
INT
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
EXTERN
VOID
(
INT
,
INT
,
)
;
STATIC
INT
,
;
TYPEDEF
STRUCT
{
INT
;
CHAR
;
INT
;
INT
;
INT
;
}
;
(
)
(
)
STATIC
;
VOID
(
VOID
)
{
;
CHAR
;
INT
,
,
,
,
,
,
,
;
CHAR
;
;
;
=
(
)
;
(
(
)
,
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
}
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
IF
(
(
(
)
(
)
)
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
;
=
;
BREAK
;
}
}
IF
(
(
)
)
{
IF
(
(
)
)
{
IF
(
)
{
=
;
}
ELSE
{
=
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
;
}
}
}
}
FOR
(
=
;
(
)
;
)
{
FOR
(
=
(
)
;
;
)
{
IF
(
)
{
=
;
=
;
=
;
}
}
}
(
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
}
IF
(
)
{
(
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
;
IF
(
(
(
)
)
(
)
)
{
=
;
;
}
}
}
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
=
(
(
INT
)
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
(
,
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
;
(
,
,
(
(
INT
)
(
)
)
)
;
}
}
VOID
(
INT
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
=
(
(
)
)
(
(
)
)
;
IF
(
)
=
;
BREAK
;
CASE
(
)
;
=
(
(
)
)
(
(
)
)
;
IF
(
)
=
(
)
;
BREAK
;
CASE
(
)
;
;
IF
(
)
{
(
(
(
)
)
)
;
WHILE
(
)
;
}
BREAK
;
CASE
(
)
;
;
IF
(
)
{
(
(
(
)
)
)
;
WHILE
(
)
;
}
BREAK
;
CASE
(
)
;
(
,
)
;
BREAK
;
CASE
CASE
(
)
;
=
;
=
;
IF
(
(
,
)
)
{
=
;
}
BREAK
;
CASE
CASE
(
)
;
=
;
(
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
__E__O__F__
=
{
,
,
}
;
=
{
,
,
}
;
FLOAT
;
;
INT
=
;
INT
;
INT
;
FLOAT
,
;
FLOAT
,
;
INT
;
INT
;
INT
;
INT
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
;
UNSIGNED
SHORT
;
INT
=
;
INT
=
;
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
;
STATIC
=
;
INT
(
)
;
INT
(
)
;
INT
;
STATIC
=
{
,
}
;
STATIC
;
STATIC
INT
=
;
STATIC
;
STATIC
LONG
;
STATIC
LONG
;
INT
;
VOID
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
INT
)
;
VOID
(
INT
)
;
TYPEDEF
UNSIGNED
SHORT
;
TYPEDEF
UNSIGNED
LONG
;
STATIC
;
STATIC
;
STATIC
INT
=
;
STATIC
LONG
,
,
;
STATIC
UNSIGNED
LONG
,
,
;
VOID
(
)
{
UNSIGNED
INT
;
=
;
=
;
=
;
FOR
(
=
,
=
;
;
=
)
;
FOR
(
=
,
=
;
;
=
)
;
FOR
(
=
,
=
;
;
=
)
;
=
;
}
(
INT
,
INT
,
INT
)
{
;
IF
(
)
(
)
;
=
;
IF
(
)
{
=
(
(
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
RETURN
;
}
(
INT
,
INT
,
INT
)
{
;
IF
(
)
(
)
;
=
;
IF
(
)
{
=
(
(
)
)
;
}
ELSE
IF
(
)
{
=
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
IF
(
)
{
(
(
)
)
;
}
ELSE
IF
(
)
{
(
(
)
)
;
}
ELSE
(
)
;
RETURN
;
}
VOID
(
,
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
CHAR
;
;
REGISTER
INT
,
;
IF
(
(
)
(
)
)
RETURN
;
FOR
(
=
;
(
)
;
)
{
=
;
=
;
=
(
)
;
=
(
(
)
)
;
;
SWITCH
(
)
{
CASE
DO
{
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
}
WHILE
(
)
;
}
}
}
VOID
(
,
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
UNSIGNED
CHAR
;
;
REGISTER
INT
,
;
IF
(
(
)
(
)
)
RETURN
;
FOR
(
=
;
(
)
;
)
{
=
;
=
;
=
(
)
;
=
(
(
)
)
;
;
SWITCH
(
)
{
CASE
DO
{
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
CASE
switch block nest=2, cur block nest=4
=
;
}
WHILE
(
)
;
}
}
}
VOID
(
INT
)
{
(
)
;
(
)
;
(
,
)
;
}
STATIC
(
,
)
{
;
;
;
;
;
=
(
,
,
,
,
)
;
=
;
=
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
(
)
;
=
(
)
;
=
(
,
)
;
;
=
(
,
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
(
,
)
;
=
;
IF
(
)
=
;
=
(
(
)
)
;
=
(
,
,
,
,
,
(
)
,
,
,
,
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
=
(
)
;
INT
;
IF
(
)
{
(
)
;
(
)
;
=
;
}
=
(
)
;
=
(
)
;
=
(
,
)
;
;
=
(
,
)
;
IF
(
)
(
)
;
=
(
)
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
}
=
(
,
,
,
,
,
,
,
)
;
=
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
(
)
,
,
)
;
IF
(
)
(
)
;
=
(
VOID
)
(
,
,
)
;
(
,
,
(
LONG
)
)
;
=
;
IF
(
(
,
)
)
(
)
;
(
,
)
;
(
,
,
)
;
}
}
VOID
(
UNSIGNED
CHAR
)
{
INT
,
;
;
INT
;
INT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
(
INT
)
)
)
;
(
(
)
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
(
)
)
;
ELSE
(
)
;
}
{
STRUCT
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
}
(
)
;
(
,
)
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
=
;
IF
(
(
=
(
)
)
)
{
IF
(
)
(
)
;
=
(
)
;
=
;
}
ELSE
{
INT
;
=
(
)
;
=
(
(
,
)
)
;
=
;
}
=
(
,
,
,
)
;
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
(
,
(
INT
)
(
)
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
IF
(
)
{
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
(
INT
)
(
)
)
;
(
,
)
;
(
,
)
;
}
=
;
{
INT
=
;
;
;
=
(
,
(
,
)
,
,
)
;
=
;
=
;
=
;
=
(
,
(
,
)
,
,
,
,
,
,
,
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
)
;
}
IF
(
)
{
IF
(
)
{
=
(
,
,
,
)
;
(
)
;
(
,
,
)
;
}
}
(
,
,
(
,
)
)
;
{
;
INT
=
;
=
;
=
(
,
,
,
)
;
}
(
,
)
;
{
;
DO
{
(
,
)
;
IF
(
)
=
;
}
WHILE
(
)
;
}
IF
(
(
)
)
{
CHAR
;
=
;
=
(
CHAR
)
(
)
;
IF
(
)
{
CHAR
=
;
WHILE
(
(
)
)
;
IF
(
)
=
;
IF
(
(
(
,
)
)
)
=
;
}
}
IF
(
)
{
=
(
)
;
(
)
;
}
ELSE
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
FLOAT
)
(
FLOAT
)
)
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
(
)
;
}
VOID
(
UNSIGNED
CHAR
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
(
,
,
)
;
=
(
,
,
)
;
}
IF
(
)
{
IF
(
)
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
}
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
INT
(
)
{
INT
;
CHAR
;
;
=
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
(
UNSIGNED
CHAR
)
;
IF
(
)
=
;
BREAK
;
}
RETURN
;
}
STRUCT
{
INT
;
INT
;
}
;
INT
=
;
INT
=
;
INT
=
;
INT
;
INT
;
VOID
(
VOID
)
{
;
INT
;
(
,
)
;
SWITCH
(
)
{
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
=
;
=
(
)
;
BREAK
;
CASE
IF
(
)
{
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
=
(
FLOAT
)
(
(
INT
)
(
INT
)
(
)
)
;
(
,
,
)
;
(
,
,
,
,
,
,
,
(
)
,
(
)
)
;
(
,
,
)
;
}
ELSE
{
=
(
FLOAT
)
(
)
;
=
(
FLOAT
)
(
)
;
=
;
=
;
}
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
;
BREAK
;
CASE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
DEFAULT
IF
(
)
=
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
)
;
}
}
}
VOID
(
)
{
;
IF
(
)
{
(
,
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
EXTERN
INT
;
=
;
}
IF
(
)
{
WHILE
(
)
{
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
IF
(
(
,
,
,
,
,
,
,
,
,
,
)
)
(
)
;
=
;
WHILE
(
)
(
)
;
=
;
}
=
;
=
;
=
;
(
,
)
;
}
ELSE
{
WHILE
(
)
{
IF
(
)
(
,
,
,
,
)
;
ELSE
IF
(
)
(
,
,
,
,
)
;
(
,
,
,
,
,
,
,
,
,
)
;
=
;
}
(
,
)
;
}
}
STATIC
INT
;
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
INT
)
{
}
VOID
(
VOID
)
{
IF
(
)
{
WHILE
(
(
)
)
(
)
;
WHILE
(
)
{
(
,
)
;
=
(
)
;
}
}
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
INT
;
;
INT
;
STRUCT
;
=
;
=
;
(
)
;
(
,
)
;
=
(
,
,
,
,
)
;
IF
(
)
{
=
(
,
,
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
}
RETURN
;
}
VOID
(
INT
,
INT
,
,
INT
,
INT
)
{
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
(
)
)
RETURN
;
=
=
;
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
IF
(
(
(
)
)
(
(
)
)
)
(
,
)
;
}
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
;
;
IF
(
(
)
(
(
)
)
)
;
ELSE
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
{
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
(
)
)
;
ELSE
;
}
=
=
;
}
__E__O__F__
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
=
{
,
,
}
;
FLOAT
,
,
;
EXTERN
INT
,
,
;
,
,
;
FLOAT
(
,
)
{
FLOAT
;
FLOAT
;
FLOAT
;
(
,
,
,
)
;
=
(
,
)
;
=
;
=
(
)
;
=
;
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
FLOAT
(
VOID
)
{
FLOAT
;
FLOAT
;
=
(
INT
)
(
)
;
;
IF
(
)
=
;
ELSE
=
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
RETURN
;
}
=
{
,
,
}
;
=
{
,
}
;
VOID
(
VOID
)
{
IF
(
)
{
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
FLOAT
,
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
;
IF
(
)
{
(
)
;
}
RETURN
;
}
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
;
}
ELSE
IF
(
)
{
IF
(
)
{
=
;
=
;
}
;
}
}
=
{
{
,
,
}
,
}
;
=
{
{
,
,
}
,
}
;
=
{
{
,
,
}
,
}
;
=
{
{
,
,
}
,
}
;
=
{
,
,
}
;
;
;
FLOAT
;
VOID
(
FLOAT
)
{
INT
,
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
RETURN
;
}
FOR
(
=
;
;
)
{
=
(
(
)
,
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
(
VOID
)
{
STATIC
FLOAT
;
IF
(
)
RETURN
;
=
;
(
)
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
;
INT
;
,
,
;
;
FLOAT
;
FLOAT
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
;
IF
(
)
=
;
=
;
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
=
;
(
,
,
)
;
(
)
;
(
,
,
,
)
;
=
(
,
)
;
=
;
=
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
(
)
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
=
;
}
VOID
(
VOID
)
{
FLOAT
,
,
,
,
;
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
(
)
)
;
IF
(
)
CONTINUE
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
}
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
}
VOID
(
VOID
)
{
INT
,
;
;
,
;
;
FLOAT
,
,
,
;
INT
,
,
;
;
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
}
}
;
IF
(
)
=
;
;
IF
(
)
=
;
=
(
)
;
IF
(
)
RETURN
;
(
)
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
}
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
=
;
=
;
=
;
;
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
,
;
;
INT
,
,
;
;
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
FOR
(
=
;
;
)
IF
(
)
{
=
;
=
;
}
}
;
IF
(
)
=
;
;
IF
(
)
=
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
FOR
(
=
;
;
)
{
(
(
)
)
;
(
(
)
)
;
(
(
)
)
;
}
=
;
=
;
=
;
;
}
(
)
;
}
FLOAT
(
FLOAT
)
{
=
(
)
;
IF
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
FLOAT
,
,
;
STATIC
FLOAT
=
;
STATIC
FLOAT
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
=
;
=
;
=
;
=
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
=
(
,
)
;
;
IF
(
)
{
;
;
;
}
IF
(
)
{
=
;
RETURN
;
}
}
VOID
(
VOID
)
{
,
;
FLOAT
;
=
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
(
)
;
=
;
}
VOID
(
VOID
)
{
,
;
INT
;
,
,
;
;
FLOAT
;
STATIC
FLOAT
=
;
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
(
,
)
;
;
;
;
;
(
,
)
;
(
)
;
(
)
;
=
;
=
;
=
;
(
,
,
,
)
;
FOR
(
=
;
;
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
;
FOR
(
=
;
;
)
{
;
}
;
IF
(
(
,
)
)
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
=
;
=
;
=
;
(
,
,
)
;
IF
(
)
{
FLOAT
;
=
;
IF
(
)
=
;
;
IF
(
)
=
;
IF
(
)
=
;
;
;
}
ELSE
=
;
IF
(
)
(
)
;
}
EXTERN
;
VOID
(
VOID
)
{
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
(
)
;
}
ELSE
{
IF
(
)
(
)
;
}
(
)
;
IF
(
)
{
INT
;
;
;
;
FOR
(
=
;
;
)
;
(
)
;
;
(
)
;
;
FOR
(
=
;
;
)
;
(
)
;
;
;
;
;
}
ELSE
{
(
)
;
}
IF
(
)
(
,
,
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
VOID
(
INT
,
INT
)
{
(
,
,
)
;
(
)
;
}
VOID
(
INT
)
{
INT
,
,
,
;
FOR
(
;
;
)
{
SWITCH
(
)
{
CASE
RETURN
;
CASE
=
;
(
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
(
)
;
;
;
(
,
)
;
BREAK
;
CASE
=
;
(
,
)
;
(
,
)
;
;
BREAK
;
DEFAULT
(
)
;
}
}
}
__E__O__F__
INT
;
;
;
VOID
(
)
;
VOID
(
CHAR
,
CHAR
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
(
)
;
=
;
}
FOR
(
;
;
)
=
;
}
VOID
(
CHAR
)
{
;
;
UNSIGNED
;
INT
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
(
)
;
FOR
(
=
,
=
;
;
,
)
{
=
(
)
;
=
(
)
;
(
,
)
;
IF
(
)
(
(
)
(
)
)
;
}
}
(
CHAR
)
{
INT
;
;
CHAR
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
(
,
)
)
RETURN
;
}
(
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
;
=
(
)
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
INT
)
{
;
IF
(
)
(
,
)
;
=
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
)
{
=
(
)
;
=
(
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
,
;
FLOAT
,
;
,
;
FLOAT
,
;
;
INT
;
;
}
;
INT
(
,
INT
,
)
;
STATIC
;
STATIC
;
STATIC
;
VOID
(
VOID
)
{
INT
;
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
}
}
(
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
(
,
,
,
)
{
;
;
,
;
;
IF
(
)
{
IF
(
)
(
)
;
=
(
INT
)
;
IF
(
)
(
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
=
(
,
)
;
(
,
)
;
}
RETURN
;
}
TYPEDEF
STRUCT
{
INT
;
FLOAT
;
STRUCT
;
;
;
}
;
STATIC
;
STATIC
INT
;
(
INT
,
,
)
{
;
;
,
,
,
;
=
;
;
(
)
;
(
)
;
IF
(
)
{
=
;
=
=
;
RETURN
;
}
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
=
;
=
(
,
,
)
;
=
(
,
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
(
)
)
;
=
;
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
=
=
;
}
VOID
(
,
)
{
,
;
;
INT
,
;
FOR
(
=
;
;
=
)
{
=
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
(
)
;
=
;
=
;
}
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
,
)
{
;
;
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
;
RETURN
;
}
=
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
,
)
{
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
FLOAT
,
;
INT
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
}
FOR
(
=
;
;
)
{
=
;
=
;
}
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
IF
(
(
INT
)
)
{
;
;
;
;
}
ELSE
{
;
;
;
;
;
;
}
=
;
IF
(
)
(
,
)
;
IF
(
)
RETURN
;
=
;
WHILE
(
)
{
IF
(
)
BREAK
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
BREAK
;
}
IF
(
)
(
,
)
;
ELSE
(
,
)
;
IF
(
)
(
,
)
;
}
INT
(
,
INT
,
)
{
FLOAT
;
;
;
WHILE
(
)
{
IF
(
)
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
(
,
)
;
IF
(
)
=
;
ELSE
=
;
}
RETURN
;
}
INT
(
)
{
INT
;
=
(
,
,
)
;
IF
(
)
=
;
RETURN
;
}
INT
(
)
{
RETURN
(
,
,
)
;
}
(
)
{
;
=
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
(
)
(
,
INT
,
FLOAT
,
FLOAT
,
,
,
)
{
;
;
FLOAT
,
;
FLOAT
;
INT
;
;
INT
;
FLOAT
;
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
RETURN
;
}
IF
(
)
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
,
)
;
=
(
,
)
;
}
IF
(
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
(
)
(
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
=
(
)
(
)
;
ELSE
=
(
)
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
IF
(
(
,
,
,
,
,
,
)
)
RETURN
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
IF
(
(
,
,
)
)
RETURN
(
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
{
(
,
,
)
;
=
;
}
WHILE
(
(
,
,
)
)
{
;
IF
(
)
{
=
;
(
,
)
;
(
)
;
RETURN
;
}
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
=
;
(
,
)
;
RETURN
;
}
(
,
,
,
,
)
{
;
;
,
;
;
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
=
(
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
(
)
)
{
;
,
,
;
;
(
,
,
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
(
,
,
,
,
,
,
)
;
IF
(
(
)
)
{
;
,
,
;
;
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
}
IF
(
)
(
,
,
)
;
IF
(
)
=
;
RETURN
;
}
VOID
(
,
)
{
,
;
;
;
FOR
(
=
;
;
=
)
{
=
;
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
}
IF
(
(
INT
)
)
=
(
,
,
,
,
)
;
ELSE
=
(
,
,
,
,
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
;
}
ELSE
IF
(
)
=
;
}
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
VOID
(
,
,
,
,
,
)
{
=
=
=
;
=
=
=
;
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
}
(
,
,
,
,
INT
,
)
{
;
INT
;
(
,
,
(
)
)
;
=
(
,
,
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
}
}
ELSE
{
(
,
)
;
(
,
)
;
}
(
,
,
,
,
,
)
;
(
,
)
;
RETURN
;
}
__E__O__F__
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
STRUCT
,
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
;
;
}
;
VOID
(
INT
)
;
VOID
(
INT
)
;
;
VOID
(
,
INT
)
;
VOID
(
,
INT
)
{
;
=
=
=
(
)
(
(
)
(
)
)
;
=
;
=
;
=
;
=
;
=
=
;
=
;
=
;
=
(
)
;
}
VOID
(
VOID
)
{
,
;
IF
(
)
(
)
;
=
(
)
(
(
)
(
)
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
IF
(
)
{
;
=
;
=
;
IF
(
)
=
;
=
;
}
=
;
IF
(
)
{
;
=
;
=
;
IF
(
)
=
;
}
}
VOID
(
INT
)
{
VOID
;
(
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
INT
,
INT
)
{
INT
;
,
,
,
;
IF
(
)
(
)
;
(
)
;
;
=
(
)
;
=
=
;
=
;
DO
{
IF
(
)
RETURN
;
IF
(
)
=
=
;
ELSE
=
;
}
WHILE
(
)
;
=
;
IF
(
)
{
=
(
)
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
=
;
=
;
(
INT
)
(
(
)
)
=
;
RETURN
(
VOID
)
(
(
)
(
)
)
;
}
VOID
(
)
{
;
(
,
,
)
;
FOR
(
=
;
;
=
)
{
(
,
,
,
)
;
IF
(
)
BREAK
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
BREAK
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
TYPEDEF
STRUCT
{
INT
;
INT
;
CHAR
;
}
;
;
INT
;
INT
;
INT
;
;
INT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
;
FOR
(
=
(
)
;
(
)
;
)
{
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
(
(
)
)
;
}
}
VOID
(
)
{
,
,
,
,
;
INT
,
;
INT
;
CHAR
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
(
,
)
;
(
)
;
WHILE
(
)
{
IF
(
)
{
(
)
;
(
,
)
;
(
)
;
=
;
}
IF
(
)
BREAK
;
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
(
(
)
)
;
;
;
;
(
,
,
)
;
IF
(
)
(
,
,
,
)
;
IF
(
(
,
,
)
)
{
IF
(
)
(
,
,
)
;
=
;
=
;
}
=
;
}
(
)
;
(
,
)
;
}
VOID
(
INT
,
CHAR
)
{
;
(
)
;
IF
(
)
(
,
)
;
=
(
)
(
(
)
)
;
IF
(
)
(
,
)
;
=
(
)
(
)
;
;
(
)
;
(
,
,
)
;
=
;
=
;
(
,
,
)
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
INT
)
{
RETURN
(
,
)
;
}
INT
(
VOID
)
{
RETURN
;
}
VOID
(
INT
)
{
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
}
INT
(
VOID
)
{
IF
(
)
{
=
;
(
)
;
}
RETURN
;
}
VOID
(
INT
)
{
IF
(
)
{
=
;
(
)
;
}
IF
(
)
(
,
)
;
(
,
,
)
;
=
;
}
VOID
(
INT
,
CHAR
)
{
;
IF
(
)
(
,
)
;
IF
(
)
{
(
)
;
=
;
}
(
)
;
=
(
)
(
(
)
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
;
(
)
;
=
(
)
(
)
;
(
,
,
)
;
=
;
=
;
(
,
,
)
;
RETURN
(
VOID
)
(
)
;
}
VOID
(
INT
)
{
VOID
;
=
(
)
;
IF
(
)
{
(
)
;
=
;
}
=
(
)
;
=
(
,
)
;
=
;
RETURN
;
}
TYPEDEF
STRUCT
{
INT
;
;
CHAR
;
STRUCT
,
;
STRUCT
,
;
}
;
(
INT
,
)
;
;
VOID
(
)
{
;
=
(
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
=
;
(
,
,
(
)
)
;
(
)
;
=
(
VOID
)
(
)
;
}
ELSE
{
(
)
;
}
}
VOID
(
INT
)
{
;
WHILE
(
)
{
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
)
;
}
}
VOID
(
INT
)
{
,
;
=
;
WHILE
(
)
{
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
)
(
)
;
ELSE
{
(
)
;
=
;
}
}
}
VOID
(
)
{
IF
(
)
(
)
;
=
;
=
;
=
=
;
}
VOID
(
)
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
}
(
INT
,
)
{
,
;
IF
(
)
{
IF
(
)
(
,
)
;
=
(
)
(
)
;
(
,
,
(
)
)
;
=
;
=
=
;
=
=
;
(
)
;
RETURN
;
}
=
(
)
(
)
;
=
;
DO
{
IF
(
)
{
IF
(
(
)
(
)
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
}
=
(
)
(
(
)
)
;
=
;
}
WHILE
(
)
;
IF
(
(
)
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
WHILE
(
)
(
)
;
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
(
,
,
)
;
}
}
VOID
(
VOID
)
{
(
,
(
)
(
FLOAT
)
(
)
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
=
=
;
=
=
;
(
,
)
;
}
VOID
(
)
{
;
IF
(
)
(
)
;
=
(
(
)
)
;
=
;
=
;
=
=
;
=
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
=
(
(
)
)
;
(
)
;
(
)
;
RETURN
;
}
VOID
(
,
INT
,
CHAR
)
{
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
=
(
(
)
)
;
WHILE
(
)
{
=
(
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
=
(
VOID
)
(
)
;
=
;
BREAK
;
}
IF
(
)
(
)
;
(
)
;
}
RETURN
(
)
;
}
VOID
(
VOID
,
INT
)
{
INT
;
INT
=
;
=
;
=
;
=
;
=
;
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
(
)
;
ELSE
(
)
;
}
=
(
,
)
;
(
,
)
;
}
__E__O__F__
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
INT
;
(
)
;
FOR
(
=
;
;
)
(
)
;
(
,
)
;
}
INT
(
VOID
)
{
VOLATILE
UNSIGNED
SHORT
;
WHILE
(
(
)
)
(
)
;
(
)
;
(
)
;
WHILE
(
)
{
=
(
)
;
IF
(
)
{
=
;
BREAK
;
}
ELSE
IF
(
)
{
=
;
BREAK
;
}
ELSE
IF
(
(
)
(
)
)
{
=
;
BREAK
;
}
ELSE
{
=
(
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
BREAK
;
}
}
(
)
;
WHILE
(
(
)
)
(
)
;
RETURN
(
)
;
}
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
}
;
=
{
,
,
,
}
;
VOID
(
VOID
)
{
SHORT
;
SHORT
;
;
INT
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
GOTO
;
CASE
=
;
GOTO
;
CASE
SWITCH
(
)
{
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
}
BREAK
;
}
(
,
)
;
BREAK
;
}
}
(
)
;
RETURN
;
}
ENUM
{
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
VOID
)
{
INT
=
;
INT
;
INT
;
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
WHILE
(
)
{
=
(
)
;
=
;
IF
(
(
)
)
{
=
;
BREAK
;
}
IF
(
(
)
)
{
=
;
BREAK
;
}
IF
(
(
)
)
{
=
;
BREAK
;
}
IF
(
(
)
)
{
=
;
BREAK
;
}
IF
(
(
)
)
{
=
(
)
;
IF
(
)
BREAK
;
(
)
;
}
}
(
)
;
WHILE
(
(
)
)
(
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
SHORT
;
SHORT
;
INT
;
;
CHAR
=
{
,
,
,
}
;
INT
;
INT
;
INT
;
INT
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
GOTO
;
CASE
=
;
GOTO
;
CASE
SWITCH
(
)
{
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
}
BREAK
;
}
(
,
)
;
BREAK
;
}
}
(
)
;
RETURN
;
}
ENUM
{
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
VOID
)
{
INT
=
;
UNION
;
(
)
;
(
)
;
WHILE
(
)
{
=
;
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
BREAK
;
IF
(
(
(
)
)
)
BREAK
;
}
(
)
;
WHILE
(
(
)
)
(
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
SHORT
;
SHORT
;
INT
;
;
CHAR
=
{
,
,
}
;
INT
;
INT
;
INT
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
GOTO
;
CASE
=
;
GOTO
;
CASE
SWITCH
(
)
{
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
}
BREAK
;
CASE
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
=
;
(
)
;
}
}
BREAK
;
}
(
,
)
;
BREAK
;
}
}
(
)
;
RETURN
;
}
ENUM
{
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
VOID
(
VOID
)
{
SHORT
;
SHORT
;
(
)
;
(
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
SWITCH
(
)
{
DEFAULT
CASE
(
)
;
GOTO
;
CASE
IF
(
)
{
(
)
;
BREAK
;
}
(
)
;
GOTO
;
CASE
(
)
;
GOTO
;
}
}
(
)
;
RETURN
;
}
__E__O__F__
ENUM
{
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
(
)
;
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
GOTO
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
(
)
;
RETURN
(
)
;
}
__E__O__F__
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
=
;
WHILE
(
)
{
(
)
;
(
)
;
}
}
__E__O__F__
INT
(
,
CHAR
,
INT
)
{
CHAR
;
INT
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
WHILE
(
)
{
=
(
)
;
SWITCH
(
)
{
CASE
CASE
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
CONTINUE
;
}
=
;
(
)
;
(
)
;
(
,
)
;
CASE
(
)
;
(
)
;
(
)
;
BREAK
;
CASE
CASE
RETURN
;
DEFAULT
IF
(
)
{
(
)
;
(
)
;
(
)
;
CONTINUE
;
}
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
CONTINUE
;
}
=
;
=
;
(
)
;
(
,
)
;
BREAK
;
}
}
}
ENUM
{
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
VOID
(
VOID
)
{
SHORT
;
SHORT
;
INT
;
CHAR
;
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
)
;
(
)
;
(
,
)
;
}
(
,
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
(
,
)
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
CONTINUE
;
CASE
(
)
;
RETURN
;
}
}
}
;
__E__O__F__
INT
;
INT
;
EXTERN
;
EXTERN
;
EXTERN
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
INT
=
;
CHAR
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
(
INT
)
,
}
,
{
,
,
}
,
}
;
INT
;
CHAR
;
VOID
(
VOID
)
{
INT
;
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
IF
(
)
{
IF
(
)
=
;
IF
(
)
=
;
}
=
(
)
(
)
;
=
(
,
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
{
INT
=
;
(
,
,
,
)
;
}
ELSE
(
,
,
,
)
;
(
)
;
}
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
INT
(
VOID
)
{
INT
;
;
CHAR
;
CHAR
;
INT
;
CHAR
;
=
(
)
(
)
;
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
(
(
CHAR
)
,
)
;
ELSE
=
;
=
;
IF
(
(
)
)
{
(
)
;
=
;
=
;
}
ELSE
=
;
=
(
)
;
IF
(
)
=
;
=
(
,
)
;
IF
(
)
RETURN
(
)
;
WHILE
(
(
)
)
{
(
,
,
,
)
;
=
;
IF
(
(
,
,
)
)
(
,
,
)
;
ELSE
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
IF
(
(
,
,
)
)
(
(
CHAR
)
,
)
;
ELSE
=
;
BREAK
;
}
}
(
)
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
RETURN
(
)
;
}
__E__O__F__
INT
;
CHAR
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
}
;
;
;
;
;
;
;
;
;
;
VOID
;
=
;
=
;
INT
=
;
ENUM
{
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
VOID
(
)
{
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
WHILE
(
(
)
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
RETURN
;
{
,
,
,
,
,
,
,
,
,
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
ENUM
{
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
(
)
;
(
)
;
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
CASE
IF
(
)
(
)
;
(
)
;
RETURN
;
}
}
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
UNION
;
=
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
(
,
,
)
;
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
)
;
=
=
=
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
{
IF
(
(
,
,
)
)
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
IF
(
(
,
,
,
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
IF
(
)
(
)
;
=
;
}
(
)
;
=
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
SHORT
;
CHAR
;
CHAR
;
INT
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
IF
(
)
{
IF
(
(
)
)
CONTINUE
;
BREAK
;
}
IF
(
)
{
INT
;
INT
;
=
(
)
;
IF
(
)
CONTINUE
;
(
)
;
(
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
(
,
,
)
;
=
;
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
IF
(
(
,
)
)
{
=
;
(
,
)
;
}
ELSE
IF
(
(
,
)
)
{
=
;
(
,
)
;
}
ELSE
IF
(
(
,
)
)
{
=
;
(
,
)
;
}
ELSE
{
=
;
(
,
)
;
}
(
)
;
(
)
;
}
IF
(
)
CONTINUE
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
=
;
IF
(
)
=
;
IF
(
(
,
)
)
{
=
;
=
;
(
,
)
;
}
ELSE
IF
(
(
,
)
)
{
=
;
(
,
)
;
}
ELSE
IF
(
(
,
)
)
{
=
;
=
;
(
,
)
;
}
ELSE
{
=
;
=
;
(
,
)
;
}
(
)
;
(
)
;
GOTO
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
(
)
;
(
)
;
(
)
;
RETURN
;
}
__E__O__F__
;
;
INT
;
CHAR
;
CHAR
;
SHORT
;
VOID
(
INT
,
INT
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
,
INT
)
{
CHAR
;
=
(
,
(
)
)
;
=
;
IF
(
)
=
;
}
VOID
(
)
{
CHAR
;
INT
;
(
,
,
(
)
,
(
)
,
)
;
=
(
,
)
;
FOR
(
=
;
;
)
{
(
)
=
;
;
}
}
VOID
(
)
{
(
(
)
,
(
)
,
,
,
)
;
}
VOID
(
)
{
=
;
=
;
;
=
;
=
;
(
)
;
}
INT
(
VOID
)
{
CHAR
;
WHILE
(
)
{
=
(
)
;
SWITCH
(
)
{
CASE
IF
(
)
BREAK
;
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
;
;
}
(
)
;
(
,
)
;
BREAK
;
CASE
IF
(
)
BREAK
;
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
;
;
}
(
)
;
(
,
)
;
BREAK
;
CASE
IF
(
)
{
(
)
;
=
;
=
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
=
;
=
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
CASE
CASE
(
)
;
=
;
=
;
(
,
)
;
RETURN
;
CASE
(
)
;
=
;
=
;
(
,
)
;
RETURN
;
CASE
(
)
;
=
;
(
,
)
;
RETURN
;
}
}
}
__E__O__F__
;
INT
;
CHAR
;
INT
(
VOID
)
{
INT
;
INT
;
;
INT
;
INT
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
DO
{
=
(
,
,
)
;
IF
(
)
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
=
;
=
(
,
)
;
IF
(
)
=
;
;
}
WHILE
(
)
;
=
;
(
)
;
DO
{
INT
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
;
=
;
=
;
=
;
=
;
}
}
WHILE
(
)
;
RETURN
;
}
VOID
(
INT
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
IF
(
)
=
;
=
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
;
(
,
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
;
}
(
,
)
;
}
ENUM
{
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
IF
(
(
)
)
RETURN
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
;
=
=
;
DO
{
INT
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
=
;
(
,
,
,
)
;
=
(
)
;
SWITCH
(
)
{
CASE
(
)
;
(
)
;
{
INT
;
INT
;
INT
;
INT
;
CHAR
;
=
;
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
SWITCH
(
)
{
CASE
IF
(
)
{
;
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
(
,
,
,
)
;
(
)
;
}
CASE
=
;
BREAK
;
CASE
SWITCH
(
)
{
CASE
(
,
)
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
BREAK
;
}
BREAK
;
}
}
}
(
)
;
BREAK
;
CASE
=
;
FOR
(
=
;
(
)
;
)
IF
(
(
)
)
{
CHAR
;
=
;
=
;
(
,
)
;
}
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
IF
(
(
)
)
;
ELSE
IF
(
)
;
BREAK
;
CASE
IF
(
)
;
ELSE
IF
(
(
(
)
(
)
)
)
;
BREAK
;
CASE
;
IF
(
)
=
=
;
BREAK
;
CASE
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
BREAK
;
}
}
WHILE
(
)
;
(
)
;
RETURN
;
}
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
CHAR
;
INT
;
CHAR
;
INT
;
INT
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
CHAR
;
=
;
(
)
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
(
,
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
IF
(
(
)
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
;
}
ELSE
{
=
;
(
,
,
)
;
=
;
;
(
,
,
)
;
=
;
;
(
,
,
)
;
=
;
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
SWITCH
(
)
{
CASE
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
(
,
,
)
;
=
;
;
BREAK
;
}
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
SWITCH
(
)
{
CASE
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
(
,
,
)
;
=
;
;
BREAK
;
}
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
CASE
SWITCH
(
)
{
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
__E__O__F__
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
CHAR
;
INT
;
CHAR
;
INT
;
INT
;
INT
;
CHAR
;
CHAR
,
,
,
;
=
{
,
,
,
,
,
}
;
CHAR
;
=
;
(
)
;
(
)
;
=
;
(
,
,
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
(
,
)
;
(
,
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
IF
(
)
{
(
)
;
BREAK
;
}
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
(
,
,
)
;
=
;
;
SWITCH
(
)
{
CASE
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
(
,
,
)
;
=
;
;
BREAK
;
}
=
;
(
,
,
)
;
=
;
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
CASE
IF
(
(
)
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
(
)
;
(
,
)
;
}
BREAK
;
CASE
SWITCH
(
)
{
CASE
CASE
CASE
CASE
=
;
(
)
;
BREAK
;
CASE
CASE
=
;
(
)
;
BREAK
;
CASE
=
;
(
)
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
(
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
BREAK
;
}
=
;
(
)
;
BREAK
;
CASE
CASE
=
;
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
__E__O__F__
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
)
{
SHORT
;
SHORT
;
INT
=
;
(
)
;
(
)
;
SWITCH
(
)
{
DEFAULT
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
ENUM
{
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
)
{
SHORT
;
SHORT
;
INT
=
;
(
)
;
(
)
;
SWITCH
(
)
{
DEFAULT
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
ENUM
{
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
SWITCH
(
)
{
DEFAULT
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
=
;
(
)
;
(
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
=
;
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
=
;
GOTO
;
CASE
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
=
;
=
;
GOTO
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
INT
(
VOID
)
{
IF
(
(
)
)
RETURN
(
)
;
(
)
;
SWITCH
(
)
{
DEFAULT
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
IF
(
(
)
)
RETURN
(
)
;
=
;
BREAK
;
CASE
IF
(
(
)
)
RETURN
(
)
;
=
;
BREAK
;
CASE
CASE
=
;
IF
(
(
)
)
RETURN
(
)
;
=
;
BREAK
;
CASE
IF
(
(
)
)
RETURN
(
)
;
=
;
BREAK
;
}
RETURN
;
}
__E__O__F__
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
}
;
=
{
,
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
CHAR
;
INT
;
CHAR
;
INT
;
INT
;
CHAR
;
=
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
{
=
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
=
;
(
,
)
;
GOTO
;
}
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
;
}
ELSE
{
=
;
(
,
,
)
;
=
;
(
,
,
)
;
=
;
;
(
,
,
)
;
=
;
;
}
IF
(
)
{
=
;
(
,
,
)
;
=
;
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
=
;
BREAK
;
}
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
;
}
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
CASE
SWITCH
(
)
{
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
(
)
;
(
)
;
(
)
;
(
)
;
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
__E__O__F__
;
INT
;
VOID
(
INT
,
INT
,
INT
,
CHAR
)
{
INT
;
CHAR
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
;
;
}
}
INT
(
VOID
)
{
INT
;
INT
;
;
INT
;
INT
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
DO
{
=
(
,
,
)
;
IF
(
)
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
=
;
=
(
,
)
;
IF
(
)
=
;
;
}
WHILE
(
)
;
=
;
(
)
;
DO
{
INT
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
;
=
;
=
;
=
;
=
;
}
}
WHILE
(
)
;
RETURN
;
}
VOID
(
INT
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
IF
(
)
=
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
=
(
)
;
FOR
(
=
;
;
)
(
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
;
IF
(
(
)
)
RETURN
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
=
;
=
;
=
=
;
DO
{
INT
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
=
;
(
,
,
,
)
;
=
(
)
;
SWITCH
(
)
{
CASE
(
,
)
;
(
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
(
,
)
;
(
)
;
BREAK
;
}
(
,
,
,
,
,
)
;
(
)
;
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
BREAK
;
CASE
IF
(
)
;
ELSE
IF
(
(
(
)
(
)
)
)
;
BREAK
;
CASE
;
IF
(
)
=
=
;
BREAK
;
CASE
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
BREAK
;
}
}
WHILE
(
)
;
(
)
;
}
ENUM
{
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
VOID
(
VOID
)
{
SHORT
;
SHORT
;
(
)
;
(
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
CASE
IF
(
)
{
(
)
;
CONTINUE
;
}
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
(
)
;
RETURN
;
}
}
}
__E__O__F__
CHAR
;
INT
;
ENUM
{
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
CHAR
,
,
,
;
CHAR
;
=
;
(
)
;
(
)
;
=
;
(
,
,
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
=
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
;
(
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
IF
(
)
{
(
)
;
BREAK
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
=
;
BREAK
;
}
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
;
}
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
CASE
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
BREAK
;
}
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
(
)
;
(
)
;
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
ENUM
{
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
VOID
(
VOID
)
{
SHORT
;
SHORT
;
(
)
;
(
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
CASE
(
)
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
RETURN
;
}
}
}
__E__O__F__
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
CHAR
;
INT
;
CHAR
;
INT
;
INT
;
=
;
(
)
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
{
=
;
(
,
,
)
;
=
;
;
}
ELSE
{
=
;
(
,
,
)
;
=
;
(
,
,
)
;
=
;
;
(
,
,
)
;
=
;
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
,
)
;
=
;
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
(
,
,
)
;
=
;
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
CASE
CASE
SWITCH
(
)
{
CASE
CASE
CASE
=
;
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
=
;
BREAK
;
DEFAULT
BREAK
;
}
(
)
;
(
)
;
(
)
;
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
__E__O__F__
INT
(
VOID
)
{
CHAR
=
;
SHORT
;
SHORT
;
INT
=
;
CHAR
;
INT
;
CHAR
;
UNION
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
CHAR
,
,
,
;
=
;
=
;
IF
(
(
=
(
,
)
)
)
{
(
)
;
(
,
)
;
(
)
;
}
=
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
)
;
(
,
,
)
;
}
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
)
;
(
,
,
,
)
;
(
)
;
FOR
(
;
;
)
{
SWITCH
(
(
,
,
,
)
)
{
CASE
=
;
GOTO
;
CASE
IF
(
)
{
SHORT
;
IF
(
(
=
(
,
)
)
)
(
)
;
(
)
;
WHILE
(
(
)
)
;
(
)
;
(
)
;
BREAK
;
}
(
,
,
,
)
;
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
(
,
,
)
;
=
;
;
SWITCH
(
)
{
CASE
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
(
,
,
)
;
=
;
;
BREAK
;
}
=
;
(
,
,
)
;
=
;
;
FOR
(
=
;
;
)
=
;
=
;
=
;
(
,
,
)
;
(
,
)
;
(
)
;
(
)
;
CASE
CASE
SWITCH
(
)
{
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
=
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
=
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
INT
(
VOID
)
{
CHAR
=
;
SHORT
;
SHORT
;
INT
=
;
CHAR
;
INT
;
CHAR
;
UNION
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
CHAR
,
,
,
;
=
;
=
;
IF
(
(
=
(
,
)
)
)
{
(
)
;
(
,
)
;
(
)
;
}
=
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
)
;
(
,
,
)
;
}
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
=
;
(
)
;
FOR
(
;
;
)
{
SWITCH
(
(
,
,
,
)
)
{
CASE
=
;
GOTO
;
CASE
IF
(
)
{
SHORT
;
IF
(
(
=
(
,
)
)
)
(
)
;
(
)
;
WHILE
(
(
)
)
;
(
)
;
(
)
;
BREAK
;
}
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
(
,
,
)
;
=
;
;
=
;
(
,
,
)
;
=
;
;
FOR
(
=
;
;
)
=
;
=
;
=
;
(
,
,
)
;
(
,
)
;
(
)
;
(
)
;
CASE
CASE
SWITCH
(
)
{
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
=
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
=
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
__E__O__F__
INT
(
CHAR
,
CHAR
)
{
CHAR
;
INT
;
=
(
,
)
;
IF
(
)
RETURN
;
ELSE
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
RETURN
;
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
CHAR
=
(
)
;
IF
(
)
RETURN
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
RETURN
;
}
INT
(
INT
,
INT
,
INT
)
{
CHAR
=
(
)
;
INT
;
IF
(
)
RETURN
;
ELSE
{
(
,
,
,
,
,
,
)
;
RETURN
;
}
}
__E__O__F__
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
CHAR
;
INT
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
CHAR
,
,
,
;
=
;
(
)
;
(
)
;
=
;
(
,
,
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
=
;
(
)
;
=
;
(
)
;
(
,
)
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
IF
(
)
{
(
)
;
BREAK
;
}
=
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
=
;
=
;
(
,
,
)
;
=
;
;
IF
(
)
=
;
(
,
,
)
;
=
;
;
=
;
(
,
,
)
;
=
;
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
CASE
SWITCH
(
)
{
CASE
CASE
CASE
CASE
=
;
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
IF
(
)
{
(
,
)
;
BREAK
;
}
=
;
(
)
;
BREAK
;
CASE
CASE
=
;
(
)
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
__E__O__F__
CHAR
;
VOID
(
CHAR
)
{
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
}
VOID
(
)
{
INT
;
INT
;
;
CHAR
;
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
,
(
)
(
)
)
;
(
)
=
;
IF
(
)
=
;
ELSE
=
;
;
}
}
STATIC
INT
=
;
CHAR
;
VOID
(
VOID
)
{
(
,
,
(
)
,
(
)
,
)
;
;
IF
(
)
{
(
,
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
;
IF
(
)
(
)
;
(
(
)
,
(
)
,
,
,
)
;
}
VOID
(
)
{
CHAR
;
INT
;
IF
(
(
)
(
)
)
RETURN
;
FOR
(
=
;
;
)
{
=
(
,
(
)
)
;
(
)
=
;
(
)
=
;
}
=
(
,
(
)
(
)
)
;
FOR
(
=
;
;
)
{
(
)
=
;
;
}
}
VOID
(
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
;
CHAR
;
CHAR
;
CHAR
;
SHORT
;
INT
;
INT
;
=
=
;
=
;
=
;
=
;
(
)
;
=
(
CHAR
)
(
)
;
=
(
,
)
;
=
;
WHILE
(
)
{
=
;
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
BREAK
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
;
=
(
,
)
;
}
BREAK
;
CASE
=
;
=
;
=
(
)
(
)
;
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
;
=
(
,
)
;
}
}
BREAK
;
DEFAULT
IF
(
)
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
;
=
(
,
)
;
}
BREAK
;
}
}
}
CHAR
;
INT
;
VOID
(
INT
,
CHAR
)
{
=
;
=
;
(
)
;
(
)
;
}
__E__O__F__
ENUM
{
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
SWITCH
(
)
{
DEFAULT
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
(
)
;
(
)
;
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
=
;
=
;
GOTO
;
CASE
=
;
=
;
=
;
=
;
=
;
GOTO
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
ENUM
{
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
)
{
SHORT
;
SHORT
;
INT
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
DEFAULT
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
(
)
;
(
)
;
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
ENUM
{
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
)
{
SHORT
;
SHORT
;
INT
=
;
IF
(
)
(
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
DEFAULT
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
(
)
;
(
)
;
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
ENUM
{
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
INT
(
VOID
)
{
SHORT
;
SHORT
;
INT
=
;
(
)
;
(
)
;
SWITCH
(
)
{
DEFAULT
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
CASE
=
;
GOTO
;
DEFAULT
BREAK
;
}
BREAK
;
}
}
(
)
;
RETURN
(
)
;
}
INT
(
VOID
)
{
IF
(
(
)
)
RETURN
(
)
;
(
)
;
SWITCH
(
)
{
DEFAULT
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
(
)
;
=
;
BREAK
;
CASE
CASE
IF
(
(
)
)
RETURN
(
)
;
IF
(
(
)
)
RETURN
(
)
;
IF
(
(
)
)
RETURN
(
)
;
(
)
;
=
;
BREAK
;
CASE
=
;
IF
(
(
)
)
RETURN
(
)
;
=
;
BREAK
;
CASE
IF
(
(
)
)
RETURN
(
)
;
=
;
BREAK
;
}
RETURN
;
}
__E__O__F__
INT
;
INT
;
INT
;
ENUM
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
}
;
=
{
,
,
,
}
;
UNSIGNED
(
VOID
)
{
INT
;
INT
;
SHORT
;
SHORT
;
INT
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
WHILE
(
)
{
(
)
;
=
(
)
;
=
;
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
CASE
CASE
SWITCH
(
)
{
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
;
(
,
)
;
BREAK
;
CASE
;
(
,
)
;
BREAK
;
CASE
;
(
,
)
;
BREAK
;
}
IF
(
)
{
(
)
;
RETURN
(
(
)
)
;
RETURN
(
)
;
}
}
}
}
__E__O__F__
INT
;
INT
,
;
INT
,
;
INT
;
VOID
(
,
)
{
;
FOR
(
=
;
;
=
)
IF
(
)
(
)
;
}
(
,
,
,
)
{
INT
,
,
,
;
;
,
;
FLOAT
;
;
INT
;
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
;
=
;
=
;
=
;
IF
(
)
CONTINUE
;
=
(
)
;
;
;
;
=
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
{
=
;
BREAK
;
}
ELSE
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
=
;
}
=
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
BREAK
;
ELSE
IF
(
)
;
ELSE
;
}
IF
(
)
CONTINUE
;
IF
(
)
{
CONTINUE
;
}
IF
(
)
{
(
,
,
)
;
=
;
}
=
(
,
,
)
;
IF
(
)
RETURN
;
}
}
RETURN
;
}
VOID
(
INT
,
,
)
{
;
;
;
,
;
;
INT
,
;
LONG
,
,
;
;
;
=
;
(
,
)
;
IF
(
(
(
(
)
)
)
)
{
(
)
;
;
}
=
;
=
;
=
;
=
;
=
(
)
;
=
(
LONG
)
;
=
(
LONG
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
(
(
)
)
)
)
{
;
CONTINUE
;
}
IF
(
)
{
;
=
(
LONG
)
;
}
ELSE
{
;
=
(
LONG
)
;
}
=
;
FOR
(
=
;
;
)
{
=
(
(
LONG
)
)
;
IF
(
)
=
;
}
IF
(
)
{
;
CONTINUE
;
}
=
;
(
,
,
)
;
=
;
IF
(
(
,
)
)
CONTINUE
;
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
=
;
(
,
,
)
;
(
)
;
CONTINUE
;
}
=
(
,
,
)
;
IF
(
)
CONTINUE
;
=
(
)
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
;
IF
(
)
{
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
}
IF
(
)
{
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
}
IF
(
)
{
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
}
IF
(
)
{
=
(
,
,
,
)
;
IF
(
)
{
(
)
;
CONTINUE
;
}
}
=
;
=
;
;
(
,
,
)
;
(
)
;
(
)
;
}
(
)
;
}
VOID
(
)
{
;
IF
(
)
(
)
;
=
;
=
(
)
;
(
,
,
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
}
;
INT
,
;
VOID
(
,
INT
)
{
INT
;
;
;
IF
(
(
(
)
)
)
RETURN
;
(
(
)
)
;
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
,
;
FLOAT
;
;
FOR
(
=
,
=
;
;
,
)
{
=
(
)
;
(
,
,
)
;
=
;
(
,
,
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
BREAK
;
}
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
BREAK
;
}
IF
(
)
CONTINUE
;
=
;
;
}
=
;
(
,
)
;
=
;
}
}
__E__O__F__
VOID
(
,
,
)
{
INT
,
;
INT
;
INT
;
FLOAT
;
=
=
;
=
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
}
VOID
(
VOID
)
{
INT
,
,
,
;
,
;
;
;
,
;
FLOAT
,
;
INT
;
;
;
INT
;
FLOAT
;
FLOAT
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
(
)
)
)
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
(
)
)
;
=
(
)
(
)
;
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
CONTINUE
;
(
,
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
}
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
{
=
;
IF
(
)
=
;
}
=
;
}
}
}
__E__O__F__
INT
;
INT
;
;
;
INT
,
,
;
=
;
INT
;
;
,
,
;
INT
;
;
INT
;
INT
;
INT
=
;
INT
=
;
;
;
INT
=
;
VOID
(
)
{
,
,
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
,
,
)
;
=
;
}
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
,
,
)
;
=
;
}
RETURN
;
}
IF
(
)
{
(
,
,
)
;
=
;
}
}
VOID
(
,
)
{
,
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
}
(
INT
)
{
;
INT
;
IF
(
)
(
,
)
;
=
(
INT
)
(
(
)
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
)
{
IF
(
)
(
)
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
(
,
,
,
)
;
}
VOID
(
)
{
INT
;
;
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
(
INT
)
(
)
,
,
,
,
,
)
;
}
}
(
)
{
INT
;
;
=
(
INT
)
(
(
)
)
;
=
(
)
;
(
,
,
)
;
=
;
RETURN
;
}
(
,
,
)
{
;
INT
;
INT
;
;
INT
,
;
,
;
;
;
INT
;
=
=
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
=
;
}
;
}
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
,
)
;
;
CONTINUE
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
CONTINUE
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
(
)
;
}
(
,
)
;
;
}
IF
(
)
(
)
;
(
)
;
RETURN
;
}
(
VOID
)
{
INT
;
,
;
INT
;
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
=
;
=
;
}
}
IF
(
)
=
;
;
RETURN
;
}
(
)
VOID
(
INT
)
{
;
DO
{
=
(
)
;
IF
(
)
BREAK
;
(
)
;
IF
(
)
(
,
(
INT
)
(
)
,
,
)
;
}
WHILE
(
)
;
RETURN
;
}
INT
(
,
)
{
INT
;
INT
;
INT
;
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
FOR
(
;
;
)
IF
(
)
BREAK
;
ELSE
;
=
;
;
}
RETURN
;
}
INT
;
VOID
(
INT
)
{
;
;
;
INT
,
;
INT
;
;
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
;
}
IF
(
(
(
)
)
)
(
)
;
(
(
)
)
;
=
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
)
;
IF
(
)
(
,
,
)
;
;
=
(
)
;
(
,
,
)
;
=
(
,
)
;
=
;
;
IF
(
)
(
)
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
;
}
RETURN
;
}
=
;
{
;
;
;
;
INT
;
=
(
(
)
)
;
IF
(
(
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
,
,
(
)
)
)
(
)
;
}
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
(
)
;
}
IF
(
(
)
)
(
)
;
}
(
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
(
)
;
(
)
;
FOR
(
=
;
;
)
(
)
;
(
,
)
;
}
INT
;
(
,
)
{
INT
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
)
)
RETURN
;
RETURN
;
}
(
,
)
{
INT
,
,
,
;
;
,
;
FLOAT
;
DOUBLE
;
INT
;
;
,
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
;
=
;
=
;
=
;
IF
(
)
CONTINUE
;
=
(
)
;
;
;
;
=
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
{
=
;
BREAK
;
}
ELSE
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
=
;
}
=
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
BREAK
;
ELSE
IF
(
)
;
ELSE
;
}
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
;
=
(
(
)
)
;
=
;
=
;
=
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
,
;
INT
,
;
;
,
;
;
;
(
)
;
=
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
;
=
;
IF
(
(
,
)
)
CONTINUE
;
;
=
(
,
)
;
IF
(
)
{
;
=
(
(
)
)
;
=
;
=
;
}
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
}
}
}
(
,
,
)
;
(
,
)
;
}
VOID
(
CHAR
)
{
INT
,
;
;
;
CHAR
;
;
INT
;
;
INT
;
;
IF
(
(
,
)
)
=
;
ELSE
{
=
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
}
}
IF
(
(
,
,
,
,
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
(
,
)
;
(
,
)
;
=
(
(
)
)
;
=
(
LONG
)
;
=
(
(
)
)
;
(
,
,
(
)
)
;
=
(
(
)
)
;
(
,
,
(
)
)
;
=
(
(
)
)
;
=
=
;
=
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
,
,
,
,
)
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
(
UNSIGNED
)
(
UNSIGNED
)
)
(
,
)
;
=
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
DOUBLE
;
INT
;
IF
(
(
,
,
,
,
)
)
(
,
)
;
FOR
(
=
;
;
)
=
;
}
(
,
)
;
(
,
)
;
=
;
IF
(
)
(
)
;
=
;
;
=
;
(
,
,
)
;
=
;
=
;
;
=
;
IF
(
)
(
)
;
=
;
;
=
;
=
;
=
;
;
}
(
)
;
}
INT
(
INT
,
CHAR
)
{
CHAR
;
CHAR
;
INT
;
DOUBLE
,
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
=
;
}
ELSE
IF
(
(
,
)
)
{
=
(
)
;
(
,
)
;
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
=
;
}
ELSE
IF
(
)
(
,
)
;
ELSE
BREAK
;
}
IF
(
)
(
)
;
=
(
)
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
=
(
)
;
(
,
,
)
;
(
)
;
(
,
)
;
=
;
(
,
,
)
;
(
)
;
(
)
;
=
(
)
;
(
,
)
;
RETURN
;
}
__E__O__F__
,
;
INT
,
;
CHAR
;
CHAR
;
CHAR
;
,
;
;
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
TYPEDEF
STRUCT
{
CHAR
;
VOID
(
)
(
VOID
)
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
VOID
(
CHAR
)
{
CHAR
;
=
(
)
;
(
,
)
;
(
,
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
(
,
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
IF
(
)
(
)
;
WHILE
(
(
INT
)
)
=
;
=
;
IF
(
)
(
,
)
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
(
,
,
,
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
DO
{
(
)
;
IF
(
)
BREAK
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
(
)
;
(
,
(
)
)
;
CONTINUE
;
}
IF
(
(
,
)
)
{
(
)
;
(
,
)
;
=
;
CONTINUE
;
}
IF
(
(
)
(
)
)
(
,
)
;
(
,
,
(
)
)
;
(
,
)
;
FOR
(
=
;
(
)
;
)
=
(
)
;
=
;
(
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
(
)
;
BREAK
;
}
IF
(
)
(
,
,
)
;
;
IF
(
)
(
)
;
ELSE
(
,
)
;
}
WHILE
(
)
;
}
VOID
(
CHAR
)
{
CHAR
;
(
,
)
;
(
,
(
)
)
;
(
)
;
(
,
)
;
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
IF
(
)
{
(
)
;
(
,
)
;
}
ELSE
(
,
)
;
}
INT
(
INT
,
CHAR
)
{
INT
;
(
)
;
IF
(
)
(
)
;
=
(
)
;
IF
(
(
,
)
)
{
=
;
(
,
)
;
(
,
)
;
=
;
}
ELSE
=
;
FOR
(
;
;
)
{
(
)
;
(
)
;
}
RETURN
;
}
__E__O__F__
TYPEDEF
STRUCT
{
SHORT
,
;
}
;
TYPEDEF
STRUCT
{
INT
,
;
INT
,
;
UNSIGNED
CHAR
;
}
;
TYPEDEF
STRUCT
{
INT
,
;
;
}
;
(
,
)
(
(
(
)
)
)
VOID
(
VOID
)
{
INT
,
,
,
,
,
,
,
;
;
INT
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
}
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
IF
(
(
)
)
{
(
)
;
=
(
)
;
(
)
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
=
(
)
;
(
,
,
)
;
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
INT
;
;
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
,
)
;
=
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
(
,
)
;
}
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
INT
;
INT
,
,
;
INT
,
;
INT
;
;
=
(
(
INT
)
(
INT
)
(
INT
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
INT
)
;
=
(
INT
)
;
=
(
INT
)
;
;
=
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
=
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
FLOAT
,
,
,
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
{
=
(
FLOAT
)
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
,
,
,
,
)
;
}
FOR
(
;
;
)
=
;
}
=
;
}
VOID
(
VOID
)
{
INT
,
;
INT
,
;
FLOAT
,
,
,
;
FLOAT
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
FLOAT
)
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
INT
)
(
)
;
=
(
,
,
,
,
)
;
}
FOR
(
;
;
)
=
;
}
=
;
}
TYPEDEF
STRUCT
{
CHAR
;
UNSIGNED
,
;
UNSIGNED
;
}
;
;
INT
,
,
;
(
INT
)
{
INT
,
,
;
INT
;
INT
;
INT
;
INT
,
,
;
INT
,
;
INT
;
;
INT
;
INT
;
=
;
=
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
{
RETURN
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
}
ELSE
{
IF
(
)
CONTINUE
;
}
;
;
;
;
}
IF
(
)
RETURN
;
;
;
;
IF
(
)
{
;
;
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
FOR
(
;
;
)
{
=
;
=
;
=
(
INT
)
;
=
(
INT
)
;
=
(
INT
)
;
=
;
IF
(
)
{
IF
(
)
{
=
=
=
;
RETURN
;
}
=
;
=
;
}
}
IF
(
)
{
=
;
=
(
INT
)
;
=
(
INT
)
;
=
(
INT
)
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
,
,
;
,
;
INT
;
;
INT
,
;
INT
,
,
;
INT
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
IF
(
(
)
(
)
)
(
,
)
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
)
;
=
(
)
;
=
;
=
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
=
;
}
;
}
=
=
=
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
(
)
;
;
}
=
(
)
;
}
}
}
}
__E__O__F__
;
INT
;
INT
;
CHAR
;
INT
(
CHAR
,
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
(
,
)
;
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
=
;
BREAK
;
}
IF
(
)
{
(
,
(
INT
)
,
(
INT
)
,
(
INT
)
,
)
;
CONTINUE
;
}
IF
(
)
{
CHAR
;
=
;
(
,
,
)
;
(
,
,
)
;
}
}
}
VOID
(
VOID
)
{
CHAR
;
;
CHAR
;
;
DOUBLE
;
INT
;
=
;
=
;
WHILE
(
)
{
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
,
)
;
IF
(
)
(
)
;
=
;
;
WHILE
(
)
{
INT
;
=
(
)
;
IF
(
)
(
)
;
IF
(
(
,
)
)
BREAK
;
(
,
)
;
=
(
)
;
IF
(
)
(
)
;
=
;
IF
(
)
(
)
;
=
(
(
)
)
;
(
,
,
(
)
)
;
(
,
)
;
(
,
)
;
=
;
=
;
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
(
,
)
;
ELSE
IF
(
(
,
)
)
{
IF
(
(
,
,
,
,
)
)
(
)
;
FOR
(
=
;
;
)
=
;
}
ELSE
IF
(
(
,
,
)
(
,
)
)
{
=
(
)
;
}
ELSE
IF
(
(
,
)
)
{
=
(
)
;
IF
(
(
UNSIGNED
)
)
(
,
)
;
}
ELSE
IF
(
(
,
)
)
{
=
(
)
;
}
}
IF
(
(
,
,
)
)
=
;
IF
(
(
,
)
)
{
IF
(
)
{
CHAR
;
=
(
,
)
;
(
,
,
)
;
(
,
,
)
;
}
}
}
(
,
)
;
(
)
;
}
CHAR
(
,
CHAR
)
{
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
,
CHAR
,
CHAR
)
{
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
{
(
,
)
;
RETURN
;
}
=
(
(
)
)
;
=
;
=
;
(
,
)
;
(
,
)
;
}
FLOAT
(
,
CHAR
)
{
CHAR
;
=
(
,
)
;
RETURN
(
)
;
}
VOID
(
,
CHAR
,
)
{
CHAR
;
=
(
,
)
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
CHAR
,
;
;
CHAR
;
INT
;
=
;
=
;
=
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
)
;
;
FOR
(
=
;
;
=
)
{
(
,
,
,
)
;
(
,
)
;
(
)
;
}
(
,
)
;
;
IF
(
)
(
)
;
}
=
;
}
__E__O__F__
FLOAT
=
;
FLOAT
=
;
FLOAT
=
;
,
,
;
;
INT
;
;
;
FLOAT
;
(
INT
)
{
;
;
=
(
)
(
(
(
LONG
)
)
)
;
=
;
;
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
WHILE
(
)
{
;
=
;
;
IF
(
)
RETURN
;
(
)
;
}
}
VOID
(
VOID
)
{
=
=
;
=
;
(
)
;
=
;
(
,
)
;
}
INT
(
INT
,
CHAR
)
{
INT
;
DOUBLE
,
;
CHAR
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
=
;
(
)
;
}
ELSE
IF
(
(
,
)
)
{
=
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
=
(
)
;
;
}
ELSE
IF
(
)
(
,
)
;
ELSE
BREAK
;
}
IF
(
)
(
)
;
(
)
;
=
(
)
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
(
,
)
;
RETURN
;
}
__E__O__F__
(
,
)
{
INT
;
;
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
(
)
(
)
;
IF
(
)
=
;
RETURN
(
)
;
}
(
)
TYPEDEF
STRUCT
{
;
INT
;
;
;
;
INT
;
;
;
;
;
,
;
INT
,
;
INT
;
INT
;
;
}
;
VOID
(
)
{
;
INT
,
;
;
FLOAT
;
,
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
(
)
;
=
(
,
)
;
IF
(
)
(
)
;
IF
(
)
{
=
;
(
,
,
)
;
}
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
,
)
;
;
(
,
,
,
)
;
(
,
(
)
(
)
,
)
;
}
FOR
(
=
;
;
)
=
;
=
(
,
)
;
;
(
,
,
,
)
;
}
VOID
(
)
{
;
,
,
;
INT
,
,
;
;
;
=
;
=
=
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
(
)
;
}
}
INT
;
VOID
(
)
{
INT
;
INT
,
,
;
INT
,
,
;
,
,
,
;
;
,
;
,
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
,
)
{
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
{
;
IF
(
)
=
;
}
}
ELSE
{
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
{
;
IF
(
)
=
;
}
}
(
,
,
)
;
(
)
;
(
,
,
,
)
;
}
IF
(
)
;
}
}
}
INT
,
;
VOID
(
,
)
{
;
;
;
;
;
;
INT
;
INT
;
INT
,
;
;
;
;
;
(
,
,
)
;
=
(
(
,
)
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
(
)
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
}
ELSE
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
(
)
;
FOR
(
=
;
;
)
=
;
}
=
;
;
=
;
FOR
(
=
;
;
,
)
{
=
(
,
)
;
IF
(
)
CONTINUE
;
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
{
IF
(
(
,
)
)
CONTINUE
;
}
=
(
)
;
=
;
;
IF
(
)
CONTINUE
;
;
IF
(
)
=
;
}
IF
(
)
{
=
;
;
}
}
VOID
(
)
{
INT
,
;
FLOAT
;
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
}
IF
(
)
{
IF
(
)
RETURN
;
FOR
(
=
;
;
)
=
;
=
;
;
}
ELSE
{
FOR
(
=
;
;
)
IF
(
)
=
;
}
}
VOID
(
INT
)
{
;
;
INT
,
;
INT
,
,
;
;
INT
;
INT
,
;
;
;
INT
,
;
=
;
=
;
FOR
(
=
;
;
)
=
;
IF
(
)
{
RETURN
;
}
(
,
,
(
)
)
;
=
;
=
;
(
,
)
;
=
;
IF
(
)
{
(
,
,
)
;
=
;
}
(
)
;
(
)
;
(
)
;
=
;
=
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
)
;
}
(
)
;
IF
(
)
{
RETURN
;
}
FOR
(
=
;
;
)
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
(
)
(
)
;
;
}
ELSE
=
;
;
IF
(
)
=
;
IF
(
)
(
)
;
=
;
}
}
}
__E__O__F__
INT
=
;
;
INT
=
;
VOID
(
VOID
)
{
;
=
(
(
)
)
;
IF
(
(
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
}
VOID
(
)
{
;
;
;
INT
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
,
(
)
,
(
)
)
)
(
)
;
}
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
(
)
;
}
(
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
INT
;
;
FLOAT
;
INT
;
INT
;
}
;
,
;
VOID
(
INT
)
{
;
;
INT
;
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
{
=
;
(
)
;
}
}
}
VOID
(
)
{
=
=
(
(
)
)
;
(
)
;
}
TYPEDEF
STRUCT
{
;
INT
;
INT
;
}
;
(
,
)
{
INT
;
FLOAT
,
;
;
INT
;
FLOAT
,
,
,
,
,
;
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
WHILE
(
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
IF
(
)
RETURN
;
=
;
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
=
(
)
;
=
(
)
;
BREAK
;
}
IF
(
)
{
=
;
CONTINUE
;
}
IF
(
)
{
=
;
CONTINUE
;
}
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
}
__E__O__F__
CHAR
;
INT
;
INT
;
CHAR
;
INT
;
INT
;
CHAR
;
INT
;
INT
;
TYPEDEF
STRUCT
{
CHAR
;
INT
,
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
,
;
;
INT
;
VOID
(
CHAR
,
CHAR
)
{
;
INT
,
;
CHAR
;
IF
(
(
)
(
)
(
)
)
(
)
;
=
(
)
;
=
(
)
;
=
(
(
)
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
;
WHILE
(
)
{
IF
(
(
)
)
=
;
ELSE
=
(
)
;
(
,
,
)
;
(
,
,
)
;
;
}
(
)
;
;
}
VOID
(
INT
)
{
INT
,
;
CHAR
;
CHAR
;
CHAR
;
;
INT
;
UNSIGNED
SHORT
;
=
;
(
,
,
,
)
;
=
(
)
;
(
,
,
(
)
)
;
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
,
)
;
(
,
)
;
}
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
,
,
)
;
(
,
)
;
}
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
,
,
)
;
(
,
)
;
}
=
;
=
;
=
;
=
;
=
(
)
(
)
;
=
(
(
)
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
(
,
(
(
)
)
)
;
=
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
;
CHAR
;
CHAR
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
(
)
,
)
)
CONTINUE
;
(
,
)
;
(
)
=
;
(
,
,
,
)
;
(
)
;
(
,
,
,
)
;
(
)
;
}
}
INT
(
VOID
)
{
;
INT
;
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
INT
(
INT
,
CHAR
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
(
)
;
(
)
;
IF
(
(
,
)
)
{
(
(
)
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
(
,
)
;
RETURN
;
}
__E__O__F__
;
INT
;
;
;
INT
,
;
INT
,
;
FLOAT
;
CHAR
;
,
;
VOID
(
VOID
)
{
INT
,
,
;
;
FLOAT
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
;
INT
,
;
INT
;
FLOAT
,
,
,
;
UNSIGNED
,
;
FLOAT
,
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
;
IF
(
)
RETURN
;
=
;
=
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
DO
{
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
}
;
;
;
}
WHILE
(
)
;
}
VOID
(
)
{
,
,
;
INT
,
;
INT
,
;
INT
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
(
)
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
;
(
(
)
,
,
)
;
}
VOID
(
INT
,
CHAR
)
{
INT
;
CHAR
;
IF
(
)
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
,
)
;
(
)
;
FOR
(
=
;
;
)
(
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
,
,
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
;
VOID
;
FLOAT
;
INT
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
;
VOID
;
FLOAT
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
FLOAT
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
}
;
;
;
CHAR
;
CHAR
;
CHAR
;
FLOAT
,
=
;
,
;
,
;
;
;
;
;
;
;
INT
;
CHAR
;
CHAR
;
INT
,
;
;
INT
;
INT
=
;
FLOAT
,
;
;
FLOAT
=
{
}
;
;
CHAR
;
VOID
(
VOID
)
{
(
,
,
(
)
)
;
=
;
=
=
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
=
;
}
VOID
(
,
INT
)
{
INT
,
;
;
;
FLOAT
;
=
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
IF
(
)
{
=
;
}
IF
(
)
{
=
;
}
}
}
(
,
,
(
)
)
;
(
,
,
(
)
)
;
}
VOID
(
,
INT
,
INT
)
{
INT
,
,
;
;
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
}
}
;
}
(
,
,
(
)
)
;
}
VOID
(
)
{
INT
,
,
;
FLOAT
;
;
FOR
(
=
;
;
)
{
(
,
,
,
,
)
;
IF
(
(
)
(
)
)
=
;
ELSE
=
;
=
(
)
;
=
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
(
,
,
)
;
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
=
(
)
;
}
ELSE
{
=
(
)
;
}
=
(
)
;
=
(
)
;
}
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
INT
;
;
IF
(
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
}
(
,
,
(
)
)
;
}
}
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
IF
(
)
{
(
,
)
;
;
}
ELSE
{
INT
,
,
;
FLOAT
;
=
;
;
=
;
(
,
,
)
;
=
;
FOR
(
=
;
;
)
{
;
;
=
(
)
;
(
,
,
(
)
)
;
}
FOR
(
=
;
;
)
{
(
,
)
;
;
}
}
}
}
VOID
(
VOID
)
{
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
=
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
INT
)
(
)
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
;
INT
,
,
,
,
;
FLOAT
,
;
FOR
(
=
;
;
)
{
=
;
=
;
}
FOR
(
=
;
;
)
{
INT
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
;
=
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
=
(
)
;
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
INT
;
,
,
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
FLOAT
;
;
=
;
=
;
IF
(
)
{
;
}
ELSE
{
;
}
IF
(
(
)
(
(
)
)
)
{
=
(
(
)
)
;
=
(
(
)
)
;
}
}
}
=
;
=
(
)
;
=
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
;
INT
,
,
;
INT
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
(
,
)
(
,
)
)
{
;
=
;
}
ELSE
{
=
;
}
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
{
(
,
)
;
;
}
=
;
}
}
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
;
;
,
;
INT
;
INT
;
(
)
;
(
,
)
;
(
,
,
,
)
;
(
)
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
IF
(
(
)
)
{
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
ELSE
{
=
;
}
(
,
,
)
;
=
(
)
;
IF
(
)
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
;
;
}
;
IF
(
)
(
)
;
}
VOID
(
CHAR
,
INT
)
{
;
INT
,
;
;
INT
;
INT
;
(
,
,
,
)
;
(
)
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
(
,
)
;
=
;
(
,
)
;
(
,
,
)
;
IF
(
)
(
)
;
IF
(
(
)
)
{
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
}
ELSE
{
=
;
}
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
}
FOR
(
=
;
;
)
{
,
,
;
FLOAT
;
IF
(
)
CONTINUE
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
INT
;
INT
;
=
;
=
(
(
)
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
(
,
)
;
;
}
}
FOR
(
=
;
;
)
{
INT
;
;
FLOAT
;
INT
;
IF
(
)
{
FOR
(
=
;
;
)
{
INT
;
=
;
FOR
(
=
;
;
)
{
;
}
;
}
}
ELSE
{
(
)
;
}
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
FLOAT
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
}
=
;
}
;
IF
(
)
(
)
;
(
)
;
=
;
}
VOID
(
INT
)
{
WHILE
(
(
)
)
{
(
)
;
(
,
)
;
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
=
;
IF
(
)
(
)
;
=
;
=
;
WHILE
(
)
{
(
)
;
IF
(
)
(
)
;
IF
(
(
,
)
)
{
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
BREAK
;
}
ELSE
{
(
)
;
}
}
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
IF
(
)
(
)
;
=
;
=
;
WHILE
(
)
{
(
)
;
IF
(
)
(
)
;
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
BREAK
;
}
ELSE
{
(
)
;
}
}
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
)
;
}
VOID
(
VOID
)
{
WHILE
(
)
{
DO
{
(
)
;
IF
(
)
RETURN
;
IF
(
)
BREAK
;
WHILE
(
(
)
)
(
)
;
}
WHILE
(
)
;
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
IF
(
)
(
)
;
=
;
(
)
;
(
,
)
;
(
,
(
)
)
;
}
ELSE
IF
(
(
,
)
)
{
=
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
;
}
ELSE
{
(
,
)
;
}
}
}
INT
(
INT
,
CHAR
)
{
INT
;
CHAR
;
IF
(
)
(
)
;
IF
(
(
,
)
)
{
=
;
(
,
)
;
(
,
)
;
=
;
}
ELSE
=
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
(
,
)
;
(
)
;
(
)
;
RETURN
;
}
__E__O__F__
;
,
;
INT
,
;
,
;
CHAR
;
CHAR
;
INT
;
INT
;
TYPEDEF
STRUCT
{
;
VOID
;
FLOAT
;
INT
;
}
;
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
,
INT
)
{
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
,
(
)
(
)
,
)
;
}
VOID
(
)
{
INT
,
,
;
;
=
(
(
(
)
(
)
)
(
(
)
(
)
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
{
(
,
,
(
)
)
;
IF
(
)
{
(
,
)
;
;
}
ELSE
{
INT
,
;
;
FLOAT
;
=
;
;
=
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
{
;
;
=
(
)
;
(
,
,
(
)
)
;
}
FOR
(
=
;
;
)
{
(
,
)
;
;
}
}
}
}
INT
;
VOID
(
CHAR
,
)
{
INT
;
CHAR
;
;
;
(
,
)
;
(
,
,
)
;
(
)
;
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
VOID
(
CHAR
)
{
(
,
)
;
(
,
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
(
)
;
}
VOID
(
)
{
(
)
;
=
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
(
)
)
;
}
VOID
(
)
{
INT
,
,
,
,
,
,
,
;
,
;
INT
;
;
INT
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
IF
(
(
)
(
)
(
)
(
)
)
(
)
;
IF
(
(
)
(
)
)
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
IF
(
(
)
)
{
(
)
;
=
(
)
;
IF
(
)
(
)
;
}
ELSE
{
=
;
}
IF
(
(
)
)
{
(
)
;
=
(
)
;
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
=
;
}
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
;
}
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
WHILE
(
)
{
(
)
;
IF
(
)
(
)
;
IF
(
(
,
)
)
{
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
BREAK
;
}
ELSE
{
(
)
;
}
}
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
WHILE
(
)
{
(
)
;
IF
(
)
BREAK
;
IF
(
(
,
)
)
{
(
)
;
}
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
=
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
}
ELSE
IF
(
(
,
)
)
{
(
)
;
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
(
)
;
=
;
=
;
}
VOID
(
VOID
)
{
;
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
;
}
INT
(
INT
,
CHAR
)
{
INT
;
IF
(
)
(
)
;
IF
(
(
,
)
)
{
=
;
(
,
)
;
(
,
)
;
=
;
}
ELSE
=
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
__E__O__F__
VOID
(
INT
,
CHAR
)
{
INT
;
CHAR
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
}
__E__O__F__
INT
;
;
INT
;
;
VOID
(
)
{
INT
,
;
,
;
,
;
,
,
;
IF
(
)
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
,
)
;
}
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
IF
(
)
(
,
)
;
=
;
=
(
,
)
;
IF
(
)
(
)
;
=
;
(
,
,
)
;
IF
(
(
)
)
(
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
(
)
;
}
}
}
VOID
(
)
{
INT
,
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
}
}
VOID
(
,
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
INT
(
)
{
FLOAT
,
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
,
,
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
,
,
)
;
=
;
}
}
INT
(
,
INT
)
{
INT
;
,
;
;
=
(
)
;
IF
(
)
(
)
;
=
;
(
)
;
IF
(
(
,
)
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
,
)
{
=
(
,
)
;
IF
(
(
)
)
{
RETURN
;
}
}
IF
(
)
(
)
;
=
;
;
RETURN
;
}
INT
(
,
INT
)
{
INT
;
;
,
,
,
;
=
(
)
;
IF
(
)
(
)
;
=
;
FOR
(
=
;
;
,
)
{
=
(
,
)
;
IF
(
(
)
)
{
=
;
RETURN
;
}
IF
(
(
)
)
{
=
;
RETURN
;
}
}
=
;
IF
(
)
(
)
;
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
,
,
)
;
=
;
=
;
}
}
RETURN
;
}
,
;
;
VOID
(
VOID
)
{
INT
,
,
;
;
;
;
;
;
=
=
=
;
=
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
=
;
=
(
,
,
)
;
}
IF
(
)
CONTINUE
;
=
(
)
;
=
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
)
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
=
;
}
}
(
)
;
=
;
=
(
,
)
;
=
;
=
;
(
)
;
}
}
=
{
{
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
}
}
;
INT
;
;
;
INT
;
INT
;
VOID
(
)
{
INT
;
;
FLOAT
;
IF
(
)
(
)
;
=
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
,
)
(
)
)
RETURN
;
}
=
;
=
;
;
}
VOID
(
)
{
INT
,
;
;
;
;
;
INT
;
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
,
)
(
)
)
RETURN
;
(
,
,
)
;
IF
(
(
,
)
(
)
)
RETURN
;
}
=
=
=
;
=
;
=
;
FOR
(
=
;
;
,
)
{
=
(
,
)
;
IF
(
)
{
IF
(
)
RETURN
;
;
}
ELSE
IF
(
)
{
IF
(
)
RETURN
;
;
}
ELSE
;
}
IF
(
)
{
(
,
,
)
;
=
;
=
;
}
(
)
;
}
INT
(
,
INT
)
{
INT
;
;
INT
,
,
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
(
,
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
;
=
;
;
}
IF
(
)
(
)
;
;
RETURN
;
}
VOID
(
,
,
INT
)
{
INT
,
;
INT
;
INT
,
,
,
,
;
,
,
;
;
;
=
(
,
)
;
=
(
,
)
;
FOR
(
=
;
;
)
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
(
)
;
=
;
=
;
;
(
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
(
,
)
;
;
;
(
,
)
;
=
;
(
,
,
)
;
=
(
)
;
IF
(
)
CONTINUE
;
=
(
,
)
;
(
)
;
}
}
}
VOID
(
INT
)
{
INT
,
,
;
;
;
,
;
=
;
=
;
FOR
(
=
;
;
=
)
FOR
(
=
;
;
)
(
,
)
;
FOR
(
=
;
;
)
{
=
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
(
,
)
;
}
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
(
,
)
;
=
;
IF
(
)
=
;
ELSE
=
;
(
)
;
}
FOR
(
=
;
;
=
)
FOR
(
=
;
;
)
(
,
(
)
,
)
;
}
(
,
INT
)
{
;
INT
;
CHAR
;
;
=
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
IF
(
(
,
,
)
)
=
;
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
=
;
}
ELSE
IF
(
(
,
,
)
)
=
;
ELSE
=
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
=
;
;
}
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
}
=
(
)
;
=
;
=
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
)
{
;
;
FOR
(
=
;
;
=
)
FOR
(
=
;
;
=
)
(
)
;
}
(
,
INT
)
{
,
,
,
;
;
INT
;
;
=
(
(
)
)
;
(
,
,
(
)
)
;
(
)
;
=
;
=
=
;
(
)
;
FOR
(
=
;
;
=
)
{
=
(
,
)
;
IF
(
)
CONTINUE
;
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
)
;
(
,
)
;
}
FOR
(
=
;
;
=
)
{
=
;
=
;
=
;
}
=
;
=
;
(
)
;
(
,
)
;
RETURN
;
}
__E__O__F__
;
,
;
INT
;
INT
;
INT
;
VOID
(
)
{
FOR
(
;
;
=
)
(
)
;
}
(
)
{
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
,
,
,
)
{
;
INT
;
INT
;
;
INT
,
;
,
;
,
;
;
IF
(
)
(
)
;
=
=
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
RETURN
;
}
=
=
(
)
;
=
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
=
;
IF
(
)
{
(
,
)
;
;
(
,
)
;
;
CONTINUE
;
}
IF
(
)
{
(
,
)
;
;
}
ELSE
{
(
,
)
;
;
}
IF
(
)
CONTINUE
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
(
)
;
}
(
,
)
;
;
(
,
)
;
;
}
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
,
INT
,
)
{
,
;
;
;
;
=
;
=
;
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
ELSE
{
(
,
,
,
)
;
}
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
}
=
;
}
VOID
(
)
{
,
,
;
INT
;
INT
;
FOR
(
=
;
;
=
)
{
=
;
;
(
)
;
=
;
IF
(
)
{
=
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
)
;
}
}
ELSE
=
;
=
(
,
)
;
IF
(
)
=
(
,
)
;
=
(
)
;
}
}
VOID
(
INT
)
{
,
;
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
{
=
;
=
;
=
;
}
ELSE
(
)
;
}
}
(
VOID
)
{
;
;
INT
;
;
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
=
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
=
)
;
(
)
;
}
RETURN
;
}
VOID
(
)
{
,
;
=
;
FOR
(
=
;
;
=
)
{
;
{
INT
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
)
;
}
=
(
)
;
=
;
=
;
=
;
=
;
=
;
}
}
(
)
{
,
;
INT
;
;
;
;
(
)
;
(
,
,
(
)
)
;
=
=
=
;
(
)
;
FOR
(
=
;
;
=
)
{
(
)
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
=
;
CONTINUE
;
}
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
=
;
=
;
FOR
(
=
;
;
=
)
(
,
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
IF
(
)
(
)
;
ELSE
(
)
;
}
IF
(
)
(
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
__E__O__F__
INT
;
;
INT
;
;
INT
;
CHAR
;
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
RETURN
;
}
IF
(
)
(
)
;
(
,
)
;
;
RETURN
;
}
INT
(
)
{
INT
,
;
;
IF
(
(
,
,
)
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
RETURN
;
}
IF
(
)
(
)
;
=
;
;
RETURN
;
}
CHAR
;
;
CHAR
;
INT
;
VOID
(
CHAR
)
{
=
;
=
;
=
;
}
(
)
{
CHAR
;
IF
(
)
RETURN
;
WHILE
(
)
{
IF
(
)
{
IF
(
)
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
)
;
;
}
}
IF
(
)
{
IF
(
)
(
,
)
;
WHILE
(
)
IF
(
)
{
IF
(
)
(
,
)
;
RETURN
;
}
GOTO
;
}
=
;
IF
(
)
{
;
WHILE
(
)
{
IF
(
)
(
)
;
=
;
IF
(
)
(
,
)
;
}
;
}
ELSE
WHILE
(
)
{
=
;
IF
(
)
(
,
)
;
}
=
;
RETURN
;
}
VOID
(
)
{
=
;
}
;
VOID
(
VOID
)
{
;
=
(
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
IF
(
(
)
)
(
)
;
=
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
;
}
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
VOID
(
,
,
)
{
INT
;
FLOAT
,
;
INT
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
}
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
,
;
;
,
,
;
INT
,
;
;
;
FLOAT
,
,
;
=
;
;
=
;
=
;
DO
{
IF
(
(
)
)
BREAK
;
IF
(
(
,
)
)
BREAK
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
IF
(
(
,
)
)
(
)
;
FOR
(
=
;
;
)
{
(
)
;
=
(
)
;
}
(
)
;
IF
(
(
,
)
)
(
)
;
}
(
,
,
(
)
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
(
)
;
=
(
)
;
FOR
(
=
;
;
=
)
{
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
{
(
)
;
CONTINUE
;
}
=
(
(
)
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
(
,
,
)
;
IF
(
(
,
)
)
{
(
)
;
=
;
(
)
;
BREAK
;
}
(
)
;
=
(
,
)
;
{
;
INT
,
;
FLOAT
,
,
;
FLOAT
,
;
(
,
,
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
(
)
;
=
(
)
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
;
=
;
=
;
}
=
(
)
;
}
WHILE
(
)
;
}
(
VOID
)
{
IF
(
(
)
)
RETURN
;
IF
(
(
,
)
)
(
)
;
IF
(
)
(
)
;
=
;
;
DO
{
IF
(
(
)
)
(
)
;
IF
(
(
,
)
)
BREAK
;
IF
(
(
,
)
)
(
)
;
ELSE
(
)
;
}
WHILE
(
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
CHAR
;
(
,
(
VOID
)
)
;
(
)
;
=
;
WHILE
(
(
)
)
{
}
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
;
FOR
(
=
;
;
=
)
(
,
,
)
;
}
CHAR
(
,
CHAR
)
{
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
VOID
(
,
CHAR
,
CHAR
)
{
;
FOR
(
=
;
;
=
)
IF
(
(
,
)
)
{
(
)
;
=
(
)
;
RETURN
;
}
=
(
(
)
)
;
=
;
=
;
=
(
)
;
=
(
)
;
}
FLOAT
(
,
CHAR
)
{
CHAR
;
=
(
,
)
;
RETURN
(
)
;
}
VOID
(
,
CHAR
,
)
{
CHAR
;
DOUBLE
,
,
;
=
(
,
)
;
=
=
=
;
(
,
,
,
,
)
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
CHAR
,
;
;
CHAR
;
INT
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
(
,
)
;
;
FOR
(
=
;
;
=
)
{
(
,
,
,
)
;
(
,
)
;
(
)
;
}
(
,
)
;
;
IF
(
)
(
)
;
}
=
;
}
__E__O__F__
VOID
(
)
{
INT
,
;
,
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
,
)
;
(
)
;
=
(
)
;
(
,
,
)
;
(
)
;
IF
(
(
,
)
)
(
)
;
}
}
(
,
)
{
,
,
,
,
;
;
INT
,
,
,
;
,
,
;
;
;
,
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
BREAK
;
IF
(
(
)
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
BREAK
;
}
IF
(
)
RETURN
;
=
;
(
,
)
;
IF
(
)
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
(
)
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
(
)
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
RETURN
;
}
=
(
)
;
FOR
(
=
(
)
;
;
=
(
)
)
{
IF
(
(
)
)
CONTINUE
;
(
,
)
;
;
}
FOR
(
=
(
)
;
;
=
(
)
)
{
IF
(
(
)
)
CONTINUE
;
(
,
)
;
;
}
RETURN
;
}
;
(
,
)
{
,
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
=
(
,
)
;
IF
(
)
CONTINUE
;
(
)
;
=
;
RETURN
(
,
)
;
}
=
;
RETURN
;
}
(
)
{
,
;
=
;
FOR
(
;
;
=
)
{
=
;
IF
(
)
(
)
;
ELSE
{
=
;
=
;
}
}
RETURN
;
}
VOID
(
)
{
,
;
;
=
;
FOR
(
=
;
;
=
)
{
=
;
=
(
,
)
;
}
=
(
)
;
}
VOID
(
)
{
;
INT
;
;
(
)
;
=
;
FOR
(
=
;
;
=
)
{
(
)
;
(
)
;
FOR
(
=
;
;
=
)
{
(
)
;
;
}
}
(
,
)
;
}
__E__O__F__
VOID
(
VOID
)
{
}
VOID
(
)
{
}
VOID
(
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
)
{
}
VOID
(
,
INT
)
{
}
VOID
(
)
{
}
VOID
(
)
{
}
VOID
(
,
,
)
{
}
VOID
(
)
{
}
__E__O__F__
INT
;
(
,
)
{
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
RETURN
(
,
)
;
RETURN
(
,
)
;
}
(
INT
,
,
)
{
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
RETURN
;
}
;
;
VOID
(
)
{
INT
,
;
,
,
;
FLOAT
;
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
RETURN
;
(
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
)
;
}
(
,
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
)
;
}
(
,
,
)
;
=
(
)
;
(
)
;
WHILE
(
)
{
(
,
,
,
,
)
;
FOR
(
=
;
;
)
;
;
}
}
INT
;
INT
;
(
,
)
{
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
)
=
;
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
,
)
)
{
IF
(
)
{
(
)
;
(
,
)
;
}
RETURN
;
}
=
;
}
RETURN
;
}
VOID
(
)
{
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
(
)
=
;
}
=
;
}
(
)
{
INT
;
;
INT
;
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
)
)
=
;
}
}
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
)
;
=
;
;
=
;
IF
(
)
{
=
(
,
)
;
IF
(
)
(
,
)
;
}
IF
(
(
,
)
)
{
=
;
(
)
;
(
,
,
,
)
;
(
)
;
IF
(
)
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
IF
(
)
(
)
;
;
(
,
)
;
(
)
;
(
,
)
;
RETURN
;
}
__E__O__F__
;
VOID
(
,
,
)
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
)
{
,
;
=
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
IF
(
)
BREAK
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
(
)
;
}
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
}
VOID
(
)
{
INT
;
;
=
;
FOR
(
=
;
;
)
(
,
,
,
)
;
}
VOID
(
)
{
;
INT
,
,
;
,
;
,
;
INT
;
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
;
=
;
(
,
,
(
)
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
,
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
,
,
)
;
}
}
}
VOID
(
,
)
{
INT
,
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
)
{
(
)
;
RETURN
;
}
}
}
VOID
(
)
{
INT
;
FLOAT
,
;
,
,
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
;
}
IF
(
)
(
,
)
;
}
VOID
(
,
)
{
,
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
}
VOID
(
)
{
INT
,
;
,
;
,
;
INT
;
;
FLOAT
;
=
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
(
)
;
(
,
)
;
(
)
;
=
;
(
,
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
}
}
}
}
VOID
(
)
{
,
;
,
,
;
,
,
;
,
,
;
INT
;
IF
(
)
{
RETURN
;
}
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
=
;
ELSE
IF
(
)
{
=
;
(
,
,
)
;
=
;
}
ELSE
(
)
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
BREAK
;
}
}
IF
(
)
{
=
;
(
,
,
)
;
}
FOR
(
=
;
;
=
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
(
)
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
CONTINUE
;
}
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
CONTINUE
;
}
=
(
)
;
=
;
=
;
(
)
;
=
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
}
(
,
)
;
(
,
)
;
(
)
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
,
;
IF
(
)
{
(
)
;
(
)
;
}
FOR
(
=
;
;
=
)
{
IF
(
)
=
;
ELSE
=
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
}
}
;
INT
;
INT
;
VOID
(
,
)
{
IF
(
(
(
)
)
)
(
,
,
(
INT
)
(
)
)
;
ELSE
(
,
,
)
;
}
VOID
(
)
{
INT
;
;
;
,
;
IF
(
)
{
(
)
;
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
(
,
)
;
IF
(
(
,
)
)
{
(
,
,
,
,
)
;
}
ELSE
(
,
,
,
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
,
)
;
}
IF
(
)
=
;
ELSE
=
;
}
}
VOID
(
)
{
;
IF
(
)
{
=
;
(
)
;
(
)
;
RETURN
;
}
(
)
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
;
=
;
}
ELSE
=
;
}
}
VOID
(
)
{
=
;
=
;
(
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
}
__E__O__F__
;
;
;
;
;
=
;
;
;
INT
=
;
;
INT
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
;
INT
;
VOID
(
CHAR
,
)
{
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
)
;
}
(
)
{
INT
,
;
,
;
,
,
;
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
(
)
;
(
,
)
;
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
=
(
,
)
;
(
,
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
RETURN
;
}
(
)
{
INT
;
;
=
(
INT
)
(
(
)
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
)
{
}
(
,
,
)
{
;
INT
;
INT
;
;
INT
,
;
,
;
;
;
INT
;
=
=
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
=
;
}
;
}
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
,
)
;
;
CONTINUE
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
CONTINUE
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
(
)
;
}
(
,
)
;
;
}
IF
(
)
(
)
;
(
)
;
RETURN
;
}
VOID
(
,
,
,
)
{
;
INT
;
INT
;
;
INT
,
;
,
;
;
,
;
INT
;
=
=
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
=
;
}
;
}
=
;
=
;
=
=
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
=
;
=
=
(
)
;
=
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
,
)
;
;
(
,
)
;
;
CONTINUE
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
CONTINUE
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
(
)
;
}
(
,
)
;
;
(
,
)
;
;
}
IF
(
)
(
)
;
}
INT
,
;
INT
,
;
INT
,
;
INT
,
;
VOID
(
VOID
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
}
(
INT
)
{
;
INT
;
IF
(
)
(
,
)
;
;
IF
(
)
=
;
=
(
INT
)
(
(
)
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
)
{
;
(
)
;
}
(
VOID
)
{
;
;
IF
(
)
=
;
=
(
(
)
)
;
(
,
,
(
)
)
;
=
;
RETURN
;
}
VOID
(
)
{
;
(
)
;
}
(
VOID
)
{
;
=
(
(
)
)
;
(
,
,
(
)
)
;
;
IF
(
)
=
;
RETURN
;
}
VOID
(
)
{
;
(
)
;
}
(
VOID
)
{
;
;
IF
(
)
=
;
=
(
(
)
)
;
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
)
{
;
(
)
;
}
(
VOID
)
{
;
=
(
(
)
)
;
(
,
,
(
)
)
;
RETURN
;
}
(
VOID
)
{
;
=
(
(
)
)
;
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
INT
)
{
;
CHAR
;
;
;
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
IF
(
)
(
)
;
(
,
,
)
;
IF
(
)
(
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
}
ELSE
=
;
=
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
=
;
=
(
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
{
(
)
;
IF
(
(
)
)
{
=
(
)
;
=
(
,
)
;
}
(
)
;
}
(
)
;
(
)
;
(
)
;
}
ELSE
{
=
(
,
)
;
IF
(
)
{
(
)
;
IF
(
(
)
)
{
(
)
;
=
(
)
;
(
)
;
=
(
,
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
}
(
)
;
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
,
)
;
(
,
,
)
;
;
}
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
;
;
(
)
=
;
(
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
(
,
,
,
,
,
,
,
,
)
;
}
(
)
;
}
VOID
(
INT
)
{
;
INT
,
,
;
INT
;
;
;
INT
,
;
FLOAT
,
,
,
;
INT
;
;
(
)
=
;
=
(
,
)
;
IF
(
)
(
,
)
;
IF
(
(
,
,
)
)
(
,
)
;
IF
(
)
(
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
;
}
(
,
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
=
;
;
IF
(
(
,
,
,
,
,
,
,
,
)
)
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
(
)
;
IF
(
)
=
;
}
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
IF
(
(
)
)
{
=
;
=
;
=
;
(
,
,
)
;
}
ELSE
IF
(
(
)
)
{
=
;
=
;
=
;
(
,
,
)
;
}
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
CHAR
,
CHAR
)
{
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
)
;
IF
(
)
{
(
)
;
IF
(
)
{
(
)
=
;
(
)
;
(
)
=
;
(
)
;
}
(
)
;
(
)
;
}
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
INT
(
INT
,
CHAR
)
{
INT
;
DOUBLE
,
;
CHAR
;
CHAR
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
{
=
(
)
;
;
}
ELSE
IF
(
(
,
)
)
{
=
(
)
;
;
}
ELSE
(
,
)
;
}
IF
(
)
(
)
;
(
)
;
=
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
)
;
(
,
)
;
(
,
)
;
}
ELSE
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
RETURN
;
}
__E__O__F__
INT
;
,
;
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
=
=
=
;
=
=
=
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
(
)
;
}
(
,
)
{
,
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
(
,
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
RETURN
;
}
}
}
ELSE
{
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
,
)
{
INT
;
;
INT
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
(
)
=
;
(
)
=
;
CONTINUE
;
}
IF
(
(
,
)
)
{
(
)
=
;
(
)
=
;
(
,
)
;
}
ELSE
{
IF
(
)
(
)
;
=
;
;
}
}
}
VOID
(
INT
)
{
;
;
INT
,
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
}
}
VOID
(
INT
)
{
INT
,
,
;
;
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
IF
(
)
{
(
,
)
;
BREAK
;
}
}
}
}
VOID
(
INT
)
{
INT
,
,
;
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
,
)
;
BREAK
;
}
}
}
}
INT
;
VOID
(
INT
,
INT
)
{
INT
,
,
,
;
;
,
;
,
;
;
INT
;
RETURN
;
=
;
=
;
=
;
=
;
(
,
,
)
;
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
(
)
;
(
,
,
)
;
(
)
;
IF
(
(
,
)
)
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
;
BREAK
;
}
}
}
IF
(
)
(
)
;
ELSE
{
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
;
;
)
=
;
=
;
;
}
=
=
;
}
}
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
;
VOID
(
VOID
)
{
INT
,
,
;
INT
,
,
,
;
;
FOR
(
=
;
;
)
=
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
;
}
}
=
=
=
=
;
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
BREAK
;
CASE
;
(
,
)
;
BREAK
;
DEFAULT
;
BREAK
;
}
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
(
,
)
;
=
;
FOR
(
=
;
;
)
;
(
,
)
;
=
;
FOR
(
=
;
;
)
IF
(
)
;
(
,
)
;
}
VOID
(
)
{
;
;
INT
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
(
,
)
;
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
=
;
;
}
=
;
;
}
=
;
(
)
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
}
__E__O__F__
INT
;
INT
;
INT
;
INT
,
,
;
;
INT
(
,
)
{
INT
,
;
;
INT
;
;
=
=
;
IF
(
)
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
IF
(
)
RETURN
;
=
;
}
ELSE
IF
(
)
{
IF
(
)
RETURN
;
=
;
}
}
ELSE
FOR
(
=
,
=
;
;
,
)
{
=
(
,
)
;
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
}
ELSE
IF
(
)
{
IF
(
)
RETURN
;
=
;
}
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
(
,
,
)
{
INT
,
;
,
;
,
,
;
;
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
CONTINUE
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
(
)
;
(
)
(
)
;
}
ELSE
(
)
(
)
;
}
IF
(
)
CONTINUE
;
=
;
=
;
}
IF
(
)
{
FOR
(
=
;
;
=
)
IF
(
)
RETURN
;
(
)
;
}
RETURN
;
}
(
,
,
,
)
{
INT
,
,
;
,
,
;
,
,
,
;
;
;
=
;
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
{
;
IF
(
)
BREAK
;
}
}
IF
(
)
BREAK
;
}
IF
(
)
CONTINUE
;
IF
(
(
)
)
{
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
)
(
)
;
(
)
(
)
;
}
ELSE
(
)
(
)
;
}
IF
(
)
CONTINUE
;
=
;
}
=
;
=
;
}
}
RETURN
;
}
(
)
{
INT
,
;
,
;
,
;
=
;
=
;
FOR
(
=
;
;
=
)
IF
(
)
{
;
=
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
=
;
}
FOR
(
=
;
;
=
)
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
IF
(
)
RETURN
(
,
,
)
;
=
(
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
(
,
,
,
)
;
}
VOID
(
)
{
INT
,
;
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
FOR
(
=
;
;
=
)
{
IF
(
)
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
}
VOID
(
,
,
,
)
{
,
;
,
;
,
;
;
;
=
;
IF
(
(
,
)
)
{
IF
(
)
{
=
(
)
;
=
;
=
;
=
;
=
;
=
=
;
FOR
(
;
;
=
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
RETURN
;
}
=
;
=
;
FOR
(
=
;
;
=
)
{
=
;
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
=
;
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
RETURN
;
}
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
}
VOID
(
,
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
RETURN
;
=
=
;
}
VOID
(
,
)
{
,
;
,
;
INT
,
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
=
)
{
FOR
(
=
;
;
=
)
{
;
IF
(
)
=
;
ELSE
IF
(
)
(
)
;
}
}
IF
(
)
=
;
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
BREAK
;
CASE
CASE
CASE
CASE
;
BREAK
;
DEFAULT
(
)
;
}
;
=
(
(
)
(
)
)
;
=
;
FOR
(
=
;
;
=
)
{
=
;
FOR
(
=
;
;
=
)
{
=
;
=
;
;
(
)
;
}
(
)
;
}
=
;
}
(
)
{
,
,
;
;
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
(
,
)
;
=
;
=
;
}
FOR
(
=
;
;
=
)
{
;
=
(
)
;
=
;
=
;
=
;
=
;
}
RETURN
;
}
VOID
(
,
)
{
,
,
;
,
;
,
;
;
=
(
)
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
=
)
{
=
;
(
,
,
,
)
;
IF
(
)
{
}
IF
(
)
{
IF
(
)
(
)
;
=
;
=
;
}
IF
(
)
{
IF
(
)
(
)
;
=
;
=
;
}
}
(
,
)
;
(
,
)
;
}
VOID
(
)
{
;
FOR
(
=
;
;
=
)
(
)
;
}
VOID
(
)
{
(
)
;
WHILE
(
)
{
(
)
;
=
;
}
}
(
,
)
{
INT
;
;
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
=
;
=
;
=
;
=
=
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
__E__O__F__
;
INT
;
VOID
(
,
)
{
FLOAT
,
;
;
INT
,
;
;
,
,
;
;
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
WHILE
(
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
}
IF
(
)
BREAK
;
;
(
,
)
;
=
(
)
;
(
)
;
=
(
)
;
=
;
(
,
,
,
)
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
}
}
}
VOID
(
)
{
;
,
;
(
)
;
=
;
FOR
(
=
;
;
=
)
{
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
(
,
)
;
=
;
=
;
}
}
(
,
)
;
}
VOID
(
)
{
,
;
IF
(
)
{
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
{
(
)
;
}
ELSE
{
=
;
=
;
}
}
(
)
;
(
)
;
(
)
;
}
ELSE
{
(
)
;
}
}
(
)
{
(
,
,
(
)
)
;
(
)
;
RETURN
(
)
;
}
TYPEDEF
STRUCT
{
STRUCT
;
;
INT
;
INT
;
INT
;
INT
;
}
;
INT
;
;
;
;
INT
=
;
INT
;
;
STATIC
,
;
STATIC
VOID
(
VOID
)
{
;
;
;
INT
;
INT
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
STATIC
UNSIGNED
(
)
{
UNSIGNED
;
=
(
)
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
,
INT
)
{
INT
;
INT
;
;
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
=
(
)
;
ELSE
=
;
}
=
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
(
)
(
)
)
{
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
IF
(
)
;
ELSE
=
;
;
RETURN
;
}
}
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
=
;
IF
(
)
(
)
;
;
IF
(
)
(
)
;
=
;
=
;
=
;
;
RETURN
;
}
INT
;
INT
(
,
,
)
{
INT
,
;
;
INT
;
IF
(
)
(
)
;
;
=
(
,
)
;
=
(
,
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
RETURN
;
}
}
IF
(
)
(
)
;
=
;
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
INT
;
=
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
=
(
,
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
;
;
=
=
=
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
;
}
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
,
;
,
;
INT
;
INT
;
=
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
(
,
,
,
,
,
,
)
;
}
ELSE
{
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
;
;
;
}
ELSE
;
}
}
}
VOID
(
)
{
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
=
;
=
;
(
)
;
(
)
;
=
;
=
;
}
__E__O__F__
TYPEDEF
STRUCT
{
;
STRUCT
,
;
}
;
TYPEDEF
STRUCT
{
STRUCT
;
;
;
;
}
;
INT
,
;
INT
;
INT
;
;
;
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
(
,
,
,
)
;
}
;
STATIC
,
;
STATIC
VOID
(
,
)
{
;
;
;
INT
;
(
,
)
;
(
,
,
)
;
(
,
,
(
)
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
}
STATIC
UNSIGNED
(
)
{
UNSIGNED
;
=
(
)
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
(
)
;
IF
(
)
RETURN
;
ELSE
IF
(
)
{
(
,
,
)
;
RETURN
;
}
ELSE
=
;
IF
(
)
RETURN
;
ELSE
IF
(
)
{
(
,
,
)
;
RETURN
;
}
ELSE
=
;
IF
(
)
RETURN
;
ELSE
IF
(
)
{
(
,
,
)
;
RETURN
;
}
ELSE
=
;
(
)
;
}
(
,
,
,
)
{
;
;
;
;
INT
;
(
,
,
)
;
(
)
;
=
(
,
)
;
=
(
,
)
;
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
=
;
}
=
(
)
;
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
RETURN
;
}
IF
(
)
(
)
;
=
;
;
=
;
=
;
(
,
)
;
(
,
)
;
=
=
;
=
;
RETURN
;
}
VOID
(
,
)
{
,
;
=
;
DO
{
IF
(
(
)
)
RETURN
;
IF
(
)
BREAK
;
=
;
}
WHILE
(
)
;
IF
(
)
(
)
;
=
;
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
)
{
;
,
;
=
(
,
,
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
,
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
)
;
}
}
;
=
(
)
;
VOID
(
)
;
;
VOID
(
,
)
{
INT
;
,
;
,
;
;
INT
,
;
=
;
DO
{
IF
(
)
{
=
;
=
;
=
;
=
;
RETURN
;
}
;
(
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
{
BREAK
;
}
}
(
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
)
;
=
(
,
)
;
IF
(
)
{
BREAK
;
}
}
IF
(
)
{
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
}
(
,
)
;
GOTO
;
}
=
(
)
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
{
(
,
)
;
}
FOR
(
=
;
;
)
{
(
,
(
)
)
;
}
(
)
;
}
WHILE
(
)
;
}
VOID
(
)
{
INT
,
,
;
;
;
,
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
,
,
,
)
;
FOR
(
=
;
;
=
)
{
}
IF
(
)
{
;
FOR
(
=
;
;
)
{
(
,
)
;
}
(
,
,
,
)
;
;
GOTO
;
}
}
IF
(
)
{
=
;
=
;
=
;
RETURN
;
}
(
,
)
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
(
)
;
(
)
;
(
)
;
}
VOID
(
)
{
,
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
=
)
{
=
;
(
)
;
}
=
;
(
)
;
(
)
;
}
VOID
(
)
{
,
;
INT
;
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
=
(
)
;
ELSE
=
(
)
;
}
(
,
,
)
;
(
,
)
;
=
=
;
(
)
;
(
,
,
)
;
=
=
;
(
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
INT
;
INT
;
INT
(
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
RETURN
;
}
IF
(
)
(
)
;
=
;
=
;
;
RETURN
;
}
INT
;
VOID
(
)
{
;
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
}
=
;
(
)
;
(
)
;
}
VOID
(
)
{
(
,
,
(
)
)
;
(
)
;
}
INT
(
)
{
INT
,
;
;
INT
;
IF
(
)
{
=
;
(
)
;
RETURN
;
}
=
;
=
;
;
=
;
FOR
(
=
;
;
)
=
(
)
;
(
)
;
RETURN
;
}
VOID
(
)
{
=
;
(
)
;
}
VOID
(
)
{
,
;
;
=
;
;
=
;
(
,
)
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
=
;
DO
{
=
;
;
=
;
}
WHILE
(
)
;
}
=
;
}
VOID
(
)
{
;
INT
;
IF
(
)
(
)
;
=
;
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
{
=
(
)
;
(
)
;
}
}
ELSE
{
=
;
(
)
;
}
}
}
VOID
(
)
{
INT
;
INT
;
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
VOID
(
INT
)
{
;
IF
(
)
(
)
;
=
;
;
=
;
}
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
CHAR
;
CHAR
;
CHAR
,
;
CHAR
;
}
;
;
;
;
VOID
(
CHAR
,
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
=
(
)
;
}
FOR
(
;
;
)
=
;
}
VOID
(
CHAR
)
{
INT
;
=
(
)
;
(
,
,
(
)
)
;
IF
(
(
,
,
)
)
(
,
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
(
)
)
;
FOR
(
=
;
;
)
{
(
,
)
;
=
(
)
;
=
(
)
;
}
}
INT
(
CHAR
,
)
{
INT
;
CHAR
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
(
,
,
)
;
(
,
,
)
;
RETURN
;
}
}
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
,
,
;
CHAR
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
(
)
;
BREAK
;
}
}
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
;
;
CHAR
;
CHAR
;
=
(
,
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
}
(
,
,
,
)
;
(
)
;
(
)
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
,
)
;
IF
(
)
(
)
;
IF
(
)
=
;
;
}
=
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
;
;
INT
;
;
;
;
INT
;
;
VOID
(
VOID
)
;
=
{
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
}
}
;
(
INT
)
;
;
(
,
,
)
{
;
;
=
;
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
(
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
;
}
IF
(
)
RETURN
;
RETURN
;
}
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
(
(
)
,
)
)
{
(
)
;
RETURN
;
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
ELSE
IF
(
)
{
IF
(
(
(
)
)
(
(
)
)
(
(
)
)
)
{
(
)
;
RETURN
;
}
}
ELSE
(
)
;
}
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
;
IF
(
)
=
(
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
VOID
(
,
INT
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
)
;
(
,
)
;
IF
(
)
=
;
ELSE
=
;
;
}
VOID
(
,
INT
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
)
;
(
,
)
;
IF
(
)
=
;
ELSE
=
;
;
}
VOID
(
,
INT
)
{
CHAR
;
INT
;
IF
(
)
RETURN
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
)
;
(
,
)
;
IF
(
)
=
;
ELSE
=
;
;
}
(
)
{
;
INT
;
;
=
;
IF
(
)
(
)
;
=
;
IF
(
(
)
)
{
DO
{
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
IF
(
(
,
,
)
)
(
,
)
;
ELSE
IF
(
(
,
,
)
)
(
,
)
;
ELSE
IF
(
(
,
,
)
)
(
,
)
;
}
IF
(
(
)
)
(
,
)
;
=
;
(
,
,
)
;
;
}
WHILE
(
(
)
)
;
IF
(
)
(
)
;
(
)
;
}
IF
(
)
(
)
;
(
,
,
)
;
=
;
RETURN
;
}
(
VOID
)
{
;
CHAR
;
IF
(
)
RETURN
(
)
;
=
(
)
;
=
(
,
,
,
)
;
IF
(
)
(
,
)
;
RETURN
;
}
(
VOID
)
{
,
;
;
IF
(
(
)
)
{
=
(
)
;
=
;
IF
(
)
=
(
,
,
)
;
ELSE
IF
(
)
=
(
,
,
)
;
ELSE
IF
(
)
=
(
,
,
)
;
ELSE
IF
(
)
=
(
,
,
)
;
ELSE
IF
(
)
=
(
,
,
)
;
ELSE
{
=
;
(
)
;
}
RETURN
;
}
IF
(
(
)
)
{
=
(
)
;
(
)
;
RETURN
;
}
RETURN
(
)
;
}
(
INT
)
{
,
;
,
;
,
,
;
IF
(
)
RETURN
(
)
;
=
(
)
;
WHILE
(
)
{
IF
(
(
)
)
RETURN
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
{
IF
(
(
UNSIGNED
)
(
)
)
{
=
;
=
;
=
;
}
=
(
)
;
}
ELSE
=
(
)
;
=
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
=
;
WHILE
(
(
)
)
{
;
IF
(
(
,
)
)
(
,
)
;
}
IF
(
)
(
,
)
;
IF
(
)
=
(
,
,
)
;
ELSE
=
(
,
,
)
;
IF
(
)
=
;
BREAK
;
}
IF
(
)
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
;
,
;
IF
(
(
)
)
{
DO
{
(
)
;
}
WHILE
(
(
)
)
;
RETURN
;
}
IF
(
(
)
)
{
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
=
(
)
;
(
)
;
(
,
,
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
=
;
=
(
)
;
(
)
;
=
;
(
,
,
)
;
(
)
;
=
;
(
,
,
)
;
=
;
RETURN
;
}
IF
(
(
)
)
{
=
;
(
)
;
(
)
;
(
)
;
=
(
)
;
(
)
;
(
)
;
=
;
(
,
,
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
=
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
=
(
)
;
(
)
;
=
;
(
,
,
)
;
(
)
;
IF
(
(
)
)
{
=
;
(
,
,
)
;
=
;
(
)
;
=
;
}
ELSE
=
;
RETURN
;
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
;
,
;
IF
(
)
(
)
;
=
(
)
;
(
)
;
=
(
)
;
=
(
,
,
,
)
;
(
)
;
(
,
,
)
;
}
(
)
{
INT
;
;
;
=
(
(
)
)
;
IF
(
(
)
)
{
IF
(
(
INT
)
)
(
)
;
=
(
INT
)
;
(
)
;
RETURN
;
}
=
;
FOR
(
=
;
;
)
{
=
(
,
,
,
)
;
=
;
IF
(
)
(
)
;
}
=
;
IF
(
(
)
)
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
(
,
,
)
;
RETURN
;
}
(
,
CHAR
,
,
)
{
,
;
CHAR
;
=
;
FOR
(
=
;
;
=
,
=
)
IF
(
(
,
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
(
,
)
;
=
;
=
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
(
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
(
,
)
;
=
;
=
;
=
;
=
;
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
}
ELSE
;
IF
(
)
{
(
INT
)
=
;
IF
(
)
{
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
}
ELSE
;
}
RETURN
;
}
VOID
(
VOID
)
{
CHAR
;
;
;
;
;
INT
;
INT
;
=
(
)
;
IF
(
(
)
)
(
)
;
DO
{
=
(
)
;
=
(
,
,
,
)
;
IF
(
(
)
)
{
IF
(
)
(
,
)
;
IF
(
)
{
=
=
;
=
;
=
(
)
;
=
;
=
;
(
)
=
;
=
;
=
;
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
CONTINUE
;
}
ELSE
IF
(
)
(
,
)
;
=
;
(
,
,
)
;
(
)
;
}
}
WHILE
(
(
)
)
;
(
)
;
}
(
CHAR
,
CHAR
)
{
IF
(
)
(
)
;
(
)
;
=
;
=
(
)
;
=
;
(
)
;
(
)
;
WHILE
(
)
{
IF
(
(
)
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
RETURN
;
}
=
;
(
)
;
}
RETURN
(
)
;
}
__E__O__F__
INT
;
CHAR
;
CHAR
;
INT
;
CHAR
;
;
;
;
CHAR
;
INT
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
,
,
}
;
=
{
,
}
;
=
{
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
,
;
=
{
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
CHAR
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
{
;
=
;
}
ELSE
=
;
;
=
;
IF
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
;
;
DO
{
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
{
=
;
IF
(
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
(
)
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
(
,
)
;
RETURN
;
}
=
;
;
}
WHILE
(
)
;
}
FLOAT
(
VOID
)
{
INT
;
INT
;
=
;
=
;
DO
{
=
;
;
;
=
;
}
WHILE
(
(
)
)
;
=
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
(
)
;
}
IF
(
)
(
)
;
;
}
VOID
(
VOID
)
{
INT
;
INT
;
=
;
=
;
DO
{
=
;
;
;
=
;
}
WHILE
(
(
)
(
)
(
)
)
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
;
=
;
FOR
(
=
;
(
=
)
;
)
{
=
(
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
IF
(
)
;
ELSE
IF
(
)
;
;
RETURN
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
WHILE
(
)
{
WHILE
(
(
=
)
)
{
IF
(
)
(
)
;
IF
(
)
RETURN
;
;
}
IF
(
)
{
WHILE
(
)
;
(
)
;
;
CONTINUE
;
}
IF
(
)
{
DO
{
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
}
WHILE
(
)
;
;
CONTINUE
;
}
BREAK
;
}
}
CHAR
;
INT
;
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
(
,
,
)
;
=
;
=
;
=
;
RETURN
;
}
(
,
)
;
}
(
VOID
)
{
INT
;
INT
;
WHILE
(
(
=
)
)
{
IF
(
)
RETURN
;
;
}
=
;
WHILE
(
(
=
)
)
{
=
;
;
;
}
=
;
RETURN
;
}
VOID
(
VOID
)
{
WHILE
(
(
)
)
{
(
,
)
;
;
}
}
VOID
(
VOID
)
{
;
IF
(
(
)
)
(
)
;
IF
(
(
,
)
)
{
(
)
;
(
)
;
}
ELSE
IF
(
(
,
)
(
,
)
(
,
)
(
,
)
(
,
)
(
,
)
)
{
WHILE
(
(
)
)
;
(
)
;
}
ELSE
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
IF
(
)
{
=
;
RETURN
;
}
(
)
;
=
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
=
;
=
;
=
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
}
VOID
(
CHAR
,
)
{
;
CHAR
;
(
,
)
;
(
,
,
)
;
(
)
;
(
,
,
,
)
;
(
,
)
;
}
VOID
(
CHAR
)
{
IF
(
(
,
)
)
(
,
,
)
;
(
)
;
}
(
CHAR
)
{
IF
(
(
,
)
)
RETURN
;
(
)
;
RETURN
;
}
CHAR
(
VOID
)
{
STATIC
CHAR
;
IF
(
)
(
)
;
IF
(
(
)
)
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
(
)
{
;
;
INT
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
RETURN
;
}
=
(
(
)
)
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
DO
{
IF
(
(
)
)
RETURN
;
(
)
;
}
WHILE
(
)
;
}
CHAR
;
(
VOID
)
{
;
;
CHAR
;
IF
(
(
)
)
{
(
,
,
(
)
)
;
=
;
=
(
)
;
RETURN
(
)
;
}
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
IF
(
(
,
)
)
=
;
ELSE
{
(
,
)
;
=
;
}
(
)
;
IF
(
(
)
)
RETURN
;
(
,
,
(
)
)
;
=
;
=
;
=
;
IF
(
(
)
)
{
IF
(
(
)
)
=
;
ELSE
DO
{
=
(
)
;
=
(
)
;
(
,
)
;
=
;
;
}
WHILE
(
(
)
)
;
(
)
;
}
RETURN
(
)
;
}
__E__O__F__
CHAR
;
CHAR
;
FLOAT
;
INT
;
CHAR
;
INT
;
;
INT
;
INT
;
;
INT
;
;
INT
;
;
INT
;
CHAR
;
INT
;
INT
;
CHAR
;
INT
;
INT
;
CHAR
;
INT
;
INT
;
VOID
(
VOID
)
{
;
INT
;
CHAR
;
(
,
,
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
)
;
}
INT
(
CHAR
)
{
INT
;
=
;
(
,
)
;
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
,
,
;
FOR
(
=
;
;
)
{
=
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
;
(
)
;
}
ELSE
(
)
;
}
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
;
FOR
(
=
;
;
)
{
=
;
(
,
,
,
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
(
,
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
}
VOID
(
INT
)
{
;
;
;
;
INT
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
}
ELSE
IF
(
)
{
=
;
;
=
;
=
(
)
;
=
(
)
;
}
=
;
;
=
;
IF
(
)
;
=
(
)
;
=
;
}
=
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
(
)
;
(
,
,
(
)
)
;
=
(
)
;
=
;
(
,
,
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
(
,
,
(
)
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
(
,
,
(
)
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
(
,
,
(
)
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
(
,
,
(
)
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
(
,
,
)
;
(
,
(
INT
)
(
)
)
;
=
;
=
;
=
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
}
CHAR
(
CHAR
)
{
STATIC
CHAR
;
CHAR
;
=
;
=
;
WHILE
(
)
{
IF
(
(
)
)
BREAK
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
ELSE
=
;
;
IF
(
)
{
=
;
=
;
=
;
BREAK
;
}
}
=
;
=
;
RETURN
;
}
(
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
CONTINUE
;
IF
(
(
(
INT
)
)
)
RETURN
;
}
(
,
)
;
RETURN
;
}
CHAR
(
,
VOID
)
{
STATIC
CHAR
;
;
;
SWITCH
(
)
{
CASE
(
,
,
(
(
INT
)
)
)
;
BREAK
;
CASE
(
,
,
(
INT
)
)
;
BREAK
;
CASE
=
(
INT
)
;
IF
(
)
(
,
)
;
ELSE
(
,
,
)
;
BREAK
;
CASE
=
(
(
INT
)
)
;
(
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
(
FLOAT
)
)
;
BREAK
;
CASE
(
,
,
(
(
FLOAT
)
)
,
(
(
FLOAT
)
)
,
(
(
FLOAT
)
)
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
RETURN
;
}
CHAR
(
)
{
INT
;
;
VOID
;
STATIC
CHAR
;
=
(
VOID
)
;
=
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
,
)
;
=
(
)
;
FOR
(
;
;
)
(
,
)
;
(
,
)
;
RETURN
;
}
CHAR
(
)
{
CHAR
;
INT
;
;
VOID
;
STATIC
CHAR
;
=
(
VOID
)
;
=
;
IF
(
)
RETURN
(
)
;
IF
(
)
{
=
(
,
)
;
(
,
,
,
)
;
}
ELSE
(
,
,
,
)
;
=
(
)
;
FOR
(
;
;
)
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
)
{
(
,
(
)
)
;
}
VOID
(
)
{
INT
;
(
,
(
INT
)
(
)
,
,
)
;
=
(
)
;
FOR
(
;
;
)
(
)
;
IF
(
)
(
,
(
)
,
)
;
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
(
UNSIGNED
)
(
)
)
{
(
,
(
)
)
;
(
,
(
)
)
;
}
ELSE
{
IF
(
)
(
,
(
)
)
;
IF
(
)
(
,
(
)
)
;
IF
(
)
(
,
(
)
)
;
}
(
)
;
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
(
)
;
}
VOID
(
VOID
,
INT
)
{
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
}
(
VOID
)
{
;
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
}
}
}
RETURN
;
}
INT
(
CHAR
)
{
;
;
UNSIGNED
SHORT
;
INT
;
(
,
)
;
=
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
BREAK
;
SWITCH
(
)
{
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
}
(
,
)
;
(
,
)
;
FOR
(
=
;
;
=
)
{
IF
(
(
,
)
)
BREAK
;
IF
(
)
CONTINUE
;
SWITCH
(
)
{
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
BREAK
;
}
}
(
,
)
;
(
)
;
(
)
;
=
(
,
)
;
WHILE
(
(
=
(
)
)
)
(
,
(
)
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
;
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
BREAK
;
IF
(
)
(
,
)
;
=
;
(
,
)
;
=
;
WHILE
(
)
{
(
)
;
IF
(
)
BREAK
;
;
}
}
VOID
(
INT
,
CHAR
)
{
CHAR
;
CHAR
;
CHAR
;
INT
,
;
DOUBLE
,
;
=
(
)
;
=
;
=
;
IF
(
(
)
(
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
ELSE
(
,
)
;
(
)
;
(
,
,
)
;
(
,
(
VOID
)
)
;
=
(
)
;
IF
(
)
(
)
;
(
,
)
;
(
,
)
;
=
;
(
(
)
,
)
;
DO
{
=
(
)
;
IF
(
)
BREAK
;
(
,
,
,
)
;
(
,
)
;
(
,
(
VOID
)
)
;
IF
(
(
,
)
)
(
)
;
}
WHILE
(
)
;
IF
(
(
)
)
(
)
;
=
(
)
;
IF
(
)
{
FOR
(
;
;
)
{
IF
(
)
BREAK
;
(
)
;
}
}
=
(
)
;
(
)
;
(
)
;
=
(
)
;
(
,
(
INT
)
(
)
)
;
}
__E__O__F__
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
CHAR
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
UNSIGNED
SHORT
;
INT
;
INT
;
VOID
(
)
{
INT
,
,
;
;
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
}
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
)
;
}
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
=
(
)
;
=
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
IF
(
)
{
=
(
)
;
IF
(
)
=
;
ELSE
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
FOR
(
=
;
;
)
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
;
INT
(
INT
,
VOID
,
INT
)
{
INT
,
;
=
;
=
;
IF
(
)
(
)
;
(
,
(
)
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
;
(
,
(
VOID
)
)
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
IF
(
)
(
,
,
,
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
(
)
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
(
)
;
(
)
;
}
;
;
VOID
(
INT
,
VOID
,
INT
)
{
;
=
;
=
(
(
)
)
;
=
(
)
;
(
,
,
(
)
)
;
}
VOID
(
CHAR
)
{
=
;
(
,
,
(
)
)
;
(
)
;
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
(
,
,
(
INT
)
(
(
)
)
)
;
IF
(
)
(
)
;
ELSE
(
,
(
(
)
)
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
INT
;
CHAR
;
CHAR
;
;
;
CHAR
;
VOID
(
CHAR
,
)
{
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
CHAR
;
CHAR
;
VOID
(
CHAR
)
{
CHAR
;
CHAR
;
IF
(
(
)
)
{
(
)
;
(
,
)
;
=
;
}
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
{
(
,
,
)
;
(
,
)
;
;
WHILE
(
)
{
IF
(
)
{
(
,
,
)
;
(
,
)
;
RETURN
;
}
;
}
(
,
)
;
RETURN
;
}
(
,
)
;
}
CHAR
(
CHAR
)
{
STATIC
CHAR
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
(
,
,
,
)
;
RETURN
;
}
CHAR
(
CHAR
)
{
CHAR
;
CHAR
;
=
(
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
)
;
}
RETURN
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
(
(
)
)
;
(
,
)
;
RETURN
;
}
DOUBLE
(
VOID
)
{
;
(
)
;
RETURN
;
STRUCT
;
STRUCT
;
STATIC
INT
;
(
,
)
;
IF
(
)
{
=
;
RETURN
;
}
RETURN
(
)
;
}
VOID
(
CHAR
)
{
(
,
)
;
(
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
IF
(
(
)
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
(
,
,
(
)
)
;
}
INT
(
CHAR
)
{
STRUCT
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
CHAR
(
CHAR
)
{
INT
;
INT
;
=
;
=
;
IF
(
)
RETURN
;
WHILE
(
(
=
)
)
{
IF
(
)
{
=
;
RETURN
;
}
;
}
IF
(
)
{
WHILE
(
)
;
GOTO
;
}
IF
(
)
{
;
DO
{
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
;
}
WHILE
(
)
;
}
IF
(
)
{
=
;
;
=
;
RETURN
;
}
DO
{
=
;
;
;
=
;
IF
(
)
BREAK
;
}
WHILE
(
)
;
=
;
RETURN
;
}
INT
(
CHAR
,
CHAR
,
INT
)
{
INT
,
;
WHILE
(
)
{
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
}
IF
(
)
RETURN
;
}
RETURN
;
}
INT
(
CHAR
,
CHAR
)
{
RETURN
(
,
,
)
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
;
WHILE
(
)
{
=
(
)
;
;
}
RETURN
;
}
CHAR
(
CHAR
)
{
CHAR
;
=
;
WHILE
(
)
{
=
(
)
;
;
}
RETURN
;
}
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
INT
(
)
{
INT
;
INT
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
(
CHAR
)
{
;
=
(
,
)
;
IF
(
)
(
,
,
(
)
)
;
RETURN
;
}
(
CHAR
)
{
;
=
(
,
)
;
IF
(
)
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
,
VOID
,
INT
)
{
IF
(
(
,
,
,
)
(
)
)
(
)
;
}
VOID
(
,
VOID
,
INT
)
{
IF
(
(
,
,
,
)
(
)
)
(
)
;
}
INT
(
CHAR
,
VOID
)
{
;
INT
;
VOID
;
=
(
)
;
=
(
)
;
=
(
)
;
(
(
CHAR
)
)
=
;
(
,
,
)
;
(
)
;
=
;
RETURN
;
}
VOID
(
CHAR
,
VOID
,
INT
)
{
;
=
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
)
{
IF
(
)
RETURN
;
;
}
(
,
)
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
IF
(
)
RETURN
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
CHAR
)
{
INT
;
=
(
)
;
WHILE
(
)
;
=
;
}
VOID
(
CHAR
)
{
INT
;
=
(
)
;
WHILE
(
)
{
;
IF
(
)
RETURN
;
}
IF
(
)
=
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
(
)
)
;
(
,
,
)
;
=
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
(
)
)
;
WHILE
(
)
{
=
;
}
=
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
=
(
)
;
WHILE
(
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
(
,
)
;
}
INT
(
CHAR
)
{
CHAR
;
INT
;
=
;
=
;
WHILE
(
)
{
;
IF
(
)
;
ELSE
IF
(
)
;
ELSE
IF
(
)
;
ELSE
(
,
)
;
;
}
RETURN
;
}
INT
(
CHAR
)
{
IF
(
)
RETURN
(
)
;
IF
(
)
RETURN
(
)
;
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
,
;
=
;
=
(
)
;
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
RETURN
;
}
INT
(
INT
)
{
,
,
,
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
(
(
INT
)
)
(
(
INT
)
)
(
(
INT
)
)
;
}
INT
(
INT
)
{
RETURN
;
}
FLOAT
(
FLOAT
)
{
UNION
{
;
FLOAT
;
}
,
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
FLOAT
(
FLOAT
)
{
RETURN
;
}
SHORT
(
SHORT
)
{
,
;
=
;
=
(
)
;
RETURN
(
)
;
}
SHORT
(
SHORT
)
{
RETURN
;
}
INT
(
INT
)
{
,
,
,
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
RETURN
(
(
INT
)
)
(
(
INT
)
)
(
(
INT
)
)
;
}
INT
(
INT
)
{
RETURN
;
}
FLOAT
(
FLOAT
)
{
UNION
{
;
FLOAT
;
}
,
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
FLOAT
(
FLOAT
)
{
RETURN
;
}
STATIC
UNSIGNED
SHORT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
UNSIGNED
SHORT
)
{
=
;
}
VOID
(
UNSIGNED
SHORT
,
)
{
=
(
)
(
)
;
}
UNSIGNED
SHORT
(
UNSIGNED
SHORT
)
{
RETURN
;
}
VOID
(
CHAR
)
{
CHAR
,
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
(
)
;
=
;
}
}
}
VOID
(
CHAR
,
CHAR
)
{
VOID
;
INT
;
=
(
,
)
;
(
)
;
(
,
,
)
;
(
)
;
}
__E__O__F__
(
(
)
(
(
INT
)
)
(
(
INT
)
)
)
(
(
)
(
(
INT
)
)
(
(
INT
)
)
)
(
(
)
(
(
INT
)
)
(
(
INT
)
)
)
(
(
)
(
(
INT
)
)
(
(
INT
)
)
)
(
(
)
(
(
INT
)
)
(
(
INT
)
)
)
(
(
)
(
(
INT
)
)
(
(
INT
)
)
)
;
INT
(
INT
)
{
IF
(
)
RETURN
;
RETURN
;
}
(
,
,
INT
)
{
INT
;
,
;
=
;
DO
{
=
;
IF
(
)
{
=
(
)
;
=
;
(
,
,
)
;
;
}
ELSE
IF
(
)
{
;
(
,
,
)
;
;
;
}
ELSE
=
;
;
}
WHILE
(
)
;
IF
(
)
(
)
;
RETURN
;
}
;
VOID
(
INT
,
)
{
=
;
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
VOID
(
INT
,
)
{
=
;
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
}
VOID
(
INT
,
)
{
=
;
(
)
;
,
,
,
,
,
,
,
,
,
}
VOID
(
INT
,
)
{
=
;
(
)
;
,
,
,
,
,
,
,
}
VOID
(
CHAR
,
,
)
{
,
,
;
INT
,
,
;
,
;
;
;
UNSIGNED
;
INT
,
;
INT
,
;
VOID
(
)
(
INT
,
)
;
=
;
=
;
=
;
(
,
(
VOID
)
)
;
=
;
IF
(
(
INT
)
(
)
)
(
)
;
;
=
(
(
INT
)
)
;
;
=
(
)
;
=
(
(
INT
)
)
;
IF
(
)
(
,
,
(
)
,
(
)
,
(
)
)
;
;
WHILE
(
)
{
=
(
)
(
)
(
)
;
;
=
(
)
(
)
(
)
;
;
SWITCH
(
)
{
CASE
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
BREAK
;
CASE
=
(
)
;
(
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
=
;
=
=
(
)
;
IF
(
)
{
FOR
(
=
;
;
,
)
{
IF
(
)
=
(
(
)
,
,
)
;
ELSE
IF
(
)
{
(
,
,
)
;
(
)
;
}
}
}
ELSE
{
=
;
IF
(
)
;
=
(
)
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
(
,
)
;
}
FOR
(
=
;
;
,
)
{
FOR
(
=
;
;
)
IF
(
)
=
(
(
)
,
,
)
;
ELSE
IF
(
)
{
(
,
,
)
;
;
}
(
,
)
;
}
}
BREAK
;
}
(
)
;
}
(
)
;
=
;
=
;
}
VOID
(
CHAR
,
,
INT
,
INT
,
)
{
,
;
INT
,
,
,
;
INT
;
;
=
=
(
)
;
=
;
=
;
=
;
=
;
=
(
INT
)
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
INT
)
;
;
(
,
,
(
)
)
;
=
(
(
SHORT
)
)
;
=
(
(
SHORT
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
(
SHORT
)
)
;
=
(
(
SHORT
)
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
(
INT
)
;
;
(
,
,
)
;
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
(
INT
)
;
;
(
,
,
)
;
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
(
,
,
)
;
(
)
;
}
__E__O__F__
=
{
,
,
}
;
DOUBLE
(
)
{
INT
;
DOUBLE
;
=
;
FOR
(
=
;
;
)
;
=
(
)
;
RETURN
;
}
(
,
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
)
RETURN
;
RETURN
;
}
(
)
{
RETURN
(
)
;
}
VOID
(
,
DOUBLE
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
(
,
)
{
RETURN
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
VOID
(
,
)
{
=
;
=
;
=
;
}
(
)
{
INT
;
DOUBLE
;
=
;
FOR
(
=
;
;
)
;
=
(
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
;
RETURN
;
}
VOID
(
)
{
=
;
=
;
=
;
}
VOID
(
,
,
)
{
=
;
=
;
=
;
}
__E__O__F__
(
INT
)
{
;
INT
;
=
(
)
(
INT
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
INT
;
VOID
(
)
{
INT
,
,
;
,
;
INT
;
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
IF
(
(
,
)
)
{
(
,
)
;
;
}
}
IF
(
)
RETURN
;
;
=
;
(
,
,
(
)
)
;
}
VOID
(
,
,
)
{
,
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
}
(
)
{
INT
;
,
,
;
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
}
RETURN
;
}
VOID
(
,
)
{
INT
;
,
,
;
FLOAT
;
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
=
;
(
,
,
)
;
}
(
,
FLOAT
)
{
INT
,
;
,
;
,
,
;
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
(
)
;
(
,
)
;
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
=
(
,
)
;
(
,
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
RETURN
;
}
(
)
{
INT
;
;
=
(
INT
)
(
(
)
)
;
=
(
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
,
,
,
,
)
{
;
INT
;
INT
;
;
INT
,
;
,
;
;
,
;
INT
;
=
=
=
;
FOR
(
=
;
;
)
{
=
(
,
)
;
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
=
;
}
;
}
=
;
=
;
=
=
;
IF
(
)
{
=
(
)
;
RETURN
;
}
IF
(
)
{
=
(
)
;
RETURN
;
}
=
;
=
=
(
)
;
=
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
(
,
)
;
;
(
,
)
;
;
CONTINUE
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
{
(
,
)
;
;
}
IF
(
)
CONTINUE
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
(
)
;
}
(
,
)
;
;
(
,
)
;
;
}
IF
(
)
(
)
;
IF
(
)
(
)
;
}
(
,
,
)
{
,
;
(
,
,
,
,
)
;
(
)
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
)
{
INT
,
;
,
;
,
;
,
,
;
;
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
IF
(
)
(
,
)
;
=
;
=
(
,
)
;
IF
(
)
(
)
;
=
;
(
,
,
)
;
IF
(
(
)
)
(
)
;
(
,
,
)
;
(
)
;
=
(
,
)
;
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
,
)
;
IF
(
)
(
)
;
}
}
}
__E__O__F__
CHAR
;
CHAR
,
,
;
INT
;
INT
;
;
;
VOID
(
CHAR
)
{
INT
;
=
(
,
(
VOID
)
)
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
}
(
)
{
CHAR
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
)
;
=
;
RETURN
;
}
WHILE
(
)
{
IF
(
)
{
IF
(
)
(
,
)
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
)
;
;
}
}
IF
(
)
{
IF
(
)
(
,
)
;
=
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
,
)
;
WHILE
(
)
IF
(
)
{
=
;
RETURN
;
}
GOTO
;
}
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
(
,
)
;
}
=
;
RETURN
;
}
(
VOID
)
{
CHAR
;
=
;
IF
(
)
RETURN
;
WHILE
(
)
{
IF
(
)
RETURN
;
;
IF
(
)
RETURN
;
}
IF
(
)
RETURN
;
RETURN
;
}
__E__O__F__
INT
;
INT
;
INT
;
;
INT
(
VOID
)
{
INT
;
INT
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
IF
(
)
{
=
;
IF
(
)
(
,
)
;
}
=
;
;
(
)
;
RETURN
;
}
INT
=
;
;
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
INT
,
,
VOID
(
)
(
INT
)
)
{
INT
;
;
INT
;
=
;
=
;
=
;
=
;
(
)
;
FOR
(
=
;
;
)
{
=
(
,
,
(
)
,
(
)
,
,
)
;
}
FOR
(
=
;
;
)
(
,
)
;
(
)
;
IF
(
)
(
)
;
}
INT
=
;
;
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
INT
,
,
VOID
(
)
(
INT
)
)
{
INT
;
;
;
;
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
(
)
)
;
IF
(
(
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
}
IF
(
(
)
)
(
)
;
IF
(
(
,
)
)
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
,
,
(
)
,
(
)
)
)
(
)
;
}
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
(
)
;
}
IF
(
)
(
)
;
}
INT
=
;
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
VOID
(
INT
,
,
VOID
(
)
(
INT
)
)
{
INT
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
(
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
FLOAT
;
}
;
TYPEDEF
STRUCT
{
;
;
;
FLOAT
;
FLOAT
;
}
;
TYPEDEF
STRUCT
{
;
}
;
VOID
(
)
{
INT
;
FOR
(
=
;
(
)
;
)
{
(
(
INT
)
)
=
(
(
(
INT
)
)
)
;
}
}
VOID
(
CHAR
,
,
INT
)
{
;
FLOAT
;
CHAR
,
;
INT
,
,
;
;
;
INT
;
INT
;
FLOAT
;
=
;
(
(
UNSIGNED
CHAR
)
)
=
(
(
UNSIGNED
CHAR
)
)
;
(
(
UNSIGNED
CHAR
)
)
=
(
(
UNSIGNED
CHAR
)
)
;
(
(
UNSIGNED
CHAR
)
)
=
(
(
UNSIGNED
CHAR
)
)
;
(
(
UNSIGNED
CHAR
)
)
=
(
(
UNSIGNED
CHAR
)
)
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
)
;
(
)
;
}
=
;
(
,
(
INT
)
,
,
)
;
IF
(
(
)
)
{
(
,
)
;
(
)
;
}
=
(
(
)
)
;
=
;
WHILE
(
(
)
)
{
(
,
(
FLOAT
)
,
,
)
;
(
INT
)
=
(
(
INT
)
)
;
IF
(
(
INT
)
)
{
IF
(
)
{
=
;
DO
{
;
(
(
)
,
(
CHAR
)
,
,
)
;
}
WHILE
(
)
;
(
,
(
INT
)
,
,
)
;
=
(
)
;
;
IF
(
)
{
=
;
DO
{
;
(
(
)
,
(
CHAR
)
,
,
)
;
}
WHILE
(
)
;
}
}
ELSE
IF
(
)
{
;
=
;
DO
{
;
(
(
)
,
(
CHAR
)
,
,
)
;
}
WHILE
(
)
;
CONTINUE
;
}
}
FOR
(
=
;
;
)
{
INT
;
(
,
(
)
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
}
}
;
IF
(
(
)
)
(
)
;
}
}
=
;
(
)
;
}
__E__O__F__
;
INT
;
;
;
VOID
(
CHAR
)
{
;
UNSIGNED
;
INT
;
=
(
)
;
(
,
,
(
)
)
;
IF
(
(
,
,
)
)
(
,
)
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
=
(
)
;
=
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
,
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
CHAR
,
CHAR
)
{
INT
;
FOR
(
=
;
(
(
(
)
)
)
;
)
{
IF
(
)
BREAK
;
=
(
)
;
}
FOR
(
;
(
(
(
)
)
)
;
)
=
;
}
INT
(
CHAR
)
{
CHAR
;
INT
,
,
,
;
INT
;
;
(
,
)
;
=
(
INT
)
;
=
(
INT
)
;
=
(
INT
)
;
=
(
INT
)
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
(
INT
)
(
INT
)
(
INT
)
(
INT
)
)
RETURN
;
}
RETURN
;
}
INT
(
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
RETURN
;
(
,
)
;
RETURN
;
}
INT
(
INT
)
{
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
INT
,
VOID
)
{
;
IF
(
)
(
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
)
{
VOID
;
IF
(
(
UNSIGNED
)
)
(
,
)
;
=
(
(
)
)
;
(
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
RETURN
(
(
)
)
;
}
;
;
INT
;
SHORT
(
)
(
SHORT
)
;
INT
(
)
(
INT
)
;
VOID
(
CHAR
,
)
{
=
(
)
;
(
,
(
)
,
)
;
(
,
,
(
)
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
}
VOID
(
CHAR
,
VOID
,
INT
,
INT
,
INT
)
{
;
INT
;
=
;
;
(
,
,
(
)
)
;
(
,
)
;
(
)
;
=
(
)
;
=
(
)
;
=
=
(
)
;
=
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
,
,
)
;
(
,
,
(
)
)
;
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
(
INT
)
(
)
)
(
(
INT
)
(
)
)
(
)
(
(
(
)
)
,
)
(
)
(
(
(
)
,
)
)
(
)
(
(
(
)
)
)
(
)
(
(
(
(
)
)
)
)
TYPEDEF
STRUCT
{
INT
,
;
}
;
TYPEDEF
STRUCT
{
,
;
}
;
TYPEDEF
STRUCT
{
,
;
}
;
TYPEDEF
STRUCT
{
,
;
}
;
TYPEDEF
STRUCT
{
,
;
}
;
(
(
)
)
=
{
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
}
;
(
(
)
(
)
)
(
(
)
)
=
{
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
}
;
(
(
)
(
)
)
(
)
=
{
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
}
;
(
(
)
(
)
)
(
)
=
{
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
}
}
;
(
(
)
(
)
)
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
=
;
=
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
,
;
STATIC
,
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
,
;
STATIC
,
;
STATIC
;
STATIC
=
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
UNSIGNED
CHAR
=
{
,
,
,
,
}
;
STATIC
=
{
,
}
;
STATIC
=
;
EXTERN
;
VOID
(
INT
,
INT
,
INT
,
INT
)
;
VOID
(
,
)
{
INT
,
;
=
;
=
;
IF
(
)
=
(
)
;
ELSE
=
(
,
)
;
IF
(
)
=
(
)
;
ELSE
=
(
,
)
;
}
VOID
(
VOID
)
{
;
;
=
(
)
;
=
(
)
;
;
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
=
=
;
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
;
=
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
=
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
=
;
}
;
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
STATIC
=
{
,
}
;
=
;
=
;
=
;
=
;
=
;
=
=
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
=
)
FOR
(
=
;
;
)
IF
(
)
BREAK
;
=
;
=
;
=
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
=
;
=
;
=
;
(
)
;
(
)
;
=
(
,
(
INT
)
(
)
)
;
IF
(
)
=
;
=
(
,
)
;
}
VOID
(
VOID
)
{
STATIC
=
{
,
,
}
;
(
)
;
=
;
(
)
;
=
;
}
VOID
(
VOID
)
{
STATIC
INT
=
,
=
;
IF
(
)
(
)
;
=
;
IF
(
)
{
(
)
;
=
;
=
;
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
=
;
=
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
=
;
=
(
,
)
;
(
)
;
}
(
)
{
INT
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
CHAR
;
=
;
IF
(
)
{
IF
(
)
{
(
)
;
=
;
=
;
}
}
ELSE
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
IF
(
)
=
(
)
;
ELSE
=
;
BREAK
;
CASE
IF
(
)
=
(
)
;
ELSE
=
;
BREAK
;
CASE
IF
(
)
=
(
)
;
ELSE
=
;
BREAK
;
CASE
IF
(
)
=
(
)
;
ELSE
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
(
)
;
BREAK
;
CASE
=
;
IF
(
)
{
(
)
;
(
)
;
}
ELSE
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
(
,
,
,
)
;
=
;
(
)
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
DEFAULT
=
;
=
;
}
IF
(
(
,
)
)
{
=
;
=
(
)
;
}
}
ELSE
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
CASE
=
;
=
;
BREAK
;
}
}
RETURN
;
}
VOID
(
VOID
)
{
=
(
,
)
;
=
(
,
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
STATIC
=
;
STATIC
INT
=
{
,
,
,
,
,
,
,
}
;
STATIC
INT
=
;
IF
(
)
{
=
;
IF
(
(
)
(
INT
)
)
=
;
=
(
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
VOID
(
INT
)
{
(
,
,
)
;
}
(
,
)
{
ENUM
{
=
,
=
,
=
,
=
}
;
REGISTER
=
;
REGISTER
=
;
REGISTER
;
;
INT
;
INT
;
(
,
,
)
(
)
=
;
IF
(
(
)
)
(
)
;
ELSE
IF
(
(
)
)
(
)
;
IF
(
(
)
)
(
)
;
ELSE
IF
(
(
)
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
RETURN
;
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
RETURN
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
RETURN
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
=
(
(
)
)
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
(
(
)
)
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
(
(
)
)
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
(
(
)
)
;
=
;
}
IF
(
)
{
=
;
(
,
,
)
;
}
ELSE
{
=
;
(
,
,
)
;
}
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
,
INT
)
{
REGISTER
INT
;
REGISTER
INT
;
REGISTER
INT
;
REGISTER
INT
;
REGISTER
INT
;
REGISTER
INT
;
REGISTER
INT
;
REGISTER
INT
;
REGISTER
INT
;
STATIC
=
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
,
)
(
)
(
)
=
(
)
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
IF
(
)
{
=
;
WHILE
(
)
{
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
;
}
;
;
}
}
ELSE
{
=
;
WHILE
(
)
{
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
;
;
}
;
;
}
}
}
VOID
(
,
INT
)
{
STATIC
;
IF
(
(
,
)
)
(
,
)
;
}
VOID
(
INT
)
{
,
;
,
;
;
=
;
IF
(
(
)
(
)
)
(
)
(
(
)
(
)
)
;
=
;
=
;
=
;
FOR
(
=
;
;
(
)
)
{
=
;
=
;
(
,
)
;
}
=
;
IF
(
(
)
(
)
)
(
)
(
(
)
(
)
)
;
=
;
=
;
=
;
FOR
(
=
;
;
(
)
)
{
=
;
=
;
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
STATIC
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
IF
(
(
)
)
{
IF
(
(
)
)
CONTINUE
;
IF
(
)
{
(
,
)
;
}
ELSE
{
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
}
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
(
,
)
;
}
}
}
VOID
(
,
,
)
{
;
=
(
,
)
(
,
)
;
=
(
,
)
(
,
)
;
=
;
}
VOID
(
,
INT
,
,
,
INT
,
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
{
=
(
,
)
;
=
(
,
)
;
}
IF
(
)
(
,
,
)
;
;
;
=
;
=
;
IF
(
)
{
=
(
,
)
;
=
(
,
)
;
}
IF
(
)
(
,
,
)
;
;
;
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
STATIC
INT
=
{
,
,
,
}
;
INT
=
;
INT
;
IF
(
)
{
IF
(
)
(
,
,
,
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
;
=
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
ELSE
=
;
(
,
,
,
,
,
,
)
;
}
}
VOID
(
INT
,
INT
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
WHILE
(
)
{
(
,
,
,
,
,
,
)
;
=
;
}
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
(
,
,
,
)
;
}
}
}
VOID
(
INT
)
{
(
(
)
)
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
)
;
(
)
;
(
)
;
(
,
,
,
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
VOID
(
VOID
)
;
CHAR
;
;
;
;
;
;
=
;
EXTERN
;
;
INT
;
INT
;
;
;
;
CHAR
;
CHAR
;
CHAR
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
;
;
INT
;
INT
;
VOID
(
)
{
=
;
=
(
)
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
(
)
(
(
)
)
)
RETURN
;
FOR
(
;
;
=
(
)
(
)
)
{
=
;
IF
(
(
)
)
CONTINUE
;
(
)
;
}
}
=
;
EXTERN
;
EXTERN
INT
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
=
;
STATIC
INT
;
INT
;
INT
;
INT
;
INT
;
;
;
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
(
)
;
=
;
=
;
}
IF
(
)
{
=
;
(
,
,
,
)
;
}
ELSE
=
;
IF
(
)
(
)
;
SWITCH
(
)
{
CASE
IF
(
)
BREAK
;
IF
(
)
(
)
;
IF
(
(
)
)
=
;
IF
(
)
=
;
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
(
,
)
)
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
{
IF
(
)
=
;
IF
(
)
{
(
)
;
;
}
}
=
;
=
;
=
;
=
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
(
)
,
,
,
(
,
)
)
;
}
(
)
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
,
,
,
)
;
=
(
)
;
DO
{
DO
{
=
(
)
;
=
;
}
WHILE
(
)
;
=
;
=
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
}
WHILE
(
)
;
}
EXTERN
;
VOID
(
VOID
)
{
IF
(
)
(
)
;
IF
(
(
)
)
{
CHAR
;
(
,
,
)
;
(
,
)
;
=
(
,
)
;
}
(
)
;
WHILE
(
)
{
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
;
;
}
ELSE
{
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
}
}
INT
;
INT
;
CHAR
;
VOID
(
VOID
)
{
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
,
,
,
(
,
)
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
SWITCH
(
)
{
CASE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
=
;
IF
(
)
{
=
;
=
;
(
)
;
}
ELSE
{
=
;
IF
(
)
=
;
ELSE
=
;
}
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
VOID
(
VOID
)
{
=
;
=
;
(
)
;
}
CHAR
;
VOID
(
CHAR
)
{
INT
;
CHAR
;
FOR
(
=
;
;
)
;
=
(
(
)
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
=
(
)
;
IF
(
)
=
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
(
)
)
;
(
,
,
)
;
=
(
)
;
IF
(
)
(
)
;
(
,
,
)
;
IF
(
(
)
)
{
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
RETURN
;
}
IF
(
(
)
)
{
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
RETURN
;
}
IF
(
(
)
)
{
=
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
=
;
(
)
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
CHAR
;
CHAR
;
CHAR
;
=
(
,
)
;
IF
(
)
{
(
)
;
(
)
;
}
(
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
,
)
;
(
)
;
FOR
(
=
,
=
;
;
)
=
;
=
;
=
(
(
CHAR
)
)
;
(
,
,
(
CHAR
)
)
;
=
;
=
;
=
=
;
;
DO
{
=
;
WHILE
(
(
(
(
)
)
(
(
)
)
)
)
;
(
)
=
;
WHILE
(
(
(
(
)
)
(
(
)
)
)
)
;
}
WHILE
(
)
;
FOR
(
=
;
;
)
=
;
=
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
BREAK
;
}
}
VOID
(
VOID
)
{
INT
;
CHAR
;
(
)
;
(
)
;
(
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
=
;
ELSE
IF
(
(
)
)
=
;
SWITCH
(
)
{
CASE
(
,
,
,
)
;
BREAK
;
CASE
(
,
,
,
)
;
BREAK
;
CASE
(
,
,
,
)
;
BREAK
;
CASE
(
,
,
,
)
;
BREAK
;
DEFAULT
(
,
,
,
)
;
BREAK
;
}
(
,
)
;
IF
(
)
(
)
;
IF
(
(
)
)
{
(
)
;
(
,
)
;
(
,
)
;
}
IF
(
(
=
(
)
)
)
{
INT
=
;
EXTERN
INT
;
EXTERN
INT
;
IF
(
)
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
=
;
=
;
=
;
=
;
}
=
(
)
;
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
CASE
CASE
(
,
,
,
)
;
(
,
,
)
;
BREAK
;
CASE
DEFAULT
=
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
BREAK
;
}
(
)
;
}
=
(
)
;
IF
(
)
{
=
;
WHILE
(
)
(
)
;
}
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
(
,
,
)
;
(
)
;
(
,
)
;
}
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
=
(
)
;
IF
(
)
{
INT
;
=
(
)
;
(
,
)
;
IF
(
)
(
)
;
(
)
;
}
=
(
)
;
IF
(
)
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
=
(
)
;
ELSE
{
=
;
=
;
}
=
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
;
IF
(
)
(
)
;
IF
(
)
FOR
(
=
;
;
)
IF
(
(
)
)
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
}
SWITCH
(
)
{
CASE
CASE
(
)
;
BREAK
;
CASE
CASE
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
IF
(
)
{
EXTERN
VOID
;
=
(
VOID
)
(
)
;
(
)
;
}
=
(
)
;
IF
(
)
{
(
)
;
=
;
}
=
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
}
=
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
=
(
)
;
IF
(
)
{
IF
(
(
)
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
}
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
)
;
}
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
;
;
;
INT
;
;
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
;
;
;
INT
(
VOID
)
{
RETURN
(
INT
)
(
(
(
)
)
)
;
}
UNSIGNED
(
VOID
)
{
UNSIGNED
;
INT
,
;
=
;
RETURN
;
=
(
(
)
(
INT
)
(
(
(
)
)
)
)
;
FOR
(
=
;
;
)
(
(
UNSIGNED
)
)
(
)
;
RETURN
;
}
INT
(
INT
)
{
INT
;
=
(
)
;
IF
(
)
RETURN
(
)
;
IF
(
)
RETURN
(
)
;
IF
(
)
RETURN
(
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
INT
,
INT
)
{
=
(
)
;
IF
(
)
{
=
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
(
)
;
=
;
=
;
=
(
)
;
IF
(
)
{
INT
;
INT
;
IF
(
)
=
(
)
;
ELSE
=
;
(
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
(
(
)
)
)
;
(
,
)
;
}
(
)
;
}
(
VOID
)
{
IF
(
)
{
=
;
=
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
(
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
IF
(
)
(
,
,
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
IF
(
)
(
,
)
;
RETURN
;
}
IF
(
)
{
INT
;
INT
;
IF
(
)
(
,
)
;
ELSE
{
IF
(
)
=
(
)
;
ELSE
=
;
(
,
,
,
(
)
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
(
(
)
)
)
;
(
,
)
;
}
}
RETURN
;
}
CHAR
;
VOID
(
VOID
)
{
INT
;
INT
;
,
;
INT
;
INT
;
WHILE
(
(
)
)
{
IF
(
)
CONTINUE
;
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
CONTINUE
;
=
;
=
;
(
,
)
;
;
=
;
IF
(
)
(
)
;
CONTINUE
;
}
IF
(
)
(
)
;
=
;
IF
(
(
)
)
{
=
(
)
;
IF
(
)
(
,
,
)
;
=
;
}
ELSE
;
IF
(
)
CONTINUE
;
IF
(
)
{
IF
(
)
(
,
,
,
)
;
CONTINUE
;
}
IF
(
)
{
IF
(
)
(
,
,
,
,
)
;
=
;
CONTINUE
;
}
{
INT
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
;
=
;
;
}
}
}
}
INT
;
VOID
(
VOID
)
{
INT
;
INT
;
INT
,
;
INT
;
INT
;
=
(
)
;
=
;
=
;
IF
(
)
GOTO
;
IF
(
)
{
;
=
;
}
ELSE
{
;
=
;
}
=
;
=
;
FOR
(
=
;
;
)
{
(
)
;
(
)
;
IF
(
)
BREAK
;
(
)
;
;
}
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
{
=
=
;
=
;
IF
(
)
(
)
;
=
;
FOR
(
=
;
;
)
=
(
)
;
IF
(
)
{
=
;
(
,
)
;
}
ELSE
{
=
;
(
,
)
;
}
}
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
=
(
)
;
WHILE
(
(
)
)
(
)
;
(
)
;
FOR
(
;
;
=
(
)
(
)
)
{
=
;
IF
(
)
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
=
;
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
WHILE
(
)
{
(
)
;
IF
(
(
)
)
CONTINUE
;
IF
(
)
{
IF
(
)
(
)
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
RETURN
;
}
}
}
ELSE
{
(
)
;
DO
{
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
)
;
IF
(
)
;
IF
(
)
;
=
;
=
;
=
;
(
,
)
;
}
FOR
(
=
;
(
)
;
)
{
IF
(
(
)
)
=
;
}
WHILE
(
(
)
)
{
=
;
}
FOR
(
=
;
;
)
IF
(
)
BREAK
;
}
WHILE
(
)
;
}
}
EXTERN
INT
;
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
}
(
)
;
IF
(
)
(
)
;
=
;
=
=
;
IF
(
)
(
)
;
(
,
,
,
,
)
;
=
;
=
(
)
;
IF
(
)
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
(
)
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
IF
(
)
(
,
)
;
(
)
;
}
}
INT
;
INT
;
INT
;
INT
;
EXTERN
;
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
STATIC
INT
;
INT
;
INT
;
INT
;
INT
;
=
(
)
;
=
;
=
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
IF
(
)
=
;
}
}
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
;
IF
(
)
(
,
,
,
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
}
ELSE
{
IF
(
)
{
;
}
=
(
)
;
=
;
IF
(
)
{
=
;
}
}
}
WHILE
(
)
{
(
)
;
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
IF
(
)
(
)
;
IF
(
(
)
)
{
(
)
;
RETURN
;
}
}
WHILE
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
;
IF
(
)
{
;
INT
;
INT
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
;
}
}
}
(
)
;
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
;
INT
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
=
;
CHAR
;
CHAR
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
(
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
CASE
CASE
{
(
,
)
;
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
BREAK
;
}
BREAK
;
}
CASE
{
(
,
)
;
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
BREAK
;
}
BREAK
;
}
DEFAULT
(
,
)
;
=
;
=
;
BREAK
;
}
=
;
=
;
}
(
)
{
IF
(
)
RETURN
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
)
(
)
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
=
;
}
}
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
(
)
)
{
=
;
=
;
=
;
IF
(
)
(
)
;
}
}
EXTERN
;
VOID
(
VOID
)
{
;
;
INT
,
,
;
INT
;
CHAR
;
INT
;
INT
;
INT
;
=
(
,
)
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
,
(
(
)
)
,
)
;
;
}
IF
(
)
{
(
,
(
(
)
)
,
)
;
(
)
;
}
}
(
,
,
,
)
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
FOR
(
;
;
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
;
CONTINUE
;
}
=
(
)
;
IF
(
)
{
;
CONTINUE
;
}
=
(
)
;
IF
(
)
BREAK
;
(
,
,
,
)
;
;
}
}
TYPEDEF
STRUCT
{
CHAR
;
;
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
INT
;
INT
;
;
;
INT
;
INT
;
;
EXTERN
;
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
;
=
;
IF
(
)
=
;
IF
(
)
(
,
)
;
=
;
=
;
}
ELSE
{
IF
(
)
GOTO
;
=
;
=
;
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
=
;
BREAK
;
}
IF
(
)
(
,
)
;
}
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
}
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
}
}
=
;
IF
(
)
=
;
}
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
CHAR
)
{
CHAR
;
INT
;
INT
;
INT
;
INT
;
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
=
(
)
;
IF
(
)
{
;
CONTINUE
;
}
=
(
)
;
;
}
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
=
(
)
;
IF
(
)
{
;
CONTINUE
;
}
=
(
)
;
(
,
,
,
)
;
;
}
}
VOID
(
INT
,
INT
,
INT
,
)
;
VOID
(
VOID
)
{
;
;
INT
;
;
;
(
,
,
,
(
,
)
)
;
(
)
;
=
;
=
;
=
;
=
(
)
;
=
(
,
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
}
VOID
(
INT
,
,
INT
)
{
;
;
;
;
INT
;
=
(
)
(
(
)
(
)
)
;
=
;
WHILE
(
)
{
=
(
)
;
=
;
=
;
WHILE
(
)
{
=
;
;
}
=
(
)
(
(
)
)
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
;
;
CHAR
;
INT
;
STATIC
INT
;
=
(
,
)
;
=
(
,
)
;
(
,
,
,
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
IF
(
)
RETURN
;
IF
(
)
{
(
(
)
,
(
)
,
,
(
,
)
)
;
=
;
RETURN
;
}
=
(
)
;
IF
(
)
=
;
IF
(
)
{
(
,
)
;
=
;
}
(
,
,
)
;
(
(
)
,
(
)
,
,
(
,
)
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
(
)
;
ELSE
{
SWITCH
(
)
{
CASE
IF
(
)
(
,
,
,
(
,
)
)
;
ELSE
(
,
,
,
(
,
)
)
;
BREAK
;
CASE
(
,
,
,
(
,
)
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
,
,
,
(
,
)
)
;
BREAK
;
}
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
STATIC
=
;
STATIC
;
STATIC
;
STATIC
;
VOID
(
SHORT
,
INT
,
INT
)
{
INT
;
INT
;
SHORT
;
=
(
SHORT
)
(
,
,
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
;
(
,
,
)
;
(
)
;
}
INT
(
INT
,
INT
,
INT
)
{
(
,
,
)
;
RETURN
;
}
INT
(
INT
,
INT
,
INT
)
{
;
;
;
INT
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
=
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
=
;
}
}
;
;
}
RETURN
;
}
INT
(
INT
,
INT
,
INT
)
{
RETURN
;
}
STATIC
INT
;
INT
(
INT
,
INT
,
INT
)
{
INT
,
;
(
,
,
)
;
(
(
SHORT
)
,
,
)
;
(
(
SHORT
)
,
,
)
;
=
(
INT
)
(
(
INT
)
,
,
)
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
RETURN
;
}
INT
(
INT
,
INT
,
INT
)
{
INT
;
INT
;
INT
;
INT
;
SHORT
;
SHORT
;
=
;
;
WHILE
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
;
=
;
}
ELSE
IF
(
)
{
=
(
)
;
IF
(
)
=
;
=
(
(
SHORT
)
)
;
=
(
(
SHORT
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
;
}
;
=
(
(
SHORT
)
)
;
=
(
(
SHORT
)
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
;
}
=
;
}
}
}
RETURN
;
}
INT
(
INT
,
INT
,
INT
)
{
(
)
;
RETURN
;
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
=
;
(
)
;
RETURN
;
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
=
;
(
)
;
(
,
,
,
,
,
)
;
RETURN
;
}
INT
(
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
INT
;
STATIC
INT
(
)
(
INT
,
INT
,
INT
)
=
{
,
,
,
,
,
}
;
VOID
(
INT
,
INT
,
INT
,
INT
)
;
IF
(
)
{
=
;
=
;
(
)
(
,
,
)
;
}
(
,
,
,
)
;
=
(
)
(
,
,
)
;
IF
(
)
{
=
;
(
)
(
,
,
)
;
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
VOID
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
INT
)
;
VOID
(
,
INT
,
INT
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
;
;
;
;
INT
;
INT
;
;
;
;
;
;
;
;
INT
;
;
;
;
;
;
INT
;
INT
;
INT
;
INT
;
INT
,
,
;
CHAR
;
;
;
;
;
;
;
;
=
;
;
SHORT
;
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
(
)
=
{
,
}
;
=
{
,
}
;
=
{
,
,
}
;
;
INT
;
;
=
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
=
;
INT
;
CHAR
;
;
INT
;
VOID
;
INT
(
)
{
INT
;
INT
=
;
FOR
(
=
;
(
)
;
)
(
(
INT
)
)
;
RETURN
;
}
VOID
(
)
{
INT
;
;
;
INT
;
INT
;
INT
;
INT
;
;
=
(
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
=
;
IF
(
)
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
{
;
}
IF
(
)
{
;
}
IF
(
)
;
IF
(
)
;
}
ELSE
{
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
IF
(
)
{
;
}
IF
(
)
{
;
}
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
=
(
)
;
IF
(
)
;
IF
(
)
{
;
=
;
}
FOR
(
=
;
;
)
IF
(
)
{
;
;
BREAK
;
}
IF
(
)
;
IF
(
)
{
=
;
IF
(
)
;
IF
(
)
{
;
=
;
}
ELSE
=
;
}
ELSE
{
;
IF
(
)
{
=
;
=
;
}
}
=
;
IF
(
)
{
=
;
IF
(
)
;
IF
(
)
{
;
=
;
}
ELSE
=
;
}
ELSE
{
;
IF
(
)
{
=
;
=
;
}
}
;
IF
(
)
;
ELSE
;
=
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
;
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
=
(
)
;
}
}
EXTERN
;
VOID
(
VOID
)
{
INT
;
=
(
)
;
IF
(
(
)
(
)
(
)
)
{
=
(
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
}
=
;
IF
(
)
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
(
,
,
(
)
)
;
}
(
,
,
,
)
;
=
;
=
(
)
;
=
;
(
)
;
(
,
,
(
)
)
;
=
=
;
=
=
;
=
=
=
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
}
(
)
{
IF
(
(
)
)
{
DO
{
;
IF
(
)
=
;
}
WHILE
(
)
;
RETURN
;
}
IF
(
(
)
)
{
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
=
;
RETURN
;
CASE
IF
(
)
=
;
RETURN
;
CASE
=
;
=
;
=
;
=
(
)
;
=
(
)
;
RETURN
;
CASE
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
DEFAULT
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
;
FOR
(
=
;
;
)
IF
(
)
(
)
;
WHILE
(
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
CASE
BREAK
;
}
}
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
,
,
(
)
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
(
)
(
(
)
)
)
{
STATIC
CHAR
;
EXTERN
CHAR
;
(
,
,
)
;
=
;
}
IF
(
(
)
)
{
IF
(
)
{
(
,
,
)
;
}
IF
(
)
=
;
ELSE
=
;
}
}
}
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
{
SWITCH
(
)
{
CASE
;
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
CASE
IF
(
)
(
,
)
;
=
(
)
;
=
;
BREAK
;
}
}
}
}
SWITCH
(
)
{
CASE
(
)
;
(
)
;
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
VOID
(
INT
)
{
;
=
;
(
)
;
}
VOID
(
INT
)
{
;
=
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
;
=
;
=
;
=
;
=
;
}
VOID
(
INT
)
{
;
INT
;
INT
;
INT
;
INT
;
INT
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
=
;
=
;
=
;
=
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
}
VOID
(
)
;
(
INT
,
)
{
;
;
;
UNSIGNED
;
;
INT
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
=
;
=
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
)
(
)
;
=
;
;
=
(
,
)
;
=
(
(
)
)
;
=
(
,
,
,
)
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
INT
)
{
INT
,
;
INT
;
=
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
(
,
)
)
{
=
;
(
)
;
RETURN
;
}
}
(
)
;
}
VOID
(
INT
)
{
INT
;
IF
(
)
{
=
;
}
ELSE
{
=
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
,
)
)
{
(
)
;
RETURN
;
}
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
;
(
)
;
=
;
RETURN
;
}
}
(
)
;
}
}
VOID
(
VOID
)
{
=
;
}
INT
=
{
{
}
,
{
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
}
}
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
;
EXTERN
CHAR
;
VOID
(
VOID
)
{
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
(
)
(
(
)
)
)
=
;
ELSE
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
SWITCH
(
)
{
CASE
=
;
RETURN
;
CASE
FOR
(
=
;
;
)
=
;
BREAK
;
}
IF
(
(
)
(
)
)
{
=
;
RETURN
;
}
IF
(
(
)
(
)
)
{
FOR
(
=
;
;
)
=
;
}
=
;
=
;
=
;
IF
(
)
{
IF
(
)
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
ELSE
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
DEFAULT
=
;
}
}
ELSE
{
IF
(
)
=
;
ELSE
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
ELSE
=
;
}
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
}
=
;
=
;
=
;
IF
(
)
(
,
,
(
)
)
;
(
)
;
}
VOID
(
VOID
)
{
=
;
IF
(
)
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
IF
(
)
BREAK
;
CASE
CASE
CASE
CASE
(
)
;
BREAK
;
}
}
}
VOID
(
VOID
)
{
=
;
=
;
(
)
;
=
;
=
;
}
EXTERN
;
VOID
(
VOID
)
;
CHAR
;
VOID
(
CHAR
)
{
(
,
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
,
,
;
CHAR
;
=
;
=
(
,
)
;
=
;
(
,
,
(
)
)
;
(
,
,
)
;
IF
(
(
,
)
)
RETURN
;
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
(
,
,
)
;
=
;
=
;
=
;
=
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
}
VOID
(
INT
,
CHAR
)
{
=
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
CHAR
;
INT
;
INT
;
IF
(
(
)
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
;
=
=
;
(
,
,
)
;
;
(
,
,
(
)
)
;
(
,
,
)
;
(
,
,
)
;
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
IF
(
)
(
)
;
(
,
,
)
;
=
;
=
;
=
;
(
)
;
}
;
INT
;
INT
;
VOID
(
,
INT
,
INT
)
{
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
=
=
;
=
;
=
;
=
;
=
;
(
,
,
)
;
=
;
}
EXTERN
INT
;
VOID
(
,
INT
,
INT
)
{
INT
;
IF
(
)
{
=
;
(
)
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
=
;
IF
(
(
)
(
)
)
=
;
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
;
=
;
=
;
=
;
}
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
}
ELSE
SWITCH
(
)
{
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
}
(
)
;
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
(
SIGNED
CHAR
)
)
;
=
(
(
SIGNED
CHAR
)
)
;
=
(
(
UNSIGNED
CHAR
)
)
;
=
(
UNSIGNED
CHAR
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
=
;
=
;
=
(
)
;
=
;
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
}
VOID
(
CHAR
)
{
INT
;
INT
;
=
;
(
,
)
;
(
,
)
;
=
;
=
(
)
;
IF
(
)
=
(
)
;
=
(
,
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
}
CHAR
;
VOID
(
CHAR
)
{
=
;
=
;
}
VOID
(
VOID
)
{
;
INT
,
,
;
=
;
=
=
(
,
)
;
IF
(
)
{
(
,
)
;
=
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
IF
(
)
{
=
;
=
;
}
=
;
(
,
,
)
;
=
;
=
;
=
;
}
VOID
(
CHAR
)
{
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
}
(
VOID
)
{
INT
;
IF
(
)
{
=
(
)
;
(
,
,
)
;
}
IF
(
)
{
IF
(
)
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
=
=
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
IF
(
)
{
=
;
(
,
,
)
;
(
)
;
=
;
(
,
)
;
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
EXTERN
;
VOID
(
VOID
)
{
}
VOID
(
)
{
=
;
=
;
=
;
}
VOID
(
,
INT
,
INT
,
,
INT
)
{
=
;
=
;
=
;
=
;
(
)
;
}
(
,
CHAR
)
{
IF
(
)
RETURN
;
ELSE
{
=
;
=
;
=
;
RETURN
;
}
}
(
)
{
IF
(
)
RETURN
;
ELSE
{
=
;
=
;
RETURN
;
}
}
VOID
(
,
)
{
INT
;
INT
;
INT
;
UNSIGNED
CHAR
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
BREAK
;
(
,
,
,
)
;
;
}
ELSE
{
;
IF
(
)
BREAK
;
}
}
IF
(
(
)
)
{
(
,
,
,
)
;
}
}
VOID
(
)
{
INT
;
INT
;
INT
;
STATIC
=
;
IF
(
)
{
=
(
)
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
(
,
)
;
ELSE
{
(
,
)
;
(
,
)
;
}
}
}
=
;
IF
(
)
;
}
VOID
(
,
INT
,
INT
,
INT
,
,
INT
,
)
{
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
(
,
,
(
(
)
)
,
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
=
;
(
)
;
FOR
(
=
;
;
)
=
;
}
VOID
(
,
CHAR
,
CHAR
)
{
(
)
;
IF
(
)
WHILE
(
)
(
,
(
)
)
;
WHILE
(
)
(
,
(
)
)
;
}
VOID
(
)
{
INT
,
;
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
;
=
;
(
,
)
;
}
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
(
)
;
}
=
;
}
VOID
(
,
INT
,
INT
,
,
INT
,
)
{
=
;
=
;
=
;
(
,
,
,
,
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
}
VOID
(
)
{
WHILE
(
)
(
)
;
}
VOID
(
)
{
=
;
(
)
;
}
VOID
(
,
CHAR
)
{
WHILE
(
)
(
,
(
)
)
;
=
;
}
(
,
UNSIGNED
CHAR
)
{
IF
(
)
(
,
(
CHAR
)
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
=
;
IF
(
)
RETURN
;
(
,
)
;
}
VOID
(
)
{
IF
(
)
=
;
(
)
;
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
(
)
)
(
)
(
)
(
)
(
(
)
)
(
(
(
)
)
)
CHAR
=
{
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
}
;
CHAR
;
STATIC
;
;
STATIC
;
;
STATIC
;
STATIC
=
;
STATIC
CHAR
;
STATIC
;
STATIC
;
;
STATIC
;
STATIC
;
STATIC
INT
;
EXTERN
INT
;
EXTERN
;
STATIC
=
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CONST
CHAR
;
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
CHAR
(
UNSIGNED
CHAR
)
{
RETURN
;
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
(
,
)
;
}
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
)
;
SWITCH
(
)
{
CASE
CASE
CASE
=
;
BREAK
;
CASE
DEFAULT
=
;
BREAK
;
}
WHILE
(
)
(
,
(
)
)
;
(
,
,
,
,
,
)
;
FOR
(
=
;
;
)
(
,
,
,
,
,
)
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
CHAR
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
IF
(
(
)
(
)
)
{
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
}
}
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
(
=
)
)
{
IF
(
)
=
;
ELSE
{
IF
(
)
=
(
CHAR
)
(
UNSIGNED
CHAR
)
;
=
(
,
)
;
IF
(
)
{
IF
(
(
)
)
{
(
,
,
)
;
=
;
=
;
=
;
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
(
)
;
}
}
=
;
}
}
}
}
STATIC
CHAR
;
STATIC
INT
=
;
STATIC
INT
=
;
VOID
(
CHAR
)
{
IF
(
(
(
)
(
)
)
)
{
=
;
}
ELSE
{
=
;
=
(
)
(
)
;
}
}
CHAR
(
VOID
)
{
CHAR
;
IF
(
)
{
=
;
=
(
)
(
)
;
}
ELSE
{
=
;
}
RETURN
;
}
(
)
{
STATIC
CHAR
;
CHAR
;
=
;
STATIC
=
;
STATIC
=
;
UNSIGNED
CHAR
;
INT
;
INT
;
STATIC
CHAR
=
{
,
,
,
}
;
STATIC
INT
=
;
=
;
FOR
(
=
;
;
)
;
IF
(
)
{
=
;
RETURN
;
}
ELSE
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
=
;
(
)
;
(
)
;
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
{
=
=
;
(
)
;
(
)
;
BREAK
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
}
}
}
}
ELSE
{
=
;
IF
(
)
{
=
;
IF
(
)
RETURN
;
=
;
(
)
;
WHILE
(
)
(
)
;
(
)
;
=
;
(
,
)
;
=
;
=
;
}
ELSE
{
IF
(
)
=
(
)
;
IF
(
(
)
)
=
;
=
(
,
)
;
IF
(
)
{
(
)
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
)
;
=
;
}
}
ELSE
IF
(
)
=
;
}
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
)
(
(
UNSIGNED
LONG
INT
)
(
(
(
(
UNSIGNED
LONG
INT
)
(
)
)
)
(
(
(
UNSIGNED
LONG
INT
)
(
)
)
)
(
(
(
UNSIGNED
LONG
INT
)
(
)
)
)
(
(
(
UNSIGNED
LONG
INT
)
(
)
)
)
)
)
(
)
(
(
UNSIGNED
SHORT
INT
)
(
(
(
(
UNSIGNED
SHORT
INT
)
(
)
)
)
(
(
(
UNSIGNED
SHORT
INT
)
(
)
)
)
)
)
(
)
(
)
(
)
(
)
VOID
(
VOID
)
;
(
VOID
)
;
INT
=
(
)
;
INT
;
INT
;
STRUCT
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
INT
(
VOID
)
{
INT
;
=
(
,
,
)
;
IF
(
)
(
,
(
)
)
;
RETURN
;
}
VOID
(
INT
,
INT
)
{
INT
;
STRUCT
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
(
,
(
VOID
)
,
(
)
)
;
IF
(
)
(
,
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
}
=
(
,
,
,
,
(
VOID
)
,
(
)
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
STRUCT
;
INT
;
;
=
(
)
;
=
(
,
,
(
)
,
,
(
STRUCT
)
,
)
;
IF
(
)
{
IF
(
)
(
,
(
)
)
;
=
;
RETURN
;
}
{
STATIC
INT
=
;
IF
(
)
(
,
,
(
INT
)
,
(
(
INT
)
)
)
;
=
;
}
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
;
}
}
INT
(
VOID
)
{
CHAR
;
STRUCT
;
INT
;
=
(
,
(
)
)
;
IF
(
)
(
,
)
;
=
(
)
;
IF
(
)
(
)
;
RETURN
(
INT
)
;
}
VOID
(
VOID
)
{
=
;
INT
;
INT
;
STRUCT
;
=
(
(
)
)
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
=
;
IF
(
(
)
)
=
;
ELSE
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
(
,
)
;
}
=
(
)
;
IF
(
)
{
=
;
=
;
=
=
;
=
;
=
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
;
WHILE
(
)
{
=
;
=
(
)
;
IF
(
)
{
=
(
)
;
}
ELSE
{
=
(
)
;
IF
(
)
(
,
)
;
=
(
INT
)
;
}
;
}
=
;
=
;
=
(
)
;
(
,
(
)
)
;
(
,
,
)
;
=
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
(
)
;
}
ELSE
(
,
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
(
INT
,
CHAR
)
{
=
;
=
;
(
)
;
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
(
)
;
=
;
;
;
;
;
;
INT
;
;
;
INT
;
INT
;
;
;
INT
;
;
INT
=
;
STATIC
INT
=
;
INT
(
VOID
)
{
INT
;
SWITCH
(
=
(
,
,
)
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
DEFAULT
IF
(
)
=
;
IF
(
)
=
;
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
(
,
)
)
(
)
;
(
)
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
}
STATIC
INT
=
;
STATIC
INT
=
;
=
;
;
VOID
(
VOID
)
{
;
(
,
)
;
SWITCH
(
)
{
CASE
=
;
=
(
)
;
(
)
;
BREAK
;
CASE
=
;
=
(
)
;
(
)
;
BREAK
;
CASE
=
;
=
(
)
(
)
(
)
(
)
(
)
(
)
;
=
=
;
(
)
;
BREAK
;
CASE
=
;
=
(
)
(
)
(
)
;
=
(
)
(
)
(
)
;
=
=
;
(
)
;
BREAK
;
CASE
=
;
=
(
)
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
IF
(
)
{
(
)
;
=
;
}
ELSE
{
=
;
}
}
BREAK
;
CASE
CASE
BREAK
;
DEFAULT
IF
(
)
=
;
BREAK
;
}
}
(
,
)
{
;
;
;
;
;
=
(
,
,
,
,
)
;
=
;
=
(
,
,
,
)
;
(
,
,
,
,
,
,
)
;
=
;
=
;
=
;
=
(
,
,
,
,
,
,
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
WHILE
(
(
)
)
(
)
;
IF
(
)
{
IF
(
)
{
(
,
,
,
,
,
,
,
,
)
;
=
;
}
}
=
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
STATIC
INT
;
INT
;
INT
;
IF
(
)
{
=
(
)
;
=
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
(
)
=
;
FOR
(
;
;
)
(
)
=
;
}
IF
(
)
{
UNSIGNED
INT
;
UNSIGNED
INT
;
INT
,
,
;
UNSIGNED
INT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
=
(
UNSIGNED
INT
)
(
)
;
FOR
(
=
;
;
)
=
(
UNSIGNED
INT
)
;
=
;
WHILE
(
)
{
=
;
DO
{
=
;
=
(
)
(
(
)
)
(
(
)
)
;
=
(
(
)
)
(
(
)
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
WHILE
(
)
;
;
;
}
}
ELSE
IF
(
)
{
UNSIGNED
INT
;
UNSIGNED
INT
;
INT
,
,
;
UNSIGNED
INT
;
UNSIGNED
INT
;
=
(
UNSIGNED
INT
)
(
)
;
FOR
(
=
;
;
)
=
(
UNSIGNED
INT
)
;
=
;
WHILE
(
)
{
=
;
DO
{
=
;
=
(
)
(
(
)
)
(
(
)
)
;
=
(
(
)
)
(
)
(
(
)
)
;
=
(
(
)
)
(
(
)
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
WHILE
(
)
;
;
;
;
}
}
ELSE
IF
(
)
{
VOID
(
UNSIGNED
,
DOUBLE
)
;
(
(
UNSIGNED
)
(
)
,
(
DOUBLE
)
(
)
)
;
}
IF
(
)
{
IF
(
(
,
,
,
,
,
,
,
,
,
,
)
)
(
)
;
=
;
DO
{
(
)
;
}
WHILE
(
)
;
}
ELSE
{
(
,
,
,
,
,
,
,
,
,
)
;
(
,
)
;
}
}
VOID
(
)
{
(
,
,
)
;
}
STATIC
;
VOID
(
,
)
{
REGISTER
INT
;
REGISTER
INT
;
STATIC
=
;
IF
(
)
IF
(
)
{
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
;
}
}
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
(
)
;
}
(
,
,
,
)
;
}
}
VOID
(
)
{
(
,
)
;
}
VOID
(
INT
)
{
INT
=
(
)
(
)
(
)
;
STRUCT
;
INT
=
;
INT
;
INT
;
INT
=
;
DO
{
=
(
(
)
,
,
)
;
IF
(
)
{
=
(
,
,
)
;
IF
(
)
{
IF
(
)
{
(
,
,
)
;
;
}
ELSE
{
IF
(
(
)
)
{
=
(
,
,
)
;
IF
(
)
(
,
)
;
ELSE
(
)
;
=
(
(
)
,
,
)
;
IF
(
)
(
)
;
=
(
,
,
)
;
BREAK
;
}
IF
(
)
{
(
,
,
)
;
BREAK
;
}
ELSE
{
(
,
,
,
)
;
;
}
}
}
ELSE
{
(
,
)
;
}
}
ELSE
{
=
(
(
)
,
,
)
;
IF
(
)
{
EXTERN
INT
;
(
,
,
)
;
(
)
;
}
BREAK
;
}
}
WHILE
(
)
;
IF
(
)
{
(
)
;
}
=
;
=
=
(
,
,
)
;
(
,
,
,
(
INT
)
(
)
)
;
}
VOID
(
VOID
)
{
CHAR
;
CHAR
;
INT
;
INT
;
INT
=
;
INT
=
;
CHAR
=
;
CHAR
=
;
INT
;
UNSIGNED
LONG
;
;
;
INT
;
STATIC
INT
=
;
IF
(
)
RETURN
;
=
;
(
,
(
VOID
(
)
(
INT
)
)
)
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
IF
(
(
)
)
=
;
=
;
=
;
IF
(
(
=
(
)
)
)
=
;
ELSE
=
;
=
(
)
;
IF
(
(
=
(
)
)
)
{
=
(
,
,
,
,
,
)
;
IF
(
)
=
=
;
ELSE
IF
(
)
{
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
(
)
;
}
=
(
)
;
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
(
)
)
;
}
=
(
)
;
IF
(
(
,
,
,
,
)
)
(
)
;
=
;
=
(
)
;
IF
(
)
{
IF
(
)
=
(
CHAR
)
(
)
;
IF
(
)
{
=
;
WHILE
(
(
)
)
;
IF
(
)
=
;
IF
(
(
(
,
)
)
)
=
;
}
}
(
,
)
;
=
(
,
(
,
)
,
,
)
;
=
;
=
;
=
;
=
;
=
(
,
(
,
)
,
,
,
,
,
,
,
,
,
,
)
;
(
,
,
(
,
)
)
;
=
;
=
;
=
(
,
,
,
)
;
(
,
)
;
=
;
WHILE
(
)
{
(
,
)
;
IF
(
)
{
=
;
}
}
IF
(
)
(
,
,
,
,
,
,
,
,
)
;
IF
(
)
{
=
(
)
;
=
(
,
,
,
,
,
,
,
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
(
,
)
)
(
)
;
}
ELSE
{
=
(
,
,
,
,
,
(
CHAR
)
(
)
,
,
,
,
)
;
}
IF
(
)
=
(
UNSIGNED
CHAR
)
(
)
;
ELSE
=
(
UNSIGNED
CHAR
)
(
)
;
}
UNSIGNED
;
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
(
)
(
)
(
)
;
}
DOUBLE
;
VOID
(
VOID
)
{
INT
;
INT
;
DOUBLE
;
UNION
{
DOUBLE
;
UNSIGNED
;
}
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
)
(
)
(
)
;
FOR
(
=
;
;
)
{
=
(
)
(
)
(
)
;
=
;
}
}
(
)
;
}
INT
;
VOID
(
UNSIGNED
,
DOUBLE
)
{
DOUBLE
;
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
DOUBLE
;
=
;
IF
(
)
{
=
;
(
)
;
}
=
;
=
;
DO
{
=
;
DO
{
=
;
=
(
DOUBLE
)
(
(
INT
)
(
(
)
)
)
;
=
;
=
;
=
;
=
;
=
(
DOUBLE
)
(
(
INT
)
(
(
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
(
DOUBLE
)
(
(
INT
)
(
(
)
)
)
;
=
;
=
;
=
;
=
;
=
(
DOUBLE
)
(
(
INT
)
(
(
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
(
DOUBLE
)
(
(
INT
)
(
(
)
)
)
;
=
;
=
;
=
;
=
;
=
(
DOUBLE
)
(
(
INT
)
(
(
)
)
)
;
=
;
=
;
=
;
=
;
=
;
=
(
DOUBLE
)
(
(
INT
)
(
(
)
)
)
;
=
;
=
;
=
;
=
;
=
(
DOUBLE
)
(
(
INT
)
(
(
)
)
)
;
=
;
=
;
=
;
=
;
;
;
}
WHILE
(
)
;
;
}
WHILE
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
=
;
CHAR
=
;
INT
(
INT
)
;
VOID
(
VOID
)
;
STATIC
INT
=
;
(
)
INT
;
INT
;
SIGNED
SHORT
;
UNSIGNED
INT
;
UNSIGNED
INT
;
UNSIGNED
CHAR
;
UNSIGNED
CHAR
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
VOID
(
INT
,
INT
,
INT
)
{
INT
;
EXTERN
INT
;
=
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
)
;
}
}
VOID
(
CHAR
,
INT
)
{
UNSIGNED
CHAR
;
UNSIGNED
CHAR
;
INT
;
INT
;
INT
;
CHAR
;
INT
;
(
,
,
)
;
IF
(
(
)
)
=
(
)
;
ELSE
=
(
)
;
=
(
)
;
=
(
UNSIGNED
CHAR
)
(
,
)
;
=
(
(
(
)
)
)
;
=
(
UNSIGNED
CHAR
)
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
=
;
(
)
;
=
;
RETURN
(
VOID
)
(
)
;
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
STATIC
UNSIGNED
SHORT
=
;
INT
;
INT
=
;
INT
=
;
INT
=
;
INT
;
INT
;
INT
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
{
=
;
BREAK
;
}
}
}
FOR
(
=
;
(
)
(
)
;
)
{
IF
(
)
{
=
;
=
;
}
}
IF
(
)
=
;
ELSE
=
;
=
(
UNSIGNED
CHAR
)
;
=
;
IF
(
)
=
;
=
=
;
=
;
=
;
=
;
;
=
(
(
)
)
;
=
;
=
(
(
)
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
)
{
INT
;
INT
;
INT
=
;
FOR
(
=
;
;
)
=
(
INT
)
(
(
,
(
)
)
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
(
(
)
)
;
}
VOID
(
INT
)
{
=
;
}
VOID
(
INT
)
{
=
;
}
INT
(
)
{
CHAR
;
(
,
,
)
;
RETURN
(
)
;
}
INT
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
=
;
IF
(
)
{
(
,
,
,
,
,
)
;
(
)
;
}
RETURN
;
=
(
,
,
,
)
;
RETURN
;
}
VOID
(
INT
)
{
=
;
}
INT
(
INT
)
{
RETURN
;
}
VOID
(
VOID
)
{
STATIC
INT
=
;
REGISTER
UNSIGNED
INT
;
REGISTER
INT
;
REGISTER
INT
;
SIGNED
SHORT
;
SIGNED
SHORT
;
SIGNED
SHORT
;
INT
;
INT
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
;
;
;
;
;
IF
(
)
=
;
}
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
;
;
}
IF
(
)
{
;
=
;
}
IF
(
)
{
(
,
)
;
=
;
}
;
}
VOID
(
VOID
)
{
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
=
=
=
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
(
)
;
}
INT
=
;
INT
;
(
,
)
;
(
)
;
WHILE
(
)
{
FOR
(
=
;
;
)
;
=
;
}
(
)
;
(
)
;
RETURN
;
}
VOID
(
)
{
CHAR
;
IF
(
(
)
)
(
,
,
(
)
,
)
;
ELSE
(
,
,
)
;
IF
(
(
,
)
)
{
(
,
)
;
=
(
,
)
;
}
ELSE
(
,
,
)
;
INT
;
(
,
,
)
;
(
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
(
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
=
;
(
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
(
,
)
;
}
ELSE
{
=
;
=
(
)
(
)
;
}
}
(
,
)
;
FOR
(
=
;
;
)
=
;
(
,
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
STATIC
INT
=
;
STATIC
INT
=
;
VOID
(
INT
,
INT
)
{
=
=
;
=
;
}
VOID
(
INT
)
{
=
;
}
VOID
(
INT
)
{
=
;
}
VOID
(
INT
)
{
=
;
=
;
=
;
}
VOID
(
INT
)
{
=
;
}
INT
(
VOID
)
{
=
;
RETURN
;
}
INT
(
INT
)
{
=
;
RETURN
;
}
TYPEDEF
;
TYPEDEF
INT
;
STATIC
INT
=
;
STATIC
INT
=
;
VOID
(
INT
)
{
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
RETURN
;
=
;
RETURN
;
}
INT
(
INT
)
{
STRUCT
;
STRUCT
;
STRUCT
;
STRUCT
;
INT
;
=
;
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
)
{
IF
(
(
)
)
(
,
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
=
{
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
,
{
,
,
,
{
}
,
,
,
}
}
;
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
__E__O__F__
STATIC
CONST
CHAR
=
;
CONST
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
}
;
(
)
(
)
(
(
)
)
(
)
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
TYPEDEF
STRUCT
{
;
VOID
;
INT
;
}
;
STATIC
;
INT
=
;
INT
=
;
STATIC
;
STATIC
=
;
INT
;
STATIC
INT
;
INT
(
VOID
,
)
;
INT
(
,
,
INT
,
INT
,
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
,
INT
)
{
INT
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
=
(
)
(
(
)
,
,
)
;
FOR
(
=
;
;
)
=
;
=
;
FOR
(
=
;
;
)
=
=
;
}
VOID
(
VOID
)
{
INT
;
INT
;
FOR
(
=
;
;
)
IF
(
)
(
)
;
=
;
IF
(
)
=
;
ELSE
{
INT
=
{
,
,
,
,
,
,
,
,
}
;
IF
(
)
=
(
)
;
ELSE
=
;
}
(
,
)
;
=
;
}
VOID
(
VOID
,
INT
,
INT
)
{
INT
;
INT
;
INT
;
INT
;
;
INT
;
=
(
)
;
IF
(
)
(
,
)
;
=
;
IF
(
)
{
=
;
=
;
;
IF
(
)
RETURN
;
IF
(
)
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
{
=
;
}
IF
(
)
RETURN
;
}
ELSE
{
=
;
}
IF
(
)
{
(
(
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
ELSE
IF
(
)
{
(
(
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
(
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
=
(
)
;
IF
(
)
{
(
,
)
;
}
IF
(
)
=
;
=
(
,
,
,
,
)
;
}
VOID
(
VOID
,
INT
)
{
(
,
,
)
;
{
INT
;
INT
;
STATIC
=
{
,
,
,
,
,
,
,
,
,
}
;
STATIC
INT
=
;
STATIC
INT
=
;
IF
(
)
{
FOR
(
=
;
;
=
(
)
)
IF
(
)
(
,
,
,
,
)
;
=
;
=
(
)
;
IF
(
)
=
(
)
;
FOR
(
=
=
;
;
)
{
IF
(
)
;
}
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
,
,
)
;
}
}
(
,
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
)
;
BREAK
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
;
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
{
IF
(
(
)
)
{
=
;
=
;
=
;
IF
(
)
{
=
;
;
IF
(
)
{
(
)
;
CONTINUE
;
}
ELSE
IF
(
)
{
=
;
}
}
IF
(
)
{
=
(
,
,
,
,
)
;
IF
(
)
{
(
)
;
}
ELSE
(
,
,
,
)
;
}
}
ELSE
{
(
)
;
}
}
}
}
VOID
(
INT
)
{
IF
(
)
{
(
,
)
;
}
(
)
;
(
)
;
=
;
}
VOID
(
INT
)
{
IF
(
)
(
,
)
;
=
;
}
VOID
(
INT
)
{
(
,
)
;
}
VOID
(
INT
,
INT
)
{
;
CHAR
;
IF
(
(
)
(
)
)
{
(
,
)
;
}
ELSE
=
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
{
(
,
,
)
;
=
(
)
;
}
=
(
VOID
)
(
,
)
;
=
(
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
;
}
}
VOID
(
INT
)
{
INT
;
=
;
IF
(
)
{
IF
(
(
)
)
{
IF
(
)
(
,
)
;
(
)
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
BREAK
;
}
}
;
=
;
}
}
INT
(
,
,
INT
,
INT
,
INT
)
{
;
;
;
;
=
(
)
;
=
(
)
;
=
(
(
)
)
;
IF
(
)
{
RETURN
;
}
=
(
,
,
,
)
;
IF
(
)
=
;
ELSE
=
(
)
;
;
=
(
(
,
)
)
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
=
(
(
)
(
(
)
)
)
;
}
ELSE
{
=
(
(
(
)
)
)
;
}
RETURN
(
)
;
}
INT
(
VOID
,
)
{
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
ELSE
IF
(
)
{
(
)
;
BREAK
;
}
}
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
RETURN
;
}
ELSE
{
(
)
;
}
}
=
;
=
;
=
;
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
;
CHAR
;
INT
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
VOID
(
)
{
=
=
;
=
=
;
}
VOID
(
,
,
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
STATIC
INT
=
;
STATIC
UNSIGNED
CHAR
;
INT
(
,
CHAR
)
{
INT
;
INT
=
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
=
(
)
;
}
IF
(
)
=
;
IF
(
)
(
)
=
;
ELSE
IF
(
(
UNSIGNED
CHAR
)
)
;
ELSE
=
;
IF
(
)
;
ELSE
IF
(
)
{
=
;
=
;
}
RETURN
;
}
VOID
(
,
CHAR
)
{
UNSIGNED
CHAR
,
;
=
;
WHILE
(
(
)
)
;
DO
{
=
;
(
)
=
;
(
)
=
;
}
WHILE
(
)
;
IF
(
)
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
EXTERN
;
EXTERN
;
EXTERN
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
INT
;
INT
;
INT
;
;
VOID
(
)
(
INT
)
;
CHAR
=
{
,
,
,
,
}
;
INT
;
INT
;
INT
;
CHAR
;
;
;
EXTERN
;
CHAR
;
CHAR
;
TYPEDEF
STRUCT
{
SHORT
;
CHAR
;
VOID
(
)
(
INT
)
;
CHAR
;
}
;
TYPEDEF
STRUCT
{
SHORT
;
STRUCT
;
;
VOID
(
)
(
)
;
SHORT
;
SHORT
;
SHORT
;
}
;
SHORT
;
SHORT
;
SHORT
;
CHAR
=
{
,
}
;
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
INT
,
INT
)
;
VOID
(
)
;
VOID
(
INT
,
INT
,
INT
,
INT
)
;
VOID
(
,
INT
)
;
VOID
(
,
INT
)
;
VOID
(
INT
,
INT
,
CHAR
)
;
INT
(
CHAR
)
;
INT
(
CHAR
)
;
VOID
(
VOID
)
;
VOID
(
CHAR
,
VOID
,
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
ENUM
{
=
,
,
,
,
,
,
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
ENUM
{
,
,
,
,
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
ENUM
{
,
,
,
,
,
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
ENUM
{
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
}
,
{
,
,
,
}
,
{
,
,
}
,
{
,
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
ENUM
{
,
}
;
=
{
{
,
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
ENUM
{
,
}
;
=
{
{
,
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
ENUM
{
,
,
,
,
}
;
=
{
{
,
,
,
}
,
{
,
,
}
,
{
,
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
ENUM
{
,
,
,
,
,
,
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
=
{
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
CHAR
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
{
(
,
)
;
=
;
CONTINUE
;
}
=
(
,
,
)
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
(
,
,
,
(
,
)
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
,
)
;
}
}
VOID
(
INT
,
INT
)
{
INT
;
(
,
,
,
(
,
)
)
;
FOR
(
=
;
;
)
{
(
,
,
,
(
,
)
)
;
;
}
(
,
,
,
(
,
)
)
;
}
VOID
(
INT
)
{
CHAR
;
IF
(
(
)
)
(
,
,
)
;
ELSE
(
,
,
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
(
,
,
,
(
,
)
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
,
)
;
}
IF
(
)
{
=
(
)
;
(
,
,
)
;
}
}
VOID
(
INT
)
{
(
,
)
;
(
)
;
IF
(
)
=
;
}
VOID
(
INT
)
{
=
;
=
;
(
,
)
;
IF
(
(
,
)
)
=
;
=
(
)
;
}
VOID
(
INT
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
RETURN
;
(
)
;
(
)
;
}
CHAR
;
VOID
(
INT
)
{
IF
(
)
{
(
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
=
;
RETURN
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
)
{
IF
(
)
{
(
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
=
;
SWITCH
(
)
{
CASE
(
,
,
,
(
,
)
)
;
BREAK
;
CASE
CASE
CASE
(
,
,
,
(
,
)
)
;
BREAK
;
DEFAULT
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
=
;
SWITCH
(
)
{
CASE
CASE
(
,
,
,
(
,
)
)
;
BREAK
;
CASE
CASE
(
,
,
,
(
,
)
)
;
BREAK
;
DEFAULT
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
,
,
,
(
,
)
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
}
VOID
(
INT
)
{
(
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
IF
(
)
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
}
(
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
IF
(
)
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
}
(
)
;
}
VOID
(
VOID
)
{
(
,
,
,
(
,
)
)
;
}
VOID
(
VOID
)
{
(
,
,
,
(
,
)
)
;
(
,
,
,
(
,
)
)
;
}
VOID
(
INT
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
(
)
;
ELSE
(
)
;
}
INT
;
VOID
(
VOID
)
{
(
,
,
,
(
,
)
)
;
}
VOID
(
INT
)
{
IF
(
)
RETURN
;
(
,
,
)
;
(
)
;
}
VOID
(
INT
)
{
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
,
)
;
(
)
;
}
VOID
(
INT
)
{
IF
(
(
)
)
{
(
,
,
)
;
(
)
;
RETURN
;
}
IF
(
(
)
(
)
)
{
(
,
)
;
=
;
}
=
;
(
)
;
}
CHAR
=
{
,
}
;
CHAR
=
{
,
}
;
VOID
(
VOID
)
{
(
,
,
,
(
,
)
)
;
(
,
,
,
(
,
)
)
;
(
,
,
,
(
,
)
)
;
(
,
(
)
,
,
)
;
(
,
(
)
,
,
)
;
}
VOID
(
INT
)
{
(
)
;
}
VOID
(
INT
)
{
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
}
VOID
(
INT
)
{
IF
(
)
RETURN
;
=
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
=
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
(
,
,
)
;
}
VOID
(
INT
)
{
=
;
(
)
;
}
VOID
(
INT
)
{
=
;
(
)
;
}
VOID
(
INT
)
{
=
;
(
)
;
}
INT
=
{
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
}
;
VOID
(
INT
)
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
(
,
(
)
)
;
ELSE
(
,
(
)
)
;
(
)
;
}
(
)
;
}
VOID
(
INT
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
(
)
)
)
;
(
,
,
)
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
IF
(
)
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
}
}
VOID
(
INT
)
{
=
;
=
;
(
,
)
;
RETURN
;
}
VOID
(
INT
)
{
SWITCH
(
)
{
CASE
IF
(
)
{
;
;
}
BREAK
;
CASE
IF
(
)
{
;
;
}
BREAK
;
}
(
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
INT
;
INT
;
=
;
(
,
,
,
(
,
)
)
;
;
FOR
(
=
;
;
)
{
(
,
,
,
(
,
)
)
;
;
}
(
,
,
,
(
,
)
)
;
(
(
)
,
,
,
(
,
)
)
;
}
VOID
(
,
INT
)
{
(
,
,
,
(
,
)
)
;
}
VOID
(
,
INT
)
{
(
,
,
,
(
,
)
)
;
}
VOID
(
CHAR
,
VOID
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
;
}
VOID
(
VOID
)
{
=
;
=
;
}
INT
(
CHAR
)
{
INT
;
INT
=
;
INT
;
FOR
(
=
;
(
)
;
)
{
=
(
)
;
IF
(
)
;
ELSE
(
)
;
}
RETURN
;
}
INT
(
CHAR
)
{
INT
;
INT
;
INT
=
(
)
;
=
;
FOR
(
=
;
(
)
;
)
IF
(
)
;
RETURN
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
INT
;
CHAR
;
INT
;
INT
;
INT
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
BREAK
;
IF
(
)
{
=
;
;
CONTINUE
;
}
=
(
)
;
IF
(
)
{
;
CONTINUE
;
}
=
(
)
;
IF
(
)
BREAK
;
(
,
,
,
)
;
;
}
}
(
)
{
INT
;
INT
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
=
;
=
;
IF
(
(
)
)
{
IF
(
)
{
=
;
=
(
)
;
}
ELSE
IF
(
)
{
=
;
=
(
)
;
}
IF
(
)
{
=
;
=
(
)
;
}
ELSE
IF
(
)
{
=
;
=
(
)
;
}
IF
(
)
{
=
;
=
(
)
;
}
IF
(
)
{
=
;
=
(
)
;
}
}
ELSE
{
IF
(
(
)
)
{
;
IF
(
)
{
=
;
=
(
)
;
=
;
}
ELSE
IF
(
)
{
=
;
=
(
)
;
=
;
}
;
IF
(
)
{
=
;
=
(
)
;
=
;
}
ELSE
IF
(
)
{
=
;
=
(
)
;
=
;
}
IF
(
)
{
=
;
=
(
)
;
}
IF
(
)
{
=
;
=
(
)
;
}
}
ELSE
IF
(
)
{
=
;
}
}
IF
(
)
RETURN
;
IF
(
)
{
SWITCH
(
)
{
CASE
IF
(
)
{
;
=
;
}
BREAK
;
CASE
=
;
(
,
)
;
BREAK
;
CASE
=
;
IF
(
)
(
)
;
BREAK
;
DEFAULT
=
(
)
;
IF
(
)
IF
(
)
BREAK
;
IF
(
(
)
(
)
)
{
=
;
=
;
}
BREAK
;
}
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
RETURN
;
=
;
=
;
IF
(
)
(
)
;
=
;
(
,
)
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
SWITCH
(
)
{
CASE
IF
(
)
RETURN
;
(
)
;
(
,
)
;
RETURN
;
CASE
IF
(
)
RETURN
;
(
)
;
(
,
)
;
RETURN
;
CASE
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
(
,
)
;
RETURN
;
CASE
(
)
;
(
,
)
;
(
)
;
RETURN
;
CASE
(
)
;
(
,
)
;
(
)
;
RETURN
;
CASE
(
)
;
=
;
=
;
(
,
)
;
RETURN
;
CASE
(
)
;
(
,
)
;
RETURN
;
CASE
(
,
)
;
(
)
;
RETURN
;
CASE
(
,
)
;
(
)
;
RETURN
;
CASE
(
)
;
(
,
)
;
RETURN
;
CASE
(
,
)
;
(
)
;
RETURN
;
CASE
(
,
)
;
(
)
;
RETURN
;
CASE
;
IF
(
)
=
;
=
;
(
(
,
)
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
(
)
;
(
,
)
;
RETURN
;
}
RETURN
;
}
SWITCH
(
)
{
CASE
DO
{
IF
(
)
=
;
ELSE
;
(
,
)
;
}
WHILE
(
)
;
RETURN
;
CASE
DO
{
IF
(
)
=
;
ELSE
;
(
,
)
;
}
WHILE
(
)
;
RETURN
;
CASE
IF
(
)
{
(
,
)
;
(
)
;
}
RETURN
;
CASE
IF
(
)
{
(
,
)
;
(
)
;
}
RETURN
;
CASE
IF
(
)
{
=
;
IF
(
)
{
(
)
;
(
,
)
;
}
ELSE
{
(
)
;
(
,
)
;
}
}
RETURN
;
CASE
=
;
(
)
;
(
,
)
;
RETURN
;
CASE
=
;
IF
(
)
{
=
;
=
;
(
,
)
;
}
RETURN
;
DEFAULT
FOR
(
=
;
;
)
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
FOR
(
=
;
;
)
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
BREAK
;
}
RETURN
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
STATIC
SHORT
;
STATIC
SHORT
;
SHORT
;
SHORT
;
CHAR
;
INT
;
=
;
IF
(
)
{
=
;
=
(
)
;
WHILE
(
(
)
)
{
FOR
(
=
;
(
)
;
)
IF
(
(
)
)
{
(
,
,
)
;
(
,
,
)
;
;
BREAK
;
}
IF
(
(
)
)
{
(
,
)
;
;
}
=
(
)
;
(
,
,
)
;
(
)
;
}
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
,
(
,
)
)
;
;
}
(
,
,
,
(
,
)
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
)
{
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
;
=
;
}
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
;
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
CASE
;
BREAK
;
CASE
DEFAULT
BREAK
;
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
EXTERN
;
INT
(
INT
,
INT
,
,
CHAR
)
{
INT
;
INT
;
WHILE
(
)
{
=
(
)
;
;
IF
(
)
{
;
CONTINUE
;
}
=
(
)
;
IF
(
)
BREAK
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
;
}
RETURN
;
}
(
CHAR
CONST
,
VOID
,
INT
)
{
INT
;
INT
;
=
(
,
,
)
;
IF
(
)
RETURN
;
=
(
,
,
)
;
(
)
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
CHAR
CONST
,
)
{
INT
,
,
;
STRUCT
;
;
=
(
,
,
)
;
IF
(
)
(
,
)
;
IF
(
(
,
)
)
(
,
)
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
(
)
;
IF
(
)
(
,
)
;
=
;
RETURN
;
}
INT
;
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
INT
;
EXTERN
CHAR
;
EXTERN
INT
;
CHAR
;
CHAR
;
EXTERN
CHAR
;
TYPEDEF
STRUCT
{
CHAR
;
INT
;
INT
;
INT
;
INT
;
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
,
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
,
{
,
(
INT
)
,
(
INT
)
}
}
;
INT
;
CHAR
;
VOID
(
VOID
)
{
INT
;
INT
;
;
=
(
,
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
,
,
,
)
;
}
ELSE
{
(
,
,
,
(
CHAR
)
(
)
)
;
}
}
(
)
;
}
EXTERN
;
VOID
(
VOID
)
{
INT
;
INT
;
;
CHAR
;
CHAR
;
CHAR
;
INT
;
;
=
(
)
(
)
;
FOR
(
=
;
;
)
=
;
=
(
)
;
IF
(
)
{
=
;
(
,
)
;
}
ELSE
=
;
=
(
,
)
;
IF
(
)
{
WHILE
(
(
)
)
{
=
;
IF
(
(
,
,
,
)
)
{
IF
(
)
{
=
;
=
(
)
;
=
(
CHAR
)
(
)
;
=
;
(
,
)
;
}
ELSE
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
IF
(
)
=
;
ELSE
=
(
INT
)
;
BREAK
;
}
}
}
(
)
;
}
}
TYPEDEF
STRUCT
{
CHAR
;
CHAR
;
CHAR
;
CHAR
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
UNSIGNED
CHAR
;
CHAR
;
CHAR
;
UNSIGNED
SHORT
;
UNSIGNED
SHORT
;
CHAR
;
UNSIGNED
CHAR
;
}
;
VOID
(
CHAR
,
,
INT
,
INT
,
)
{
INT
;
INT
;
;
;
=
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
=
;
ELSE
{
=
;
=
;
}
}
=
;
FOR
(
=
;
;
)
=
;
=
(
)
;
(
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
CHAR
;
=
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
(
,
)
)
BREAK
;
}
IF
(
)
(
)
;
(
,
,
,
,
(
,
)
)
;
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
=
;
INT
=
;
INT
(
VOID
)
{
=
(
)
;
RETURN
;
}
INT
(
VOID
)
{
=
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
=
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
VOID
(
)
{
;
SWITCH
(
)
{
CASE
BREAK
;
CASE
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
{
SWITCH
(
)
{
CASE
BREAK
;
DEFAULT
(
(
)
,
)
;
BREAK
;
}
}
IF
(
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
(
)
,
)
;
CASE
CASE
=
;
BREAK
;
DEFAULT
BREAK
;
}
}
BREAK
;
CASE
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
{
SWITCH
(
)
{
CASE
BREAK
;
DEFAULT
(
(
)
,
)
;
}
}
IF
(
)
{
SWITCH
(
)
{
CASE
(
(
)
,
)
;
CASE
=
;
CASE
=
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
ELSE
{
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
CASE
=
;
BREAK
;
DEFAULT
BREAK
;
}
}
}
BREAK
;
}
}
INT
(
,
)
{
INT
;
INT
;
;
;
=
;
=
;
SWITCH
(
)
{
CASE
CASE
CASE
(
)
;
DEFAULT
BREAK
;
}
WHILE
(
(
=
(
,
)
)
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
)
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
=
;
=
(
)
;
=
;
=
;
BREAK
;
CASE
CASE
=
;
=
;
CASE
CASE
=
;
IF
(
)
;
=
;
=
;
BREAK
;
CASE
=
(
)
;
=
;
=
;
BREAK
;
}
=
;
=
;
(
)
;
}
RETURN
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
RETURN
;
}
}
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
)
;
=
;
BREAK
;
}
}
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
{
=
;
=
(
)
;
}
}
}
INT
(
)
{
INT
;
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
{
=
;
=
(
)
;
=
;
=
;
}
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
}
}
;
VOID
(
)
{
;
SWITCH
(
)
{
CASE
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
(
(
)
,
)
;
BREAK
;
CASE
=
;
(
(
)
,
)
;
BREAK
;
CASE
=
;
(
(
)
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
BREAK
;
CASE
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
=
;
(
(
)
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
BREAK
;
CASE
=
(
,
,
,
,
,
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
=
;
(
)
;
(
(
)
,
)
;
BREAK
;
CASE
CASE
=
;
(
)
;
BREAK
;
CASE
=
;
=
;
BREAK
;
DEFAULT
BREAK
;
}
}
ELSE
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
BREAK
;
DEFAULT
=
;
(
(
)
,
)
;
BREAK
;
}
}
BREAK
;
CASE
=
(
,
,
,
,
,
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
=
;
=
;
BREAK
;
CASE
CASE
CASE
=
;
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
BREAK
;
}
}
INT
(
,
,
)
{
;
=
;
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
CASE
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
BREAK
;
CASE
CASE
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
BREAK
;
CASE
CASE
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
BREAK
;
}
RETURN
(
,
)
;
}
INT
(
,
)
{
INT
,
;
;
;
=
;
=
;
WHILE
(
(
=
(
,
)
)
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
=
(
)
;
;
=
;
=
;
(
(
)
,
)
;
BREAK
;
CASE
=
(
)
;
;
=
;
(
(
)
,
)
;
BREAK
;
CASE
=
;
=
;
(
(
)
,
)
;
BREAK
;
CASE
CASE
=
;
=
(
)
;
;
=
;
IF
(
)
(
(
)
,
)
;
BREAK
;
CASE
CASE
=
;
=
(
)
;
;
IF
(
)
(
(
)
,
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
RETURN
;
}
VOID
(
,
)
{
;
INT
;
;
;
INT
;
=
;
=
;
SWITCH
(
)
{
CASE
CASE
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
BREAK
;
CASE
CASE
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
BREAK
;
CASE
CASE
IF
(
)
RETURN
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
BREAK
;
}
=
;
=
;
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
IF
(
)
=
;
ELSE
{
IF
(
)
RETURN
;
=
;
}
RETURN
;
}
}
SWITCH
(
)
{
CASE
CASE
(
(
)
,
)
;
BREAK
;
CASE
CASE
(
(
)
,
)
;
BREAK
;
DEFAULT
(
(
)
,
)
;
BREAK
;
}
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
}
=
(
)
;
;
}
VOID
(
)
{
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
INT
)
{
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
;
=
;
=
;
}
;
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
}
}
INT
(
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
)
{
SWITCH
(
)
{
CASE
IF
(
)
{
IF
(
)
{
=
;
=
;
;
IF
(
)
{
=
;
(
)
;
BREAK
;
}
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
}
}
BREAK
;
CASE
IF
(
)
{
IF
(
)
{
=
;
BREAK
;
}
=
;
=
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
)
{
;
=
;
(
)
;
BREAK
;
}
ELSE
{
=
;
=
;
=
;
}
}
BREAK
;
}
}
VOID
(
,
)
{
;
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
IF
(
)
{
IF
(
)
=
;
}
ELSE
RETURN
;
}
IF
(
)
{
=
(
(
)
,
,
)
;
(
)
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
TYPEDEF
ENUM
{
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
)
;
;
VOID
(
,
INT
)
{
INT
;
;
;
IF
(
)
{
RETURN
;
}
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
CONTINUE
;
(
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
IF
(
)
(
,
)
;
}
ELSE
(
,
)
;
}
}
VOID
(
,
)
{
=
;
;
(
,
)
;
}
(
)
{
;
;
IF
(
)
RETURN
;
=
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
RETURN
;
}
(
)
{
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
;
RETURN
;
}
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
;
;
IF
(
)
{
IF
(
)
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
;
}
IF
(
)
{
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
(
)
)
RETURN
;
RETURN
;
}
=
{
,
,
,
,
,
,
,
}
;
=
{
,
,
,
,
,
,
,
}
;
EXTERN
;
EXTERN
INT
;
(
)
{
;
;
;
;
;
IF
(
)
RETURN
;
IF
(
(
UNSIGNED
)
)
(
)
;
=
;
=
;
=
(
,
,
)
;
IF
(
)
{
IF
(
)
{
IF
(
)
;
ELSE
;
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
=
;
WHILE
(
)
{
=
;
IF
(
(
,
,
)
)
=
;
}
RETURN
;
}
ELSE
{
;
}
IF
(
(
)
)
=
;
RETURN
;
}
(
)
{
IF
(
(
)
)
{
RETURN
;
}
=
(
)
;
RETURN
;
}
VOID
(
)
{
;
;
;
INT
;
;
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
(
(
)
)
(
)
;
IF
(
(
)
)
RETURN
;
}
IF
(
(
)
(
)
(
)
)
{
=
;
=
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
;
IF
(
(
)
)
{
RETURN
;
}
}
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
}
}
ELSE
{
FOR
(
=
;
(
)
;
)
{
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
}
}
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
=
;
}
(
,
)
{
INT
;
INT
;
;
;
;
;
=
;
=
;
=
(
)
;
FOR
(
;
;
=
(
)
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
RETURN
;
}
=
;
IF
(
)
CONTINUE
;
IF
(
(
,
)
)
CONTINUE
;
IF
(
)
{
=
(
,
,
,
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
CONTINUE
;
}
}
=
;
RETURN
;
}
RETURN
;
}
VOID
(
)
{
;
;
;
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
CONTINUE
;
=
(
)
;
IF
(
)
{
RETURN
;
}
}
=
;
(
,
)
;
}
VOID
(
)
{
;
=
;
=
;
IF
(
(
)
)
{
=
;
IF
(
)
{
IF
(
(
,
)
)
GOTO
;
}
ELSE
GOTO
;
}
IF
(
(
,
)
)
RETURN
;
IF
(
)
{
INT
;
SWITCH
(
)
{
CASE
CASE
CASE
=
(
)
;
BREAK
;
CASE
CASE
=
(
)
;
BREAK
;
DEFAULT
=
;
BREAK
;
}
IF
(
)
{
(
,
)
;
}
ELSE
(
,
)
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
;
IF
(
)
{
IF
(
)
{
=
;
}
ELSE
;
}
IF
(
)
{
(
)
;
=
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
}
IF
(
(
)
)
{
IF
(
(
,
)
)
RETURN
;
(
,
)
;
RETURN
;
}
IF
(
)
{
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
(
)
)
{
IF
(
)
(
,
)
;
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
{
GOTO
;
}
IF
(
(
)
)
GOTO
;
(
,
)
;
;
RETURN
;
}
IF
(
(
,
)
)
{
IF
(
(
,
)
)
RETURN
;
}
IF
(
(
)
)
{
(
)
;
}
IF
(
(
)
)
{
(
,
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
;
=
(
,
,
,
)
;
IF
(
)
(
(
)
(
)
)
;
}
VOID
(
)
{
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
(
)
;
=
;
=
(
,
,
)
;
(
,
)
;
(
(
)
(
)
)
;
=
(
(
(
)
)
)
;
(
,
,
,
,
)
;
}
VOID
(
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
(
,
)
;
(
)
;
=
;
=
(
,
,
)
;
FOR
(
=
;
;
)
{
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
)
)
;
(
,
,
,
,
)
;
}
}
VOID
(
)
{
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
(
,
)
;
(
)
;
=
;
=
(
,
,
)
;
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
)
)
;
(
,
,
,
,
)
;
}
VOID
(
)
{
(
)
;
IF
(
(
)
)
RETURN
;
IF
(
(
,
)
)
{
(
,
)
;
}
}
VOID
(
)
{
(
)
;
IF
(
(
)
)
RETURN
;
IF
(
(
,
)
)
{
(
,
)
;
}
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
(
,
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
(
)
;
IF
(
(
)
)
{
(
,
)
;
=
(
(
)
)
;
(
,
,
,
)
;
RETURN
;
}
(
,
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
(
)
;
IF
(
(
)
)
{
=
(
(
(
)
)
)
;
(
,
,
,
)
;
}
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
(
)
;
IF
(
(
)
)
{
=
(
(
)
)
;
(
,
,
,
)
;
RETURN
;
}
(
,
,
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
(
,
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
(
,
)
;
=
(
(
)
)
;
(
,
,
,
)
;
RETURN
;
}
(
,
,
)
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
(
)
;
;
=
(
,
,
)
;
;
;
;
=
;
}
INT
=
;
VOID
(
)
{
;
;
;
;
;
IF
(
)
RETURN
;
(
,
,
)
;
=
(
,
,
,
)
;
=
;
(
)
;
IF
(
)
=
;
=
;
IF
(
)
RETURN
;
=
(
,
,
,
)
;
IF
(
)
{
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
{
;
IF
(
)
=
;
}
}
=
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
=
(
)
;
IF
(
)
;
ELSE
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
(
,
)
;
}
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
(
)
;
IF
(
(
)
)
{
=
(
(
(
)
)
)
;
(
,
)
;
(
,
,
,
)
;
}
}
;
;
;
;
(
)
{
INT
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
IF
(
(
)
(
)
)
RETURN
;
=
;
=
=
;
;
=
(
,
,
)
;
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
;
IF
(
)
{
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
IF
(
(
,
,
)
)
{
=
;
=
;
(
)
;
=
;
(
,
)
;
(
,
)
;
=
;
(
,
)
;
;
=
;
=
;
=
;
RETURN
;
}
}
}
}
(
)
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
;
VOID
(
)
{
(
,
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
(
)
;
}
VOID
(
)
{
;
UNSIGNED
;
=
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
=
;
(
)
;
=
(
,
)
;
=
(
,
)
;
=
;
(
)
;
}
VOID
(
)
{
;
IF
(
)
RETURN
;
(
)
;
=
(
,
,
,
)
;
=
;
=
;
=
;
(
)
;
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
(
)
;
IF
(
(
,
)
)
RETURN
;
(
,
)
;
(
,
,
,
)
;
=
;
=
;
=
;
IF
(
)
RETURN
;
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
}
(
)
VOID
(
)
{
(
)
;
(
,
)
;
}
VOID
(
)
{
;
INT
;
(
)
;
;
(
,
,
)
;
=
(
,
,
)
;
;
=
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
)
{
;
INT
;
(
)
;
;
(
,
,
)
;
=
(
,
,
)
;
;
=
;
=
(
,
)
;
=
(
,
)
;
}
VOID
(
)
{
;
INT
;
(
)
;
=
(
,
,
)
;
;
=
;
=
(
,
)
;
=
(
,
)
;
=
(
,
,
)
;
;
=
;
=
(
,
)
;
=
(
,
)
;
}
(
)
VOID
(
)
{
;
;
INT
;
IF
(
)
RETURN
;
=
;
;
(
,
)
;
(
)
;
=
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
=
(
(
)
)
;
}
VOID
(
,
)
{
;
;
;
;
;
INT
;
INT
;
;
=
;
=
;
WHILE
(
)
{
IF
(
(
(
)
)
(
(
)
)
)
;
=
;
}
IF
(
)
RETURN
;
=
;
=
(
)
;
=
(
,
)
;
=
(
,
)
;
=
;
=
(
,
,
,
)
;
IF
(
(
,
,
)
)
{
(
,
,
,
)
;
RETURN
;
}
=
;
(
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
(
)
;
(
,
)
;
}
VOID
(
)
{
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
CASE
CASE
=
(
)
;
BREAK
;
CASE
CASE
=
(
)
;
BREAK
;
DEFAULT
=
;
BREAK
;
}
IF
(
)
{
(
,
)
;
}
ELSE
(
,
)
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
IF
(
)
(
,
)
;
}
VOID
(
)
{
;
}
VOID
(
)
{
(
,
,
)
;
}
VOID
(
)
{
;
;
;
INT
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
)
(
)
)
RETURN
;
}
ELSE
{
SWITCH
(
)
{
CASE
IF
(
)
RETURN
;
IF
(
)
RETURN
;
BREAK
;
CASE
IF
(
)
RETURN
;
IF
(
)
RETURN
;
BREAK
;
CASE
IF
(
)
RETURN
;
IF
(
)
RETURN
;
BREAK
;
CASE
SWITCH
(
)
{
CASE
IF
(
)
RETURN
;
BREAK
;
CASE
IF
(
)
RETURN
;
BREAK
;
DEFAULT
RETURN
;
BREAK
;
}
BREAK
;
DEFAULT
IF
(
)
RETURN
;
BREAK
;
}
}
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
RETURN
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
CONTINUE
;
=
(
)
;
IF
(
)
{
RETURN
;
}
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
}
}
ELSE
{
SWITCH
(
)
{
CASE
=
;
(
,
)
;
RETURN
;
BREAK
;
CASE
SWITCH
(
)
{
CASE
=
;
(
,
)
;
RETURN
;
BREAK
;
CASE
=
;
(
,
)
;
RETURN
;
BREAK
;
}
}
}
(
)
;
}
VOID
(
)
{
(
,
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
(
)
;
}
VOID
(
)
{
(
,
)
;
(
)
;
}
VOID
(
,
)
{
(
,
)
;
}
VOID
(
,
)
{
(
,
)
;
}
VOID
(
,
)
;
VOID
(
,
)
{
(
,
)
;
(
,
)
;
}
;
INT
;
INT
;
VOID
(
)
{
;
;
=
;
=
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
CONTINUE
;
=
(
)
;
IF
(
)
{
=
;
;
}
}
(
,
)
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
INT
;
INT
;
INT
;
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
=
(
,
,
,
)
;
=
(
)
;
(
,
)
;
(
)
;
IF
(
)
=
;
}
(
,
)
;
}
VOID
(
)
{
INT
;
INT
;
INT
;
;
=
(
(
)
(
)
)
;
=
;
=
(
)
;
=
(
,
,
,
)
;
=
(
)
;
(
,
)
;
(
)
;
IF
(
)
=
;
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
;
;
STATIC
INT
=
;
;
IF
(
(
)
)
RETURN
;
=
;
=
(
)
;
=
(
,
,
)
;
=
;
=
(
(
)
)
;
(
,
)
;
}
VOID
(
)
;
VOID
(
)
{
(
,
)
;
(
)
;
}
VOID
(
)
{
;
;
;
INT
;
;
IF
(
)
RETURN
;
=
;
=
(
,
,
,
)
;
(
,
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
(
,
,
,
)
;
IF
(
(
,
)
)
(
,
)
;
(
,
,
)
;
(
)
;
}
VOID
(
)
{
INT
=
;
IF
(
(
)
(
)
)
{
=
;
}
(
,
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
,
,
,
,
INT
,
INT
)
{
;
;
SWITCH
(
)
{
CASE
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
=
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
RETURN
;
}
ELSE
{
=
;
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
}
BREAK
;
CASE
IF
(
)
{
=
;
=
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
RETURN
;
}
ELSE
{
=
;
;
=
(
,
)
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
(
,
)
;
RETURN
;
}
}
BREAK
;
}
BREAK
;
CASE
SWITCH
(
)
{
CASE
IF
(
)
{
=
;
=
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
RETURN
;
}
ELSE
{
=
;
;
=
(
,
)
;
IF
(
)
{
IF
(
)
RETURN
;
=
;
(
,
)
;
RETURN
;
}
}
BREAK
;
CASE
IF
(
)
{
=
;
=
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
}
RETURN
;
}
ELSE
{
=
;
;
=
(
,
)
;
IF
(
)
{
=
;
(
,
)
;
RETURN
;
}
}
BREAK
;
}
BREAK
;
}
RETURN
;
}
VOID
(
)
{
;
=
(
,
,
,
,
,
)
;
IF
(
(
)
)
(
(
)
,
)
;
IF
(
)
{
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
=
;
DEFAULT
BREAK
;
}
}
ELSE
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
=
;
DEFAULT
BREAK
;
}
}
(
)
;
(
(
)
,
)
;
}
}
INT
(
,
)
{
INT
;
INT
;
INT
;
;
;
=
;
=
;
WHILE
(
(
=
(
,
)
)
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
)
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
=
;
=
;
=
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
(
)
;
IF
(
)
;
BREAK
;
CASE
=
;
CASE
=
;
=
;
=
;
=
(
)
;
IF
(
)
=
;
(
)
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
(
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
(
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
CASE
{
INT
=
;
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
=
(
,
,
)
;
IF
(
)
IF
(
)
=
;
=
(
,
,
)
;
IF
(
)
IF
(
)
=
;
}
}
=
;
}
BREAK
;
CASE
=
;
=
;
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
(
,
,
)
)
{
=
(
,
,
)
;
IF
(
)
{
=
;
=
;
BREAK
;
}
}
ELSE
{
=
(
,
,
)
;
IF
(
)
{
=
;
=
;
BREAK
;
}
}
}
}
DEFAULT
BREAK
;
}
}
RETURN
;
}
INT
(
,
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
;
;
;
;
=
;
=
;
WHILE
(
(
=
(
,
)
)
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
)
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
BREAK
;
}
=
;
=
;
=
;
=
;
DO
{
=
;
FOR
(
=
;
;
)
{
IF
(
(
(
)
)
)
CONTINUE
;
=
(
)
;
=
;
IF
(
)
CONTINUE
;
=
(
)
;
=
;
IF
(
)
CONTINUE
;
;
IF
(
)
CONTINUE
;
=
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
}
}
WHILE
(
)
;
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
=
{
,
,
,
}
;
INT
=
{
,
,
,
}
;
(
,
,
INT
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
;
ELSE
=
;
IF
(
)
{
;
}
=
;
;
IF
(
)
=
;
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
)
=
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
)
=
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
)
=
;
}
DEFAULT
BREAK
;
}
RETURN
;
}
(
,
,
)
{
;
;
IF
(
(
)
)
{
IF
(
)
RETURN
;
;
=
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
;
IF
(
)
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
=
(
,
,
)
;
ELSE
=
(
,
,
)
;
}
ELSE
=
;
IF
(
)
=
;
ELSE
{
=
;
=
;
=
;
}
RETURN
(
)
;
}
(
,
INT
)
{
IF
(
)
RETURN
;
;
IF
(
)
=
;
=
;
RETURN
;
}
(
,
INT
)
{
INT
;
=
;
IF
(
)
RETURN
;
=
;
=
;
RETURN
;
}
VOID
(
,
)
{
IF
(
)
RETURN
;
=
;
=
;
}
(
,
INT
)
{
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
(
,
)
;
=
;
RETURN
;
}
IF
(
)
RETURN
;
=
;
RETURN
;
}
VOID
(
,
)
{
;
INT
;
;
INT
;
=
;
IF
(
)
{
RETURN
;
}
=
;
=
;
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
(
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
(
,
)
)
RETURN
;
=
;
BREAK
;
CASE
;
IF
(
)
=
;
=
;
=
;
BREAK
;
CASE
;
IF
(
)
=
;
IF
(
)
=
;
=
;
BREAK
;
CASE
;
IF
(
)
=
;
=
;
=
;
=
;
BREAK
;
CASE
IF
(
)
RETURN
;
=
;
=
;
(
,
)
;
=
;
=
;
BREAK
;
CASE
IF
(
)
=
;
(
,
)
;
IF
(
)
BREAK
;
RETURN
;
CASE
IF
(
)
=
;
(
,
)
;
IF
(
)
BREAK
;
RETURN
;
CASE
IF
(
)
=
;
(
,
)
;
IF
(
)
BREAK
;
RETURN
;
CASE
IF
(
)
=
;
(
,
)
;
IF
(
)
BREAK
;
RETURN
;
CASE
IF
(
)
=
;
(
,
)
;
IF
(
)
BREAK
;
RETURN
;
CASE
IF
(
)
=
;
(
,
)
;
IF
(
)
BREAK
;
RETURN
;
CASE
IF
(
(
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
(
,
)
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
BREAK
;
CASE
IF
(
(
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
)
)
RETURN
;
=
;
IF
(
)
=
;
=
;
BREAK
;
CASE
IF
(
(
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
)
{
IF
(
(
,
,
)
)
RETURN
;
}
ELSE
{
IF
(
(
,
,
)
)
RETURN
;
}
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
BREAK
;
CASE
IF
(
)
{
FOR
(
=
;
;
)
;
=
;
}
FOR
(
=
;
;
)
(
,
,
)
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
=
;
BREAK
;
CASE
IF
(
(
,
,
)
)
RETURN
;
=
;
=
;
BREAK
;
DEFAULT
(
)
;
}
IF
(
)
;
(
)
;
;
IF
(
)
(
,
)
;
}
VOID
(
,
)
{
;
;
(
)
;
IF
(
)
;
;
;
IF
(
)
{
IF
(
)
;
IF
(
)
;
}
ELSE
IF
(
(
)
)
{
;
}
IF
(
)
{
IF
(
)
;
;
=
;
(
)
;
IF
(
)
{
(
)
;
}
}
IF
(
)
{
(
,
)
;
}
ELSE
(
,
)
;
(
)
;
IF
(
)
=
;
SWITCH
(
)
{
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
DEFAULT
RETURN
;
}
=
(
,
,
,
)
;
;
}
VOID
(
,
,
,
INT
)
{
UNSIGNED
;
INT
;
;
;
INT
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
=
=
=
;
}
=
;
IF
(
)
;
IF
(
(
)
(
)
)
{
=
(
,
,
,
)
;
=
(
)
;
IF
(
(
(
)
)
)
{
;
;
}
;
(
,
)
;
(
,
)
;
}
IF
(
)
{
IF
(
)
{
=
;
}
IF
(
(
(
)
)
)
{
RETURN
;
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
}
;
;
}
;
IF
(
)
=
;
=
;
;
IF
(
)
=
;
=
;
IF
(
)
(
,
,
)
;
}
;
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
(
(
)
)
(
)
)
{
;
(
,
)
;
}
=
;
IF
(
(
)
)
{
=
;
=
;
IF
(
)
(
,
)
;
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
VOID
(
)
{
INT
;
IF
(
)
RETURN
;
=
(
(
)
)
;
IF
(
)
=
;
ELSE
=
;
=
;
}
VOID
(
)
{
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
(
)
;
=
;
=
;
=
(
,
)
;
=
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
(
(
)
)
;
}
ELSE
{
=
;
=
(
(
)
)
;
}
}
VOID
(
)
{
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
(
)
;
=
;
=
;
=
(
,
)
;
=
;
=
;
=
(
(
)
)
;
}
VOID
(
)
{
IF
(
)
RETURN
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
}
VOID
(
,
INT
,
INT
)
{
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
,
)
;
IF
(
)
=
;
=
;
IF
(
)
=
(
(
)
)
;
ELSE
=
;
}
VOID
(
)
{
INT
;
;
=
;
WHILE
(
(
=
(
,
)
)
)
{
=
;
IF
(
)
CONTINUE
;
(
,
,
)
;
}
}
VOID
(
)
{
INT
;
INT
;
INT
;
;
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
=
;
}
}
}
VOID
(
,
INT
)
{
INT
;
INT
;
;
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
}
=
;
}
}
}
VOID
(
)
{
SWITCH
(
)
{
CASE
;
IF
(
)
{
;
=
;
}
BREAK
;
CASE
;
IF
(
)
{
;
=
;
}
BREAK
;
}
}
VOID
(
)
{
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
,
)
;
=
;
=
(
)
;
=
;
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
;
INT
;
;
;
;
;
;
;
;
;
INT
;
(
)
{
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
(
)
(
)
)
{
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
(
,
,
,
)
;
RETURN
;
}
(
,
,
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
=
=
;
=
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
RETURN
;
}
(
)
{
IF
(
)
RETURN
;
IF
(
(
,
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
(
)
;
IF
(
)
{
=
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
;
;
}
RETURN
;
}
(
)
{
;
;
INT
;
IF
(
(
(
)
)
)
RETURN
;
=
;
IF
(
(
)
(
)
)
{
RETURN
;
}
IF
(
)
RETURN
;
IF
(
)
{
=
(
(
(
)
)
)
;
(
,
,
,
)
;
;
=
=
=
;
(
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
(
)
(
)
)
)
{
IF
(
)
RETURN
;
IF
(
)
{
RETURN
;
}
}
IF
(
(
)
)
{
RETURN
(
)
;
}
=
(
(
(
)
)
)
;
(
,
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
{
(
,
)
;
}
RETURN
;
}
RETURN
(
)
;
}
(
,
,
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
;
=
=
;
=
;
;
=
;
IF
(
)
RETURN
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
(
,
,
)
{
;
;
INT
;
INT
;
;
=
;
IF
(
(
,
,
)
)
RETURN
;
IF
(
(
)
)
{
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
RETURN
;
IF
(
(
(
)
)
)
RETURN
;
}
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
(
(
)
)
)
{
WHILE
(
)
{
=
;
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
}
}
}
RETURN
;
}
(
)
{
;
=
(
)
;
(
,
,
)
;
=
;
=
;
IF
(
)
{
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
RETURN
;
RETURN
;
}
;
;
;
;
;
;
;
VOID
(
)
{
INT
;
;
;
;
;
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
=
;
RETURN
;
}
=
(
,
,
)
;
=
(
,
,
,
)
;
IF
(
)
;
=
(
,
,
,
)
;
=
;
IF
(
)
;
;
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
(
)
{
;
IF
(
)
(
)
;
=
;
IF
(
(
)
)
{
IF
(
(
,
,
)
)
{
RETURN
;
}
GOTO
;
}
(
)
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
RETURN
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
RETURN
;
}
VOID
(
)
{
;
;
;
;
;
;
INT
;
=
;
=
;
IF
(
)
GOTO
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
(
,
,
)
)
(
,
,
)
;
RETURN
;
}
;
IF
(
)
{
=
(
,
)
;
=
(
,
)
;
IF
(
(
,
,
)
)
GOTO
;
}
=
(
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
=
(
,
)
;
=
(
,
)
;
(
)
;
=
;
=
;
IF
(
(
,
,
)
)
{
GOTO
;
}
}
;
;
;
INT
;
;
;
EXTERN
;
EXTERN
;
(
)
{
;
;
;
;
;
;
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
(
)
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
}
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
}
IF
(
)
RETURN
;
RETURN
;
}
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
=
;
IF
(
)
=
;
=
(
)
;
=
;
RETURN
;
}
(
)
{
;
;
;
;
;
;
;
;
;
;
IF
(
)
{
=
;
IF
(
)
(
,
)
;
IF
(
(
)
)
GOTO
;
(
)
;
=
(
,
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
GOTO
;
}
IF
(
)
{
=
(
,
)
;
IF
(
)
GOTO
;
}
RETURN
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
(
,
)
)
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
}
(
,
,
)
;
RETURN
;
}
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
RETURN
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
(
,
)
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
,
)
;
IF
(
)
(
,
,
,
)
;
RETURN
;
}
(
,
,
)
{
;
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
,
,
,
INT
)
{
;
;
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
,
,
,
,
,
)
;
}
;
(
)
{
INT
;
IF
(
)
{
(
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
RETURN
;
}
=
;
IF
(
(
,
,
)
)
=
;
(
,
,
)
;
RETURN
;
}
VOID
(
)
{
INT
;
;
;
;
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
(
,
,
,
,
,
)
;
}
;
;
INT
;
(
)
{
;
;
;
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
=
(
)
;
=
(
)
;
=
;
=
(
)
;
IF
(
)
=
;
IF
(
)
RETURN
;
IF
(
(
,
)
)
{
(
,
,
,
)
;
}
RETURN
;
}
VOID
(
,
,
INT
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
(
,
,
)
;
}
;
;
(
)
{
;
IF
(
(
)
)
{
RETURN
;
}
IF
(
)
{
(
,
)
;
;
=
;
=
;
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
(
)
)
{
RETURN
;
}
=
;
IF
(
(
)
)
{
(
,
,
,
)
;
=
(
,
,
,
)
;
=
(
(
)
(
)
)
;
=
(
(
)
(
)
)
;
}
RETURN
;
}
(
,
)
{
INT
;
INT
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
(
,
,
)
;
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
,
)
{
=
(
)
;
=
(
)
;
IF
(
)
RETURN
(
)
;
RETURN
(
)
;
}
INT
(
,
,
)
{
;
;
;
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
INT
(
,
)
{
INT
;
INT
;
SWITCH
(
)
{
CASE
=
;
=
;
IF
(
)
{
;
;
}
BREAK
;
CASE
=
;
=
;
IF
(
)
{
;
;
}
BREAK
;
CASE
=
(
,
,
)
;
=
(
,
,
)
;
BREAK
;
CASE
=
(
,
,
)
;
=
(
,
,
)
;
BREAK
;
}
IF
(
)
RETURN
;
RETURN
;
}
INT
(
,
,
)
{
;
;
;
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
IF
(
(
)
)
RETURN
;
RETURN
;
}
=
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
RETURN
;
}
VOID
(
,
)
{
=
;
=
;
=
;
=
;
}
(
,
)
{
;
;
;
=
(
,
)
(
,
)
;
IF
(
)
RETURN
;
=
(
(
)
,
)
(
(
)
,
)
;
=
(
,
)
;
RETURN
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
FLOAT
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
(
FLOAT
)
;
=
;
IF
(
)
RETURN
;
=
(
)
(
)
;
=
;
RETURN
;
}
;
;
;
;
VOID
(
)
{
;
;
IF
(
)
{
=
;
RETURN
;
}
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
}
VOID
(
)
{
INT
;
INT
;
IF
(
(
)
)
{
IF
(
)
=
;
IF
(
)
=
;
ELSE
=
;
}
IF
(
(
)
)
{
IF
(
)
=
;
IF
(
)
=
;
ELSE
{
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
}
}
}
}
VOID
(
)
{
;
;
INT
;
INT
;
;
=
(
,
)
;
=
;
IF
(
(
)
)
{
=
;
=
;
=
;
IF
(
)
=
;
=
;
}
IF
(
(
)
)
{
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
IF
(
)
(
)
=
;
=
;
}
ELSE
{
=
=
;
}
}
}
(
INT
,
INT
,
(
)
(
)
)
{
INT
;
SHORT
;
;
IF
(
)
{
RETURN
;
}
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
(
)
)
RETURN
;
}
RETURN
;
}
(
INT
,
INT
,
(
)
(
)
)
{
;
IF
(
)
{
RETURN
;
}
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
RETURN
;
}
RETURN
;
}
;
;
;
;
INT
;
(
)
{
INT
;
INT
;
;
;
IF
(
)
{
=
(
,
,
)
;
=
(
,
,
)
;
}
ELSE
{
=
(
,
,
)
;
=
(
,
,
)
;
}
IF
(
)
RETURN
;
(
,
)
;
=
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
{
RETURN
;
}
=
;
=
;
=
;
;
RETURN
;
}
(
)
{
;
;
;
;
INT
;
INT
;
;
;
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
}
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
,
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
;
RETURN
;
}
(
,
)
{
INT
;
;
;
;
=
;
=
;
WHILE
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
;
{
=
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
=
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
=
;
}
RETURN
;
}
(
,
,
,
,
INT
,
(
)
(
)
)
{
;
;
;
;
;
;
;
;
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
;
=
;
IF
(
(
(
)
(
)
)
)
;
IF
(
(
(
)
(
)
)
)
;
=
;
=
;
=
;
=
;
;
;
=
;
=
;
;
;
=
;
=
;
IF
(
)
{
=
;
=
(
(
)
(
)
)
;
=
(
,
(
)
)
;
}
ELSE
IF
(
)
{
=
;
=
(
)
(
)
;
=
(
,
(
)
)
;
}
ELSE
{
=
;
=
;
=
;
}
=
(
)
(
,
)
;
IF
(
)
{
=
;
=
(
(
)
(
)
)
;
=
(
,
(
)
)
;
}
ELSE
IF
(
)
{
=
;
=
(
)
(
)
;
=
(
,
(
)
)
;
}
ELSE
{
=
;
=
;
=
;
}
=
(
)
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
)
{
IF
(
(
,
,
)
)
RETURN
;
}
IF
(
)
{
BREAK
;
}
IF
(
(
)
)
{
;
;
}
ELSE
IF
(
(
)
)
{
;
;
}
}
RETURN
(
,
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
VOID
(
INT
)
;
VOID
(
)
;
INT
;
(
,
)
{
;
DO
{
IF
(
)
{
=
(
)
;
(
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
IF
(
)
(
)
;
=
;
}
WHILE
(
)
;
RETURN
;
}
VOID
(
)
{
=
=
=
;
(
,
)
;
(
)
;
IF
(
)
=
;
;
IF
(
)
(
,
)
;
}
VOID
(
)
{
;
;
;
;
;
IF
(
)
{
IF
(
)
{
;
=
=
=
;
(
,
)
;
}
RETURN
;
}
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
=
;
DO
{
IF
(
)
{
=
;
=
;
;
;
}
ELSE
{
=
;
=
;
=
=
;
}
IF
(
(
,
,
)
)
{
IF
(
)
{
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
}
ELSE
=
=
;
}
}
WHILE
(
)
;
IF
(
)
{
=
=
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
IF
(
)
RETURN
;
}
}
IF
(
(
(
)
)
)
{
IF
(
(
UNSIGNED
)
(
(
)
)
)
(
,
)
;
=
;
=
;
}
ELSE
{
=
(
,
)
;
=
(
,
)
;
}
}
VOID
(
)
{
;
;
IF
(
)
{
;
=
(
)
;
}
;
IF
(
)
{
IF
(
(
)
(
)
)
{
=
(
,
)
;
=
(
(
)
)
;
IF
(
(
)
)
;
ELSE
IF
(
(
)
)
;
}
}
IF
(
)
{
IF
(
)
{
=
;
}
IF
(
)
{
IF
(
)
{
=
;
(
,
)
;
}
=
;
}
=
;
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
}
ELSE
IF
(
(
)
)
{
IF
(
)
=
;
ELSE
;
}
IF
(
)
{
IF
(
)
=
;
{
=
;
}
IF
(
)
{
=
;
}
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
}
}
VOID
(
)
{
;
;
;
;
;
;
=
;
=
;
IF
(
(
,
,
)
)
RETURN
;
=
(
,
,
,
)
;
(
,
)
;
=
(
,
)
;
=
(
,
,
,
)
;
(
,
)
;
=
;
IF
(
)
=
;
ELSE
=
;
=
(
,
,
,
)
;
=
;
=
(
)
;
IF
(
)
;
=
;
(
)
;
}
VOID
(
)
{
IF
(
(
)
)
{
(
)
;
IF
(
(
)
(
)
)
RETURN
;
}
IF
(
(
)
)
{
(
)
;
IF
(
(
)
(
)
)
RETURN
;
}
IF
(
)
{
;
IF
(
)
IF
(
(
,
)
)
RETURN
;
}
ELSE
{
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
(
)
;
}
}
(
,
,
,
)
{
;
;
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
(
)
;
(
)
;
RETURN
;
}
;
INT
;
INT
;
INT
;
VOID
(
)
{
IF
(
(
)
(
)
(
)
(
)
)
{
=
;
=
;
=
(
)
(
)
;
IF
(
)
=
(
)
(
)
;
}
(
)
;
(
)
;
(
(
)
)
;
}
VOID
(
VOID
)
{
;
;
;
;
;
;
INT
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
(
,
)
;
=
(
,
,
,
)
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
BREAK
;
}
IF
(
)
=
;
ELSE
=
;
=
(
,
,
,
)
;
=
;
=
(
)
;
=
(
)
(
)
;
}
VOID
(
)
{
;
;
;
;
;
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
(
,
,
,
)
;
IF
(
)
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
FOR
(
=
;
;
)
=
;
IF
(
)
{
(
)
;
(
)
;
}
}
VOID
(
)
{
INT
;
INT
;
;
;
;
;
IF
(
)
{
IF
(
)
{
(
,
,
(
)
)
;
;
}
RETURN
;
}
IF
(
)
{
=
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
(
)
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
(
)
;
IF
(
(
)
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
(
,
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
(
)
)
)
{
RETURN
;
}
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
(
,
,
,
)
;
=
;
IF
(
)
=
(
(
)
)
;
IF
(
)
;
IF
(
)
;
=
(
)
;
IF
(
)
;
}
EXTERN
;
VOID
(
,
,
)
{
;
(
(
(
)
(
)
)
)
;
=
(
,
,
,
)
;
=
;
(
)
;
IF
(
)
=
;
IF
(
)
(
,
)
;
}
VOID
(
,
,
,
INT
)
{
;
(
(
(
)
(
)
)
)
;
=
(
,
,
,
)
;
=
;
(
)
;
IF
(
)
=
;
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
}
VOID
(
)
{
(
)
;
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
IF
(
(
,
,
)
)
(
)
;
}
(
,
,
)
{
;
;
INT
;
=
(
,
,
,
)
;
IF
(
)
(
,
)
;
=
;
=
(
,
,
,
)
;
IF
(
)
(
(
)
(
)
)
;
=
;
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
=
;
=
(
)
;
(
)
;
RETURN
;
}
VOID
(
,
)
{
;
;
;
;
;
;
=
;
=
(
,
,
)
;
IF
(
)
{
;
=
(
,
,
)
;
IF
(
)
{
;
=
(
,
,
)
;
}
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
(
,
,
,
)
;
IF
(
)
(
,
)
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
VOID
(
)
{
;
SWITCH
(
)
{
CASE
=
(
,
,
,
,
,
)
;
IF
(
)
{
IF
(
(
)
)
(
(
)
,
)
;
}
IF
(
(
)
)
{
=
;
=
;
(
(
)
,
)
;
}
ELSE
{
IF
(
)
{
=
;
=
;
(
(
)
,
)
;
SWITCH
(
)
{
CASE
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
}
}
BREAK
;
CASE
=
(
,
,
,
,
,
)
;
IF
(
)
{
=
;
=
;
(
(
)
,
)
;
}
BREAK
;
CASE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
(
(
)
,
)
;
}
CASE
BREAK
;
}
}
INT
(
,
,
INT
)
{
;
INT
;
INT
;
;
=
;
=
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
DEFAULT
BREAK
;
}
WHILE
(
(
=
(
,
)
)
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
;
=
;
=
(
)
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
=
;
=
(
,
)
;
=
;
=
;
=
;
(
(
)
,
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
=
;
(
(
)
,
)
;
BREAK
;
CASE
=
;
=
(
)
;
IF
(
)
=
;
=
;
=
;
=
;
(
(
)
,
)
;
BREAK
;
CASE
=
;
=
(
)
;
IF
(
)
=
;
=
;
=
;
=
;
(
(
)
,
)
;
BREAK
;
CASE
=
;
=
(
)
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
=
;
=
(
)
;
(
(
)
,
)
;
BREAK
;
}
(
)
;
}
RETURN
;
}
VOID
(
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
)
(
)
)
{
(
)
=
(
)
;
(
)
=
(
)
;
}
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
(
(
)
)
(
(
)
)
)
{
(
)
=
(
)
;
(
)
=
;
(
)
=
(
)
;
}
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
RETURN
;
}
(
)
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
(
)
=
;
(
(
)
)
;
=
;
RETURN
;
}
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
VOID
(
,
INT
,
)
{
;
;
=
;
DO
{
IF
(
)
{
=
;
BREAK
;
}
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
(
,
)
;
IF
(
)
BREAK
;
}
=
;
}
WHILE
(
)
;
}
;
;
VOID
(
)
{
;
INT
;
=
;
=
(
)
;
=
(
,
)
;
=
(
)
;
=
(
,
)
;
}
VOID
(
)
{
;
IF
(
)
=
;
IF
(
)
(
,
)
;
=
;
=
;
=
;
(
,
,
)
;
}
(
)
{
;
INT
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
RETURN
;
DO
{
IF
(
(
)
)
{
=
;
}
ELSE
IF
(
(
)
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
(
)
)
{
=
;
}
ELSE
{
=
;
}
}
WHILE
(
)
;
(
,
,
)
;
RETURN
;
}
VOID
(
)
{
;
IF
(
(
)
)
RETURN
;
(
,
)
;
=
;
(
,
,
)
;
(
,
)
;
}
VOID
(
)
{
(
,
,
)
;
}
VOID
(
,
)
{
;
INT
;
IF
(
)
{
(
,
)
;
}
IF
(
)
{
(
,
)
;
}
IF
(
)
{
=
;
(
,
,
)
;
RETURN
;
}
IF
(
)
{
IF
(
(
)
)
{
=
;
(
)
;
RETURN
;
}
}
ELSE
=
;
=
(
)
;
=
(
,
)
;
;
=
(
,
)
;
}
VOID
(
,
)
{
IF
(
(
)
)
{
;
(
)
;
}
ELSE
{
=
;
(
)
;
}
}
VOID
(
,
)
{
(
)
;
IF
(
)
(
,
,
)
;
}
VOID
(
,
)
{
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
RETURN
;
}
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
(
)
;
}
VOID
(
,
)
{
;
;
IF
(
)
RETURN
;
=
;
=
;
(
,
,
)
;
}
VOID
(
,
)
{
(
,
)
;
(
,
,
)
;
}
VOID
(
,
)
{
;
INT
;
INT
;
=
(
(
)
)
;
IF
(
)
;
=
;
(
(
)
(
)
)
;
=
(
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
=
(
,
,
,
)
;
}
}
VOID
(
,
)
{
;
INT
;
INT
;
=
(
(
)
)
;
=
;
(
(
)
(
)
)
;
=
(
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
=
(
,
,
,
)
;
IF
(
)
{
IF
(
)
=
;
ELSE
;
}
ELSE
{
IF
(
)
=
;
ELSE
;
}
;
}
VOID
(
,
)
{
;
(
,
)
;
}
VOID
(
,
)
{
;
(
,
)
;
}
VOID
(
,
)
{
;
(
,
,
(
(
)
)
)
;
(
,
)
;
}
;
VOID
(
)
{
;
=
;
=
(
,
,
)
;
IF
(
)
{
;
=
(
,
,
)
;
IF
(
)
{
;
=
(
,
,
)
;
}
}
}
VOID
(
,
)
{
;
INT
;
=
(
(
)
)
;
=
;
IF
(
)
(
(
)
(
)
)
;
(
,
,
,
,
)
;
}
VOID
(
,
)
{
(
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
,
)
{
INT
;
(
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
FOR
(
=
;
;
)
(
,
)
;
}
VOID
(
,
)
{
INT
;
;
INT
;
(
,
)
;
(
,
)
;
;
(
,
,
)
;
(
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
;
(
(
)
(
)
)
;
(
,
,
,
(
(
(
)
(
)
)
)
,
)
;
}
}
VOID
(
,
)
{
(
,
)
;
IF
(
)
RETURN
;
(
,
)
;
;
(
,
,
)
;
(
)
;
(
,
)
;
}
VOID
(
,
)
{
=
;
}
VOID
(
,
)
{
=
;
}
VOID
(
,
)
{
=
;
}
VOID
(
)
{
INT
;
INT
;
INT
;
;
FOR
(
=
;
;
)
{
=
;
(
,
,
)
;
IF
(
)
CONTINUE
;
(
,
,
(
)
,
)
;
=
;
FOR
(
=
;
;
)
(
(
)
)
;
(
,
,
,
)
;
}
}
VOID
(
,
)
{
(
,
)
;
}
VOID
(
)
{
INT
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
}
VOID
(
)
{
INT
;
;
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
(
=
)
)
{
IF
(
)
{
;
IF
(
)
(
,
,
)
;
}
}
}
=
;
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
VOID
(
)
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
;
INT
;
INT
;
SHORT
;
SHORT
;
;
;
;
;
;
;
;
VOID
(
INT
)
{
;
INT
;
;
;
=
(
)
(
)
;
=
(
(
)
,
,
)
;
=
(
,
)
;
=
(
)
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
}
(
)
;
}
VOID
(
INT
)
{
;
INT
;
;
;
;
INT
;
INT
;
=
(
)
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
(
,
)
;
=
(
)
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
(
)
)
;
=
(
(
)
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
}
(
)
;
}
VOID
(
INT
)
{
;
INT
;
;
;
=
(
)
(
)
;
=
(
(
)
,
,
)
;
=
(
,
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
}
(
)
;
}
VOID
(
INT
)
{
;
INT
;
;
;
=
(
)
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
(
,
)
;
=
(
)
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
}
(
)
;
}
VOID
(
INT
)
{
;
INT
;
INT
;
INT
;
;
;
=
(
)
(
)
;
=
(
(
)
,
,
)
;
=
(
,
)
;
=
(
)
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
{
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
}
(
)
;
}
VOID
(
INT
)
{
;
INT
;
;
INT
;
;
=
(
,
)
;
=
(
)
(
)
;
=
(
)
;
FOR
(
=
;
;
,
)
{
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
BREAK
;
}
}
IF
(
)
BREAK
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
}
(
)
;
}
VOID
(
INT
)
{
;
INT
;
;
;
;
;
=
(
)
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
(
,
)
;
=
(
)
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
=
(
)
;
=
=
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
IF
(
(
,
)
)
=
;
ELSE
=
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
}
(
)
;
}
VOID
(
INT
)
{
;
INT
;
;
;
=
(
)
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
=
(
,
)
;
=
(
)
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
(
)
;
}
VOID
(
INT
)
{
INT
;
INT
;
=
(
,
)
;
=
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
INT
;
INT
;
INT
;
;
;
;
;
;
INT
;
=
;
FOR
(
=
;
;
,
)
{
=
;
=
;
}
=
;
=
;
FOR
(
=
;
;
,
)
{
;
;
IF
(
)
{
;
;
}
}
=
(
,
,
)
;
=
;
FOR
(
=
;
;
,
)
{
(
)
;
=
;
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
{
=
;
(
,
,
)
;
(
,
,
)
;
}
}
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
=
(
)
;
=
;
=
;
}
}
VOID
(
INT
,
INT
,
INT
,
)
{
INT
;
CHAR
;
INT
;
=
=
=
=
;
=
;
FOR
(
=
;
;
)
{
=
=
=
;
}
=
;
(
)
;
IF
(
)
{
(
,
)
;
(
)
;
}
ELSE
(
,
)
;
(
)
;
(
)
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
ELSE
{
=
;
=
;
=
;
=
;
=
;
}
=
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
(
,
)
;
(
)
;
=
;
=
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
{
=
;
(
)
;
}
}
=
=
;
(
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
;
;
;
;
;
INT
;
INT
(
,
,
)
{
;
;
;
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
(
)
(
)
;
=
(
)
(
)
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
(
,
)
{
;
;
;
=
(
,
)
(
,
)
;
IF
(
)
RETURN
;
=
(
(
)
,
)
(
(
)
,
)
;
=
(
,
)
;
RETURN
;
}
(
INT
)
{
;
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
;
;
;
;
IF
(
)
(
,
,
)
;
=
;
=
;
=
;
FOR
(
;
;
,
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
CONTINUE
;
IF
(
(
)
)
RETURN
;
=
;
=
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
RETURN
;
=
(
,
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
}
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
}
IF
(
)
RETURN
;
}
RETURN
;
}
(
INT
)
{
;
INT
;
IF
(
)
{
IF
(
)
RETURN
(
)
;
ELSE
RETURN
(
(
)
)
;
}
=
;
=
(
,
,
(
)
)
;
IF
(
)
=
;
IF
(
(
)
)
RETURN
;
IF
(
(
,
,
(
)
)
)
{
RETURN
;
}
RETURN
(
)
;
}
(
,
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
=
(
)
;
=
(
)
;
=
;
=
;
=
(
)
;
IF
(
)
{
;
RETURN
;
}
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
RETURN
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
;
CHAR
;
CHAR
;
INT
;
}
;
EXTERN
;
EXTERN
;
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
}
}
;
;
;
EXTERN
SHORT
;
EXTERN
;
VOID
(
VOID
)
{
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
(
)
)
CONTINUE
;
=
(
)
;
=
(
)
;
}
ELSE
{
IF
(
(
)
)
CONTINUE
;
=
(
)
;
=
(
)
;
}
=
;
=
;
IF
(
)
(
,
,
)
;
=
;
;
}
}
(
INT
,
INT
,
INT
)
{
RETURN
(
)
;
}
(
INT
,
INT
,
INT
)
{
RETURN
(
)
;
}
INT
(
INT
,
INT
)
{
RETURN
(
)
;
}
(
,
)
{
IF
(
(
)
)
RETURN
;
IF
(
)
RETURN
;
RETURN
;
}
(
)
{
INT
;
;
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
RETURN
;
}
(
)
{
INT
;
;
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
RETURN
;
}
(
,
INT
)
{
INT
;
INT
;
INT
;
;
;
=
;
;
FOR
(
=
,
=
;
;
)
{
=
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
IF
(
)
{
(
,
)
;
BREAK
;
}
}
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
RETURN
;
}
(
)
{
INT
;
;
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
RETURN
;
}
(
)
{
INT
;
;
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
RETURN
;
}
INT
(
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
RETURN
;
RETURN
;
}
INT
(
,
INT
)
{
INT
;
INT
;
;
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
,
)
;
IF
(
)
CONTINUE
;
IF
(
)
=
;
}
RETURN
;
}
VOID
(
INT
,
INT
,
)
{
;
INT
;
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
RETURN
;
BREAK
;
DEFAULT
BREAK
;
}
=
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
BREAK
;
}
IF
(
)
RETURN
;
}
SWITCH
(
)
{
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
,
)
;
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
IF
(
)
{
(
,
,
)
;
=
;
}
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
IF
(
)
(
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
}
}
VOID
(
,
)
{
INT
;
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
}
IF
(
)
RETURN
;
}
SWITCH
(
)
{
CASE
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
,
)
;
(
,
)
;
BREAK
;
}
}
VOID
(
)
{
;
=
;
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
)
IF
(
(
)
)
(
,
,
,
)
;
BREAK
;
CASE
IF
(
)
IF
(
(
)
)
(
,
,
,
)
;
BREAK
;
CASE
CASE
IF
(
(
(
)
)
)
{
IF
(
(
)
)
(
,
,
,
)
;
}
BREAK
;
CASE
;
=
;
BREAK
;
CASE
;
IF
(
(
)
)
(
,
,
,
)
;
IF
(
)
(
)
;
BREAK
;
DEFAULT
(
,
)
;
BREAK
;
}
;
}
;
INT
;
VOID
(
VOID
)
{
;
INT
;
INT
;
;
IF
(
)
{
;
IF
(
)
(
)
;
}
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
(
(
)
)
;
IF
(
)
=
;
ELSE
=
;
}
}
FOR
(
=
;
;
)
{
=
;
SWITCH
(
)
{
CASE
;
BREAK
;
}
}
FOR
(
=
;
;
)
IF
(
)
{
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
(
(
)
,
)
;
(
,
,
(
)
)
;
}
}
}
INT
(
)
{
;
;
;
INT
;
INT
;
INT
;
;
=
;
=
;
WHILE
(
(
=
(
,
)
)
)
{
=
;
IF
(
)
CONTINUE
;
=
;
=
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
CONTINUE
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
,
,
)
;
(
)
;
=
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
BREAK
;
}
}
RETURN
;
}
SHORT
;
;
VOID
(
VOID
)
{
;
INT
;
INT
;
=
;
IF
(
(
)
)
=
;
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
=
(
)
;
IF
(
)
{
INT
;
=
(
)
;
=
;
=
;
}
=
;
FOR
(
=
;
;
,
)
{
IF
(
)
CONTINUE
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
=
;
FOR
(
=
;
;
)
{
SWITCH
(
)
{
CASE
=
;
;
BREAK
;
}
}
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
(
,
,
(
)
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
;
INT
;
;
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
FOR
(
=
,
=
;
;
)
{
IF
(
)
{
=
;
=
;
BREAK
;
}
IF
(
)
{
INT
;
IF
(
(
)
)
{
(
,
)
;
CONTINUE
;
}
=
(
)
;
=
(
)
;
=
(
)
;
}
}
}
VOID
(
,
,
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
RETURN
;
}
}
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
=
;
=
;
=
(
)
;
RETURN
;
}
}
(
)
;
}
VOID
(
,
INT
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
=
;
IF
(
)
(
,
,
,
)
;
RETURN
;
}
ELSE
{
IF
(
)
{
(
,
)
;
=
;
IF
(
)
(
,
,
,
)
;
RETURN
;
}
ELSE
{
IF
(
)
{
(
,
)
;
=
;
IF
(
)
(
,
,
,
)
;
RETURN
;
}
}
}
}
}
(
,
,
INT
)
{
IF
(
)
{
SWITCH
(
)
{
CASE
BREAK
;
DEFAULT
RETURN
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
BREAK
;
DEFAULT
RETURN
;
BREAK
;
}
}
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
)
)
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
CASE
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
IF
(
(
,
)
)
(
,
)
;
BREAK
;
CASE
CASE
CASE
IF
(
(
,
,
)
)
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
BREAK
;
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
(
,
INT
,
)
{
INT
;
INT
;
;
;
UNSIGNED
;
;
;
;
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
CONTINUE
;
=
(
)
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
IF
(
(
,
,
)
)
RETURN
;
=
;
IF
(
)
=
;
=
(
,
,
,
)
;
(
,
)
;
=
;
=
(
,
,
,
)
;
(
,
)
;
IF
(
)
=
;
=
;
=
=
=
;
RETURN
;
}
}
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
;
;
VOID
(
VOID
)
{
=
=
;
}
VOID
(
)
{
=
;
=
;
=
;
=
;
}
VOID
(
)
{
=
(
)
(
)
;
}
VOID
(
)
{
}
VOID
(
VOID
)
{
;
=
;
WHILE
(
)
{
IF
(
(
)
(
)
)
{
=
;
=
;
(
)
;
}
ELSE
{
IF
(
)
(
)
;
}
=
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
IF
(
)
{
RETURN
;
}
FOR
(
=
;
;
)
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
VOID
(
,
,
)
{
;
(
,
)
;
(
,
)
;
}
VOID
(
)
{
INT
;
;
=
(
,
)
(
,
)
;
;
IF
(
)
=
;
IF
(
(
)
)
{
=
;
IF
(
)
=
;
=
;
RETURN
;
}
=
(
)
;
=
(
,
)
;
IF
(
)
{
;
IF
(
)
{
=
;
=
;
}
IF
(
)
{
=
;
IF
(
)
=
;
}
IF
(
)
{
;
IF
(
)
=
;
}
}
=
;
IF
(
)
=
;
}
VOID
(
)
{
;
=
;
(
)
;
=
(
)
;
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
IF
(
(
)
)
{
(
,
)
;
}
}
(
)
VOID
(
)
{
;
;
(
)
;
IF
(
)
;
IF
(
)
=
;
=
;
=
(
)
;
(
)
;
IF
(
)
{
=
(
,
,
,
)
;
=
;
IF
(
(
UNSIGNED
)
)
{
=
;
IF
(
)
;
}
ELSE
IF
(
)
;
ELSE
;
}
ELSE
IF
(
)
;
IF
(
)
=
;
}
VOID
(
)
{
;
;
IF
(
)
;
ELSE
;
=
;
IF
(
)
{
=
;
=
;
=
;
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
;
ELSE
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
=
;
IF
(
)
{
=
(
)
;
IF
(
(
)
)
{
=
;
}
IF
(
(
)
)
{
=
;
}
IF
(
)
{
IF
(
(
)
(
)
)
{
=
;
}
}
}
IF
(
)
{
IF
(
)
{
(
)
;
=
;
}
}
ELSE
=
;
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
{
IF
(
(
)
)
=
;
ELSE
=
;
}
ELSE
IF
(
)
{
IF
(
(
)
)
{
=
;
}
ELSE
=
;
}
ELSE
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
;
;
;
;
;
;
VOID
(
INT
,
INT
)
;
VOID
(
VOID
)
{
=
;
}
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
;
;
VOID
(
INT
,
INT
)
{
;
;
=
;
WHILE
(
)
;
IF
(
)
{
IF
(
)
{
(
,
)
;
=
;
;
WHILE
(
)
{
=
(
)
;
;
}
=
;
=
;
RETURN
;
}
(
,
)
;
=
;
}
IF
(
)
RETURN
;
=
;
WHILE
(
(
)
)
{
(
,
(
)
)
;
;
IF
(
)
{
=
;
GOTO
;
}
}
(
,
)
;
=
;
IF
(
)
{
RETURN
;
}
WHILE
(
)
{
=
;
}
=
;
}
VOID
(
INT
,
INT
)
{
;
=
;
WHILE
(
)
;
IF
(
)
{
IF
(
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
}
IF
(
)
RETURN
;
WHILE
(
(
)
)
{
(
,
(
)
)
;
;
IF
(
)
RETURN
;
}
(
,
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
INT
;
INT
;
;
;
;
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
;
;
=
;
IF
(
)
{
;
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
)
{
;
IF
(
)
RETURN
;
=
;
}
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
IF
(
)
{
RETURN
;
}
(
,
)
;
RETURN
;
(
,
)
;
}
INT
=
{
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
}
,
{
,
,
,
}
,
{
,
,
,
}
,
{
,
,
,
}
}
;
(
)
{
INT
;
INT
;
INT
;
;
;
;
;
;
;
;
;
;
INT
;
INT
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
;
IF
(
)
RETURN
;
=
;
}
=
;
IF
(
)
{
;
IF
(
)
RETURN
;
=
;
}
=
(
)
;
=
(
)
;
=
;
=
;
IF
(
)
RETURN
;
;
=
;
WHILE
(
)
;
IF
(
)
{
RETURN
;
}
RETURN
;
}
VOID
(
INT
)
{
INT
;
;
;
IF
(
)
(
,
,
)
;
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
,
,
)
;
}
ELSE
=
;
IF
(
)
{
=
(
,
,
)
;
}
ELSE
=
;
(
)
;
WHILE
(
)
{
(
)
;
;
}
}
VOID
(
INT
)
{
;
INT
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
(
)
)
;
RETURN
;
}
=
;
=
(
,
,
)
;
(
)
;
IF
(
(
)
)
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
TYPEDEF
STRUCT
{
SHORT
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
;
SHORT
;
SHORT
;
VOID
;
SHORT
;
;
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
CHAR
;
SHORT
;
SHORT
;
SHORT
;
;
}
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
INT
;
;
INT
;
SHORT
;
UNSIGNED
SHORT
;
;
INT
;
INT
;
;
;
;
;
VOID
(
,
,
INT
,
INT
)
{
INT
;
INT
;
;
;
=
(
)
;
WHILE
(
)
{
=
(
)
;
=
;
=
;
IF
(
)
{
;
=
;
}
IF
(
)
=
;
IF
(
)
(
,
,
)
;
=
(
)
(
(
)
)
;
}
}
VOID
(
INT
)
{
;
;
;
;
INT
;
INT
;
INT
;
INT
;
;
SHORT
;
UNSIGNED
SHORT
;
=
;
=
(
,
,
)
;
=
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
(
,
)
;
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
FOR
(
;
;
)
{
IF
(
)
CONTINUE
;
=
(
)
(
(
)
(
)
)
;
(
,
,
,
)
;
}
}
(
,
)
;
}
VOID
(
INT
)
{
;
;
;
;
INT
;
INT
;
INT
;
INT
;
SHORT
;
UNSIGNED
SHORT
;
=
;
=
;
=
;
=
;
=
;
=
(
)
(
)
;
(
,
,
)
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
(
,
)
;
=
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
FOR
(
;
;
)
{
;
=
;
=
(
)
;
}
}
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
IF
(
)
{
(
,
)
;
}
;
}
}
}
(
INT
,
INT
)
{
INT
;
INT
;
;
=
;
=
;
IF
(
)
RETURN
(
)
(
,
)
;
IF
(
)
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
;
;
;
;
INT
;
INT
;
INT
;
INT
;
INT
;
CHAR
;
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
=
(
,
)
;
=
(
(
(
INT
)
)
)
;
=
;
=
(
(
)
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
;
}
(
)
;
=
=
(
,
)
;
=
(
)
;
=
(
(
)
)
;
=
;
IF
(
(
)
)
{
=
(
,
)
;
=
(
)
;
=
(
(
)
)
;
}
ELSE
{
=
;
=
;
=
;
}
=
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
=
;
=
(
)
;
=
(
)
;
=
(
(
)
)
(
(
)
)
;
(
)
;
FOR
(
=
;
;
)
(
)
;
(
)
;
FOR
(
=
;
;
)
(
)
;
(
)
;
FOR
(
=
;
;
,
)
{
IF
(
(
)
)
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
=
(
)
;
IF
(
)
(
)
;
=
(
)
(
(
)
)
;
=
=
(
(
)
(
)
(
(
)
)
,
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
(
)
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
}
}
=
(
,
,
)
;
=
(
,
,
)
;
=
;
WHILE
(
)
;
=
;
=
;
;
}
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
(
)
;
=
(
(
)
,
,
)
;
FOR
(
=
;
;
)
=
;
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
=
(
)
;
=
;
=
(
(
)
,
,
)
;
FOR
(
=
;
;
)
=
;
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
=
(
)
;
=
;
=
(
,
,
)
;
=
(
,
,
)
;
=
(
,
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
(
)
;
=
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
=
(
)
;
=
(
)
;
=
(
,
,
)
;
=
(
)
(
(
(
INT
)
)
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
INT
(
CHAR
)
{
INT
;
CHAR
;
=
(
)
;
IF
(
)
{
=
;
(
,
,
)
;
(
,
)
;
}
RETURN
;
}
INT
(
CHAR
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
(
,
,
)
)
RETURN
;
RETURN
;
}
INT
(
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
{
(
,
)
;
}
RETURN
;
}
INT
;
INT
;
INT
;
VOID
(
VOID
)
{
CHAR
;
CHAR
;
CHAR
;
INT
;
INT
;
INT
;
INT
;
;
;
;
IF
(
)
RETURN
;
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
;
(
,
)
;
}
}
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
}
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
FOR
(
=
;
;
)
{
=
;
;
(
,
)
;
}
}
=
(
)
;
(
,
,
)
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
(
(
)
)
=
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
;
(
,
)
;
}
}
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
INT
;
INT
;
INT
;
INT
;
INT
;
;
INT
;
;
;
INT
;
INT
;
INT
;
;
;
;
INT
;
VOID
(
VOID
)
{
INT
;
;
;
;
=
;
IF
(
)
RETURN
;
IF
(
(
UNSIGNED
)
)
(
,
,
,
)
;
=
;
=
;
=
(
)
;
DO
{
=
(
)
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
;
;
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
=
(
)
;
=
(
)
;
=
(
)
;
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
;
;
;
}
WHILE
(
)
{
=
;
;
;
;
}
}
VOID
(
VOID
)
{
INT
;
;
;
;
;
=
;
IF
(
)
RETURN
;
IF
(
(
UNSIGNED
)
)
{
(
,
,
,
)
;
}
;
=
;
=
;
=
;
=
(
)
;
DO
{
=
=
(
)
;
;
;
;
}
WHILE
(
)
;
}
(
)
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
=
;
VOID
(
VOID
)
{
INT
;
;
;
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
RETURN
;
IF
(
(
UNSIGNED
)
)
{
(
,
,
,
)
;
}
=
;
=
;
=
(
)
;
DO
{
=
;
IF
(
)
=
;
;
;
}
WHILE
(
)
;
}
;
;
VOID
(
VOID
)
{
INT
;
;
;
;
=
;
IF
(
)
RETURN
;
IF
(
(
UNSIGNED
)
)
{
(
,
,
,
)
;
}
=
;
=
;
=
(
)
;
DO
{
=
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
,
,
)
;
=
(
)
(
(
(
INT
)
)
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
}
ELSE
{
=
=
=
;
}
}
}
INT
;
INT
;
INT
;
;
;
;
;
;
;
INT
;
VOID
(
VOID
)
{
;
;
;
INT
;
INT
;
IF
(
(
UNSIGNED
)
)
{
(
,
,
,
)
;
}
=
;
=
;
=
;
=
;
DO
{
=
(
(
(
)
)
(
)
)
(
(
)
)
;
=
;
;
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
,
;
;
;
;
UNSIGNED
;
;
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
=
(
(
)
)
(
(
)
)
;
=
(
(
)
)
(
(
)
)
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
=
;
=
;
=
;
=
;
;
=
;
=
;
=
;
=
;
=
;
;
=
;
=
;
=
;
=
;
=
;
;
=
;
=
;
=
;
=
;
=
;
;
=
;
;
;
}
WHILE
(
)
{
=
;
=
;
=
;
=
;
;
=
;
;
}
}
VOID
(
VOID
)
{
;
;
;
INT
;
INT
;
IF
(
(
UNSIGNED
)
)
{
(
,
,
,
)
;
}
=
;
=
;
;
;
=
;
=
;
DO
{
=
(
(
(
)
)
(
)
)
(
(
)
)
;
=
;
=
;
;
;
}
WHILE
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
=
(
)
;
FOR
(
=
;
;
)
=
;
IF
(
)
=
;
ELSE
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
VOID
)
{
;
;
INT
;
INT
;
;
CHAR
=
;
CHAR
=
;
CHAR
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
=
;
=
(
,
)
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
,
(
(
)
)
,
)
;
;
}
IF
(
)
{
(
,
(
(
)
)
,
)
;
(
)
;
}
}
=
(
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
=
(
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
=
(
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
=
(
,
)
;
FOR
(
=
;
;
)
(
,
,
,
)
;
(
,
,
,
(
,
)
)
;
(
,
,
,
(
,
)
)
;
(
,
,
,
(
,
)
)
;
(
,
,
,
(
,
)
)
;
}
VOID
(
UNSIGNED
,
INT
)
{
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
;
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
IF
(
)
RETURN
;
=
(
(
)
)
;
=
(
)
;
(
,
)
;
=
(
)
;
(
,
)
;
=
;
;
FOR
(
=
;
;
)
{
(
,
)
;
;
}
(
,
,
,
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
;
INT
=
;
;
EXTERN
;
INT
;
INT
;
;
;
;
INT
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
;
INT
;
;
INT
;
;
=
;
;
;
;
INT
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
VOID
(
INT
,
INT
,
)
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
INT
(
,
,
)
{
;
;
;
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
IF
(
(
)
)
{
RETURN
;
}
RETURN
;
}
=
(
,
)
;
=
(
,
)
;
IF
(
)
{
RETURN
;
}
RETURN
;
}
INT
(
,
,
)
{
;
;
;
;
;
;
;
;
=
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
IF
(
)
{
IF
(
)
RETURN
;
RETURN
;
}
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
IF
(
(
)
)
{
RETURN
;
}
RETURN
;
}
=
(
,
)
;
=
(
,
)
;
IF
(
)
{
RETURN
;
}
RETURN
;
}
(
,
)
{
;
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
)
{
IF
(
)
{
IF
(
)
{
RETURN
(
,
)
;
}
ELSE
{
RETURN
(
,
)
;
}
}
ELSE
{
=
;
IF
(
)
{
RETURN
(
,
)
;
}
ELSE
{
RETURN
(
,
)
;
}
}
}
ELSE
{
=
;
IF
(
)
{
IF
(
)
{
RETURN
(
,
)
;
}
ELSE
{
RETURN
(
,
)
;
}
}
ELSE
{
=
;
IF
(
)
{
RETURN
(
,
)
;
}
ELSE
{
RETURN
(
,
)
;
}
}
}
RETURN
;
}
(
,
,
,
)
{
=
;
=
;
RETURN
(
,
)
;
}
(
,
)
{
INT
;
;
;
;
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
=
(
(
,
)
)
;
=
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
LONG
;
FLOAT
;
FOR
(
=
;
;
)
{
=
(
(
FLOAT
)
)
(
)
;
=
;
=
;
}
}
(
)
{
;
INT
;
INT
;
INT
;
INT
;
;
INT
;
{
;
;
;
;
=
(
)
;
=
(
,
)
;
=
(
)
;
=
(
(
,
)
)
;
=
(
,
)
;
RETURN
;
}
=
(
)
;
=
(
)
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
ELSE
=
;
RETURN
;
}
VOID
(
VOID
)
{
INT
;
FLOAT
;
FLOAT
;
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
=
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
=
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
;
=
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
=
(
,
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
;
}
FOR
(
=
;
;
)
{
=
;
WHILE
(
)
;
=
(
)
;
}
FOR
(
=
;
;
)
{
=
(
,
)
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
=
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
(
)
,
(
)
)
;
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
}
;
INT
;
INT
;
VOID
(
INT
,
INT
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
;
;
INT
;
INT
;
INT
;
INT
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
(
)
;
}
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
=
;
=
;
=
;
=
;
}
ELSE
{
=
=
;
=
;
=
;
=
;
}
(
,
)
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
(
)
;
=
(
(
)
,
)
;
}
FOR
(
=
;
;
)
{
=
(
)
;
=
(
,
)
;
}
FOR
(
=
;
;
)
{
=
(
(
)
)
;
FOR
(
=
;
;
)
{
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
}
EXTERN
INT
;
EXTERN
INT
;
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
}
(
,
)
{
;
INT
;
INT
;
IF
(
)
RETURN
;
=
;
WHILE
(
(
)
)
{
=
;
=
(
,
,
)
;
=
;
}
RETURN
;
}
VOID
(
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
=
;
}
ELSE
=
;
;
;
}
VOID
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
;
;
;
;
;
SHORT
;
SHORT
;
SHORT
;
SHORT
;
INT
;
INT
;
;
;
;
;
;
;
;
;
;
;
VOID
(
VOID
)
{
}
VOID
(
INT
,
INT
,
INT
)
{
;
;
;
UNSIGNED
;
IF
(
(
UNSIGNED
)
)
{
(
,
,
,
)
;
}
IF
(
)
{
=
;
=
=
(
,
)
;
=
=
(
,
)
;
=
=
(
,
)
;
}
ELSE
{
=
;
=
;
=
;
}
=
(
,
)
;
=
(
)
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
ELSE
{
=
;
IF
(
)
=
;
=
;
}
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
(
,
,
(
)
)
;
=
(
)
;
=
(
,
)
;
=
(
,
)
;
}
(
,
INT
,
INT
)
{
;
IF
(
)
{
=
;
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
BREAK
;
}
}
IF
(
)
RETURN
;
IF
(
)
(
)
;
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
RETURN
;
}
(
,
INT
,
INT
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
FOR
(
=
;
;
)
IF
(
)
BREAK
;
IF
(
)
{
=
;
=
;
RETURN
;
}
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
RETURN
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
WHILE
(
)
{
(
,
,
)
;
;
}
WHILE
(
)
{
(
,
,
)
;
;
}
WHILE
(
)
{
=
;
;
}
WHILE
(
)
{
=
;
;
}
}
VOID
(
VOID
)
{
;
INT
;
INT
;
INT
;
INT
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
{
=
(
)
;
=
;
=
(
,
)
;
(
)
;
}
}
CONTINUE
;
}
=
(
,
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
,
,
,
)
;
}
(
,
)
;
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
;
;
;
INT
;
INT
;
INT
;
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
;
;
INT
;
INT
;
INT
;
INT
;
;
;
;
;
;
;
;
;
;
SHORT
;
VOID
(
,
INT
,
INT
)
{
UNSIGNED
;
;
INT
;
INT
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
;
IF
(
)
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
=
;
=
;
}
=
(
,
)
;
=
(
UNSIGNED
)
;
=
(
)
(
(
)
(
,
)
)
;
(
)
;
=
;
}
;
}
}
(
)
VOID
(
VOID
)
{
;
UNSIGNED
;
INT
;
INT
;
INT
;
;
INT
;
INT
;
FOR
(
;
;
)
{
=
(
)
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
}
}
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
(
)
;
=
(
,
)
;
;
=
;
IF
(
)
=
;
=
;
=
;
=
(
UNSIGNED
)
;
}
IF
(
)
{
=
;
=
;
=
;
=
(
,
)
;
(
)
;
=
;
=
;
}
ELSE
{
IF
(
)
{
=
;
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
=
(
,
)
;
(
)
;
=
;
}
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
=
(
)
;
;
IF
(
)
=
;
IF
(
)
{
=
;
=
;
=
;
=
(
,
)
;
(
)
;
=
;
}
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
}
IF
(
)
{
=
;
}
}
;
;
;
}
}
VOID
(
INT
,
INT
)
{
;
;
,
;
;
INT
;
IF
(
)
RETURN
;
IF
(
)
(
,
,
)
;
=
;
=
;
;
=
;
=
(
)
;
IF
(
)
=
;
=
;
=
(
,
)
;
=
;
=
(
,
)
;
=
=
;
=
;
=
;
=
;
=
=
(
)
;
IF
(
)
{
=
(
)
;
=
=
(
)
(
)
;
}
ELSE
{
IF
(
)
{
,
;
,
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
}
=
;
}
=
;
=
;
=
=
=
=
;
=
;
IF
(
)
{
=
;
=
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
}
;
=
;
=
;
=
;
=
;
=
;
}
ELSE
{
=
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
}
IF
(
)
{
;
=
;
}
ELSE
IF
(
)
{
;
=
;
}
IF
(
)
{
=
;
=
;
;
}
IF
(
)
{
=
;
=
;
;
}
=
;
=
;
IF
(
)
{
=
;
}
IF
(
)
{
=
;
}
ELSE
{
=
;
}
IF
(
)
{
=
;
}
ELSE
{
=
;
}
IF
(
)
{
=
=
;
}
IF
(
)
{
=
;
IF
(
)
{
=
;
}
ELSE
{
=
;
=
;
}
}
IF
(
)
{
=
;
IF
(
)
{
=
;
}
ELSE
=
;
}
;
;
IF
(
)
{
=
;
=
=
;
;
}
}
=
;
IF
(
)
{
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
;
=
;
IF
(
)
{
=
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
}
IF
(
)
{
=
;
}
IF
(
)
{
=
;
}
;
;
=
(
,
)
;
=
(
)
(
,
)
;
=
(
,
)
;
=
(
)
(
,
)
;
IF
(
)
{
;
;
IF
(
)
{
=
(
)
(
,
)
;
=
(
,
)
;
}
IF
(
)
{
=
(
)
(
,
)
;
=
(
,
)
;
}
}
IF
(
)
=
(
,
,
)
;
IF
(
)
=
(
,
,
)
;
(
)
;
IF
(
(
(
)
)
)
{
(
,
,
(
)
)
;
=
;
;
}
IF
(
(
(
)
)
)
{
(
,
,
(
)
)
;
=
;
;
}
IF
(
(
)
)
{
;
=
;
}
IF
(
(
)
)
{
;
=
;
}
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
)
TYPEDEF
STRUCT
{
INT
;
INT
;
INT
;
INT
;
INT
;
}
;
;
;
;
SHORT
;
SHORT
;
;
INT
;
;
INT
;
CHAR
;
VOID
(
INT
,
UNSIGNED
,
UNSIGNED
,
)
{
INT
;
IF
(
)
(
,
)
;
IF
(
(
INT
)
)
=
;
IF
(
)
{
IF
(
)
(
,
,
)
;
IF
(
)
(
,
,
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
(
)
;
}
RETURN
;
}
IF
(
)
(
,
,
)
;
=
;
;
IF
(
)
(
,
,
,
)
;
=
;
=
(
)
;
}
VOID
(
CHAR
)
{
CHAR
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
WHILE
(
)
;
=
;
IF
(
)
RETURN
;
=
(
(
)
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
(
,
,
(
)
)
;
=
;
=
(
INT
)
;
FOR
(
=
;
;
)
{
IF
(
(
INT
)
)
{
=
;
=
;
IF
(
)
=
(
)
;
ELSE
=
;
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
(
,
,
,
)
;
}
}
}
IF
(
)
{
=
;
CONTINUE
;
}
;
FOR
(
=
;
;
)
{
SWITCH
(
(
INT
)
)
{
CASE
(
,
,
)
;
BREAK
;
CASE
BREAK
;
CASE
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
BREAK
;
}
}
=
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
}
}
;
;
INT
;
VOID
(
CHAR
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
}
(
)
;
}
VOID
(
VOID
)
{
=
;
}
;
(
VOID
)
{
IF
(
)
RETURN
;
;
RETURN
;
}
SHORT
;
SHORT
;
;
;
VOID
(
)
{
INT
;
INT
;
;
=
;
FOR
(
;
;
)
{
=
;
=
;
=
(
)
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
(
)
;
}
=
(
)
(
(
)
)
;
}
=
;
}
VOID
(
,
INT
,
INT
)
{
;
INT
;
;
;
=
(
,
)
;
=
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
=
(
(
)
(
)
)
;
}
=
(
)
;
=
;
=
;
=
;
=
(
,
)
;
FOR
(
=
;
;
,
)
{
=
;
IF
(
(
)
)
(
)
;
=
(
)
(
(
)
(
)
)
;
(
)
;
}
=
;
}
VOID
(
)
{
;
;
;
;
;
;
;
INT
;
INT
;
;
;
INT
;
UNSIGNED
;
;
INT
;
;
;
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
RETURN
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
)
;
IF
(
(
)
(
)
)
RETURN
;
IF
(
(
UNSIGNED
)
)
(
,
)
;
=
;
IF
(
(
)
)
(
,
,
)
;
=
;
IF
(
)
{
=
(
,
)
;
=
(
(
UNSIGNED
)
(
)
)
;
=
;
=
(
)
;
}
ELSE
{
=
;
=
(
)
;
}
;
=
(
(
,
)
)
;
IF
(
)
RETURN
;
;
=
(
(
(
,
)
)
)
;
IF
(
)
RETURN
;
=
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
{
=
(
)
;
IF
(
)
=
;
=
;
}
}
VOID
(
)
{
;
INT
;
IF
(
)
RETURN
;
=
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
FOR
(
=
;
;
=
)
(
)
;
}
VOID
(
)
{
;
INT
;
INT
;
;
;
INT
;
;
;
;
IF
(
(
UNSIGNED
)
)
(
,
)
;
=
;
IF
(
(
)
)
(
,
,
)
;
=
;
=
;
=
(
)
;
=
;
;
=
(
(
,
)
)
;
IF
(
)
RETURN
;
;
=
(
(
(
,
)
)
)
;
IF
(
)
RETURN
;
=
;
=
;
=
(
)
(
)
;
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
(
)
;
=
;
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
IF
(
)
{
=
;
}
ELSE
{
=
;
}
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
(
)
;
}
}
;
VOID
(
VOID
)
{
INT
;
INT
;
;
;
;
;
=
;
=
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
(
)
=
;
=
;
=
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
)
{
;
SHORT
;
SHORT
;
INT
;
INT
;
INT
;
;
;
INT
;
FOR
(
=
;
;
)
=
=
;
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
CONTINUE
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
(
(
,
,
)
)
)
{
IF
(
)
(
,
,
)
;
CONTINUE
;
}
=
;
IF
(
)
;
IF
(
)
;
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
}
ELSE
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
}
FOR
(
=
;
;
)
{
IF
(
)
=
;
IF
(
)
=
;
}
=
;
=
;
(
,
,
)
;
}
VOID
(
VOID
)
{
;
;
(
)
;
IF
(
)
{
FOR
(
=
;
;
=
)
{
(
)
;
}
}
FOR
(
=
;
;
)
IF
(
)
(
,
,
)
;
IF
(
)
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
=
{
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
=
{
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
}
}
;
__E__O__F__
STATIC
CONST
CHAR
=
;
(
,
)
{
RETURN
(
(
LONG
LONG
)
(
LONG
LONG
)
)
;
}
(
,
)
{
IF
(
(
(
)
)
(
)
)
RETURN
(
)
;
RETURN
(
,
)
;
}
(
,
)
{
LONG
LONG
;
=
(
(
LONG
LONG
)
)
(
(
LONG
LONG
)
)
;
RETURN
(
)
;
DOUBLE
;
=
(
(
DOUBLE
)
)
(
(
DOUBLE
)
)
;
IF
(
)
(
)
;
RETURN
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
__E__O__F__
STATIC
CONST
CHAR
=
;
EXTERN
;
;
VOID
(
VOID
)
{
=
(
)
(
,
)
;
}
VOID
(
,
INT
,
INT
,
,
INT
,
,
INT
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
)
{
INT
=
;
INT
=
;
INT
=
(
)
;
INT
=
(
)
;
INT
=
;
INT
;
=
;
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
;
}
=
;
IF
(
)
(
)
;
(
,
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
=
;
IF
(
)
(
,
,
,
)
;
WHILE
(
)
{
;
(
,
,
,
)
;
;
}
IF
(
)
(
,
,
,
)
;
}
VOID
(
,
)
{
IF
(
)
(
,
)
;
}
VOID
(
,
INT
,
INT
,
,
INT
,
,
)
{
(
,
,
,
,
,
,
)
;
=
;
}
VOID
(
,
INT
)
{
IF
(
)
(
,
,
,
)
;
(
,
)
;
}
VOID
(
,
INT
,
INT
,
,
INT
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
)
{
INT
;
INT
;
INT
;
INT
;
IF
(
(
)
(
)
)
{
IF
(
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
(
,
,
,
,
,
,
,
)
;
}
(
,
,
,
)
;
=
;
}
}
VOID
(
,
INT
,
INT
,
,
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
,
)
{
INT
;
INT
;
INT
;
INT
;
IF
(
(
)
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
,
,
,
,
)
;
=
;
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
(
(
)
(
)
)
)
(
)
STATIC
;
STATIC
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
UNSIGNED
INT
;
STATIC
INT
=
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
;
STATIC
INT
=
;
STATIC
;
STATIC
INT
=
;
STATIC
INT
=
;
STATIC
INT
;
STATIC
INT
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
,
}
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
}
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
}
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
}
;
UNSIGNED
CHAR
=
{
,
,
,
,
}
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
}
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
}
;
UNSIGNED
CHAR
=
{
{
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
}
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
,
,
}
;
UNSIGNED
CHAR
=
{
,
,
,
,
,
,
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
;
=
{
,
}
;
=
{
,
}
;
=
{
,
}
;
EXTERN
CHAR
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
IF
(
)
{
(
,
,
,
)
;
IF
(
)
(
,
,
,
)
;
(
,
,
,
,
,
,
,
)
;
}
}
(
)
{
INT
;
IF
(
(
(
)
)
)
{
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
IF
(
(
,
)
)
{
;
IF
(
)
{
IF
(
)
=
;
=
;
=
;
}
ELSE
=
;
}
ELSE
IF
(
(
,
)
)
{
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
=
;
}
ELSE
IF
(
(
,
)
)
{
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
=
;
}
ELSE
IF
(
(
,
)
)
{
CHAR
;
INT
;
=
;
(
,
)
;
IF
(
)
{
=
(
)
;
IF
(
(
(
)
)
)
=
;
ELSE
(
,
)
;
}
ELSE
{
=
(
)
(
)
;
IF
(
(
(
)
)
)
=
;
ELSE
(
,
)
;
}
}
ELSE
IF
(
(
,
)
(
,
)
)
{
;
IF
(
)
=
;
ELSE
=
;
}
FOR
(
=
;
;
)
{
IF
(
(
,
)
)
{
IF
(
)
(
,
)
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
}
}
IF
(
(
,
)
)
{
=
;
}
ELSE
IF
(
(
,
)
)
{
=
;
=
;
=
;
}
ELSE
IF
(
(
,
)
)
{
STATIC
CHAR
;
(
,
,
,
,
)
;
=
;
}
}
IF
(
(
,
)
)
{
CHAR
;
INT
;
INT
;
(
,
)
;
IF
(
)
{
=
;
=
(
)
;
}
ELSE
{
=
;
=
;
}
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
(
)
(
(
)
(
)
)
)
RETURN
;
IF
(
(
)
(
(
)
(
)
)
)
RETURN
;
IF
(
(
)
(
(
)
(
)
)
)
RETURN
;
IF
(
(
)
(
(
)
(
)
)
)
RETURN
;
=
;
(
,
,
)
;
}
}
RETURN
;
}
INT
(
VOID
)
{
INT
;
STATIC
INT
;
STATIC
INT
=
;
=
;
IF
(
)
{
=
(
(
(
)
)
)
;
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
;
;
;
STATIC
INT
=
;
STATIC
INT
=
;
;
IF
(
)
{
IF
(
)
{
=
;
=
;
=
;
}
}
IF
(
)
{
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
=
(
)
;
}
}
}
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
{
=
;
=
(
)
;
}
ELSE
{
=
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
(
)
;
IF
(
)
{
;
}
ELSE
IF
(
)
{
;
}
ELSE
{
;
}
}
}
}
IF
(
)
{
IF
(
)
{
IF
(
)
{
=
;
=
;
=
(
)
;
}
ELSE
{
=
;
=
;
=
(
)
;
}
}
}
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
{
=
;
=
(
)
;
=
;
=
;
}
}
ELSE
=
;
}
IF
(
)
{
IF
(
(
)
)
{
=
;
=
;
=
;
}
}
IF
(
)
{
=
(
)
(
)
;
=
;
=
;
}
;
}
VOID
(
VOID
)
{
STATIC
INT
=
;
INT
;
IF
(
)
=
;
ELSE
=
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
=
;
}
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
ELSE
;
}
IF
(
)
=
;
}
VOID
(
VOID
)
{
;
=
(
)
;
(
)
;
=
;
}
STATIC
INT
=
;
VOID
(
VOID
)
{
INT
;
;
INT
;
INT
;
=
;
IF
(
)
{
=
(
)
;
IF
(
)
=
;
}
IF
(
)
{
=
(
)
;
IF
(
)
=
;
;
}
ELSE
IF
(
)
{
=
(
)
;
IF
(
)
=
;
;
}
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
{
=
;
=
(
)
(
,
)
;
(
)
;
}
}
VOID
(
)
{
INT
;
=
;
=
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
,
)
{
=
(
)
;
=
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
CHAR
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
(
,
)
;
(
,
,
)
;
=
(
)
(
,
)
;
}
=
(
)
(
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
(
,
)
;
}
=
(
)
(
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
(
,
)
;
=
;
}
(
,
,
)
;
=
(
)
(
,
)
;
=
(
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
(
,
,
,
)
;
=
(
,
)
;
}
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
,
)
;
}
=
(
,
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
}
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
;
=
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
FOR
(
=
;
;
)
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
(
,
,
,
,
,
,
)
;
=
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
FOR
(
=
;
;
)
{
(
,
(
)
,
(
)
,
,
(
INT
)
,
)
;
}
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
(
,
,
,
,
,
,
)
;
}
STATIC
=
;
VOID
(
VOID
)
{
IF
(
)
(
)
;
(
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
(
,
)
)
;
=
;
}
VOID
(
VOID
)
{
=
;
(
)
;
=
(
)
(
,
,
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
(
UNSIGNED
,
UNSIGNED
)
{
UNSIGNED
;
IF
(
)
RETURN
;
=
(
)
(
)
;
RETURN
;
}
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
__E__O__F__
STATIC
CONST
CHAR
=
;
;
INT
;
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
INT
;
VOID
(
INT
,
INT
,
INT
,
INT
)
{
(
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
;
;
IF
(
(
UNSIGNED
)
(
UNSIGNED
)
)
{
(
)
;
}
(
,
,
,
)
;
=
;
=
;
FOR
(
;
;
)
{
(
,
,
)
;
;
;
}
}
VOID
(
INT
,
INT
,
INT
,
)
{
INT
;
INT
;
;
;
;
;
INT
;
(
)
;
(
)
;
IF
(
(
)
(
)
(
UNSIGNED
)
)
{
(
,
,
,
)
;
(
,
)
;
RETURN
;
}
IF
(
)
(
,
,
(
)
,
(
)
)
;
=
;
=
;
=
(
)
;
FOR
(
;
;
,
,
)
{
=
(
)
(
(
)
(
)
)
;
WHILE
(
)
{
=
(
)
;
=
;
=
;
WHILE
(
)
{
=
;
;
}
=
(
)
(
(
)
)
;
}
}
}
VOID
(
INT
,
INT
,
INT
,
)
{
INT
;
INT
;
;
;
;
;
INT
;
(
)
;
(
)
;
IF
(
(
)
(
)
(
UNSIGNED
)
)
{
(
,
,
,
)
;
(
)
;
}
IF
(
)
(
,
,
(
)
,
(
)
)
;
=
;
=
;
=
(
)
;
FOR
(
;
;
,
,
)
{
=
(
)
(
(
)
(
)
)
;
WHILE
(
)
{
=
(
)
;
=
;
=
;
WHILE
(
)
{
=
;
;
}
=
(
)
(
(
)
)
;
}
}
}
VOID
(
INT
,
INT
,
INT
,
)
{
(
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
,
)
{
;
IF
(
(
UNSIGNED
)
)
{
(
)
;
}
(
,
,
,
)
;
=
;
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
,
)
{
;
IF
(
(
UNSIGNED
)
)
{
(
)
;
}
=
;
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
VOID
)
{
INT
;
;
=
(
)
;
FOR
(
=
;
;
)
=
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
INT
;
VOID
;
VOID
(
CHAR
)
{
WHILE
(
)
{
=
(
)
;
;
}
}
INT
(
INT
)
{
STRUCT
;
IF
(
(
,
)
)
(
)
;
RETURN
;
}
VOID
(
CHAR
,
CHAR
)
{
CHAR
;
INT
;
=
(
)
;
WHILE
(
(
)
(
)
)
{
;
}
(
,
,
)
;
=
;
WHILE
(
)
{
IF
(
)
(
,
)
;
=
(
(
INT
)
)
;
}
}
INT
;
CHAR
;
VOID
(
CHAR
)
{
;
;
UNSIGNED
;
INT
;
INT
;
INT
;
;
;
INT
;
IF
(
)
{
;
=
;
=
;
}
IF
(
(
=
(
,
)
)
)
{
(
,
)
;
RETURN
;
}
(
,
)
;
=
;
IF
(
(
(
)
,
)
)
{
=
;
=
;
=
(
(
)
)
;
(
,
)
;
;
}
ELSE
{
(
,
,
(
)
)
;
IF
(
(
,
,
)
)
{
IF
(
(
,
,
)
)
{
(
,
)
;
}
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
;
}
=
(
,
(
)
)
;
IF
(
)
(
)
;
=
;
=
;
FOR
(
=
;
;
,
,
)
{
=
;
=
(
)
;
=
(
)
;
(
,
,
)
;
}
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
;
UNSIGNED
;
INT
;
INT
;
;
IF
(
)
RETURN
;
IF
(
(
=
(
,
)
)
)
(
,
)
;
(
,
,
(
)
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
;
FOR
(
=
;
;
,
,
)
{
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
}
(
)
;
}
VOID
(
CHAR
)
{
INT
;
=
;
=
(
)
;
FOR
(
;
;
)
(
)
;
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
(
)
;
(
,
,
)
;
}
VOID
(
CHAR
)
{
CHAR
;
=
;
=
;
(
)
;
}
INT
(
VOID
)
{
RETURN
;
}
INT
(
CHAR
)
{
UNION
{
CHAR
;
INT
;
}
;
INT
;
INT
;
;
(
,
,
)
;
=
;
(
)
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
(
INT
)
(
INT
)
)
{
RETURN
;
}
}
RETURN
;
}
INT
(
CHAR
)
{
INT
;
=
(
)
;
IF
(
)
(
,
)
;
RETURN
;
}
INT
(
INT
)
{
IF
(
)
(
,
)
;
RETURN
;
}
VOID
(
INT
,
VOID
)
{
INT
;
;
INT
;
IF
(
)
(
,
)
;
=
;
IF
(
)
{
IF
(
(
=
(
,
)
)
)
(
,
)
;
}
ELSE
=
;
(
,
,
)
;
=
(
,
,
)
;
IF
(
)
(
,
,
,
)
;
IF
(
)
(
)
;
}
VOID
(
INT
,
INT
)
{
;
IF
(
(
UNSIGNED
)
)
(
,
)
;
IF
(
)
{
=
(
(
)
,
,
)
;
(
,
)
;
}
ELSE
{
(
,
)
;
}
RETURN
;
}
VOID
(
CHAR
,
INT
)
{
RETURN
(
(
)
,
)
;
}
INT
;
INT
;
VOID
(
VOID
)
{
INT
;
;
VOID
;
CHAR
;
;
INT
;
CHAR
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
CONTINUE
;
}
ELSE
{
=
(
)
(
(
)
(
)
)
;
IF
(
)
=
;
ELSE
=
;
}
=
;
}
;
=
(
,
)
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
BREAK
;
FOR
(
;
;
)
=
;
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
,
)
;
}
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
=
;
VOID
(
INT
,
INT
,
INT
)
{
=
=
=
;
}
;
(
VOID
)
{
RETURN
;
}
INT
(
VOID
)
{
RETURN
;
}
(
INT
)
{
=
;
RETURN
(
)
(
)
;
}
INT
(
VOID
)
{
STRUCT
;
STRUCT
;
INT
;
STATIC
INT
=
;
(
,
)
;
IF
(
)
=
;
=
(
)
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
(
)
;
(
)
;
(
(
)
)
;
}
VOID
(
VOID
)
{
}
VOID
(
VOID
)
{
}
(
INT
)
{
;
=
(
)
(
)
;
(
,
,
)
;
RETURN
;
}
EXTERN
;
VOID
(
CHAR
,
)
{
;
(
,
)
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
(
)
(
(
)
)
TYPEDEF
ENUM
{
,
,
}
;
TYPEDEF
STRUCT
{
INT
;
INT
;
}
;
TYPEDEF
STRUCT
{
;
INT
;
INT
;
;
INT
;
INT
;
;
INT
;
INT
;
INT
;
INT
;
}
;
STATIC
=
{
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
,
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
}
}
;
STATIC
=
{
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
}
;
STATIC
=
{
{
,
,
,
{
,
}
,
}
,
{
,
,
,
{
,
}
,
}
,
{
,
,
,
{
,
}
,
}
,
{
,
,
,
{
,
}
,
}
,
{
,
,
,
{
,
}
,
}
,
{
,
,
,
{
,
}
,
}
,
{
,
,
,
{
,
}
,
}
,
{
,
,
,
{
,
}
,
}
,
{
,
,
,
{
,
}
,
}
}
;
STATIC
=
{
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
,
{
,
,
,
{
,
}
}
}
;
STATIC
INT
=
{
(
)
(
)
,
(
)
(
)
,
(
)
(
)
}
;
STATIC
=
{
,
,
}
;
STATIC
INT
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
STATIC
;
VOID
(
VOID
)
{
(
,
,
)
;
(
,
,
,
)
;
}
(
)
{
RETURN
;
}
VOID
(
VOID
)
{
INT
=
;
(
(
(
)
)
,
,
,
)
;
(
(
)
)
;
(
(
(
)
)
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
=
;
(
(
(
)
)
,
,
,
)
;
(
(
)
)
;
(
(
(
)
)
,
,
,
)
;
}
VOID
(
INT
,
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
=
;
DO
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
}
ELSE
{
;
}
}
WHILE
(
)
;
IF
(
)
{
(
,
,
,
)
;
}
ELSE
{
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
=
;
IF
(
)
=
(
(
)
)
;
ELSE
IF
(
)
=
(
(
)
)
;
ELSE
IF
(
)
=
;
}
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
IF
(
)
=
;
=
;
BREAK
;
CASE
;
IF
(
)
{
=
;
=
(
(
)
)
;
}
ELSE
=
;
BREAK
;
CASE
IF
(
(
)
)
{
;
IF
(
)
;
=
;
}
BREAK
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
(
,
,
,
)
;
}
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
INT
=
(
)
;
INT
;
INT
;
IF
(
)
{
IF
(
)
{
=
;
}
ELSE
{
=
;
=
;
WHILE
(
)
{
;
;
}
}
}
=
;
IF
(
)
=
;
IF
(
)
RETURN
;
WHILE
(
)
{
;
(
,
,
,
)
;
;
}
IF
(
)
(
,
,
,
)
;
RETURN
;
}
VOID
(
INT
,
INT
,
INT
)
{
IF
(
)
RETURN
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
INT
;
IF
(
)
RETURN
;
IF
(
)
{
=
;
DO
{
=
(
)
;
=
(
,
,
,
)
(
)
;
;
IF
(
)
(
,
,
,
)
;
}
WHILE
(
)
;
}
ELSE
{
(
(
)
,
,
,
)
;
}
}
VOID
(
VOID
)
{
VOID
(
VOID
)
;
(
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
}
STATIC
=
;
VOID
(
VOID
)
{
=
;
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
(
)
;
ELSE
=
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
(
)
;
(
)
;
IF
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
=
(
)
;
FOR
(
=
;
;
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
=
;
(
)
;
}
INT
(
INT
)
{
INT
;
INT
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
;
}
}
;
RETURN
;
}
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
VOID
)
{
INT
;
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
=
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
;
(
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
FOR
(
=
;
;
)
IF
(
)
=
;
=
(
)
;
}
}
(
,
)
;
=
;
}
IF
(
)
{
IF
(
(
)
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
;
ELSE
;
IF
(
)
=
;
IF
(
)
=
;
=
;
}
}
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
}
}
IF
(
)
{
(
,
)
;
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
;
=
;
}
}
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
=
;
(
)
;
(
)
;
(
)
;
(
(
)
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
(
)
,
,
,
)
;
(
(
)
,
,
,
)
;
IF
(
)
{
(
(
)
,
,
,
)
;
(
(
)
,
,
,
)
;
}
}
ELSE
{
}
;
;
}
=
;
=
(
)
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
(
,
,
,
)
;
;
}
(
,
,
,
)
;
}
;
}
}
STATIC
INT
;
STATIC
INT
;
STATIC
INT
;
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
=
=
=
;
(
)
;
}
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
;
(
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
(
)
;
=
(
)
;
=
(
)
;
IF
(
)
=
(
)
;
}
(
,
)
;
=
;
}
IF
(
)
{
IF
(
(
)
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
;
IF
(
(
)
)
=
(
)
;
ELSE
=
;
}
IF
(
)
{
(
,
)
;
;
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
;
IF
(
(
)
)
=
(
)
;
ELSE
=
;
}
IF
(
)
{
(
,
)
;
;
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
;
IF
(
(
)
)
=
(
)
;
ELSE
=
;
}
IF
(
)
{
(
,
)
;
;
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
(
,
)
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
;
IF
(
(
=
(
)
)
)
=
;
ELSE
=
;
}
IF
(
)
{
(
,
)
;
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
;
=
;
}
}
}
VOID
(
VOID
)
{
INT
;
INT
;
INT
;
INT
=
(
)
;
(
)
;
(
)
;
(
)
;
(
(
)
,
,
,
)
;
(
(
)
,
,
,
)
;
(
(
)
,
,
,
)
;
IF
(
)
(
(
)
,
,
,
)
;
=
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
(
(
)
,
,
,
)
;
IF
(
)
(
(
)
,
,
,
)
;
;
(
,
,
)
;
;
(
,
,
)
;
;
(
,
,
)
;
;
IF
(
)
(
,
,
,
)
;
;
}
}
STATIC
INT
;
VOID
(
VOID
)
{
=
;
=
;
=
;
=
=
=
;
=
=
;
=
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
(
,
)
;
=
;
}
IF
(
)
{
;
IF
(
(
)
)
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
;
}
}
ELSE
IF
(
)
{
;
IF
(
(
)
)
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
;
}
}
ELSE
IF
(
)
{
;
IF
(
(
)
)
(
,
)
;
IF
(
(
)
)
{
=
(
)
;
(
,
)
;
;
}
}
ELSE
IF
(
)
{
IF
(
(
)
)
(
,
)
;
;
IF
(
)
=
;
;
IF
(
)
{
=
;
IF
(
)
{
(
,
)
;
;
}
}
}
ELSE
IF
(
)
{
IF
(
)
{
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
}
}
ELSE
IF
(
)
{
IF
(
)
{
;
=
;
}
}
}
VOID
(
VOID
)
{
INT
;
=
(
(
)
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
,
)
;
(
,
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
{
IF
(
)
{
IF
(
)
{
IF
(
)
=
;
=
;
}
ELSE
=
;
IF
(
)
{
IF
(
)
=
;
=
;
}
ELSE
=
;
}
}
}
VOID
(
VOID
)
{
;
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
(
,
)
;
}
(
)
;
SWITCH
(
)
{
CASE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
CHAR
;
;
IF
(
)
(
,
)
;
ELSE
(
,
,
)
;
IF
(
)
{
IF
(
)
(
,
)
;
}
=
(
,
)
;
(
,
,
,
)
;
IF
(
)
{
=
;
=
(
)
(
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
}
}
ELSE
{
=
(
)
(
(
)
,
,
)
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
=
(
,
)
;
}
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
(
,
,
,
,
)
;
=
(
,
)
;
}
ELSE
{
=
;
}
}
}
}
}
=
(
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
}
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
{
IF
(
)
=
(
,
)
;
ELSE
=
(
,
)
;
}
ELSE
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
=
(
,
)
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
,
)
;
(
,
,
)
;
=
(
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
INT
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
(
,
)
;
}
ELSE
{
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
IF
(
)
{
FOR
(
=
;
;
)
{
IF
(
)
FOR
(
=
;
;
)
(
,
)
;
}
}
}
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
}
VOID
(
VOID
)
{
SWITCH
(
)
{
CASE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
VOID
(
)
{
=
;
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
ELSE
{
(
,
,
)
;
(
,
,
)
;
}
(
,
,
)
;
(
,
,
)
;
=
;
=
=
;
=
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
IF
(
)
;
}
VOID
(
)
{
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
TYPEDEF
STRUCT
{
INT
;
;
;
}
;
;
VOID
(
)
{
;
=
=
=
(
)
(
(
)
(
)
)
;
=
(
VOID
)
;
=
;
=
;
=
=
;
=
;
=
(
)
;
}
VOID
(
VOID
)
{
;
INT
;
=
(
)
(
)
;
=
;
=
=
=
(
)
(
(
)
(
)
)
;
=
(
VOID
)
;
=
;
=
;
=
=
;
=
;
=
(
)
;
}
VOID
(
VOID
)
{
;
;
=
(
)
(
(
)
(
)
)
;
IF
(
)
(
)
;
IF
(
(
VOID
)
)
{
=
;
}
=
;
=
;
=
;
=
;
IF
(
)
{
;
=
;
=
;
IF
(
)
=
;
=
;
}
=
;
IF
(
)
{
;
=
;
=
;
IF
(
)
=
;
}
}
VOID
(
INT
,
INT
,
VOID
)
{
INT
;
;
;
;
;
=
(
)
;
(
)
;
=
;
IF
(
)
=
;
=
;
=
;
DO
{
IF
(
)
{
(
,
)
;
}
IF
(
)
{
IF
(
)
{
=
=
;
}
ELSE
{
=
;
(
(
)
(
)
)
;
=
;
=
;
}
}
ELSE
=
;
}
WHILE
(
)
;
=
;
IF
(
)
{
=
(
)
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
IF
(
)
{
=
;
(
VOID
)
=
(
VOID
)
(
(
)
(
)
)
;
}
ELSE
{
IF
(
)
(
)
;
=
(
VOID
)
;
}
=
;
=
;
=
;
RETURN
(
VOID
)
(
(
)
(
)
)
;
}
VOID
(
INT
,
INT
)
{
;
;
FOR
(
=
;
;
=
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
(
(
)
(
)
)
;
}
}
VOID
(
INT
,
INT
)
{
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
(
,
,
,
,
)
;
IF
(
)
{
BREAK
;
}
IF
(
(
)
(
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
VOID
(
)
{
;
(
,
,
,
)
;
FOR
(
=
;
;
=
)
{
(
,
,
,
,
,
)
;
IF
(
)
{
BREAK
;
}
IF
(
(
)
(
)
)
(
,
)
;
IF
(
)
(
,
)
;
IF
(
)
(
,
)
;
}
}
VOID
(
VOID
)
{
;
FOR
(
=
;
;
=
)
{
IF
(
)
{
BREAK
;
}
IF
(
(
)
(
)
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
}
}
VOID
(
VOID
,
INT
)
{
;
=
(
)
(
(
)
(
)
)
;
IF
(
)
(
)
;
IF
(
(
UNSIGNED
)
)
(
)
;
=
;
}
INT
(
VOID
)
{
;
INT
;
=
;
FOR
(
=
;
;
=
)
{
IF
(
)
;
}
RETURN
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
;
(
)
(
(
(
INT
)
)
)
VOID
(
VOID
)
{
INT
;
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
(
)
(
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
INT
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
(
)
;
(
,
,
(
)
)
;
(
)
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
(
INT
)
;
}
}
}
}
VOID
(
VOID
)
{
INT
;
INT
;
;
;
;
SHORT
;
=
(
SHORT
)
;
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
=
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
;
;
;
SHORT
;
=
(
SHORT
)
;
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
=
(
)
;
}
TYPEDEF
ENUM
{
,
}
;
VOID
(
VOID
)
{
;
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
IF
(
)
=
(
)
(
(
)
)
;
CONTINUE
;
}
}
=
;
}
VOID
(
VOID
)
{
;
;
;
;
=
;
WHILE
(
)
{
=
;
IF
(
(
)
)
(
(
)
)
;
ELSE
(
)
;
=
;
}
(
)
;
WHILE
(
)
{
=
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
;
=
(
INT
)
;
=
;
IF
(
)
{
=
(
INT
)
;
=
;
}
(
)
;
=
;
=
;
=
;
=
(
)
;
(
)
;
BREAK
;
DEFAULT
(
,
)
;
}
}
}
ENUM
{
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
;
;
;
;
;
;
;
;
INT
;
FOR
(
=
;
;
=
)
{
IF
(
(
)
)
{
FOR
(
=
;
;
)
IF
(
(
)
)
BREAK
;
IF
(
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
}
CONTINUE
;
}
IF
(
(
)
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
CONTINUE
;
}
IF
(
(
)
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
CONTINUE
;
}
IF
(
(
)
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
CONTINUE
;
}
IF
(
(
)
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
CONTINUE
;
}
IF
(
(
)
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
CONTINUE
;
}
IF
(
(
)
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
CONTINUE
;
}
IF
(
(
)
)
{
=
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
=
(
)
(
)
;
CONTINUE
;
}
}
=
;
}
VOID
(
VOID
)
{
;
;
;
;
;
;
;
;
WHILE
(
)
{
=
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
;
=
(
INT
)
;
=
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
;
=
(
INT
)
;
=
;
=
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
;
=
(
INT
)
;
=
;
=
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
;
=
(
INT
)
;
=
;
IF
(
)
=
(
)
;
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
;
=
(
INT
)
;
=
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
;
=
(
INT
)
;
=
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
=
(
(
)
,
,
)
;
(
,
,
(
)
)
;
(
)
;
=
(
INT
)
;
=
(
)
;
(
)
;
BREAK
;
DEFAULT
(
,
)
;
}
}
}
__E__O__F__
STATIC
CONST
CHAR
=
;
=
{
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
{
,
,
,
,
,
}
,
}
;
__E__O__F__
STATIC
CONST
CHAR
=
;
UNSIGNED
SHORT
(
UNSIGNED
SHORT
)
{
RETURN
(
)
(
)
;
}
UNSIGNED
LONG
(
UNSIGNED
LONG
)
{
RETURN
(
)
(
(
)
)
(
(
)
)
(
)
;
}
__E__O__F__
STATIC
CONST
CHAR
=
;
__E__O__F__
STATIC
CONST
CHAR
=
;
=
;
=
;
=
;
;
__E__O__F__
STATIC
CONST
CHAR
=
;
INT
;
INT
;
INT
;
VOID
(
VOID
)
{
=
;
}
__E__O__F__
;
LONG
;
INT
,
;
;
;
LONG
;
UNSIGNED
(
INT
,
)
;
INT
;
VOID
(
VOID
)
{
(
)
;
}
LONG
(
INT
)
{
INT
,
,
;
;
UNSIGNED
,
;
LONG
;
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
(
)
)
;
=
(
,
)
;
=
(
)
;
=
(
,
)
;
;
IF
(
(
)
(
)
)
(
)
;
IF
(
)
;
}
FOR
(
=
;
;
)
{
=
(
LONG
)
;
IF
(
)
{
=
;
=
(
LONG
)
;
=
;
=
(
LONG
)
;
;
}
}
=
;
=
;
FOR
(
=
;
;
)
=
(
LONG
)
;
=
(
)
;
=
(
(
)
)
;
=
(
VOID
)
(
)
;
=
(
)
(
)
;
=
;
RETURN
;
}
UNSIGNED
(
INT
,
)
{
;
INT
;
LONG
,
;
UNSIGNED
,
,
;
INT
,
,
;
=
(
)
;
=
(
(
LONG
)
)
;
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
;
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
FOR
(
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
(
(
UNSIGNED
)
)
=
;
}
}
=
;
=
(
)
;
RETURN
;
}
EXTERN
INT
,
;
EXTERN
UNSIGNED
;
EXTERN
LONG
;
EXTERN
UNSIGNED
;
,
,
;
VOID
(
VOID
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
RETURN
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
STATIC
LONG
;
VOID
(
INT
,
INT
,
UNSIGNED
)
{
;
;
UNSIGNED
,
,
,
;
INT
;
UNSIGNED
;
,
;
=
(
)
;
=
;
IF
(
)
RETURN
;
=
;
(
(
(
UNSIGNED
)
)
)
=
(
)
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
IF
(
)
{
;
IF
(
)
{
IF
(
)
CONTINUE
;
(
)
;
}
CONTINUE
;
}
IF
(
)
{
;
=
;
IF
(
)
CONTINUE
;
}
ELSE
{
IF
(
)
=
;
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
{
WHILE
(
)
;
(
)
;
}
}
ELSE
{
IF
(
)
CONTINUE
;
WHILE
(
)
{
;
;
}
(
)
;
BREAK
;
}
}
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
WHILE
(
(
)
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
(
)
;
}
CONTINUE
;
}
IF
(
)
{
IF
(
)
CONTINUE
;
;
=
;
}
ELSE
{
IF
(
)
=
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
)
;
}
ELSE
{
WHILE
(
)
;
(
)
;
BREAK
;
}
}
ELSE
{
IF
(
)
{
WHILE
(
)
{
;
;
}
(
)
;
}
ELSE
CONTINUE
;
}
}
}
VOID
(
INT
,
INT
,
UNSIGNED
)
{
;
;
UNSIGNED
,
,
,
;
INT
;
UNSIGNED
;
,
;
=
(
)
;
=
;
=
;
(
(
(
UNSIGNED
)
)
)
=
(
)
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
;
(
)
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
(
)
;
;
}
}
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
UNSIGNED
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
INT
,
;
UNSIGNED
;
LONG
;
UNSIGNED
;
__E__O__F__
STATIC
(
INT
)
{
INT
;
=
;
(
,
)
;
,
,
,
,
,
,
,
,
,
,
(
,
)
;
,
,
,
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
IF
(
(
)
)
RETURN
(
)
;
ELSE
{
=
;
RETURN
(
)
;
}
}
}
=
;
RETURN
(
)
;
}
STATIC
(
INT
)
{
INT
;
IF
(
)
=
;
IF
(
)
{
IF
(
(
)
)
RETURN
(
)
;
IF
(
(
)
)
RETURN
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
CONTINUE
;
IF
(
(
)
)
RETURN
(
)
;
}
RETURN
(
)
;
}
ELSE
RETURN
(
(
)
)
;
}
__E__O__F__
TYPEDEF
STRUCT
{
UNSIGNED
,
;
}
;
TYPEDEF
STRUCT
{
UNSIGNED
;
LONG
;
;
}
;
;
INT
;
UNSIGNED
;
;
;
VOID
;
;
,
;
INT
,
;
CHAR
=
;
EXTERN
LONG
;
EXTERN
LONG
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
CHAR
,
=
,
=
,
=
,
=
,
=
,
=
,
=
;
VOID
(
CHAR
)
;
LONG
;
LONG
;
;
;
;
;
INT
;
INT
;
INT
;
LONG
,
;
;
VOID
(
UNSIGNED
,
UNSIGNED
,
UNSIGNED
)
;
LONG
(
INT
)
{
LONG
;
INT
;
=
;
=
(
LONG
)
(
(
(
)
)
)
;
;
IF
(
)
=
;
RETURN
;
}
;
(
)
(
)
VOID
(
VOID
)
{
(
)
;
=
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
INT
)
{
(
,
(
)
,
)
;
(
,
,
(
)
)
;
=
(
)
(
)
;
}
(
INT
,
,
LONG
)
{
IF
(
)
(
)
;
,
,
,
,
,
INT
=
;
RETURN
;
,
=
;
RETURN
;
RETURN
;
}
(
INT
,
,
LONG
)
{
IF
(
)
(
)
;
,
,
,
,
,
INT
=
;
RETURN
;
,
=
;
RETURN
;
RETURN
;
}
(
CHAR
,
)
{
INT
;
LONG
;
IF
(
(
=
(
,
,
)
)
)
RETURN
;
=
(
)
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
(
)
;
RETURN
;
}
(
CHAR
,
VOID
,
LONG
)
{
INT
;
LONG
;
=
(
,
,
)
;
IF
(
)
RETURN
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
(
)
;
RETURN
;
}
(
CHAR
,
)
{
INT
;
LONG
;
IF
(
(
=
(
,
,
)
)
)
RETURN
;
=
(
)
;
(
,
)
;
IF
(
(
,
,
)
)
{
(
)
;
RETURN
;
}
(
)
;
RETURN
;
}
VOID
(
)
{
;
INT
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
=
(
UNSIGNED
)
(
(
)
)
;
IF
(
)
=
(
UNSIGNED
)
(
(
)
)
;
;
}
}
VOID
(
,
,
LONG
,
,
)
{
UNSIGNED
,
,
,
,
;
;
;
=
;
;
;
;
;
IF
(
)
{
=
;
,
,
,
;
}
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
;
}
ELSE
{
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
,
}
VOID
(
UNSIGNED
,
UNSIGNED
,
UNSIGNED
)
{
UNSIGNED
,
,
,
;
UNSIGNED
,
,
;
;
=
;
=
;
WHILE
(
)
{
=
;
=
;
IF
(
)
{
=
;
IF
(
)
{
(
(
UNSIGNED
CHAR
)
)
;
=
;
;
}
ELSE
{
=
(
(
UNSIGNED
CHAR
)
)
;
=
;
;
WHILE
(
)
=
;
}
}
ELSE
IF
(
)
{
=
;
IF
(
)
{
(
(
UNSIGNED
CHAR
)
)
;
=
;
;
}
ELSE
{
=
;
=
;
;
WHILE
(
)
=
;
}
}
ELSE
{
=
;
;
}
}
}
LONG
(
UNSIGNED
,
LONG
,
UNSIGNED
,
UNSIGNED
)
{
LONG
;
UNSIGNED
,
,
;
UNSIGNED
,
;
=
;
=
(
)
;
DO
{
=
;
=
;
WHILE
(
)
{
;
;
}
IF
(
)
{
=
;
=
;
=
;
}
ELSE
{
FOR
(
=
;
;
)
=
;
}
}
WHILE
(
)
;
=
(
)
;
RETURN
;
}
VOID
(
UNSIGNED
,
UNSIGNED
,
LONG
,
UNSIGNED
)
{
UNSIGNED
;
UNSIGNED
,
,
,
,
,
;
DO
{
=
;
IF
(
)
=
;
ELSE
{
=
;
=
;
FOR
(
=
;
;
)
=
;
}
}
WHILE
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
VOID
(
VOID
)
{
CHAR
;
INT
;
;
=
(
)
;
=
(
LONG
)
(
)
;
(
)
;
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
)
;
(
,
,
(
)
)
;
(
)
;
(
)
;
(
(
)
,
(
)
)
;
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
)
;
(
,
(
)
,
(
)
)
;
(
)
;
(
,
)
;
(
,
)
;
=
(
,
)
;
IF
(
)
(
)
;
(
(
)
,
(
)
)
;
(
)
;
(
,
)
;
(
,
,
)
;
(
,
(
)
,
(
)
,
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
INT
;
LONG
,
;
CHAR
;
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
)
;
=
(
)
;
(
(
)
,
)
;
(
,
,
)
;
(
)
;
=
(
)
(
)
;
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
)
;
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
)
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
IF
(
)
CONTINUE
;
(
(
)
,
(
)
)
;
(
(
)
,
)
;
(
,
,
)
;
(
,
(
)
,
(
)
)
;
}
FOR
(
=
;
;
)
{
(
(
)
,
)
;
(
(
)
,
)
;
}
}
VOID
(
VOID
)
{
INT
;
LONG
;
CHAR
;
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
)
;
=
(
)
;
(
(
)
,
)
;
(
,
(
)
,
)
;
(
)
;
=
(
)
;
(
)
;
=
(
LONG
)
(
)
;
(
,
)
;
(
,
)
;
IF
(
(
=
(
,
,
)
)
)
(
)
;
IF
(
(
=
(
,
,
)
)
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
=
(
,
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
LONG
,
;
LONG
;
;
;
IF
(
)
{
(
(
)
,
)
;
RETURN
;
}
=
;
=
;
(
,
,
)
;
(
(
)
,
)
;
IF
(
)
RETURN
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
{
(
,
)
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
=
;
}
=
(
LONG
)
;
;
(
(
)
,
)
;
IF
(
)
GOTO
;
(
,
,
,
,
)
;
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
,
;
SWITCH
(
)
{
CASE
GOTO
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
FOR
(
=
;
;
,
)
IF
(
)
(
(
)
,
)
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
FOR
(
=
;
;
,
)
(
)
;
=
;
}
VOID
(
INT
,
)
{
LONG
;
IF
(
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
=
(
LONG
)
;
;
}
(
,
)
;
IF
(
)
RETURN
;
(
,
,
,
,
)
;
}
VOID
(
INT
)
{
LONG
,
;
;
;
INT
;
;
IF
(
)
{
(
,
)
;
RETURN
;
}
=
(
)
;
IF
(
)
RETURN
;
=
;
WHILE
(
(
)
)
;
=
(
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
ELSE
{
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
}
(
,
)
;
IF
(
)
(
)
;
}
VOID
(
INT
)
{
LONG
,
,
;
;
;
INT
;
=
(
)
;
=
;
WHILE
(
(
)
)
;
=
(
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
)
;
=
;
=
(
LONG
)
;
;
(
,
(
,
)
,
,
,
)
;
(
,
,
,
)
;
(
)
;
}
VOID
(
INT
)
{
LONG
,
;
INT
;
,
;
UNSIGNED
;
UNSIGNED
;
;
LONG
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
(
)
;
(
,
,
)
;
IF
(
)
=
;
ELSE
{
(
,
)
;
(
,
)
;
=
;
}
(
,
(
)
,
)
;
=
;
;
(
,
)
;
(
,
(
UNSIGNED
)
,
)
;
(
(
(
UNSIGNED
)
)
,
,
,
(
(
)
)
)
;
(
)
;
(
,
,
,
(
(
)
)
)
;
IF
(
)
(
)
;
}
}
VOID
(
VOID
)
{
INT
;
IF
(
)
(
)
;
FOR
(
=
;
;
)
IF
(
)
(
(
)
,
)
;
;
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
;
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
FOR
(
=
;
;
)
IF
(
)
(
(
)
,
)
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
(
)
,
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
LONG
,
,
,
,
;
LONG
,
;
;
;
=
;
FOR
(
=
;
;
)
IF
(
)
{
IF
(
)
(
,
)
;
ELSE
;
}
ELSE
{
IF
(
)
(
,
)
;
}
IF
(
)
RETURN
;
=
=
;
FOR
(
=
;
;
)
IF
(
(
)
)
{
=
(
)
;
IF
(
)
CONTINUE
;
=
;
WHILE
(
(
)
)
;
=
(
)
;
=
;
IF
(
)
{
IF
(
)
{
=
(
)
(
)
;
}
ELSE
{
WHILE
(
)
{
WHILE
(
(
)
)
;
IF
(
)
CONTINUE
;
=
(
)
;
WHILE
(
(
)
)
;
=
(
)
;
IF
(
)
=
;
ELSE
=
;
}
(
,
,
)
;
(
,
,
)
;
=
;
=
;
=
;
}
}
ELSE
{
(
,
)
;
IF
(
)
RETURN
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
}
(
,
)
;
IF
(
)
RETURN
;
IF
(
)
(
)
;
}
}
VOID
(
CHAR
)
{
CHAR
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
}
__E__O__F__
(
)
=
,
(
)
;
;
;
;
;
CHAR
;
;
=
{
,
,
,
,
,
,
,
,
,
}
;
;
;
;
=
;
;
,
;
STATIC
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
;
STATIC
;
STATIC
,
;
STATIC
=
{
,
,
,
,
,
,
,
,
}
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
CHAR
=
{
,
,
}
;
STATIC
VOID
(
VOID
)
{
STATIC
;
,
,
;
INT
;
=
(
)
;
(
,
(
=
(
)
)
)
;
(
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
{
IF
(
)
{
;
=
;
}
ELSE
{
=
;
=
=
;
=
;
IF
(
)
=
;
ELSE
{
IF
(
)
{
;
}
IF
(
)
{
=
;
IF
(
(
)
(
)
)
;
}
ELSE
{
=
;
IF
(
(
)
(
)
)
;
}
}
IF
(
)
=
;
}
=
;
}
IF
(
)
(
)
;
(
,
)
;
}
STATIC
VOID
(
INT
,
INT
)
{
(
)
;
=
;
=
;
}
STATIC
(
VOID
)
{
;
(
)
;
=
;
RETURN
(
)
;
}
VOID
(
,
,
)
{
,
,
,
;
,
;
=
=
;
=
;
=
;
=
;
=
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
=
;
=
;
}
VOID
(
,
INT
,
INT
)
{
,
;
;
;
STATIC
;
(
,
,
)
;
=
;
IF
(
)
{
IF
(
)
=
;
=
(
)
;
;
;
=
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
=
;
;
;
=
(
)
;
}
ELSE
=
;
IF
(
)
{
IF
(
)
=
;
=
(
)
;
;
;
=
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
=
;
;
;
=
(
)
;
}
ELSE
=
;
=
;
}
STATIC
(
)
{
REGISTER
;
=
(
)
;
;
;
;
RETURN
(
)
;
}
(
)
{
;
,
;
DO
{
=
(
)
;
=
;
WHILE
(
)
;
=
(
)
;
}
WHILE
(
)
;
RETURN
(
)
;
}
STATIC
VOID
(
VOID
)
{
=
;
(
)
;
=
(
)
;
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
,
(
,
)
)
;
(
,
)
;
}
STATIC
(
VOID
)
{
IF
(
(
)
)
{
(
)
;
IF
(
)
RETURN
(
)
;
}
RETURN
(
)
;
UNION
;
UNSIGNED
CHAR
;
IF
(
(
=
(
(
,
)
,
(
,
)
)
)
)
RETURN
;
IF
(
)
RETURN
;
(
)
;
RETURN
;
}
STATIC
VOID
(
VOID
)
{
}
STATIC
VOID
(
)
{
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
,
,
,
,
)
{
,
;
;
=
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
=
;
=
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
}
STATIC
(
)
{
,
;
(
,
,
)
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
)
RETURN
(
)
;
ELSE
{
(
,
,
,
,
)
;
RETURN
(
)
;
}
}
STATIC
VOID
(
)
{
=
;
}
VOID
(
VOID
)
{
,
;
;
IF
(
)
RETURN
;
=
;
=
;
FOR
(
=
;
;
)
{
SWITCH
(
(
,
)
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
(
)
;
=
(
)
;
FOR
(
=
;
;
)
=
(
)
;
=
;
}
VOID
(
,
)
{
IF
(
(
)
(
(
)
)
(
(
)
)
(
(
)
)
)
=
;
(
,
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
RETURN
;
(
)
;
FOR
(
=
;
;
)
(
)
;
(
)
;
=
;
}
VOID
(
VOID
(
)
(
)
)
{
=
;
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
(
,
,
(
)
)
;
}
VOID
(
INT
,
)
{
;
;
;
INT
,
;
,
;
;
REGISTER
;
=
=
;
=
=
;
=
;
IF
(
)
{
=
;
=
(
)
;
=
(
(
)
)
;
=
(
)
;
IF
(
(
)
)
{
;
IF
(
)
=
;
}
=
;
}
ELSE
IF
(
)
(
)
;
ELSE
{
SWITCH
(
=
)
{
CASE
=
;
IF
(
)
=
,
=
;
ELSE
IF
(
)
=
,
=
;
ELSE
IF
(
)
=
,
=
;
ELSE
IF
(
)
=
,
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
;
IF
(
)
;
=
;
BREAK
;
CASE
CASE
(
,
,
)
;
=
(
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
(
)
;
=
;
BREAK
;
}
}
IF
(
)
{
=
(
)
(
(
)
)
;
=
(
)
(
(
)
)
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
(
)
)
(
)
;
IF
(
)
{
=
(
)
(
(
)
)
(
)
;
IF
(
(
)
(
)
)
(
)
;
ELSE
{
IF
(
)
;
IF
(
)
(
)
;
=
;
=
;
}
}
}
VOID
(
INT
,
)
{
=
;
}
(
VOID
)
{
;
WHILE
(
(
=
)
)
;
=
;
RETURN
(
)
;
}
CHAR
(
VOID
)
{
CHAR
;
WHILE
(
(
=
)
)
;
=
;
RETURN
(
)
;
}
;
VOID
(
VOID
)
{
UNSIGNED
,
;
(
)
;
(
,
,
(
)
)
;
=
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
,
)
IF
(
)
=
;
}
(
VOID
)
{
UNSIGNED
,
;
IF
(
)
RETURN
;
=
(
)
;
IF
(
)
(
)
;
FOR
(
=
;
;
,
)
IF
(
)
{
IF
(
)
RETURN
;
}
ELSE
=
;
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
WHILE
(
(
)
)
;
}
(
)
{
;
=
;
(
)
;
DO
{
IF
(
(
)
)
RETURN
;
}
WHILE
(
)
;
RETURN
(
)
;
}
(
VOID
)
{
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
RETURN
;
}
(
VOID
)
{
UNSIGNED
;
=
(
)
;
;
;
RETURN
;
}
__E__O__F__
TYPEDEF
STRUCT
{
UNSIGNED
,
;
UNSIGNED
;
;
STRUCT
;
}
;
{
IF
(
)
(
)
;
=
;
=
;
}
(
)
{
=
;
=
;
=
;
}
;
;
;
VOID
(
)
(
VOID
)
;
VOID
(
)
(
VOID
)
;
;
VOID
;
VOID
;
,
,
,
,
;
;
VOID
(
)
(
VOID
)
;
UNSIGNED
,
;
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
UNSIGNED
,
UNSIGNED
)
;
VOID
(
VOID
)
;
(
VOID
)
{
=
;
{
,
INT
,
}
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
UNSIGNED
,
;
{
,
INT
,
,
}
{
,
,
,
,
;
,
,
}
{
,
,
}
(
,
)
;
;
=
;
;
IF
(
)
GOTO
;
;
}
VOID
(
VOID
)
{
INT
;
UNSIGNED
;
FOR
(
=
;
;
)
{
=
;
,
,
}
}
VOID
(
UNSIGNED
,
UNSIGNED
)
{
,
;
UNSIGNED
;
LONG
;
=
=
;
=
;
WHILE
(
)
{
=
;
=
;
}
=
;
=
(
)
;
IF
(
)
(
)
;
IF
(
)
{
=
;
(
)
;
=
;
}
ELSE
=
;
IF
(
)
{
;
=
;
=
;
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
,
;
=
;
WHILE
(
)
{
IF
(
(
)
(
)
)
{
(
)
;
RETURN
;
}
=
;
}
(
)
;
}
STATIC
CHAR
=
{
,
,
}
;
VOID
(
VOID
)
{
INT
;
UNSIGNED
LONG
;
VOID
;
UNSIGNED
,
,
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
=
;
=
;
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
VOID
)
(
=
(
)
)
;
(
(
)
)
;
;
=
;
=
(
)
(
(
)
)
;
(
,
)
;
=
;
=
(
)
;
=
=
(
)
;
(
(
)
)
;
;
=
;
=
(
)
(
(
)
)
;
(
,
)
;
=
;
=
;
=
;
(
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
}
VOID
(
,
UNSIGNED
LONG
)
{
,
,
,
,
;
INT
;
UNSIGNED
,
;
=
(
)
;
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
;
SWITCH
(
)
{
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
(
)
;
=
;
=
;
=
;
BREAK
;
}
=
;
WHILE
(
)
{
IF
(
)
{
=
;
=
;
=
(
UNSIGNED
)
=
;
=
;
WHILE
(
)
{
=
;
(
)
;
=
;
}
=
;
RETURN
;
}
IF
(
(
)
(
)
)
{
=
;
=
;
}
=
;
}
}
IF
(
)
{
EXTERN
CHAR
;
EXTERN
;
EXTERN
INT
;
(
UNSIGNED
,
UNSIGNED
)
;
IF
(
)
{
;
=
;
;
(
,
)
;
=
;
GOTO
;
}
(
)
;
}
ELSE
=
;
}
VOID
(
)
{
,
;
=
;
=
;
IF
(
)
=
;
WHILE
(
)
{
=
;
=
;
}
IF
(
)
(
)
;
=
;
(
)
;
}
VOID
(
,
INT
)
{
;
=
;
DO
{
IF
(
)
BREAK
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
(
)
;
}
WHILE
(
)
;
;
;
}
VOID
(
,
)
{
;
=
;
DO
{
IF
(
)
BREAK
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
(
)
;
}
WHILE
(
)
;
;
;
}
VOID
(
VOID
)
{
,
,
;
UNSIGNED
,
,
,
;
INT
;
=
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
BREAK
;
}
(
(
)
,
)
;
}
(
)
;
IF
(
)
(
)
;
=
;
=
;
WHILE
(
)
{
IF
(
)
{
=
;
}
ELSE
{
IF
(
)
{
=
;
(
)
;
=
;
=
;
CONTINUE
;
}
ELSE
{
IF
(
)
{
=
;
=
;
=
;
WHILE
(
)
{
(
,
,
,
,
)
;
;
;
;
}
(
,
,
,
,
)
;
=
;
(
UNSIGNED
)
=
;
}
=
;
}
}
=
;
=
;
}
=
;
IF
(
)
(
)
;
IF
(
)
(
(
)
,
)
;
}
VOID
(
VOID
)
{
;
UNSIGNED
,
,
,
;
LONG
,
;
CHAR
,
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
IF
(
)
(
)
;
=
;
=
;
=
;
(
,
,
,
)
;
(
,
,
)
;
IF
(
)
(
,
(
)
,
,
)
;
=
;
}
(
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
,
;
LONG
,
;
UNSIGNED
;
CHAR
,
;
;
(
)
;
=
(
,
)
;
IF
(
)
(
)
;
=
;
DO
{
=
;
=
;
=
;
WHILE
(
)
{
=
(
UNSIGNED
)
;
IF
(
)
{
=
;
=
;
}
=
;
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
(
,
,
(
UNSIGNED
)
,
,
,
)
;
}
}
WHILE
(
)
;
(
)
;
(
)
;
}
LONG
(
VOID
)
{
UNSIGNED
;
;
=
;
=
;
WHILE
(
)
{
(
)
;
=
;
}
RETURN
;
}
LONG
(
VOID
)
{
UNSIGNED
;
;
=
;
=
;
WHILE
(
)
{
IF
(
(
)
(
)
)
;
(
)
;
=
;
}
RETURN
;
}
VOID
(
)
{
=
;
}
__E__O__F__
;
;
;
INT
;
;
,
,
,
,
;
;
;
,
,
;
;
INT
=
;
CHAR
=
{
}
;
INT
=
;
;
,
;
,
,
;
,
,
,
;
LONG
;
,
;
STATIC
CHAR
=
{
,
,
,
}
;
VOID
(
,
)
{
=
;
=
;
=
;
=
;
INT
IF
(
)
(
)
;
}
CHAR
=
;
(
VOID
)
{
INT
;
LONG
;
=
;
=
;
=
(
)
;
=
;
(
)
;
GOTO
;
=
;
=
;
(
)
;
;
GOTO
;
,
IF
(
)
GOTO
;
=
;
(
)
;
IF
(
)
GOTO
;
=
;
(
)
;
=
;
(
)
;
IF
(
)
GOTO
;
=
;
(
)
;
IF
(
(
)
)
GOTO
;
=
;
(
)
;
IF
(
)
GOTO
;
=
;
=
;
(
)
;
IF
(
)
GOTO
;
IF
(
)
GOTO
;
=
;
=
(
LONG
)
;
IF
(
(
)
(
(
LONG
)
)
)
{
=
(
(
LONG
)
)
;
=
;
}
=
;
=
;
(
)
;
IF
(
)
GOTO
;
=
;
(
LONG
)
;
FOR
(
=
;
;
)
=
;
=
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
,
,
INT
IF
(
)
(
)
;
}
}
(
VOID
)
{
=
;
=
;
,
INT
IF
(
)
GOTO
;
,
INT
,
,
(
)
;
=
;
IF
(
)
GOTO
;
(
)
;
IF
(
(
)
)
GOTO
;
=
;
(
)
;
=
;
IF
(
)
{
=
;
GOTO
;
}
;
=
;
RETURN
(
)
;
}
VOID
(
,
,
,
)
{
;
STRUCT
{
;
;
;
;
;
}
;
IF
(
)
(
)
;
=
(
)
;
=
(
)
;
=
;
=
(
LONG
)
;
=
;
=
(
LONG
)
;
=
(
)
;
(
)
;
IF
(
)
(
)
;
}
(
,
,
)
(
,
(
)
,
(
)
,
(
)
)
(
,
,
)
(
,
(
)
,
(
)
,
(
)
)
VOID
(
,
INT
,
)
{
(
,
,
,
)
;
}
VOID
(
,
INT
,
)
{
(
,
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
(
)
;
IF
(
)
(
)
;
}
}
VOID
(
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
,
)
;
}
VOID
(
VOID
)
{
;
INT
,
;
;
;
;
IF
(
)
RETURN
;
FOR
(
=
,
=
;
;
,
)
{
=
;
IF
(
)
{
IF
(
)
{
=
;
=
;
}
}
}
(
)
;
=
;
FOR
(
=
,
=
,
=
;
;
,
,
)
{
IF
(
)
{
IF
(
)
{
;
;
}
IF
(
)
{
;
;
}
IF
(
)
{
(
)
;
(
,
)
;
IF
(
)
=
;
ELSE
{
;
;
}
(
)
;
}
}
}
IF
(
)
=
;
}
VOID
(
VOID
)
{
INT
,
;
;
=
;
(
)
;
FOR
(
=
,
=
;
;
,
)
{
(
,
)
;
IF
(
)
BREAK
;
;
=
;
}
(
)
;
IF
(
)
=
;
IF
(
)
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
(
)
;
}
VOID
(
,
LONG
,
)
{
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
(
,
,
)
)
(
)
;
IF
(
(
,
,
)
)
(
)
;
}
VOID
(
VOID
)
{
INT
;
LONG
;
VOID
;
;
;
;
=
(
,
)
;
IF
(
)
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
(
(
)
,
(
)
)
;
(
(
)
,
)
;
=
(
)
;
(
,
,
(
)
)
;
=
(
)
;
(
,
)
;
IF
(
(
,
(
)
,
)
)
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
=
;
(
)
;
=
(
)
;
(
,
)
;
IF
(
(
,
(
)
,
)
)
(
)
;
=
(
)
;
FOR
(
=
,
=
;
;
,
)
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
IF
(
)
{
(
(
)
,
)
;
(
(
VOID
)
)
;
}
}
(
INT
,
)
{
INT
,
;
,
,
;
=
(
)
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
BREAK
;
}
}
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
=
;
}
}
=
;
(
,
)
;
}
IF
(
)
(
)
;
=
;
=
;
;
RETURN
(
(
)
(
)
)
;
}
(
INT
,
)
{
;
=
(
)
(
)
;
(
,
)
;
RETURN
(
(
)
(
(
)
(
(
(
)
)
)
)
)
;
}
(
INT
)
{
;
=
;
IF
(
)
RETURN
(
)
;
ELSE
IF
(
)
RETURN
(
(
,
)
)
;
ELSE
RETURN
(
)
;
}
INT
(
)
{
INT
,
;
LONG
;
;
FOR
(
=
,
=
,
=
,
=
;
;
,
)
{
IF
(
(
)
(
(
)
(
)
)
(
)
(
(
(
)
)
)
)
{
=
;
=
;
}
}
IF
(
)
(
)
;
RETURN
(
)
;
}
INT
(
VOID
)
{
INT
,
;
LONG
;
;
FOR
(
=
,
=
,
=
,
=
;
;
,
)
{
IF
(
(
)
(
)
(
)
)
{
=
;
=
;
}
}
RETURN
(
)
;
}
VOID
(
INT
)
{
INT
;
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
{
=
(
)
;
IF
(
)
(
)
;
=
;
=
;
}
(
(
)
,
,
)
;
}
(
INT
,
INT
)
{
;
,
;
IF
(
)
(
)
;
=
;
=
;
IF
(
)
(
)
;
IF
(
(
)
(
)
)
(
)
;
(
)
;
=
(
)
;
=
;
=
;
=
=
;
IF
(
)
(
)
;
RETURN
(
)
;
}
(
INT
,
)
{
=
;
INT
,
;
;
;
=
;
IF
(
(
)
)
{
=
;
=
(
,
)
;
}
ELSE
IF
(
)
{
FOR
(
=
,
=
,
=
;
;
,
)
{
IF
(
(
)
(
)
)
{
=
;
;
BREAK
;
}
}
IF
(
)
(
)
;
=
;
IF
(
)
(
)
;
=
;
;
}
ELSE
=
(
(
)
,
)
;
IF
(
)
(
)
;
RETURN
(
)
;
}
(
INT
,
)
{
;
=
;
;
=
;
IF
(
(
)
)
{
=
;
=
(
,
)
;
IF
(
(
)
)
(
)
;
=
(
)
(
)
;
(
,
,
)
;
=
;
}
RETURN
(
)
;
}
VOID
(
INT
,
)
{
;
;
=
(
,
)
;
=
;
(
,
,
)
;
}
(
INT
)
{
;
IF
(
)
(
)
;
,
,
,
,
,
,
,
IF
(
(
=
(
)
)
)
{
=
(
)
;
IF
(
)
(
)
;
IF
(
(
=
(
,
)
)
)
{
IF
(
)
;
(
,
)
;
=
(
)
;
}
}
=
;
,
,
,
,
,
,
,
,
,
RETURN
(
)
;
}
VOID
(
INT
,
)
{
IF
(
)
(
)
;
=
;
}
VOID
(
(
)
(
,
)
)
{
INT
,
,
,
;
,
,
,
,
,
,
,
,
,
;
;
;
=
(
)
(
)
;
=
(
)
;
=
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
)
{
;
;
}
ELSE
IF
(
(
)
)
{
;
;
}
}
=
;
IF
(
)
RETURN
;
=
;
=
;
WHILE
(
)
{
WHILE
(
)
;
IF
(
)
(
)
;
(
)
;
;
;
;
(
,
)
;
}
IF
(
)
{
FOR
(
=
;
;
)
;
=
(
)
;
IF
(
)
(
)
;
WHILE
(
)
{
WHILE
(
)
;
IF
(
)
(
)
;
=
;
=
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
(
)
,
,
)
;
(
(
)
,
,
)
;
;
;
;
(
,
)
;
}
=
;
(
(
)
,
,
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
{
FOR
(
=
;
;
)
=
;
=
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
CHAR
;
(
,
,
)
;
(
)
;
}
}
IF
(
)
{
IF
(
(
)
(
)
)
{
}
}
IF
(
)
=
;
=
;
}
VOID
(
VOID
)
{
INT
;
;
=
;
=
(
)
;
=
;
=
=
=
;
=
;
FOR
(
=
,
=
;
;
,
)
{
=
;
=
;
=
;
=
;
}
}
VOID
(
VOID
)
{
,
,
;
INT
;
IF
(
)
RETURN
;
=
=
=
;
FOR
(
=
;
;
)
{
SWITCH
(
(
,
)
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
=
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
IF
(
)
RETURN
;
(
)
;
(
)
;
}
__E__O__F__
(
)
{
=
=
;
}
(
,
)
(
(
)
,
)
(
)
(
(
)
)
(
)
WHILE
(
(
)
)
;
(
)
WHILE
(
(
)
)
;
(
)
(
,
)
(
)
(
,
)
(
)
(
)
EXTERN
VOID
(
VOID
)
,
(
)
;
EXTERN
VOID
(
VOID
)
,
(
VOID
)
,
(
VOID
)
;
,
,
,
,
,
,
;
;
;
;
;
;
;
;
=
;
INT
;
STATIC
;
;
,
;
STATIC
CHAR
=
{
,
,
,
,
,
,
,
,
}
;
STATIC
VOID
(
)
(
VOID
)
;
,
;
,
;
INT
,
;
VOID
(
)
(
VOID
)
;
LONG
;
;
,
,
;
;
,
;
;
STATIC
,
;
STATIC
;
STATIC
;
STATIC
,
;
STATIC
VOLATILE
;
STATIC
=
;
STATIC
VOLATILE
;
STATIC
=
,
=
,
=
,
=
,
=
{
,
,
,
}
,
=
{
,
,
,
}
,
=
{
,
,
,
}
;
STATIC
INT
=
,
=
,
=
,
=
{
,
,
,
,
,
,
,
,
,
,
}
;
STATIC
VOLATILE
;
STATIC
VOLATILE
;
STATIC
VOID
(
)
(
VOID
)
;
STATIC
,
;
;
;
,
,
;
,
;
VOLATILE
;
VOLATILE
;
VOLATILE
,
;
;
;
;
;
;
;
;
;
STATIC
=
{
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
;
;
STATIC
;
STATIC
,
;
STATIC
,
;
,
,
,
;
LONG
;
VOID
(
VOID
)
;
STATIC
VOID
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
(
(
)
)
)
=
(
(
)
)
;
ELSE
=
;
=
;
}
STATIC
VOID
(
)
{
=
;
(
)
;
}
STATIC
VOID
(
VOID
)
{
;
VOID
(
)
(
VOID
)
;
IF
(
(
)
)
{
=
;
=
;
}
ELSE
IF
(
(
)
(
(
)
)
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
(
,
)
;
(
)
;
=
;
}
}
VOID
STATIC
VOID
(
VOID
)
{
;
IF
(
)
{
=
;
(
)
;
(
,
)
;
=
(
)
;
IF
(
(
)
)
(
)
;
ELSE
(
)
;
(
,
)
;
}
}
STATIC
(
VOLATILE
,
)
{
UNSIGNED
;
,
;
=
;
=
(
)
;
=
(
(
(
)
)
)
(
)
;
IF
(
)
{
;
;
}
IF
(
)
=
;
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
(
)
(
)
)
;
(
,
(
)
)
;
(
,
(
)
)
;
(
,
(
)
(
)
)
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
(
,
(
)
)
;
(
)
;
(
,
(
)
(
)
)
;
RETURN
(
)
;
}
STATIC
VOID
(
VOID
)
{
;
(
)
;
IF
(
)
{
=
(
,
)
;
IF
(
)
=
;
ELSE
{
;
;
}
}
ELSE
{
(
)
;
(
)
;
}
(
,
)
;
}
VOID
STATIC
VOID
(
,
)
{
;
(
)
;
=
(
,
)
;
IF
(
)
=
;
ELSE
{
=
;
=
;
}
=
(
)
;
(
,
(
)
)
;
(
)
;
(
,
)
;
=
;
}
STATIC
VOID
(
INT
,
INT
)
{
;
IF
(
)
RETURN
;
=
;
=
;
=
(
(
)
)
(
)
;
(
,
)
;
(
,
)
;
}
STATIC
(
INT
)
{
INT
;
=
;
(
,
)
;
,
,
,
,
,
,
,
,
,
,
(
,
)
;
,
,
,
FOR
(
=
;
;
)
{
IF
(
(
)
)
{
IF
(
(
)
)
RETURN
(
)
;
ELSE
{
=
;
RETURN
(
)
;
}
}
}
=
;
RETURN
(
)
;
}
STATIC
(
INT
)
{
INT
;
IF
(
)
=
;
IF
(
)
{
IF
(
(
)
)
RETURN
(
)
;
IF
(
(
)
)
RETURN
(
)
;
FOR
(
=
;
;
)
{
IF
(
(
)
(
)
)
CONTINUE
;
IF
(
(
)
)
RETURN
(
)
;
}
RETURN
(
)
;
}
ELSE
RETURN
(
(
)
)
;
}
VOID
(
)
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
}
STATIC
VOID
(
VOID
)
{
,
;
=
;
IF
(
)
(
)
;
=
(
)
;
(
,
)
;
(
)
;
(
,
)
;
=
(
)
;
(
)
;
(
,
)
;
(
)
;
(
,
)
;
=
;
IF
(
)
RETURN
;
(
,
)
;
=
(
)
;
(
,
)
;
=
(
)
;
IF
(
)
{
(
,
)
;
=
(
)
;
IF
(
)
{
=
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
}
}
}
STATIC
VOID
(
VOID
)
{
(
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
,
)
;
}
VOID
STATIC
VOID
(
VOID
)
{
(
LONG
)
=
;
}
STATIC
VOID
(
VOID
)
{
;
;
WHILE
(
)
{
,
,
,
=
;
IF
(
(
)
)
{
(
LONG
)
=
;
(
)
;
}
,
,
,
,
,
,
,
,
}
;
}
VOID
STATIC
VOID
(
,
)
{
=
;
=
(
VOLATILE
)
;
}
STATIC
VOID
(
VOID
)
{
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
}
STATIC
(
VOID
)
{
=
;
;
(
)
;
=
;
WHILE
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
=
;
(
)
;
RETURN
(
)
;
}
STATIC
(
VOID
)
{
FOR
(
=
;
;
)
IF
(
(
)
)
RETURN
(
)
;
RETURN
(
)
;
}
VOID
STATIC
VOID
(
,
)
{
(
)
;
=
;
=
(
VOLATILE
)
;
}
VOID
STATIC
VOID
(
VOID
)
{
(
LONG
)
=
;
(
)
;
,
,
,
}
VOID
STATIC
VOID
(
)
{
=
;
=
;
=
;
}
VOID
STATIC
VOID
(
VOID
)
{
(
LONG
)
=
;
,
,
,
}
STATIC
VOID
(
VOID
)
{
;
;
IF
(
)
{
=
;
IF
(
)
{
=
;
IF
(
)
{
=
;
,
,
,
,
,
,
,
,
,
,
}
ELSE
{
,
,
,
}
}
IF
(
(
)
)
{
(
)
;
(
)
;
}
}
}
STATIC
VOID
(
VOID
)
{
=
;
,
,
,
}
(
)
{
;
,
,
,
,
,
,
,
=
(
)
;
(
,
)
;
,
,
,
,
,
,
,
,
,
RETURN
(
)
;
}
VOID
(
,
)
{
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
}
}
VOID
(
VOID
)
{
INT
;
=
;
=
;
=
;
=
;
=
;
=
=
;
=
;
IF
(
(
)
(
)
)
(
)
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
FOR
(
=
;
;
)
(
,
)
;
=
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
=
(
)
(
)
;
;
IF
(
)
=
;
=
(
)
;
}
IF
(
)
{
(
,
)
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
}
(
)
;
}
VOID
(
INT
,
INT
)
{
IF
(
(
)
(
)
(
)
(
)
(
(
)
(
)
)
)
(
)
;
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
}
}
VOID
(
,
INT
,
INT
)
{
;
;
IF
(
)
RETURN
;
(
)
;
IF
(
)
(
)
;
(
,
)
;
=
(
)
;
=
(
)
;
=
;
=
(
(
(
)
)
)
;
=
(
)
(
)
;
=
(
)
;
=
;
=
;
(
,
)
;
;
IF
(
)
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
=
;
=
;
}
ELSE
{
IF
(
)
{
=
;
=
;
IF
(
(
)
(
)
)
{
(
)
;
}
ELSE
=
=
;
=
;
}
ELSE
=
;
}
}
VOID
(
)
{
;
IF
(
)
RETURN
;
(
)
;
=
;
SWITCH
(
)
{
CASE
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
}
IF
(
)
{
IF
(
)
(
)
;
=
;
IF
(
)
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
;
,
;
INT
;
(
)
;
(
,
)
;
(
)
;
=
(
)
(
(
)
,
)
;
(
(
VOID
)
,
(
VOID
)
,
)
;
=
;
FOR
(
=
;
(
(
)
)
;
,
)
{
IF
(
)
BREAK
;
(
(
)
)
;
}
(
)
;
(
(
)
,
(
)
)
;
(
(
VOID
)
,
(
VOID
)
,
(
)
)
;
(
)
;
=
;
FOR
(
=
;
;
)
=
;
}
VOID
(
,
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
STATIC
VOID
(
INT
,
INT
,
,
)
{
,
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
(
,
)
;
}
VOID
STATIC
VOID
(
VOID
)
{
(
LONG
)
=
;
(
,
)
;
}
STATIC
VOID
(
)
{
,
;
=
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
STATIC
VOID
(
)
{
;
;
(
)
;
=
;
=
;
;
;
=
(
)
;
=
(
(
)
)
;
=
;
IF
(
(
)
)
{
(
)
;
}
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
IF
(
)
{
=
;
IF
(
)
(
,
)
;
ELSE
{
(
,
)
;
(
,
)
;
}
IF
(
(
)
)
{
(
LONG
)
=
;
(
,
)
;
(
)
;
}
}
}
VOID
(
VOID
)
{
,
;
;
IF
(
)
RETURN
;
WHILE
(
(
)
)
{
=
;
=
;
,
,
,
(
,
)
;
;
}
;
IF
(
)
{
=
(
)
;
=
;
=
=
;
}
}
STATIC
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
(
)
;
=
;
}
STATIC
VOID
(
VOID
)
{
INT
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
}
STATIC
VOID
(
VOID
)
{
=
;
(
,
)
;
(
)
;
}
STATIC
(
VOID
)
{
,
;
INT
;
(
,
)
;
(
,
)
;
=
(
)
;
(
,
)
;
(
,
)
;
(
)
;
,
,
,
=
(
)
;
(
,
)
;
(
,
)
;
IF
(
(
(
)
)
(
(
)
)
)
{
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
(
,
)
;
RETURN
(
)
;
}
ELSE
RETURN
(
)
;
}
STATIC
VOID
(
VOID
)
{
STATIC
=
;
,
,
,
,
,
,
,
;
IF
(
(
)
(
)
)
{
(
)
;
(
)
;
IF
(
(
)
)
{
;
;
IF
(
)
(
)
;
}
IF
(
(
)
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
}
ELSE
{
IF
(
(
)
)
{
;
;
IF
(
)
(
)
;
}
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
,
,
,
(
)
;
;
(
,
)
;
;
,
,
,
,
,
,
,
,
,
}
STATIC
VOID
(
VOID
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
=
;
}
STATIC
VOID
(
VOID
)
{
IF
(
(
)
(
)
)
(
)
;
}
STATIC
VOID
(
VOID
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
}
=
=
;
}
(
)
{
=
;
;
(
)
;
IF
(
(
)
)
=
;
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
IF
(
)
{
=
;
=
;
=
;
}
BREAK
;
}
=
;
IF
(
(
)
)
{
(
)
;
=
;
=
(
)
(
)
;
(
)
;
}
(
)
;
RETURN
(
)
;
}
(
)
{
=
;
(
)
;
WHILE
(
(
)
)
;
SWITCH
(
)
{
CASE
=
;
=
;
BREAK
;
CASE
IF
(
)
{
=
;
=
;
}
BREAK
;
}
IF
(
)
=
;
(
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
(
)
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
SWITCH
(
(
,
)
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
=
=
;
BREAK
;
CASE
=
;
=
=
;
BREAK
;
CASE
=
;
=
=
;
BREAK
;
}
}
=
;
=
(
)
;
=
=
=
;
(
)
;
(
)
;
IF
(
)
=
(
)
;
IF
(
)
{
=
(
)
;
IF
(
)
{
INT
=
;
CHAR
=
(
)
;
IF
(
)
{
LONG
;
WHILE
(
)
{
WHILE
(
(
)
)
;
SWITCH
(
(
)
)
{
CASE
=
(
,
,
)
;
IF
(
(
)
(
)
(
(
)
)
)
=
(
)
;
ELSE
(
)
;
BREAK
;
CASE
=
(
,
,
)
;
IF
(
(
)
(
)
(
)
)
{
=
;
=
;
}
ELSE
(
)
;
BREAK
;
CASE
=
(
,
,
)
;
IF
(
(
)
(
)
(
)
)
(
)
;
ELSE
(
)
;
BREAK
;
DEFAULT
WHILE
(
(
)
)
;
WHILE
(
(
)
)
;
BREAK
;
}
}
}
=
(
)
;
}
}
FOR
(
=
;
;
)
=
;
IF
(
)
(
)
;
(
)
;
=
;
}
VOID
(
,
,
)
{
,
;
=
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
IF
(
)
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
}
}
IF
(
)
{
IF
(
)
=
;
}
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
(
,
)
;
=
;
}
VOID
(
VOID
(
)
(
VOID
)
)
{
=
;
}
VOID
(
INT
,
INT
)
{
=
;
=
;
=
;
}
(
)
{
;
;
INT
,
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
RETURN
(
)
;
=
(
,
)
;
IF
(
(
)
)
(
)
;
IF
(
(
)
(
)
)
{
IF
(
(
)
(
)
)
{
IF
(
)
RETURN
(
)
;
(
)
;
(
,
,
)
;
=
;
=
;
=
;
}
ELSE
{
IF
(
)
{
(
)
;
}
IF
(
)
RETURN
(
)
;
(
,
,
)
;
=
;
=
;
=
;
}
RETURN
(
)
;
}
IF
(
)
RETURN
(
)
;
IF
(
)
(
)
;
IF
(
)
RETURN
(
)
;
SWITCH
(
)
{
CASE
(
(
VOID
)
)
;
BREAK
;
CASE
(
(
VOID
)
)
;
BREAK
;
}
=
;
=
;
RETURN
(
)
;
}
(
VOID
)
{
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
IF
(
)
RETURN
(
)
;
ELSE
RETURN
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
=
;
(
)
;
}
VOID
(
VOID
)
{
WHILE
(
(
)
)
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
VOID
)
{
;
SWITCH
(
)
{
CASE
=
;
(
,
)
;
FOR
(
=
;
;
)
(
,
)
;
BREAK
;
}
=
;
}
VOID
(
)
{
(
)
;
IF
(
)
{
=
=
;
=
=
;
=
;
=
;
(
)
;
}
}
VOID
(
VOID
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
}
}
(
VOID
)
{
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
DEFAULT
=
;
}
RETURN
(
)
;
}
__E__O__F__
CHAR
;
;
,
;
,
,
,
;
STATIC
CHAR
=
{
,
}
,
=
{
,
}
;
STATIC
;
,
,
;
INT
,
;
VOID
(
)
(
CHAR
,
,
)
=
,
(
)
(
CHAR
)
=
;
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
}
;
INT
(
,
INT
,
INT
,
INT
)
{
EXTERN
VOID
(
VOID
)
;
STATIC
CHAR
;
STATIC
;
INT
;
CHAR
,
,
;
=
;
IF
(
)
=
;
ELSE
{
IF
(
(
)
)
=
;
ELSE
=
;
FOR
(
=
;
;
,
)
IF
(
(
=
)
)
=
(
)
;
=
;
=
;
}
=
(
,
)
;
IF
(
(
)
(
)
)
GOTO
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
WHILE
(
)
{
SWITCH
(
(
)
)
{
CASE
CASE
CASE
GOTO
;
BREAK
;
CASE
CASE
CASE
CASE
(
)
;
(
)
;
(
)
;
RETURN
(
)
;
BREAK
;
}
}
=
;
(
)
;
(
,
,
)
;
IF
(
)
(
,
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
RETURN
;
(
)
;
(
)
;
FOR
(
=
;
;
)
{
SWITCH
(
(
,
)
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
FOR
(
=
;
;
)
{
=
(
,
)
;
SWITCH
(
)
{
CASE
=
(
)
;
IF
(
)
=
;
BREAK
;
CASE
=
;
BREAK
;
}
}
=
;
}
VOID
(
VOID
)
{
IF
(
)
RETURN
;
=
;
}
INT
(
CHAR
,
CHAR
)
{
CHAR
,
,
,
;
INT
;
WHILE
(
(
)
)
;
FOR
(
=
;
;
)
{
FOR
(
=
,
=
,
=
=
;
;
)
{
=
;
IF
(
)
RETURN
(
)
;
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
}
}
RETURN
(
)
;
}
VOID
(
VOID
(
)
(
CHAR
,
,
)
,
VOID
(
)
(
CHAR
)
)
{
=
;
=
;
}
VOID
(
CHAR
)
{
CHAR
,
;
,
;
WHILE
(
)
{
=
;
WHILE
(
(
=
)
(
)
)
;
=
;
(
,
,
)
;
=
;
=
;
(
)
;
=
;
IF
(
)
{
=
;
;
=
;
;
}
ELSE
;
}
}
VOID
(
)
{
CHAR
;
(
(
,
,
)
)
;
}
VOID
(
LONG
)
{
CHAR
;
(
(
,
,
)
)
;
}
VOID
(
CHAR
,
)
{
,
,
,
;
(
,
,
)
;
=
;
=
;
=
(
(
)
)
;
=
(
(
)
)
;
(
)
;
}
VOID
(
CHAR
)
{
;
=
;
=
;
=
;
=
;
(
,
)
;
}
VOID
(
CHAR
)
{
,
;
(
,
,
)
;
IF
(
)
(
)
;
=
(
(
)
)
;
=
;
(
)
;
;
}
VOID
(
CHAR
)
{
CHAR
,
;
WHILE
(
)
{
=
;
WHILE
(
(
=
)
(
)
)
;
=
;
(
)
;
=
;
IF
(
)
{
=
;
;
}
}
}
VOID
(
VOID
)
{
(
,
,
,
,
)
;
=
;
=
;
}
VOID
(
,
,
,
)
{
,
,
,
,
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
(
,
,
)
,
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
,
(
,
,
)
;
(
,
,
)
,
(
,
,
)
;
FOR
(
=
;
;
)
(
,
,
)
,
(
,
,
)
;
}
VOID
(
,
)
{
(
(
(
)
)
,
(
(
)
)
,
,
)
;
}
VOID
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
STATIC
VOID
(
INT
,
INT
,
CHAR
,
)
{
STATIC
;
CHAR
;
INT
;
,
;
(
,
)
;
=
;
(
,
,
)
;
=
;
=
;
IF
(
)
(
)
;
ELSE
{
=
;
=
;
(
)
;
=
;
}
}
(
INT
,
INT
,
CHAR
,
CHAR
,
,
INT
,
INT
)
{
,
,
,
,
;
;
CHAR
,
,
;
,
,
,
,
,
;
;
IF
(
)
(
,
)
;
ELSE
=
;
=
;
=
(
)
;
=
=
;
=
=
;
=
;
=
;
=
;
WHILE
(
)
{
IF
(
)
(
,
,
,
)
;
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
IF
(
)
;
=
;
=
;
BREAK
;
CASE
IF
(
)
;
=
;
=
;
BREAK
;
CASE
=
;
=
;
=
;
BREAK
;
CASE
=
(
)
;
=
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
=
;
=
;
BREAK
;
CASE
IF
(
)
{
=
;
=
;
}
=
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
;
=
;
}
=
;
=
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
=
;
}
=
;
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
=
;
BREAK
;
}
IF
(
)
{
=
(
)
;
(
,
,
)
;
IF
(
(
)
(
)
(
(
)
(
)
)
(
(
)
(
)
)
)
{
FOR
(
=
;
;
)
=
;
=
;
=
;
}
}
IF
(
)
{
=
;
=
;
=
;
=
;
(
)
;
=
;
(
,
)
;
=
;
=
;
(
)
;
=
;
}
IF
(
)
{
=
;
=
;
=
;
}
IF
(
)
{
=
;
;
}
IF
(
)
(
,
,
,
)
;
(
)
;
}
IF
(
)
(
,
,
,
)
;
IF
(
)
{
=
;
=
;
(
)
;
}
(
)
;
(
)
;
RETURN
(
)
;
}
__E__O__F__
(
)
(
)
(
)
(
)
{
(
)
;
;
}
;
;
INT
,
;
,
;
INT
;
INT
,
;
VOID
(
VOID
)
;
VOID
(
CHAR
)
{
;
INT
,
,
,
;
,
,
;
,
;
=
(
)
;
=
=
;
=
=
(
,
(
)
)
;
=
(
)
;
WHILE
(
(
=
)
)
{
=
=
;
=
(
(
)
)
;
WHILE
(
)
{
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
;
;
;
IF
(
)
{
=
;
;
}
}
}
=
;
=
(
(
)
)
;
}
VOID
(
CHAR
)
{
;
INT
,
,
,
;
,
,
;
,
;
=
(
)
;
=
=
;
=
=
(
,
(
)
)
;
=
(
)
;
WHILE
(
(
=
)
)
{
=
=
;
=
(
(
)
)
;
WHILE
(
)
{
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
;
;
;
IF
(
)
{
=
;
;
}
}
}
=
;
=
(
(
)
)
;
}
VOID
(
,
UNSIGNED
,
UNSIGNED
)
{
UNSIGNED
,
,
,
,
;
,
,
;
=
;
IF
(
)
(
)
;
(
(
)
,
)
;
(
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
)
;
;
}
}
(
(
)
)
;
}
VOID
(
CHAR
,
,
,
)
{
=
;
FOR
(
=
;
;
)
(
(
)
)
;
}
VOID
(
CHAR
,
,
)
{
(
,
,
,
(
)
)
;
}
VOID
(
CHAR
,
,
)
{
(
,
,
,
(
)
)
;
}
INT
(
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
,
,
,
;
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
)
RETURN
;
IF
(
)
RETURN
;
ELSE
IF
(
)
=
;
IF
(
)
RETURN
;
ELSE
IF
(
)
=
;
=
;
=
(
)
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
;
;
}
RETURN
;
}
VOID
(
INT
,
INT
,
INT
)
{
IF
(
(
,
,
,
)
)
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
IF
(
(
,
,
,
)
)
(
(
(
)
)
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
=
;
UNSIGNED
,
;
;
=
;
=
;
IF
(
(
,
,
,
)
)
(
,
,
,
,
)
;
}
VOID
(
CHAR
)
{
INT
;
=
;
(
)
;
(
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
IF
(
(
,
,
,
)
)
(
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
IF
(
(
,
,
,
)
)
(
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
IF
(
(
,
,
,
)
)
(
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
IF
(
(
,
,
,
)
)
(
,
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
UNSIGNED
,
UNSIGNED
,
UNSIGNED
)
{
UNSIGNED
,
,
;
=
;
=
;
=
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
,
,
;
;
UNSIGNED
;
=
;
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
(
,
,
,
)
;
;
;
}
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
(
)
;
=
(
)
;
(
,
,
,
)
;
;
IF
(
)
(
)
;
}
=
;
=
;
FOR
(
=
;
;
)
{
=
;
(
)
;
=
;
=
;
(
,
,
,
)
;
;
(
)
;
}
(
)
;
}
EXTERN
;
(
UNSIGNED
,
UNSIGNED
,
UNSIGNED
,
UNSIGNED
,
UNSIGNED
,
)
{
INT
;
UNSIGNED
,
;
,
=
{
,
,
,
}
;
UNSIGNED
,
,
,
;
LONG
;
=
;
=
;
=
;
=
;
(
)
;
=
=
;
DO
{
IF
(
(
)
)
RETURN
;
,
FOR
(
=
;
;
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
IF
(
)
CONTINUE
;
=
(
)
;
=
;
(
)
;
=
;
(
)
;
,
,
,
,
IF
(
)
RETURN
;
}
;
WHILE
(
)
;
}
WHILE
(
)
;
}
__E__O__F__
UNSIGNED
;
UNSIGNED
,
;
UNSIGNED
=
;
UNSIGNED
;
UNSIGNED
;
;
UNSIGNED
;
;
,
;
INT
(
VOID
)
;
VOID
(
INT
)
;
VOID
(
INT
,
INT
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
{
IF
(
(
)
(
)
)
(
)
;
;
}
STATIC
CHAR
=
{
,
}
;
VOID
(
VOID
)
{
INT
,
;
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
=
;
BREAK
;
}
IF
(
)
(
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
,
INT
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
,
INT
}
VOID
(
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
VOID
(
VOID
)
{
(
,
)
;
(
,
(
(
)
)
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
(
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
(
)
)
;
}
VOID
(
UNSIGNED
)
{
INT
,
;
(
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
;
}
}
VOID
(
INT
)
{
(
)
;
=
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
(
)
)
;
(
,
)
;
(
,
(
)
(
)
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
(
,
)
;
FOR
(
=
;
;
)
{
(
,
)
;
(
,
)
;
(
,
)
;
}
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
(
,
)
;
=
(
)
;
=
(
)
;
=
(
)
;
}
VOID
(
)
{
INT
;
,
,
,
,
,
,
,
,
,
,
,
,
,
}
VOID
(
)
{
INT
;
(
,
)
;
FOR
(
=
;
;
)
=
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
INT
,
,
,
;
,
;
(
)
;
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
;
(
)
;
}
(
,
,
)
;
=
;
}
VOID
(
INT
,
INT
,
,
INT
)
{
INT
,
,
;
(
)
;
(
)
;
(
,
,
(
)
)
;
;
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
{
=
;
=
;
}
(
)
;
(
)
;
}
(
)
;
=
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
=
;
(
)
;
(
)
;
IF
(
(
,
,
)
)
=
;
}
VOID
(
INT
)
{
=
;
=
;
=
;
(
)
;
=
;
}
=
{
,
,
,
}
;
=
{
,
,
,
}
;
=
{
,
,
,
}
;
VOID
(
INT
,
INT
,
INT
)
{
;
=
;
(
)
;
(
)
(
,
(
(
)
)
)
=
;
(
)
;
}
VOID
(
UNSIGNED
,
UNSIGNED
,
UNSIGNED
,
UNSIGNED
)
{
UNSIGNED
;
;
,
;
INT
;
=
;
=
;
=
(
)
;
=
(
(
)
)
;
=
(
,
)
;
IF
(
)
{
(
)
;
=
;
(
)
;
RETURN
;
}
(
)
;
=
;
(
)
;
(
,
,
)
;
;
(
)
;
=
;
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
)
{
,
;
=
;
(
)
;
=
(
,
(
)
)
;
WHILE
(
)
{
=
;
;
}
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
;
,
;
INT
,
;
=
;
=
(
)
;
=
(
(
)
)
(
)
;
=
(
)
;
=
(
,
(
)
)
;
IF
(
)
{
(
)
;
WHILE
(
)
{
=
;
;
}
(
)
;
RETURN
;
}
WHILE
(
)
{
(
)
;
=
;
(
)
;
(
,
,
)
;
;
(
)
;
=
;
;
}
(
)
;
}
VOID
(
,
INT
,
INT
,
UNSIGNED
)
{
UNSIGNED
;
,
;
=
(
(
)
)
;
=
;
FOR
(
=
;
;
)
{
(
)
;
;
,
,
,
,
,
,
,
;
}
}
VOID
(
,
INT
,
INT
,
INT
,
INT
)
{
,
,
;
INT
;
;
=
(
,
(
)
)
;
=
(
)
;
FOR
(
=
;
;
)
{
(
)
;
;
IF
(
)
=
;
=
;
FOR
(
=
;
;
,
,
)
(
,
,
)
;
}
}
VOID
(
,
INT
,
INT
,
INT
,
INT
)
{
,
,
;
;
INT
;
;
=
(
,
(
)
)
;
FOR
(
=
;
;
)
{
(
)
;
;
IF
(
)
=
;
=
;
FOR
(
=
;
;
,
,
)
(
,
,
)
;
}
}
VOID
(
UNSIGNED
,
INT
,
INT
,
INT
,
INT
)
{
(
)
;
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
(
)
;
}
VOID
(
UNSIGNED
,
UNSIGNED
,
INT
,
INT
)
{
(
)
;
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
(
)
;
}
VOID
(
CHAR
,
CHAR
,
INT
,
INT
)
{
INT
;
UNSIGNED
,
,
;
=
(
,
(
)
)
;
WHILE
(
)
{
=
(
UNSIGNED
)
(
(
)
)
;
(
)
;
=
;
FOR
(
=
;
;
,
)
=
;
(
)
;
=
;
FOR
(
=
;
;
,
)
=
;
(
)
;
=
;
FOR
(
=
;
;
,
)
=
;
(
)
;
=
;
FOR
(
=
;
;
,
)
=
;
;
;
;
}
}
VOID
(
CHAR
,
UNSIGNED
,
INT
,
INT
)
{
INT
;
UNSIGNED
,
;
=
(
)
;
(
)
;
(
)
;
WHILE
(
)
{
=
(
)
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
;
;
;
}
(
)
;
}
VOID
(
CHAR
,
INT
,
INT
)
{
=
;
=
(
)
;
}
__E__O__F__
VOID
(
UNSIGNED
CHAR
,
UNSIGNED
,
UNSIGNED
)
{
UNSIGNED
,
,
,
,
;
UNSIGNED
CHAR
,
,
;
=
;
IF
(
)
(
)
;
=
(
UNSIGNED
CHAR
)
(
)
;
IF
(
)
(
)
;
(
,
,
)
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
FOR
(
=
;
;
)
=
(
)
;
;
}
}
(
)
;
}
__E__O__F__
;
LONG
;
INT
,
;
;
UNSIGNED
(
INT
,
)
;
INT
;
VOID
(
VOID
)
{
(
)
;
}
VOID
(
INT
)
{
INT
,
,
;
;
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
(
)
)
;
IF
(
)
;
}
(
,
,
(
)
)
;
(
)
;
=
;
(
(
)
,
)
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
IF
(
)
{
(
(
)
)
;
RETURN
;
}
IF
(
)
;
}
(
(
)
)
;
(
)
;
FOR
(
=
;
;
)
{
(
(
)
,
)
;
=
(
UNSIGNED
)
;
;
;
IF
(
)
{
=
;
=
;
=
;
=
;
;
}
}
=
;
=
;
FOR
(
=
;
;
)
=
(
LONG
)
;
}
UNSIGNED
(
INT
,
)
{
;
INT
;
LONG
,
;
UNSIGNED
,
,
;
INT
,
,
;
=
(
(
LONG
)
)
;
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
;
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
FOR
(
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
(
(
UNSIGNED
)
)
=
;
}
}
=
;
=
(
)
;
(
,
)
;
IF
(
)
RETURN
;
(
(
)
(
)
,
(
)
,
)
;
RETURN
;
}
EXTERN
INT
,
;
EXTERN
UNSIGNED
;
EXTERN
LONG
;
EXTERN
UNSIGNED
;
,
,
;
VOID
(
VOID
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
RETURN
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
STATIC
LONG
;
VOID
(
INT
,
INT
,
UNSIGNED
)
{
;
;
UNSIGNED
,
,
,
;
INT
;
UNSIGNED
;
,
;
=
(
)
;
=
;
IF
(
)
RETURN
;
=
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
IF
(
)
{
;
IF
(
)
{
IF
(
)
CONTINUE
;
(
)
;
}
CONTINUE
;
}
IF
(
)
{
;
=
;
IF
(
)
CONTINUE
;
}
ELSE
{
IF
(
)
=
;
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
{
WHILE
(
)
;
(
)
;
}
}
ELSE
{
IF
(
)
CONTINUE
;
WHILE
(
)
{
;
;
}
(
)
;
BREAK
;
}
}
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
WHILE
(
(
)
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
(
)
;
}
CONTINUE
;
}
IF
(
)
{
IF
(
)
CONTINUE
;
;
=
;
}
ELSE
{
IF
(
)
=
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
)
;
}
ELSE
{
WHILE
(
)
;
(
)
;
BREAK
;
}
}
ELSE
{
IF
(
)
{
WHILE
(
)
{
;
;
}
(
)
;
}
ELSE
CONTINUE
;
}
}
}
VOID
(
INT
,
INT
,
UNSIGNED
)
{
;
;
UNSIGNED
,
,
,
;
INT
;
UNSIGNED
;
,
;
=
(
)
;
=
;
=
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
;
(
)
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
(
)
;
;
}
}
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
UNSIGNED
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
INT
,
;
UNSIGNED
;
LONG
;
UNSIGNED
;
__E__O__F__
,
;
STRUCT
{
INT
;
;
}
=
{
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
}
,
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
}
,
{
}
,
{
}
,
{
}
,
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
}
}
;
VOID
(
VOID
)
{
=
;
}
VOID
(
INT
,
INT
,
INT
)
{
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
(
UNSIGNED
)
=
;
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
IF
(
)
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
=
;
BREAK
;
}
;
IF
(
)
(
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
INT
;
;
FOR
(
=
;
;
)
{
IF
(
)
(
)
;
IF
(
)
BREAK
;
}
FOR
(
=
;
;
)
{
IF
(
)
{
IF
(
)
RETURN
;
;
BREAK
;
}
IF
(
)
BREAK
;
}
=
;
=
;
=
;
=
;
=
;
=
;
}
,
;
INT
;
UNSIGNED
;
;
;
VOID
(
INT
)
{
INT
;
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
(
)
;
}
}
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
=
;
}
VOID
(
VOID
)
{
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
=
;
}
VOID
(
INT
,
INT
,
,
INT
)
{
INT
;
UNSIGNED
;
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
UNSIGNED
)
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
;
;
}
ELSE
{
=
(
)
;
;
;
}
;
;
}
VOID
(
INT
)
{
IF
(
)
=
;
ELSE
=
;
}
VOID
(
INT
)
{
INT
,
,
;
;
=
;
=
;
IF
(
)
RETURN
;
IF
(
)
RETURN
;
IF
(
)
{
IF
(
)
{
IF
(
(
(
)
)
)
RETURN
;
IF
(
(
(
)
)
)
RETURN
;
}
=
;
IF
(
(
(
)
)
)
RETURN
;
=
;
IF
(
(
(
)
)
)
RETURN
;
}
ELSE
IF
(
)
{
IF
(
)
{
IF
(
(
(
)
)
)
RETURN
;
IF
(
(
(
)
)
)
RETURN
;
}
=
;
IF
(
(
(
)
)
)
RETURN
;
=
;
IF
(
(
(
)
)
)
RETURN
;
}
=
(
)
;
IF
(
)
{
(
,
,
)
;
}
=
;
(
UNSIGNED
)
=
;
}
VOID
(
INT
)
{
INT
;
=
;
IF
(
)
{
IF
(
(
(
(
)
)
)
)
{
(
)
;
RETURN
;
}
}
SWITCH
(
)
{
CASE
CASE
(
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
}
}
VOID
(
INT
)
{
IF
(
(
)
)
(
)
;
}
VOID
(
INT
)
{
INT
,
;
UNSIGNED
;
LONG
;
=
;
IF
(
)
{
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
}
;
;
;
;
(
)
;
IF
(
)
{
(
,
,
)
;
}
}
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
=
;
}
VOID
(
INT
)
{
INT
,
,
;
UNSIGNED
;
LONG
;
INT
,
;
=
;
=
;
IF
(
(
(
UNSIGNED
)
(
)
)
(
)
)
{
(
)
;
RETURN
;
}
;
=
;
;
IF
(
)
{
=
;
=
;
=
;
IF
(
)
{
=
(
)
;
=
(
)
;
}
ELSE
{
=
(
)
;
=
(
)
;
}
;
;
;
;
(
)
;
}
=
;
}
VOID
(
VOID
)
{
INT
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
UNSIGNED
;
UNSIGNED
;
UNSIGNED
,
;
INT
;
VOID
(
INT
,
INT
,
INT
)
{
INT
;
IF
(
)
RETURN
;
=
;
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
)
{
(
)
;
RETURN
;
}
(
UNSIGNED
)
=
=
;
BREAK
;
CASE
IF
(
)
{
(
)
;
RETURN
;
}
(
UNSIGNED
)
=
=
;
BREAK
;
CASE
IF
(
)
{
(
)
;
RETURN
;
}
(
UNSIGNED
)
=
=
;
BREAK
;
CASE
IF
(
)
{
(
)
;
RETURN
;
}
(
UNSIGNED
)
=
=
;
BREAK
;
}
;
=
;
=
;
=
;
=
;
=
;
;
(
)
=
;
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
RETURN
;
=
;
;
IF
(
)
{
=
;
=
;
(
UNSIGNED
)
=
;
(
)
=
;
IF
(
)
{
=
;
RETURN
;
}
ELSE
{
SWITCH
(
)
{
CASE
;
IF
(
)
{
=
;
RETURN
;
}
(
UNSIGNED
)
=
=
;
BREAK
;
CASE
;
IF
(
)
{
=
;
RETURN
;
}
(
UNSIGNED
)
=
=
;
BREAK
;
CASE
;
IF
(
)
{
=
;
RETURN
;
}
(
UNSIGNED
)
=
=
;
BREAK
;
CASE
;
IF
(
)
{
=
;
RETURN
;
}
(
UNSIGNED
)
=
=
;
BREAK
;
}
=
;
}
}
=
(
)
;
}
__E__O__F__
=
{
,
,
,
,
,
,
,
,
}
;
INT
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
VOID
(
)
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
VOID
(
)
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
{
(
)
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
{
INT
,
,
,
,
,
;
;
LONG
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
)
{
LONG
,
;
INT
;
LONG
;
=
(
LONG
)
;
=
(
,
)
;
=
(
,
)
;
IF
(
)
=
;
IF
(
)
=
;
;
;
=
(
)
;
=
(
)
;
IF
(
(
)
)
{
IF
(
)
{
(
,
)
;
=
;
}
ELSE
IF
(
)
{
(
,
)
;
=
;
}
ELSE
=
;
RETURN
;
}
IF
(
)
{
SWITCH
(
)
{
CASE
=
(
(
)
)
;
BREAK
;
CASE
CASE
CASE
=
(
(
)
)
;
BREAK
;
CASE
=
(
(
)
)
;
BREAK
;
}
(
,
)
;
=
;
RETURN
;
}
=
;
=
;
}
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
,
INT
,
INT
,
INT
)
{
UNSIGNED
,
;
SWITCH
(
)
{
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
}
=
;
IF
(
)
{
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
=
;
=
;
;
}
=
;
=
;
=
;
;
}
VOID
(
INT
,
INT
)
{
(
,
,
)
;
=
;
}
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
(
,
,
)
;
=
;
=
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
(
,
,
)
;
=
;
=
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
,
INT
,
INT
,
INT
)
{
SWITCH
(
)
{
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
CASE
(
,
,
)
;
=
;
IF
(
)
;
BREAK
;
}
=
;
=
;
=
;
=
;
;
=
;
=
;
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
BREAK
;
CASE
;
BREAK
;
CASE
;
BREAK
;
}
=
;
}
VOID
(
)
{
IF
(
(
)
)
IF
(
(
)
(
)
)
{
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
(
,
)
;
RETURN
;
}
}
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
{
INT
=
{
,
,
,
,
,
,
,
}
;
(
(
)
,
)
;
(
(
)
,
)
;
}
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
VOID
(
)
;
VOID
(
)
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
(
,
,
)
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
(
,
,
)
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
{
INT
,
,
;
(
)
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
(
,
)
;
}
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
(
,
,
)
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
{
LONG
;
INT
,
,
;
;
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
(
)
)
{
IF
(
(
)
(
)
)
{
IF
(
)
(
,
)
;
ELSE
IF
(
)
(
,
)
;
ELSE
(
,
)
;
RETURN
;
}
=
;
}
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
=
;
}
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
}
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
(
,
,
)
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
{
LONG
,
;
FLOAT
;
INT
;
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
(
)
;
IF
(
)
{
;
IF
(
)
;
}
ELSE
{
;
IF
(
)
;
}
}
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
=
;
(
,
)
;
BREAK
;
CASE
=
;
=
;
(
,
)
;
BREAK
;
DEFAULT
(
,
)
;
}
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
)
{
(
)
;
}
VOID
(
)
{
(
)
;
}
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
(
,
,
)
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
=
;
}
VOID
(
)
{
IF
(
)
{
(
,
)
;
RETURN
;
}
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
}
VOID
(
)
;
VOID
(
)
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
(
,
,
)
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
{
LONG
,
;
INT
,
,
,
;
INT
,
;
UNSIGNED
;
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
RETURN
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
IF
(
(
(
)
)
)
RETURN
;
}
;
;
=
;
(
,
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
UNSIGNED
,
;
SWITCH
(
)
{
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
}
=
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
{
LONG
,
;
FLOAT
;
INT
;
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
}
VOID
(
)
{
LONG
,
;
FLOAT
;
INT
;
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
}
VOID
(
)
{
LONG
;
INT
,
,
;
;
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
(
)
)
{
IF
(
(
)
(
)
)
{
(
,
)
;
RETURN
;
}
=
;
}
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
=
;
}
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
LONG
;
INT
,
,
;
;
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
(
)
)
{
IF
(
(
)
(
)
)
{
(
,
)
;
RETURN
;
}
=
;
}
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
=
;
}
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
LONG
;
INT
,
,
;
;
=
;
=
(
)
;
=
(
)
;
=
;
IF
(
(
)
)
{
IF
(
(
)
(
)
)
{
(
,
)
;
RETURN
;
}
=
;
}
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
=
;
}
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
}
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
INT
,
INT
)
{
UNSIGNED
,
;
IF
(
)
=
;
ELSE
=
;
(
,
,
)
;
=
;
=
;
=
;
=
;
;
IF
(
)
;
}
VOID
(
)
{
UNSIGNED
,
,
=
{
,
,
,
}
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
IF
(
)
(
,
)
;
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
LONG
,
;
FLOAT
;
INT
;
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
)
;
}
VOID
(
)
{
LONG
;
INT
,
,
;
;
IF
(
(
)
)
{
IF
(
(
)
(
)
)
{
(
,
)
;
RETURN
;
}
}
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
(
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
(
)
;
}
VOID
(
)
{
LONG
;
INT
,
,
,
;
;
IF
(
)
RETURN
;
=
;
IF
(
(
)
)
{
=
(
)
;
=
(
)
;
=
;
IF
(
(
)
)
=
;
ELSE
=
(
)
;
IF
(
(
)
)
{
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
}
RETURN
;
}
=
;
}
IF
(
)
{
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
=
;
}
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
IF
(
)
(
)
;
ELSE
(
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
LONG
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
(
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
LONG
;
INT
,
;
LONG
,
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
=
;
IF
(
)
=
;
;
IF
(
)
{
=
;
IF
(
)
=
;
;
IF
(
)
{
(
,
)
;
RETURN
;
}
}
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
(
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
UNSIGNED
;
=
(
,
,
)
;
IF
(
)
{
=
;
}
=
;
IF
(
(
)
)
=
;
}
VOID
(
)
{
LONG
;
LONG
,
,
;
IF
(
(
)
)
RETURN
;
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
WHILE
(
)
{
IF
(
)
{
(
)
;
IF
(
)
RETURN
;
=
;
}
IF
(
)
{
(
,
)
;
BREAK
;
}
IF
(
)
{
(
,
,
,
,
)
;
(
)
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
(
)
;
IF
(
)
RETURN
;
}
}
VOID
(
)
{
INT
,
,
;
INT
,
;
=
;
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
(
)
;
=
(
)
;
=
;
IF
(
)
=
;
IF
(
)
{
IF
(
)
=
;
ELSE
=
;
}
ELSE
{
IF
(
)
=
;
ELSE
=
;
}
IF
(
(
)
)
{
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
=
(
)
;
(
,
)
;
}
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
CASE
(
,
)
;
BREAK
;
CASE
CASE
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
DEFAULT
(
,
)
;
}
}
VOID
(
)
{
LONG
,
;
INT
,
;
(
,
)
;
=
;
IF
(
)
=
;
;
IF
(
)
{
=
;
IF
(
)
=
;
;
IF
(
)
{
IF
(
(
)
)
{
(
(
)
,
)
;
RETURN
;
}
}
}
RETURN
;
}
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
VOID
(
)
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
EXTERN
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
VOID
(
VOID
)
{
UNSIGNED
,
;
(
,
,
)
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
)
{
LONG
;
=
;
WHILE
(
)
{
IF
(
)
{
(
,
)
;
BREAK
;
}
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
;
(
)
;
IF
(
(
)
)
{
(
,
)
;
RETURN
;
}
}
}
VOID
(
)
{
LONG
;
=
;
(
,
)
;
}
VOID
(
)
{
(
,
)
;
}
VOID
(
)
{
=
;
}
(
)
{
INT
,
,
,
,
,
;
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
}
RETURN
;
}
VOID
(
)
{
LONG
,
;
FLOAT
;
LONG
,
;
LONG
;
INT
,
;
(
)
;
(
)
;
IF
(
)
{
=
;
RETURN
;
}
=
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
)
;
=
;
DO
{
=
(
,
)
;
=
(
,
)
;
=
;
=
;
;
}
WHILE
(
(
)
)
;
=
;
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
{
=
;
(
)
;
}
=
;
=
;
SWITCH
(
)
{
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
}
}
__E__O__F__
;
LONG
;
UNSIGNED
,
;
INT
;
INT
;
;
VOID
(
)
;
VOID
(
)
;
=
{
,
,
,
,
,
}
;
=
{
,
,
,
,
,
}
;
LONG
,
;
STRUCT
{
CHAR
,
,
;
}
=
{
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
}
;
INT
=
{
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
;
VOID
(
INT
)
;
VOID
(
INT
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
(
)
;
VOID
(
)
;
VOID
(
,
LONG
,
LONG
)
;
VOID
(
VOID
)
{
INT
,
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
IF
(
)
{
=
=
;
(
)
;
RETURN
;
}
}
VOID
(
)
{
LONG
,
;
INT
,
;
INT
;
LONG
;
=
;
=
;
=
;
IF
(
)
{
IF
(
)
{
=
;
IF
(
)
;
(
,
)
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
;
(
,
)
;
}
}
ELSE
{
;
=
;
;
;
IF
(
)
;
IF
(
)
;
}
IF
(
)
{
(
,
)
;
}
ELSE
IF
(
)
{
=
;
IF
(
)
;
(
,
)
;
}
IF
(
)
RETURN
;
=
;
=
;
}
VOID
(
UNSIGNED
,
UNSIGNED
,
UNSIGNED
)
{
UNSIGNED
;
=
;
=
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
(
(
)
)
)
;
}
ELSE
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
}
INT
;
VOID
(
VOID
)
{
IF
(
(
)
)
RETURN
;
;
IF
(
(
)
)
{
=
(
(
)
)
;
IF
(
)
=
;
=
;
(
)
;
}
}
VOID
(
INT
,
INT
,
INT
,
LONG
)
{
UNSIGNED
,
;
CHAR
;
(
,
,
)
;
=
(
)
;
WHILE
(
)
{
(
,
,
)
;
;
;
}
=
;
WHILE
(
)
{
(
,
,
)
;
;
;
}
}
VOID
(
VOID
)
{
(
,
,
,
)
;
}
VOID
(
INT
,
)
{
=
;
IF
(
)
RETURN
;
IF
(
)
;
IF
(
)
;
IF
(
)
{
=
;
=
;
=
;
}
(
)
;
=
;
(
)
;
(
)
;
IF
(
)
{
(
,
,
)
;
=
;
}
}
VOID
(
INT
)
{
;
IF
(
)
=
;
(
)
;
=
;
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
,
,
)
;
ELSE
(
,
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
,
)
;
}
VOID
(
LONG
)
{
;
WHILE
(
)
{
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
(
,
,
)
;
}
VOID
(
VOID
)
{
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
VOID
(
INT
)
{
(
)
;
IF
(
)
=
=
=
;
(
)
;
}
VOID
(
VOID
)
{
(
,
,
,
)
;
}
VOID
(
INT
)
{
IF
(
)
{
IF
(
)
{
=
;
(
)
;
}
}
;
IF
(
)
=
;
(
)
;
}
VOID
(
INT
)
{
(
)
;
(
)
;
}
VOID
(
)
{
SWITCH
(
)
{
CASE
IF
(
)
RETURN
;
(
)
;
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
;
BREAK
;
CASE
(
)
;
(
)
;
;
BREAK
;
CASE
(
)
;
(
)
;
;
BREAK
;
CASE
(
)
;
(
)
;
;
BREAK
;
CASE
IF
(
)
RETURN
;
(
)
;
(
)
;
BREAK
;
CASE
IF
(
)
RETURN
;
(
)
;
(
)
;
BREAK
;
CASE
IF
(
)
RETURN
;
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
(
,
,
)
;
=
;
=
;
BREAK
;
CASE
(
)
;
(
)
;
(
)
;
(
)
;
;
BREAK
;
CASE
IF
(
)
RETURN
;
(
)
;
(
)
;
BREAK
;
CASE
IF
(
)
RETURN
;
(
)
;
(
)
;
BREAK
;
CASE
IF
(
)
RETURN
;
(
)
;
(
)
;
BREAK
;
CASE
=
;
=
;
=
;
=
;
=
;
}
(
)
;
=
;
}
(
)
{
INT
,
,
,
,
,
;
;
LONG
,
;
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
RETURN
;
}
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
{
=
;
IF
(
)
CONTINUE
;
=
;
IF
(
)
CONTINUE
;
RETURN
;
}
}
RETURN
;
}
VOID
(
,
LONG
,
LONG
)
{
LONG
,
;
=
;
=
;
=
;
=
;
IF
(
(
)
)
RETURN
;
IF
(
(
(
(
LONG
)
(
)
)
)
(
(
(
LONG
)
(
)
)
)
)
RETURN
;
IF
(
(
)
)
(
)
;
=
;
=
;
IF
(
(
)
)
RETURN
;
=
;
=
;
IF
(
(
)
)
RETURN
;
=
;
=
;
}
VOID
(
VOID
)
{
(
)
;
=
;
}
VOID
(
INT
,
LONG
)
{
LONG
,
;
LONG
;
UNSIGNED
;
IF
(
)
=
;
;
IF
(
)
=
;
=
(
,
)
;
=
(
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
(
)
;
IF
(
(
)
)
(
)
;
}
VOID
(
VOID
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
VOID
)
{
;
INT
,
,
,
;
;
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
IF
(
)
{
=
;
=
;
=
;
=
;
}
ELSE
{
=
;
=
;
=
;
=
;
}
=
;
IF
(
(
)
)
{
(
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
;
IF
(
(
)
)
=
;
ELSE
=
;
(
)
;
(
)
;
}
ELSE
IF
(
)
{
=
;
(
)
;
}
ELSE
(
)
;
}
VOID
(
INT
,
INT
,
INT
)
{
=
;
=
;
=
;
=
;
=
(
)
;
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
=
;
=
(
)
;
IF
(
)
;
=
;
(
,
)
;
(
)
;
}
VOID
(
)
{
,
;
LONG
;
(
)
;
=
;
=
;
FOR
(
=
;
;
=
)
IF
(
(
)
(
)
(
)
)
{
IF
(
)
{
=
;
=
;
}
}
IF
(
)
{
RETURN
;
}
(
,
(
)
)
;
}
VOID
(
)
{
,
,
;
INT
;
INT
,
,
;
LONG
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
=
;
=
;
=
;
WHILE
(
)
{
=
;
FOR
(
=
;
;
=
)
IF
(
(
)
(
)
(
)
)
{
IF
(
)
{
=
;
=
;
}
}
IF
(
)
RETURN
;
IF
(
(
)
)
BREAK
;
}
=
(
)
;
=
(
)
;
=
;
IF
(
)
=
(
)
;
ELSE
IF
(
)
=
(
)
;
ELSE
{
IF
(
(
(
)
)
)
RETURN
;
=
(
)
;
}
(
,
)
;
}
VOID
(
VOID
)
{
LONG
;
IF
(
)
{
;
IF
(
)
=
;
}
ELSE
IF
(
)
{
;
IF
(
)
=
;
}
=
(
(
(
LONG
)
)
)
;
IF
(
)
{
;
IF
(
)
=
;
}
}
VOID
(
)
{
STRUCT
;
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
=
;
IF
(
)
=
;
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
;
WHILE
(
)
{
=
;
SWITCH
(
)
{
CASE
=
;
IF
(
)
{
=
;
(
)
;
}
ELSE
{
IF
(
)
{
=
;
(
)
;
}
}
;
=
=
;
RETURN
;
CASE
IF
(
)
BREAK
;
IF
(
)
;
CASE
IF
(
)
{
;
BREAK
;
}
(
)
;
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
}
;
;
=
;
}
}
VOID
(
)
{
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
RETURN
;
=
;
=
;
=
;
=
;
}
__E__O__F__
(
)
(
)
INT
(
VOID
)
;
INT
;
INT
;
ENUM
{
,
,
,
}
;
VOID
(
VOID
)
;
VOID
(
VOID
)
{
INT
;
CHAR
,
;
LONG
;
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
(
)
)
;
(
)
;
(
(
)
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
;
;
(
,
)
;
=
=
=
=
;
(
)
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
)
IF
(
)
;
ELSE
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
=
)
{
IF
(
)
;
ELSE
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
;
UNSIGNED
;
,
;
;
(
)
;
(
)
;
=
;
WHILE
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
FOR
(
=
;
;
)
{
=
(
,
)
;
=
(
)
;
(
)
;
FOR
(
=
;
;
,
)
=
;
}
FOR
(
=
;
;
)
{
=
(
,
)
;
=
(
)
;
(
)
;
FOR
(
=
;
;
,
)
=
;
}
,
INT
=
(
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
EXTERN
;
EXTERN
;
STATIC
CHAR
;
;
;
INT
,
,
,
;
;
;
;
(
,
)
;
(
)
;
FOR
(
=
,
=
;
;
)
{
(
)
;
=
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
(
)
;
(
)
;
}
ELSE
(
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
(
,
,
(
)
)
;
(
)
;
IF
(
)
{
IF
(
)
{
;
=
;
=
;
=
(
(
LONG
)
(
(
UNSIGNED
)
)
)
;
FOR
(
=
;
;
,
,
)
{
=
;
(
)
;
}
;
}
ELSE
IF
(
)
{
;
(
,
,
)
;
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
FOR
(
=
=
=
;
;
)
{
(
)
;
(
(
)
(
)
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
}
ELSE
{
=
(
)
(
,
)
;
FOR
(
=
;
;
)
{
=
(
(
)
(
)
)
;
IF
(
(
)
(
)
)
BREAK
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
FOR
(
=
;
;
)
{
=
;
INT
=
(
UNSIGNED
)
;
;
;
IF
(
)
(
,
,
(
)
,
)
;
ELSE
(
,
,
(
)
,
)
;
}
}
}
(
)
;
WHILE
(
(
=
)
)
(
)
;
(
)
;
SWITCH
(
)
{
CASE
IF
(
)
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
FOR
(
=
;
;
)
(
)
;
BREAK
;
CASE
BREAK
;
CASE
=
;
BREAK
;
CASE
(
)
;
BREAK
;
}
}
(
)
;
}
INT
(
VOID
)
{
;
INT
,
;
IF
(
)
{
(
,
)
;
;
(
)
;
(
)
;
=
(
,
,
,
,
,
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
(
)
;
}
RETURN
;
}
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
IF
(
)
(
)
;
=
;
}
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
;
RETURN
;
}
IF
(
)
{
(
)
;
(
,
)
;
}
ELSE
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
;
IF
(
)
=
;
(
)
;
(
)
;
RETURN
;
}
ELSE
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
)
{
;
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
RETURN
;
}
ELSE
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
)
(
)
;
ELSE
IF
(
)
{
;
(
,
)
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
RETURN
;
}
ELSE
IF
(
)
{
(
)
;
RETURN
;
}
ELSE
IF
(
)
{
(
,
)
;
;
(
)
;
(
)
;
=
(
,
,
,
,
,
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
=
;
}
RETURN
;
}
ELSE
IF
(
)
{
(
,
)
;
;
(
)
;
(
)
;
(
)
;
=
(
,
,
,
,
,
,
)
;
IF
(
)
{
=
(
)
;
IF
(
)
IF
(
)
{
=
;
=
;
}
}
RETURN
;
}
ELSE
IF
(
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
UNSIGNED
,
,
,
,
,
;
UNSIGNED
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
SWITCH
(
)
{
CASE
=
(
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
UNSIGNED
)
;
BREAK
;
}
IF
(
)
(
,
,
)
;
ELSE
{
(
,
,
(
(
)
)
)
;
(
,
,
(
(
)
)
)
;
(
,
,
(
(
)
)
)
;
(
,
,
(
)
)
;
}
}
}
VOID
(
VOID
)
{
;
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
IF
(
)
=
;
IF
(
)
=
;
DO
{
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
{
=
;
;
IF
(
)
=
;
}
IF
(
)
=
;
(
)
;
}
WHILE
(
)
;
(
)
;
}
__E__O__F__
(
)
UNSIGNED
=
{
,
,
}
;
UNSIGNED
=
{
,
,
}
;
UNSIGNED
=
;
LONG
;
LONG
;
UNSIGNED
;
=
;
=
;
INT
;
LONG
;
,
=
(
)
;
,
;
INT
;
,
;
(
,
)
;
VOID
(
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
INT
(
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
INT
;
LONG
;
INT
;
INT
,
,
,
;
INT
,
;
UNSIGNED
,
;
UNSIGNED
,
,
,
;
UNSIGNED
,
;
UNSIGNED
;
UNSIGNED
;
INT
,
;
INT
,
;
LONG
,
;
LONG
,
;
INT
,
;
VOID
(
VOID
)
;
(
,
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
;
}
VOID
(
)
{
INT
;
,
,
,
,
,
;
LONG
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
,
,
,
,
=
;
}
(
INT
,
INT
,
INT
,
INT
)
{
INT
;
,
,
,
,
,
;
LONG
;
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
=
(
,
)
;
=
(
,
)
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
IF
(
)
{
=
;
RETURN
;
}
=
;
,
,
,
,
=
;
IF
(
)
RETURN
;
ELSE
RETURN
;
}
INT
(
VOID
)
{
INT
;
INT
;
,
,
,
;
LONG
,
;
=
;
=
(
,
)
;
=
;
=
(
,
)
;
=
;
IF
(
)
=
;
,
,
}
LONG
;
UNSIGNED
;
UNSIGNED
;
VOID
(
VOID
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
INT
;
UNSIGNED
;
=
(
)
;
IF
(
)
{
=
;
;
}
=
(
)
;
IF
(
)
{
IF
(
(
UNSIGNED
)
)
{
;
=
;
RETURN
;
}
ELSE
{
(
)
;
(
UNSIGNED
)
=
;
=
;
=
;
}
}
ELSE
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
(
)
;
(
UNSIGNED
)
=
;
}
}
VOID
(
VOID
)
{
INT
;
UNSIGNED
;
=
(
)
;
IF
(
)
;
ELSE
=
;
=
(
)
;
IF
(
)
{
IF
(
(
UNSIGNED
)
)
{
;
=
;
RETURN
;
}
ELSE
{
(
)
;
(
UNSIGNED
)
=
;
=
;
=
;
}
}
ELSE
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
{
=
;
IF
(
)
=
;
ELSE
=
;
}
ELSE
=
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
(
)
;
(
UNSIGNED
)
=
;
}
}
VOID
(
VOID
)
{
UNSIGNED
,
,
;
=
;
=
(
(
)
)
;
=
(
)
;
IF
(
)
{
IF
(
(
UNSIGNED
)
)
{
;
=
;
RETURN
;
}
ELSE
{
(
)
;
(
UNSIGNED
)
=
;
=
;
=
;
}
}
ELSE
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
(
)
;
(
UNSIGNED
)
=
;
}
}
VOID
(
VOID
)
{
UNSIGNED
,
,
;
=
;
=
(
(
)
)
;
=
(
)
;
IF
(
)
{
IF
(
(
UNSIGNED
)
)
{
;
=
;
RETURN
;
}
ELSE
{
(
)
;
(
UNSIGNED
)
=
;
=
;
=
;
}
}
ELSE
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
CASE
CASE
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
(
)
;
(
UNSIGNED
)
=
;
}
}
VOID
(
VOID
)
{
INT
;
UNSIGNED
,
;
=
(
)
;
=
;
IF
(
)
;
ELSE
{
=
;
;
}
=
(
)
;
IF
(
)
{
IF
(
(
UNSIGNED
)
)
{
;
=
;
RETURN
;
}
ELSE
{
(
)
;
(
UNSIGNED
)
=
;
=
;
=
;
}
}
ELSE
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
(
)
;
(
UNSIGNED
)
=
;
}
}
VOID
(
VOID
)
{
INT
;
UNSIGNED
,
;
=
(
)
;
=
;
IF
(
)
{
;
=
;
}
ELSE
;
=
(
)
;
IF
(
)
{
IF
(
(
UNSIGNED
)
)
{
;
=
;
RETURN
;
}
ELSE
{
(
)
;
(
UNSIGNED
)
=
;
=
;
=
;
}
}
ELSE
{
IF
(
)
(
)
;
=
;
=
;
=
;
=
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
(
)
;
(
UNSIGNED
)
=
;
}
}
VOID
(
VOID
)
{
UNSIGNED
=
,
=
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
UNSIGNED
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
UNSIGNED
=
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
INT
(
)
{
INT
,
;
=
(
)
;
IF
(
)
=
(
)
;
ELSE
=
(
)
;
;
WHILE
(
)
;
WHILE
(
)
;
IF
(
)
RETURN
(
(
)
)
;
RETURN
(
)
;
}
TYPEDEF
STRUCT
{
INT
,
,
;
}
;
,
,
,
;
VOID
(
VOID
)
{
INT
,
,
,
,
;
;
,
;
INT
;
UNSIGNED
;
;
;
=
;
FOR
(
=
;
;
)
{
IF
(
(
=
)
)
CONTINUE
;
IF
(
)
CONTINUE
;
IF
(
(
,
,
,
)
)
{
(
)
;
CONTINUE
;
}
IF
(
)
CONTINUE
;
IF
(
)
;
}
FOR
(
=
;
;
=
)
{
IF
(
(
=
)
)
CONTINUE
;
=
(
)
;
=
;
=
;
IF
(
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
(
(
)
(
)
)
)
{
=
;
(
)
;
IF
(
)
CONTINUE
;
=
;
=
;
IF
(
)
=
;
IF
(
)
(
)
;
IF
(
)
;
;
}
ELSE
;
}
=
;
IF
(
)
RETURN
;
FOR
(
=
;
;
)
{
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
=
;
}
}
(
,
,
)
;
=
;
}
}
INT
=
{
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
IF
(
)
{
IF
(
(
)
)
(
,
,
)
;
RETURN
;
}
IF
(
)
{
=
;
(
,
,
)
;
}
IF
(
)
(
,
,
)
;
}
VOID
(
VOID
)
{
LONG
,
;
IF
(
)
=
;
DO
{
=
;
=
;
}
WHILE
(
)
;
=
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
(
,
,
(
)
)
;
IF
(
)
{
(
)
;
=
;
}
}
VOID
(
VOID
)
{
(
,
,
,
)
;
}
VOID
(
VOID
)
{
=
;
=
(
)
;
=
;
=
;
=
(
,
)
;
=
(
,
)
;
=
;
=
;
=
;
=
;
=
(
)
;
=
;
=
(
)
;
=
;
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
(
,
)
;
,
,
,
,
,
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
,
,
,
,
,
)
;
=
;
=
=
;
}
;
=
;
,
,
,
,
,
,
;
IF
(
)
=
;
;
(
)
;
}
__E__O__F__
,
;
UNSIGNED
;
;
LONG
,
;
UNSIGNED
;
;
INT
=
{
,
,
,
,
,
}
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
,
;
INT
,
;
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
=
{
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
}
;
VOID
(
,
)
{
,
;
INT
,
;
;
;
=
(
,
)
;
=
(
,
)
;
=
(
)
;
=
(
,
)
;
=
(
,
)
;
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
,
,
)
{
(
,
)
;
(
,
)
;
IF
(
(
)
)
{
=
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
(
,
)
;
(
,
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
UNSIGNED
,
,
,
;
INT
;
UNSIGNED
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
CONTINUE
;
SWITCH
(
)
{
CASE
CASE
CASE
CASE
(
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
(
,
,
)
;
BREAK
;
CASE
IF
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
(
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
IF
(
)
BREAK
;
;
CASE
CASE
CASE
CASE
(
,
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
}
}
}
VOID
(
VOID
)
{
INT
,
,
;
UNSIGNED
,
,
;
IF
(
)
{
=
=
=
=
=
=
=
;
}
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
;
=
;
=
;
IF
(
)
(
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
(
UNSIGNED
)
=
;
}
ELSE
{
=
;
(
UNSIGNED
)
=
;
}
}
(
)
;
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
CASE
CASE
CASE
CASE
CASE
(
,
,
,
(
)
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
(
,
,
,
(
)
)
;
BREAK
;
}
}
}
(
)
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
=
;
IF
(
(
UNSIGNED
)
)
=
;
IF
(
)
=
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
IF
(
(
)
)
=
(
)
;
(
)
=
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
=
;
=
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
UNSIGNED
,
;
=
;
FOR
(
=
;
;
)
{
=
;
(
)
;
}
=
;
}
VOID
(
VOID
)
{
UNSIGNED
,
;
=
;
FOR
(
=
;
;
)
{
=
;
(
)
;
}
=
;
}
VOID
(
VOID
)
{
INT
,
;
(
,
,
,
,
)
;
=
;
=
(
)
;
(
,
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
;
UNSIGNED
;
(
)
;
=
;
(
)
;
FOR
(
=
;
;
)
{
=
;
(
)
;
(
,
,
)
;
}
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
(
,
)
;
(
,
)
;
=
(
CHAR
)
;
=
;
=
;
;
=
;
}
CHAR
=
;
VOID
(
VOID
)
{
LONG
,
;
=
;
=
(
CHAR
)
;
=
(
(
CHAR
)
)
;
(
UNSIGNED
)
=
;
(
,
)
;
;
(
)
;
(
)
;
IF
(
(
,
,
,
,
,
,
)
)
{
=
(
)
;
IF
(
)
{
=
;
(
,
(
VOID
)
,
)
;
}
}
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
(
,
)
;
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
=
(
,
,
,
,
,
,
)
;
IF
(
)
RETURN
;
=
(
)
;
;
(
,
)
;
(
)
;
(
,
)
;
=
;
(
,
)
;
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
INT
;
INT
=
{
,
,
,
}
;
INT
=
{
}
;
(
)
;
=
;
(
,
)
;
=
;
(
,
)
;
(
,
)
;
=
(
CHAR
)
;
(
,
)
;
=
;
=
;
=
(
(
UNSIGNED
)
)
;
;
=
;
(
)
;
(
,
)
;
(
)
;
(
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
FLOAT
;
LONG
,
;
INT
,
,
,
,
;
=
;
(
)
;
=
;
=
;
=
(
,
)
;
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
IF
(
)
{
IF
(
)
;
DO
{
=
;
IF
(
)
=
;
;
;
IF
(
)
;
(
)
;
(
)
;
}
WHILE
(
)
;
}
ELSE
{
IF
(
)
;
DO
{
=
;
IF
(
)
=
;
;
;
IF
(
)
;
(
)
;
(
)
;
}
WHILE
(
)
;
}
(
)
;
;
(
,
,
,
,
)
;
(
)
;
(
,
,
,
,
,
)
;
;
(
)
;
(
)
;
IF
(
)
;
IF
(
)
{
=
;
=
=
=
;
=
;
=
;
=
=
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
,
,
;
CHAR
;
;
,
;
(
)
;
(
,
)
;
(
)
;
=
;
DO
{
IF
(
)
=
;
(
)
;
=
;
IF
(
)
=
;
ELSE
(
)
;
IF
(
)
{
;
(
)
;
}
=
;
(
)
;
(
)
;
IF
(
)
(
)
;
ELSE
=
;
=
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
IF
(
)
{
LONG
=
;
WHILE
(
)
(
)
;
}
ELSE
(
)
;
(
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
(
,
)
;
GOTO
;
}
(
)
;
=
;
IF
(
)
(
)
;
IF
(
)
GOTO
;
SWITCH
(
)
{
CASE
CASE
=
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
;
RETURN
;
}
IF
(
)
{
=
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
;
RETURN
;
}
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
ELSE
IF
(
)
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
ELSE
;
BREAK
;
CASE
(
)
;
=
;
IF
(
)
BREAK
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
;
RETURN
;
CASE
(
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
=
;
RETURN
;
DEFAULT
(
)
;
BREAK
;
}
}
WHILE
(
)
;
}
__E__O__F__
VOID
(
VOID
)
{
(
,
,
(
)
)
;
=
;
=
;
=
;
=
;
}
VOID
(
INT
,
INT
)
{
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
WHILE
(
(
)
)
;
=
;
=
;
(
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
WHILE
(
(
)
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
}
VOID
(
VOID
)
{
LONG
;
INT
,
,
,
,
,
;
CHAR
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
,
,
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
=
=
=
=
;
;
)
FOR
(
=
=
=
=
=
;
;
)
{
;
;
;
;
}
;
;
;
;
;
;
=
;
;
IF
(
)
=
=
;
=
;
(
,
,
(
)
)
;
;
(
,
,
(
)
)
;
;
(
,
,
)
;
;
(
,
,
(
)
)
;
;
(
,
,
(
)
)
;
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
IF
(
)
{
(
,
,
)
;
=
;
=
;
=
;
=
;
;
=
(
(
(
)
(
)
)
)
;
=
(
(
(
)
(
)
)
)
;
=
(
)
;
=
;
(
)
;
}
=
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
,
,
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
,
INT
,
CHAR
)
{
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
INT
,
,
,
;
CHAR
;
=
=
;
=
;
FOR
(
=
;
(
)
;
)
IF
(
)
{
=
;
;
}
ELSE
{
=
;
IF
(
)
(
)
;
;
SWITCH
(
)
{
CASE
(
,
,
)
;
;
CONTINUE
;
CASE
(
,
,
)
;
;
CONTINUE
;
CASE
BREAK
;
CASE
(
,
,
)
;
;
CONTINUE
;
CASE
(
,
,
)
;
BREAK
;
DEFAULT
(
,
,
)
;
}
;
}
}
VOID
(
VOID
)
{
STATIC
INT
=
,
=
;
INT
=
{
,
}
;
IF
(
)
{
;
(
,
,
)
;
(
)
;
=
;
=
;
}
}
;
;
VOID
(
VOID
)
{
TYPEDEF
STRUCT
{
FLOAT
;
CHAR
;
}
;
INT
,
,
,
,
,
,
,
;
UNSIGNED
;
CHAR
;
LONG
,
=
;
=
{
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
{
,
}
,
}
;
(
,
)
;
(
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
IF
(
)
IF
(
)
{
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
(
,
,
)
)
;
(
,
,
)
;
(
,
,
)
;
=
;
IF
(
)
=
;
IF
(
)
=
(
)
;
=
;
;
=
;
=
;
(
,
,
(
)
)
;
;
(
,
,
(
)
)
;
;
(
,
,
)
;
;
(
,
,
(
)
)
;
;
(
,
,
(
)
)
;
(
)
;
(
)
;
=
=
=
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
IF
(
)
=
(
)
;
=
;
IF
(
)
{
FOR
(
=
;
;
)
{
(
(
LONG
)
,
,
)
;
=
(
)
;
(
,
,
)
;
IF
(
(
(
)
)
)
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
IF
(
(
)
)
GOTO
;
}
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
}
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
;
(
,
,
)
;
IF
(
(
)
)
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
IF
(
(
)
)
GOTO
;
}
IF
(
)
{
(
)
;
(
)
;
;
(
,
,
)
;
=
(
)
(
)
;
(
,
,
)
;
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
ELSE
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
;
(
,
,
)
;
IF
(
(
)
)
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
(
)
;
IF
(
(
)
)
GOTO
;
}
IF
(
)
{
(
)
;
(
)
;
;
(
,
,
)
;
=
(
)
(
)
;
(
,
,
)
;
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
ELSE
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
=
;
FOR
(
=
;
;
)
{
(
,
,
)
;
=
(
)
;
(
,
,
)
;
IF
(
(
)
)
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
IF
(
(
)
)
GOTO
;
}
IF
(
)
{
(
)
;
(
)
;
;
(
,
,
)
;
=
(
)
(
)
;
(
,
,
)
;
(
)
;
(
)
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
ELSE
(
)
;
(
)
;
WHILE
(
(
)
)
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
(
LONG
)
(
(
)
)
(
(
)
)
(
(
)
)
;
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
}
ELSE
{
SWITCH
(
)
{
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
CASE
(
,
,
)
;
BREAK
;
}
(
,
,
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
}
(
)
;
(
)
;
=
;
(
)
;
WHILE
(
(
)
)
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
IF
(
(
)
)
(
)
;
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
(
)
;
}
=
;
(
,
)
;
}
(
UNSIGNED
,
UNSIGNED
)
{
UNSIGNED
=
;
(
,
,
,
,
)
;
=
(
(
LONG
)
)
;
IF
(
)
{
(
,
,
,
,
)
;
(
,
,
,
,
)
;
}
(
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
,
,
)
;
(
,
,
)
;
=
;
=
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
CHAR
,
,
;
,
,
,
;
,
,
,
,
,
;
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
=
;
(
,
)
;
(
,
)
;
FOR
(
=
,
=
;
;
,
)
{
=
(
)
;
=
;
=
;
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
;
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
)
;
(
,
,
)
;
FOR
(
=
;
;
)
=
(
)
;
(
,
,
)
;
=
(
)
;
(
,
,
)
;
=
;
(
)
;
IF
(
)
{
=
(
(
(
)
)
(
(
)
)
)
;
=
(
(
(
)
)
(
(
)
)
)
;
=
(
(
(
)
)
(
(
)
)
)
;
=
(
(
(
)
)
(
(
)
)
)
;
(
,
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
)
;
(
,
)
;
}
}
(
)
;
(
,
)
;
=
;
}
VOID
(
LONG
,
)
{
,
;
INT
;
;
(
,
)
;
=
;
=
;
=
;
FOR
(
=
,
=
;
;
)
{
IF
(
(
)
(
(
)
(
)
)
)
{
FOR
(
=
;
;
)
=
;
=
;
=
;
BREAK
;
}
}
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
=
(
)
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
=
;
=
;
(
,
,
,
,
)
;
(
)
;
=
;
=
;
(
,
,
,
,
,
,
)
;
}
ELSE
{
(
)
;
(
)
;
}
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
,
)
;
=
;
=
;
(
)
;
(
)
;
(
,
)
;
=
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
CHAR
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
}
;
INT
(
CHAR
)
{
INT
;
(
)
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
(
,
)
;
=
;
=
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
VOID
)
{
INT
,
,
,
,
,
,
=
{
,
,
,
}
,
=
{
,
,
,
}
,
,
=
{
,
,
,
}
,
,
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
,
;
CHAR
,
;
ENUM
{
,
,
,
,
}
;
=
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
WHILE
(
)
{
=
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
=
=
;
=
;
=
;
=
;
=
(
)
;
SWITCH
(
)
{
CASE
=
;
(
)
;
(
,
)
;
WHILE
(
=
(
)
)
;
=
;
=
;
(
,
,
)
;
=
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
=
;
FOR
(
=
;
(
)
;
)
IF
(
(
,
,
(
)
)
(
)
)
=
;
(
)
;
BREAK
;
CASE
WHILE
(
=
(
)
)
;
=
;
(
)
;
(
,
)
;
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
=
(
(
,
)
)
;
(
)
;
BREAK
;
CASE
WHILE
(
=
(
)
)
;
=
;
(
)
;
(
,
)
;
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
=
;
FOR
(
=
;
(
)
;
)
IF
(
(
,
,
(
)
)
(
)
)
=
;
(
)
;
BREAK
;
CASE
WHILE
(
=
(
)
)
;
=
;
(
)
;
(
,
)
;
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
=
;
=
;
=
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
=
(
(
,
)
)
;
(
)
;
BREAK
;
}
IF
(
)
{
=
(
(
)
)
;
(
,
)
;
=
;
=
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
;
}
ELSE
{
INT
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
SWITCH
(
)
{
CASE
RETURN
;
CASE
=
;
BREAK
;
CASE
=
;
}
FOR
(
=
;
;
,
)
(
(
)
)
;
RETURN
;
}
}
(
)
;
(
)
;
(
,
(
)
)
;
=
;
(
)
;
(
,
)
;
(
)
;
}
__E__O__F__
(
)
CHAR
,
;
INT
;
;
;
;
INT
=
{
,
,
,
,
,
,
,
,
}
;
;
UNSIGNED
;
INT
;
INT
;
INT
;
INT
;
,
;
LONG
;
INT
;
VOID
(
CHAR
)
;
,
,
;
INT
;
CHAR
=
;
VOID
(
VOID
)
{
INT
;
;
;
;
IF
(
(
=
(
,
)
)
)
{
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
)
;
IF
(
)
{
=
;
=
;
}
IF
(
(
)
(
)
)
=
;
IF
(
)
=
;
IF
(
)
=
;
=
;
=
;
}
ELSE
{
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
=
(
,
,
)
;
IF
(
)
{
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
(
)
;
}
}
CHAR
=
{
,
}
;
VOID
(
VOID
)
{
EXTERN
VOID
(
VOID
)
;
EXTERN
INT
(
VOID
)
;
INT
;
FOR
(
=
;
;
)
IF
(
(
,
)
)
{
=
;
RETURN
;
}
IF
(
(
)
)
{
=
;
(
)
;
}
ELSE
=
;
}
VOID
(
INT
,
INT
)
{
(
,
,
(
)
)
;
=
;
=
=
=
;
=
;
=
;
=
;
=
;
=
;
=
;
}
VOID
(
INT
,
INT
)
{
STATIC
CHAR
=
;
IF
(
)
RETURN
;
(
,
,
)
;
(
)
;
;
}
LONG
(
,
UNSIGNED
,
LONG
)
{
UNSIGNED
;
FOR
(
=
;
;
)
;
RETURN
;
}
(
INT
,
INT
,
INT
)
{
STRUCT
;
LONG
,
,
;
,
;
IF
(
(
,
)
)
(
)
;
=
(
LONG
)
;
=
;
FOR
(
=
;
;
=
)
(
)
;
(
)
;
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
=
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
(
,
(
VOID
)
,
(
)
)
;
FOR
(
=
;
;
=
)
{
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
}
=
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
RETURN
(
)
;
}
(
INT
,
INT
,
INT
)
{
LONG
,
;
,
;
=
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
(
,
(
VOID
)
,
(
)
)
;
(
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
WHILE
(
)
{
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
IF
(
)
BREAK
;
(
)
;
(
,
,
(
)
)
;
}
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
=
(
(
)
,
(
)
,
)
;
(
,
(
VOID
)
,
(
)
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
=
;
=
;
=
=
=
;
=
;
}
RETURN
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
CONST
FLOAT
=
(
FLOAT
)
;
VOID
(
VOID
)
{
INT
;
FLOAT
,
;
DOUBLE
;
;
FOR
(
=
;
;
)
{
=
(
(
)
)
;
=
;
=
;
}
=
;
=
;
FOR
(
=
;
;
)
{
=
(
)
;
=
=
=
;
=
=
;
;
}
}
VOID
(
LONG
)
{
INT
;
LONG
;
FLOAT
;
DOUBLE
;
DOUBLE
;
DOUBLE
;
INT
;
DOUBLE
,
;
=
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
(
LONG
)
;
=
(
)
;
=
;
=
;
=
;
}
=
;
;
}
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
(
)
;
=
(
)
;
}
}
VOID
(
VOID
)
{
UNSIGNED
,
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
}
=
(
)
;
=
;
IF
(
(
)
)
{
;
;
}
(
,
)
;
}
VOID
(
VOID
)
{
(
,
,
,
,
(
,
)
)
;
=
;
=
;
=
;
(
,
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
,
,
,
,
(
,
)
)
;
=
;
(
,
)
;
(
)
;
(
)
;
(
,
)
;
IF
(
)
(
)
;
}
(
CHAR
)
{
INT
;
CHAR
;
FOR
(
=
;
;
)
{
=
;
WHILE
(
(
)
)
IF
(
)
BREAK
;
IF
(
(
,
)
)
RETURN
;
}
RETURN
;
}
STATIC
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
=
;
}
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
VOID
(
VOID
)
{
INT
,
=
;
UNSIGNED
,
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
STRUCT
;
(
)
;
IF
(
)
RETURN
;
(
)
;
(
)
;
=
(
)
;
=
;
=
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
=
;
(
)
;
(
,
,
)
;
(
)
;
(
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
=
;
(
)
;
(
,
)
;
(
)
;
(
)
;
DO
{
=
(
,
,
)
;
IF
(
)
{
IF
(
)
=
;
(
)
;
=
;
(
,
)
;
(
)
;
=
;
}
}
WHILE
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
UNSIGNED
;
IF
(
(
)
)
=
;
ELSE
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
IF
(
(
)
)
{
;
(
)
;
=
;
(
)
;
(
(
UNSIGNED
)
,
,
,
,
)
;
(
,
)
;
(
)
;
}
(
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
FOR
(
=
;
;
)
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
=
;
=
;
=
;
=
;
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
{
INT
,
;
=
;
=
(
,
)
;
FOR
(
=
;
;
)
(
)
;
=
;
(
)
;
}
(
)
;
(
)
;
IF
(
)
(
)
;
=
;
=
;
IF
(
)
{
=
;
(
)
;
}
}
(
UNSIGNED
,
UNSIGNED
)
{
=
;
=
;
=
;
=
;
=
(
(
)
(
)
)
;
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
RETURN
;
}
RETURN
;
}
VOID
(
INT
)
{
INT
,
;
=
;
=
;
=
;
=
;
(
)
;
=
;
=
;
}
VOID
(
INT
)
{
(
)
;
(
)
;
=
;
(
,
)
;
(
)
;
}
VOID
(
CHAR
)
{
UNSIGNED
;
;
IF
(
)
(
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
(
)
;
}
ELSE
{
(
)
;
=
;
}
(
)
;
IF
(
)
{
(
(
UNSIGNED
)
,
,
,
,
)
;
(
,
)
;
(
)
;
(
,
)
;
(
)
;
}
ELSE
IF
(
(
)
)
{
(
)
;
(
(
UNSIGNED
)
,
,
,
,
)
;
(
,
)
;
}
(
)
;
}
STATIC
CHAR
=
{
,
,
,
,
}
;
VOID
(
VOID
)
{
STATIC
INT
;
INT
,
;
LONG
;
;
IF
(
)
{
=
;
(
,
)
;
FOR
(
=
;
;
)
{
IF
(
(
=
(
,
)
)
)
{
=
;
BREAK
;
}
}
=
;
=
;
=
;
=
;
(
)
;
(
)
;
}
IF
(
)
(
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
WHILE
(
)
{
WHILE
(
)
{
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
BREAK
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
BREAK
;
(
)
;
(
)
;
(
)
;
(
)
;
IF
(
(
)
)
BREAK
;
(
)
;
(
)
;
IF
(
)
BREAK
;
(
)
;
}
(
)
;
IF
(
(
)
)
IF
(
(
)
)
(
)
;
ELSE
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
}
}
CHAR
=
{
,
}
;
VOID
(
VOID
)
{
INT
;
STRUCT
;
(
)
;
IF
(
(
)
)
{
(
)
;
(
)
;
}
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
VOID
(
VOID
)
;
CHAR
=
{
{
}
,
{
}
,
{
}
,
{
}
,
{
}
,
{
}
,
{
}
,
{
}
,
{
}
,
,
,
,
,
,
,
,
}
;
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
,
=
{
,
,
,
,
}
;
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
,
=
{
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
,
{
,
,
}
}
;
INT
=
{
,
,
,
}
,
=
{
,
,
,
}
;
INT
=
{
}
;
INT
,
,
=
,
;
CHAR
,
=
;
STATIC
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
)
{
INT
,
,
;
IF
(
)
IF
(
(
)
)
RETURN
;
(
)
;
(
)
;
SWITCH
(
)
{
CASE
(
)
;
(
)
;
(
)
;
GOTO
;
CASE
(
)
;
GOTO
;
CASE
(
)
;
GOTO
;
CASE
(
)
;
GOTO
;
CASE
(
)
;
GOTO
;
CASE
(
)
;
GOTO
;
(
)
;
(
,
)
;
RETURN
;
}
(
,
)
;
(
)
;
(
)
;
=
;
DO
{
=
(
,
,
)
;
IF
(
)
{
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
WHILE
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
SWITCH
(
)
{
CASE
IF
(
)
IF
(
(
)
)
=
;
(
)
;
(
)
;
BREAK
;
CASE
IF
(
)
{
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
IF
(
)
FOR
(
=
;
;
,
)
IF
(
)
(
(
)
,
)
;
}
(
)
;
=
;
IF
(
)
(
)
;
(
,
,
,
,
,
)
;
BREAK
;
CASE
CASE
(
)
;
BREAK
;
DEFAULT
IF
(
)
{
(
)
;
(
)
;
}
}
}
WHILE
(
)
;
(
)
;
IF
(
)
{
=
;
(
,
)
;
}
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
=
;
}
ELSE
{
(
,
)
;
(
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
,
,
)
;
(
)
;
=
;
}
(
,
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
=
;
(
)
;
(
)
;
WHILE
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
INT
(
UNSIGNED
)
{
SWITCH
(
)
{
CASE
(
)
;
=
;
IF
(
(
,
,
)
)
IF
(
(
)
)
{
=
;
=
=
;
}
(
)
;
=
;
=
;
=
;
RETURN
;
CASE
IF
(
)
{
(
)
;
=
;
(
)
;
(
)
;
=
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
=
(
)
;
(
,
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
=
;
=
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
RETURN
;
CASE
IF
(
)
{
CHAR
=
;
(
)
;
=
;
(
,
)
;
(
,
)
;
IF
(
(
)
)
(
)
;
(
)
;
=
;
}
ELSE
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
=
(
)
;
(
,
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
=
;
=
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
}
RETURN
;
CASE
(
)
;
=
=
;
=
;
=
;
IF
(
(
,
,
)
)
IF
(
(
)
)
IF
(
(
(
)
(
(
)
)
)
)
{
INT
;
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
}
(
)
;
=
;
=
;
RETURN
;
}
RETURN
;
}
INT
(
VOID
)
{
IF
(
(
,
,
)
)
IF
(
(
)
)
RETURN
;
=
=
;
=
;
=
;
=
;
(
,
)
;
RETURN
;
}
VOID
(
VOID
)
{
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
(
,
)
;
(
)
;
DO
{
=
(
,
,
)
;
SWITCH
(
)
{
CASE
(
)
;
RETURN
;
DEFAULT
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
BREAK
;
}
}
WHILE
(
)
;
(
)
;
IF
(
)
IF
(
(
,
,
)
)
IF
(
(
)
)
{
(
)
;
RETURN
;
}
(
)
;
=
;
(
,
)
;
(
)
;
IF
(
)
IF
(
(
)
)
{
(
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
(
)
;
=
(
,
,
)
;
IF
(
)
{
(
)
;
GOTO
;
(
,
)
;
(
,
)
;
RETURN
;
}
(
)
;
(
,
)
;
=
;
(
)
;
=
;
=
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
=
;
=
;
(
)
;
(
)
;
(
,
)
;
(
,
)
;
FOR
(
=
;
;
)
(
,
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
)
;
(
,
)
;
=
;
=
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
DO
{
=
(
,
,
)
;
SWITCH
(
)
{
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
}
BREAK
;
}
}
WHILE
(
)
;
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
INT
,
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
IF
(
)
{
=
=
=
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
(
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
IF
(
)
IF
(
)
{
=
;
SWITCH
(
)
{
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
CASE
IF
(
)
=
;
BREAK
;
}
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
}
(
)
;
(
)
;
}
VOID
(
INT
)
{
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
)
;
=
;
(
,
)
;
=
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
}
INT
(
INT
)
{
INT
,
,
=
;
CHAR
;
(
,
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
=
(
,
)
;
(
,
,
)
;
=
;
(
,
,
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
RETURN
;
}
}
(
,
)
;
(
,
)
;
(
)
;
DO
{
=
(
,
,
)
;
IF
(
)
{
(
)
;
=
;
=
(
,
)
;
(
,
,
)
;
(
)
;
=
;
(
,
,
)
;
(
)
;
=
;
(
)
;
=
;
=
;
BREAK
;
}
}
WHILE
(
)
;
(
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
VOID
(
INT
)
{
STATIC
INT
=
;
(
,
)
;
(
,
)
;
=
;
}
VOID
(
INT
)
{
INT
;
(
)
;
=
;
(
,
,
)
;
(
,
,
,
,
)
;
(
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
FOR
(
=
;
;
)
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
,
INT
)
{
(
,
)
;
(
,
,
,
,
,
)
;
=
;
=
;
=
;
IF
(
)
(
)
;
ELSE
(
)
;
=
;
}
INT
(
INT
)
{
INT
,
,
=
;
UNSIGNED
;
CHAR
,
;
(
,
)
;
IF
(
)
{
=
;
IF
(
)
{
=
;
(
)
;
=
(
,
)
;
(
,
)
;
(
,
(
VOID
)
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
)
;
RETURN
;
}
}
(
,
)
;
(
,
)
;
(
)
;
DO
{
=
(
,
,
)
;
IF
(
)
{
IF
(
)
IF
(
(
,
,
)
)
IF
(
(
)
)
{
(
)
;
CONTINUE
;
}
ELSE
{
(
)
;
(
,
)
;
(
)
;
}
(
)
;
(
,
)
;
=
;
=
;
IF
(
)
(
,
,
,
,
)
;
(
)
;
IF
(
(
,
,
,
,
,
,
)
)
{
=
;
(
,
)
;
(
)
;
=
(
,
)
;
(
,
(
VOID
)
,
,
)
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
=
;
}
ELSE
{
(
,
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
CONTINUE
;
}
=
;
BREAK
;
}
}
WHILE
(
)
;
(
)
;
(
,
)
;
(
,
)
;
RETURN
;
}
INT
(
VOID
)
{
UNSIGNED
,
,
,
,
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
)
;
=
=
;
=
;
=
;
=
=
;
(
)
;
(
,
,
)
;
=
;
(
)
;
(
,
)
;
(
)
;
(
)
;
DO
{
=
(
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
(
)
;
}
WHILE
(
(
)
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
)
;
=
;
=
;
(
)
;
(
,
,
)
;
=
;
(
)
;
(
,
)
;
(
)
;
(
)
;
DO
{
=
(
)
;
IF
(
)
RETURN
;
IF
(
(
)
)
(
)
;
}
WHILE
(
(
)
)
;
(
,
,
)
;
(
)
;
WHILE
(
(
)
)
;
IF
(
(
)
(
)
)
(
,
,
,
,
)
;
ELSE
RETURN
;
RETURN
;
}
VOID
(
VOID
)
{
ENUM
{
,
,
,
,
,
}
;
INT
,
;
(
,
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
DO
{
=
(
,
,
)
;
SWITCH
(
)
{
CASE
;
=
=
;
(
)
;
(
)
;
=
;
(
)
;
BREAK
;
CASE
;
IF
(
)
IF
(
(
)
)
=
;
(
)
;
=
;
(
)
;
BREAK
;
CASE
;
(
)
;
(
)
;
BREAK
;
CASE
;
(
)
;
(
)
;
BREAK
;
CASE
CASE
(
)
;
(
)
;
(
)
;
BREAK
;
}
}
WHILE
(
)
;
(
)
;
(
,
)
;
(
,
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
(
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
,
)
;
=
;
=
;
=
;
(
,
)
;
(
)
;
(
,
)
;
=
;
=
;
(
)
;
=
;
(
)
;
=
;
=
;
(
)
;
=
;
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
;
INT
=
,
;
=
;
(
)
;
DO
{
(
)
;
SWITCH
(
)
{
CASE
CASE
IF
(
)
{
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
WHILE
(
)
;
(
)
;
}
BREAK
;
CASE
CASE
IF
(
)
{
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
WHILE
(
)
;
(
)
;
}
BREAK
;
}
IF
(
(
)
)
IF
(
(
)
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
}
WHILE
(
)
;
IF
(
)
{
=
;
(
)
;
}
ELSE
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
,
,
;
(
)
;
(
)
;
(
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
,
,
)
;
=
;
=
;
(
,
)
;
IF
(
)
=
=
=
;
=
=
;
IF
(
)
{
=
=
;
}
=
;
(
,
)
;
=
;
=
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
=
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
IF
(
)
FOR
(
=
;
;
)
IF
(
)
{
=
;
BREAK
;
}
(
)
;
(
)
;
}
ENUM
{
,
,
,
}
;
CHAR
=
{
,
,
,
}
,
=
{
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
(
)
;
DO
{
=
(
,
,
)
;
SWITCH
(
)
{
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
)
;
}
}
WHILE
(
)
;
(
)
;
}
VOID
(
VOID
)
{
=
{
,
,
,
}
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
=
{
,
,
,
}
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
=
{
,
,
,
}
;
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
=
{
,
,
,
}
;
(
,
,
,
,
)
;
}
ENUM
{
,
,
,
}
;
INT
=
{
,
,
,
}
;
VOID
(
INT
,
,
VOID
(
)
(
INT
)
,
VOID
(
)
(
INT
)
,
INT
)
{
INT
,
,
,
,
,
,
;
;
(
)
;
=
;
(
)
;
=
;
=
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
BREAK
;
}
DO
{
IF
(
)
{
=
;
(
,
,
,
,
)
;
(
)
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
)
;
(
)
;
=
;
(
,
)
;
(
)
;
(
)
;
=
;
}
(
)
;
IF
(
)
IF
(
(
)
(
)
(
)
)
{
(
)
;
=
=
;
}
IF
(
(
)
(
(
)
)
)
{
=
=
=
;
(
,
)
;
DO
{
INT
,
=
;
IF
(
)
(
)
;
IF
(
)
{
SWITCH
(
)
{
CASE
(
,
,
,
,
)
;
BREAK
;
CASE
=
;
(
)
;
(
)
;
}
;
=
;
(
)
;
}
SWITCH
(
)
{
CASE
(
)
;
=
;
SWITCH
(
)
{
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
;
BREAK
;
}
IF
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
BREAK
;
}
=
;
=
;
(
)
;
}
BREAK
;
CASE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
BREAK
;
}
=
;
=
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
=
;
=
;
(
)
;
(
)
;
}
BREAK
;
CASE
IF
(
)
{
=
;
=
;
(
)
;
(
)
;
}
BREAK
;
}
IF
(
(
)
)
{
=
;
CONTINUE
;
}
}
WHILE
(
)
;
(
,
)
;
=
;
(
)
;
CONTINUE
;
}
IF
(
(
)
)
=
;
SWITCH
(
)
{
CASE
DO
{
;
IF
(
)
=
;
}
WHILE
(
)
;
=
;
(
)
;
WHILE
(
(
)
,
)
;
(
)
;
BREAK
;
CASE
DO
{
;
IF
(
)
=
;
}
WHILE
(
)
;
=
;
(
)
;
WHILE
(
(
)
,
)
;
(
)
;
BREAK
;
CASE
CASE
=
;
}
}
WHILE
(
)
;
(
)
;
(
)
;
(
,
,
,
,
)
;
}
VOID
(
INT
)
{
STATIC
INT
=
;
INT
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
}
IF
(
)
{
=
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
IF
(
)
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
}
}
=
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
=
;
=
;
=
;
(
)
;
=
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
=
;
=
;
(
,
,
)
;
(
)
;
(
,
,
)
;
(
,
)
;
=
;
=
;
=
;
(
)
;
=
;
(
,
,
)
;
(
,
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
;
(
,
,
)
;
(
,
,
)
;
(
,
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
;
(
,
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
(
,
,
,
,
)
;
(
)
;
(
)
;
(
,
)
;
=
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
=
;
(
)
;
(
,
,
,
,
)
;
(
)
;
IF
(
)
FOR
(
=
;
;
)
IF
(
)
{
=
;
BREAK
;
}
(
)
;
(
)
;
}
VOID
(
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
(
)
;
BREAK
;
}
}
VOID
(
INT
)
{
INT
,
;
=
;
IF
(
)
=
;
(
,
)
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
=
;
=
;
FOR
(
=
;
;
)
(
)
;
}
VOID
(
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
{
=
;
(
)
;
BREAK
;
}
}
VOID
(
INT
)
{
INT
,
;
=
;
IF
(
)
=
;
(
,
)
;
IF
(
)
{
(
,
)
;
=
;
}
ELSE
=
;
=
;
FOR
(
=
;
;
)
(
)
;
}
VOID
(
INT
)
{
=
;
(
(
)
)
;
}
VOID
(
INT
)
{
INT
,
;
=
;
IF
(
)
=
;
(
,
)
;
=
;
FOR
(
=
;
;
)
(
)
;
}
VOID
(
INT
)
{
=
;
(
(
)
)
;
}
VOID
(
INT
)
{
INT
,
;
=
;
IF
(
)
=
;
(
,
)
;
=
;
FOR
(
=
;
;
)
(
)
;
}
VOID
(
VOID
)
{
INT
=
,
,
;
;
=
=
;
=
;
=
;
=
=
;
(
)
;
DO
{
(
)
;
(
)
;
SWITCH
(
)
{
CASE
CASE
;
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
(
)
;
BREAK
;
CASE
CASE
;
IF
(
)
=
;
(
)
;
(
)
;
(
)
;
(
)
;
BREAK
;
}
IF
(
(
)
)
IF
(
(
)
)
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
{
=
;
(
)
;
(
)
;
RETURN
;
}
}
WHILE
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
}
(
)
;
(
)
;
}
VOID
(
INT
)
{
(
)
;
(
)
;
(
,
,
,
,
)
;
(
)
;
=
;
=
;
=
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
IF
(
(
,
,
)
)
IF
(
(
)
)
IF
(
(
(
)
(
(
)
)
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
FOR
(
=
;
;
)
(
,
)
;
(
)
;
}
(
)
;
}
VOID
(
VOID
)
{
LONG
,
,
;
INT
,
,
=
{
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
}
,
=
{
,
,
,
,
,
,
,
,
,
}
;
=
(
)
;
FOR
(
=
;
;
)
IF
(
)
(
,
,
,
,
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
IF
(
)
(
,
,
,
,
)
;
}
IF
(
)
{
=
;
FOR
(
=
;
;
)
IF
(
)
(
,
,
,
,
)
;
}
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
IF
(
)
(
,
,
,
,
)
;
}
VOID
(
VOID
)
{
(
,
,
,
,
)
;
(
,
,
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
(
)
;
}
VOID
(
INT
,
INT
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
(
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
}
VOID
(
INT
,
INT
,
INT
,
INT
,
INT
,
INT
)
{
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
STRUCT
;
CHAR
;
INT
,
;
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
IF
(
)
(
)
;
ELSE
=
;
(
,
)
;
IF
(
(
,
,
)
)
DO
{
=
;
IF
(
)
{
INT
;
CHAR
;
=
;
=
(
,
)
;
(
,
,
)
;
(
)
;
(
,
)
;
}
}
WHILE
(
(
)
)
;
=
=
;
(
)
;
}
VOID
(
VOID
)
{
(
,
)
;
(
,
)
;
=
;
}
INT
(
,
,
VOID
(
)
(
INT
)
)
{
CHAR
;
STATIC
INT
=
,
=
;
INT
,
,
,
,
,
,
,
;
;
=
;
=
;
=
;
=
;
(
,
,
)
;
(
,
)
;
IF
(
)
{
=
;
=
;
(
(
)
)
;
}
IF
(
)
(
)
;
(
)
;
=
;
=
;
=
;
=
;
(
)
;
DO
{
IF
(
)
{
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
(
,
,
)
;
IF
(
)
(
)
;
(
)
;
}
(
)
;
=
;
IF
(
)
{
INT
=
;
IF
(
(
)
)
IF
(
(
)
)
(
)
;
IF
(
)
;
FOR
(
=
;
;
)
IF
(
(
)
(
)
)
{
(
,
,
,
,
)
;
=
;
(
,
,
,
,
,
,
)
;
=
;
(
)
;
BREAK
;
}
IF
(
)
{
FOR
(
=
;
;
)
IF
(
(
)
(
)
)
{
(
,
,
,
,
)
;
=
;
(
,
,
,
,
,
,
)
;
(
)
;
BREAK
;
}
}
}
(
)
;
SWITCH
(
)
{
CASE
(
,
,
,
,
)
;
IF
(
(
)
)
{
;
(
,
)
;
}
DO
{
IF
(
)
=
;
ELSE
;
}
WHILE
(
(
)
)
;
(
,
,
,
,
,
,
)
;
(
)
;
BREAK
;
CASE
(
,
,
,
,
)
;
IF
(
(
)
)
{
;
(
,
)
;
}
DO
{
IF
(
)
=
;
ELSE
;
}
WHILE
(
(
)
)
;
(
,
,
,
,
,
,
)
;
(
)
;
BREAK
;
}
IF
(
)
=
;
IF
(
)
=
;
}
WHILE
(
)
;
(
)
;
IF
(
)
{
(
,
,
,
,
)
;
=
;
=
;
(
(
)
)
;
=
;
}
ELSE
=
;
IF
(
)
(
)
;
(
)
;
=
;
=
;
SWITCH
(
)
{
CASE
IF
(
(
)
)
{
(
)
;
(
)
;
(
)
(
)
;
}
RETURN
;
CASE
(
)
;
RETURN
;
}
RETURN
;
}
VOID
(
,
,
INT
,
INT
,
INT
)
{
(
,
,
,
,
)
;
(
,
)
;
=
;
=
;
(
(
)
)
;
(
)
;
}
VOID
(
INT
,
INT
)
{
(
,
,
)
;
(
)
;
(
)
;
=
;
WHILE
(
)
;
}
VOID
(
,
,
INT
,
INT
,
INT
,
INT
,
VOID
(
)
(
INT
)
)
{
(
,
,
,
,
)
;
=
;
(
,
,
)
;
(
,
)
;
=
;
=
;
(
(
)
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
}
VOID
(
INT
)
{
;
=
;
DO
{
(
)
;
}
WHILE
(
)
;
}
VOID
(
,
)
{
INT
,
=
;
=
=
;
=
=
;
=
;
=
;
FOR
(
=
;
;
)
{
(
,
)
;
=
;
IF
(
(
)
)
(
(
)
)
;
ELSE
{
(
,
)
;
(
(
)
)
;
(
,
)
;
}
(
)
;
}
}
VOID
(
,
INT
)
{
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
}
VOID
(
VOID
)
{
;
WHILE
(
(
)
,
)
;
}
VOID
(
)
{
INT
=
;
(
,
)
;
IF
(
)
{
INT
,
;
(
)
;
=
;
=
;
IF
(
)
{
=
;
=
=
;
(
)
;
=
;
}
ELSE
IF
(
)
{
=
;
=
=
;
(
)
;
=
;
}
IF
(
)
{
=
;
=
=
;
(
)
;
=
;
}
ELSE
IF
(
)
{
=
;
=
=
;
(
)
;
=
;
}
IF
(
(
)
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
;
=
;
}
}
IF
(
)
{
INT
,
,
;
(
,
,
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
=
(
)
;
IF
(
)
{
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
=
=
;
}
}
}
INT
(
CHAR
)
{
INT
=
,
,
,
,
=
,
,
=
{
,
}
;
(
)
;
(
)
;
=
;
=
;
=
;
DO
{
IF
(
)
{
SWITCH
(
)
{
CASE
(
,
,
,
,
)
;
BREAK
;
CASE
=
;
=
;
(
)
;
}
(
)
;
;
=
;
}
IF
(
(
)
)
(
)
;
}
WHILE
(
)
;
}
WHILE
(
)
;
IF
(
)
{
=
;
(
)
;
}
WHILE
(
)
;
IF
(
)
{
=
;
(
)
;
}
WHILE
(
)
;
(
)
;
(
)
;
RETURN
;
}
INT
(
INT
,
INT
,
INT
)
{
INT
=
,
=
{
,
}
;
(
)
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
DO
{
IF
(
(
)
)
(
)
;
}
WHILE
(
)
;
}
WHILE
(
)
;
IF
(
)
{
=
;
(
)
;
}
WHILE
(
)
;
IF
(
)
{
=
;
(
)
;
}
WHILE
(
)
;
(
)
;
(
)
;
RETURN
;
}
VOID
(
CHAR
)
{
INT
=
,
=
,
=
,
,
,
,
;
;
(
)
;
=
;
=
;
=
;
FOR
(
=
;
(
)
;
)
IF
(
)
{
IF
(
)
=
;
=
;
;
}
ELSE
;
IF
(
)
=
;
=
(
)
;
=
=
;
(
,
,
,
,
)
;
(
,
,
,
,
,
)
;
(
,
)
;
(
)
;
(
)
;
}
STATIC
INT
;
VOID
(
INT
)
{
;
IF
(
)
(
(
)
)
;
=
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
IF
(
)
=
;
ELSE
{
(
(
(
)
)
,
)
;
(
(
)
)
;
}
}
VOID
(
VOID
)
{
IF
(
)
(
(
)
)
;
}
(
)
{
;
;
FOR
(
=
,
=
;
;
,
)
IF
(
)
RETURN
(
)
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
IF
(
)
{
SWITCH
(
)
{
CASE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
}
;
(
)
;
(
)
;
=
;
}
}
VOID
(
)
{
INT
,
;
=
;
=
;
(
,
,
)
;
}
VOID
(
INT
)
{
(
,
,
,
,
)
;
(
,
,
,
)
;
(
,
,
,
,
)
;
(
,
,
,
)
;
}
VOID
(
VOID
)
{
(
)
;
}
VOID
(
VOID
)
{
STRUCT
;
IF
(
(
,
,
)
)
{
(
,
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
=
=
=
=
=
;
}
ELSE
(
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
=
=
=
=
=
=
=
=
=
=
;
}
ELSE
IF
(
(
,
,
)
)
{
(
,
)
;
=
=
=
=
;
}
ELSE
IF
(
(
,
,
)
)
{
(
,
)
;
}
ELSE
(
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
}
ELSE
(
)
;
IF
(
(
,
,
)
)
{
(
,
)
;
}
ELSE
(
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
(
,
)
;
}
__E__O__F__
;
;
INT
;
,
,
,
,
,
,
;
UNSIGNED
;
;
,
,
;
INT
;
;
;
;
UNSIGNED
,
,
;
;
;
UNSIGNED
;
UNSIGNED
;
UNSIGNED
;
;
,
,
,
;
INT
;
INT
=
{
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
}
;
INT
=
{
,
,
,
}
;
INT
;
;
,
;
CHAR
,
;
;
INT
,
;
;
VOID
(
,
)
;
VOID
(
VOID
)
;
VOID
(
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
VOID
(
VOID
)
;
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
IF
(
)
=
;
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
=
;
}
VOID
(
VOID
)
{
INT
;
=
(
)
;
IF
(
)
{
IF
(
)
=
;
IF
(
)
=
;
}
ELSE
{
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
IF
(
)
=
;
IF
(
)
=
;
}
}
}
VOID
(
VOID
)
{
IF
(
)
{
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
ELSE
{
IF
(
)
;
IF
(
)
;
IF
(
)
;
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
;
(
)
;
=
;
=
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
(
,
,
)
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
IF
(
)
(
)
;
ELSE
IF
(
)
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
}
ELSE
{
IF
(
)
;
ELSE
IF
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
}
}
VOID
(
VOID
)
{
INT
,
,
;
;
IF
(
)
{
WHILE
(
)
;
=
;
;
=
;
}
ELSE
IF
(
)
{
WHILE
(
)
;
=
;
;
=
;
}
ELSE
(
)
;
=
;
=
;
(
,
,
(
)
)
;
(
,
,
(
)
)
;
IF
(
)
{
=
;
FOR
(
=
;
;
)
{
=
;
;
}
=
;
=
;
IF
(
)
=
;
(
INT
)
;
(
INT
)
;
RETURN
;
}
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
{
(
INT
)
;
(
INT
)
;
=
;
FOR
(
=
;
;
)
{
;
IF
(
)
;
}
=
;
=
;
=
;
IF
(
)
(
)
;
(
INT
)
;
(
INT
)
;
}
}
VOID
(
,
)
{
(
)
;
(
(
(
)
)
,
(
(
)
)
,
,
)
;
}
VOID
(
VOID
)
{
INT
;
;
UNSIGNED
;
IF
(
)
RETURN
;
=
;
IF
(
)
{
=
;
IF
(
)
{
(
)
;
(
)
;
}
ELSE
{
(
)
;
(
)
;
}
(
)
;
;
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
=
;
=
;
=
;
=
;
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
IF
(
(
)
)
IF
(
(
)
)
{
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
}
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
IF
(
)
{
=
;
(
,
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
IF
(
)
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
(
,
,
,
)
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
,
)
;
(
)
;
RETURN
;
}
IF
(
(
)
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
(
)
;
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
=
;
=
;
IF
(
)
(
)
;
(
)
;
RETURN
;
}
IF
(
)
{
(
)
;
=
;
(
,
)
;
(
)
;
IF
(
)
(
)
;
=
;
RETURN
;
}
}
INT
;
VOID
(
VOID
)
{
INT
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
=
;
=
;
(
)
;
=
;
}
VOID
(
VOID
)
{
IF
(
)
(
)
;
=
;
=
;
(
,
,
(
)
)
;
IF
(
)
=
;
=
;
=
;
=
;
;
}
VOID
(
)
{
;
IF
(
)
(
)
;
=
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
=
;
=
;
;
}
VOID
(
VOID
)
{
INT
;
(
)
;
FOR
(
=
;
;
)
IF
(
)
{
(
(
(
)
)
,
)
;
(
(
(
)
)
,
)
;
}
}
VOID
(
VOID
)
{
;
(
)
;
=
;
(
)
;
(
)
;
(
)
;
IF
(
)
=
;
ELSE
{
(
(
(
)
)
,
)
;
(
(
)
)
;
}
}
;
;
INT
,
;
;
EXTERN
;
VOID
(
VOID
)
{
,
;
INT
,
,
;
FOR
(
=
;
;
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
}
FOR
(
=
;
;
)
{
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
}
}
VOID
(
VOID
)
{
=
=
;
}
VOID
(
VOID
)
{
=
;
}
VOID
(
INT
)
{
;
}
VOID
(
VOID
)
{
INT
,
;
IF
(
)
{
=
;
IF
(
)
=
;
;
IF
(
)
=
;
}
ELSE
=
;
IF
(
)
{
=
;
IF
(
)
=
;
;
IF
(
)
=
;
}
ELSE
=
;
IF
(
)
{
(
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
=
;
}
ELSE
IF
(
)
{
(
)
;
(
)
;
=
;
}
}
VOID
(
VOID
)
{
IF
(
)
{
=
;
(
)
;
(
)
;
}
}
VOID
(
)
{
VOID
(
)
(
)
;
IF
(
)
RETURN
;
IF
(
(
(
)
)
)
=
;
IF
(
)
{
=
;
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
RETURN
;
}
;
WHILE
(
)
{
=
;
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
=
;
IF
(
)
{
(
)
;
RETURN
;
}
IF
(
)
{
=
;
GOTO
;
}
;
}
=
;
IF
(
)
{
(
)
;
IF
(
)
{
(
)
;
RETURN
;
}
}
IF
(
)
RETURN
;
IF
(
(
)
)
RETURN
;
=
;
}
LONG
;
VOID
(
VOID
)
{
INT
;
INT
;
=
=
=
;
=
;
=
;
=
;
=
;
=
;
(
,
,
(
)
)
;
(
)
;
IF
(
)
(
)
;
IF
(
)
(
)
;
DO
{
IF
(
)
{
=
(
,
)
;
;
IF
(
)
;
}
(
)
;
=
;
(
)
;
(
)
;
FOR
(
=
;
;
=
)
(
)
;
(
)
;
(
)
;
;
IF
(
)
{
=
;
(
,
,
(
(
)
)
)
;
=
;
}
;
(
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
IF
(
)
{
(
)
;
=
;
}
IF
(
)
(
)
;
IF
(
)
{
IF
(
(
)
)
{
(
)
;
=
;
}
}
IF
(
)
{
;
IF
(
)
;
}
}
WHILE
(
)
;
IF
(
)
(
)
;
}
__E__O__F__
;
LONG
;
INT
,
;
;
;
UNSIGNED
(
INT
,
)
;
INT
;
VOID
(
VOID
)
{
(
)
;
}
VOID
(
INT
)
{
INT
,
,
;
;
=
;
;
=
;
=
;
FOR
(
=
;
;
)
{
IF
(
)
(
(
)
)
;
IF
(
)
;
}
(
,
,
(
)
)
;
(
)
;
=
;
(
(
)
,
)
;
FOR
(
=
;
;
)
{
(
,
(
)
)
;
IF
(
)
;
}
(
(
)
)
;
(
)
;
FOR
(
=
;
;
)
{
(
(
)
,
)
;
=
(
UNSIGNED
)
;
;
;
IF
(
)
{
=
;
=
;
=
;
=
;
;
}
}
=
;
=
;
FOR
(
=
;
;
)
=
(
LONG
)
;
=
;
}
UNSIGNED
(
INT
,
)
{
;
INT
;
LONG
,
;
UNSIGNED
,
,
;
INT
,
,
;
=
(
(
LONG
)
)
;
=
;
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
=
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
;
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
FOR
(
;
;
)
{
IF
(
)
BREAK
;
IF
(
)
CONTINUE
;
=
;
=
;
=
;
(
(
UNSIGNED
)
)
=
;
}
}
=
;
=
(
)
;
(
,
)
;
(
(
)
(
)
,
(
)
,
)
;
RETURN
;
}
EXTERN
INT
,
;
EXTERN
UNSIGNED
;
EXTERN
LONG
;
EXTERN
UNSIGNED
;
,
,
;
VOID
(
VOID
)
{
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
RETURN
;
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
}
STATIC
LONG
;
VOID
(
INT
,
INT
,
UNSIGNED
)
{
;
;
UNSIGNED
,
,
,
;
INT
;
UNSIGNED
;
,
;
=
(
)
;
=
;
IF
(
)
RETURN
;
=
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
IF
(
)
{
;
IF
(
)
{
IF
(
)
CONTINUE
;
(
)
;
}
CONTINUE
;
}
IF
(
)
{
;
=
;
IF
(
)
CONTINUE
;
}
ELSE
{
IF
(
)
=
;
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
(
)
;
ELSE
{
WHILE
(
)
;
(
)
;
}
}
ELSE
{
IF
(
)
CONTINUE
;
WHILE
(
)
{
;
;
}
(
)
;
BREAK
;
}
}
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
WHILE
(
(
)
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
IF
(
)
{
IF
(
)
{
(
)
;
}
CONTINUE
;
}
IF
(
)
{
IF
(
)
CONTINUE
;
;
=
;
}
ELSE
{
IF
(
)
=
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
IF
(
)
{
(
)
;
}
ELSE
{
WHILE
(
)
;
(
)
;
BREAK
;
}
}
ELSE
{
IF
(
)
{
WHILE
(
)
{
;
;
}
(
)
;
}
ELSE
CONTINUE
;
}
}
}
VOID
(
INT
,
INT
,
UNSIGNED
)
{
;
;
UNSIGNED
,
,
,
;
INT
;
UNSIGNED
;
,
;
=
(
)
;
=
;
=
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
(
(
(
UNSIGNED
)
)
)
=
(
UNSIGNED
)
;
=
;
=
;
=
;
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
;
(
)
;
}
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
;
WHILE
(
)
{
(
UNSIGNED
)
=
;
IF
(
(
=
)
)
CONTINUE
;
(
)
;
;
}
}
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
UNSIGNED
=
{
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
}
}
;
INT
,
;
UNSIGNED
;
LONG
;
UNSIGNED
;
__E__O__F__
=
{
,
,
,
,
,
,
,
,
}
;
=
{
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
,
{
,
,
,
,
,
,
,
,
}
}
;
VOID
(
UNSIGNED
,
UNSIGNED
,
)
;
VOID
(
,
)
;
(
)
;
VOID
(
,
LONG
)
;
VOID
(
)
;
VOID
(
,
UNSIGNED
)
;
(
)
;
VOID
(
)
;
(
)
;
VOID
(
UNSIGNED
,
UNSIGNED
,
)
{
(
)
;
=
;
IF
(
)
=
(
)
;
ELSE
=
;
=
;
=
;
=
(
(
LONG
)
)
;
=
(
(
LONG
)
)
;
=
;
=
;
=
(
)
;
}
VOID
(
,
)
{
=
;
=
;
}
(
,
)
{
=
(
UNSIGNED
)
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
(
(
)
)
)
RETURN
;
}
}
(
,
)
{
=
(
UNSIGNED
)
;
IF
(
)
{
IF
(
)
RETURN
;
IF
(
)
=
;
ELSE
IF
(
(
(
)
)
)
RETURN
;
}
}
(
)
{
INT
;
UNSIGNED
;
=
;
IF
(
)
{
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
}
}
ELSE
SWITCH
(
)
{
CASE
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
;
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
;
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
;
;
BREAK
;
CASE
IF
(
)
{
(
,
)
;
}
ELSE
{
(
,
)
;
}
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
(
,
)
;
;
;
BREAK
;
CASE
RETURN
;
DEFAULT
(
)
;
}
IF
(
)
{
(
)
;
=
;
RETURN
;
}
=
(
)
;
=
;
RETURN
;
}
VOID
(
)
{
INT
,
,
;
UNSIGNED
,
;
;
,
;
IF
(
)
{
=
;
;
}
ELSE
=
;
=
;
=
;
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
IF
(
)
{
=
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
)
;
=
(
)
;
IF
(
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
IF
(
(
)
)
{
=
;
=
;
=
;
=
;
=
;
=
;
}
=
;
FOR
(
=
;
;
)
{
IF
(
)
CONTINUE
;
=
;
IF
(
(
)
)
RETURN
;
}
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
=
;
}
VOID
(
)
{
INT
,
,
;
;
,
,
;
=
;
=
;
=
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
}
IF
(
)
=
;
IF
(
)
=
;
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
}
}
ELSE
{
FOR
(
=
;
;
)
{
IF
(
)
{
=
;
IF
(
(
)
)
RETURN
;
}
}
}
IF
(
)
{
=
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
}
}
=
;
}
VOID
(
)
{
INT
,
,
;
;
,
,
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
ELSE
=
;
IF
(
(
)
(
)
)
{
=
;
=
;
=
;
}
=
;
IF
(
(
)
)
RETURN
;
=
;
IF
(
(
)
)
RETURN
;
IF
(
(
)
)
{
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
RETURN
;
}
}
ELSE
{
FOR
(
=
;
;
)
{
=
;
IF
(
(
)
)
RETURN
;
}
}
=
;
}
VOID
(
,
LONG
)
{
LONG
,
;
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
RETURN
;
DEFAULT
(
)
;
}
IF
(
)
{
=
;
IF
(
)
GOTO
;
=
;
IF
(
)
GOTO
;
IF
(
)
(
,
)
;
SWITCH
(
)
{
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
;
BREAK
;
CASE
;
;
BREAK
;
CASE
RETURN
;
}
RETURN
;
}
;
}
VOID
(
,
INT
,
INT
)
{
INT
,
,
,
,
,
;
IF
(
)
{
(
,
,
)
;
RETURN
;
}
=
;
=
;
=
;
=
;
FOR
(
=
;
;
)
FOR
(
=
;
;
)
IF
(
)
{
(
,
,
)
;
RETURN
;
}
}
VOID
(
)
{
INT
,
;
=
=
;
=
=
;
SWITCH
(
)
{
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
IF
(
)
(
,
,
)
;
ELSE
(
,
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
)
;
=
;
=
;
(
,
)
;
BREAK
;
CASE
(
)
;
=
;
=
;
(
,
)
;
BREAK
;
CASE
(
)
;
=
;
=
;
(
,
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
BREAK
;
CASE
(
)
;
=
;
=
;
(
,
)
;
(
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
CASE
(
)
;
(
,
)
;
(
,
,
)
;
BREAK
;
}
;
;
=
;
;
}
VOID
(
,
UNSIGNED
)
{
=
;
IF
(
(
)
)
;
;
IF
(
)
(
)
;
ELSE
{
IF
(
(
)
)
(
)
;
SWITCH
(
)
{
CASE
IF
(
)
(
,
)
;
ELSE
(
,
)
;
BREAK
;
CASE
IF
(
)
(
,
)
;
ELSE
(
,
)
;
BREAK
;
CASE
IF
(
)
(
,
)
;
ELSE
(
,
)
;
BREAK
;
CASE
IF
(
)
(
,
)
;
ELSE
(
,
)
;
BREAK
;
}
}
}
(
)
{
INT
,
,
,
,
,
,
,
;
INT
,
;
INT
,
,
,
;
INT
;
INT
,
;
LONG
;
INT
,
,
;
UNSIGNED
,
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
;
=
(
)
;
IF
(
)
{
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
)
;
=
;
=
(
(
LONG
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
(
(
(
LONG
)
)
)
;
=
;
;
DO
{
=
;
;
=
(
UNSIGNED
)
;
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
;
=
;
IF
(
)
RETURN
;
}
WHILE
(
)
;
}
=
(
)
;
IF
(
)
{
IF
(
)
{
=
(
)
;
=
;
}
ELSE
{
=
;
=
;
}
=
(
)
;
=
;
=
(
(
LONG
)
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
ELSE
=
;
=
(
(
(
LONG
)
)
)
;
=
;
;
DO
{
=
;
;
=
(
UNSIGNED
)
;
;
IF
(
)
CONTINUE
;
IF
(
)
RETURN
;
;
=
;
IF
(
)
RETURN
;
}
WHILE
(
)
;
}
RETURN
;
}
(
)
{
LONG
,
;
IF
(
)
RETURN
;
=
;
=
;
IF
(
)
RETURN
;
SWITCH
(
)
{
CASE
IF
(
)
RETURN
;
BREAK
;
CASE
IF
(
)
RETURN
;
BREAK
;
CASE
IF
(
)
RETURN
;
BREAK
;
CASE
IF
(
)
RETURN
;
BREAK
;
}
RETURN
(
)
;
}
VOID
(
)
{
SWITCH
(
)
{
CASE
(
,
)
;
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
(
,
)
;
;
BREAK
;
CASE
(
)
;
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
(
,
)
;
;
BREAK
;
CASE
(
)
;
(
,
)
;
;
BREAK
;
CASE
(
)
;
(
,
)
;
;
BREAK
;
CASE
(
)
;
(
,
)
;
;
BREAK
;
CASE
(
)
;
(
,
)
;
;
BREAK
;
CASE
(
)
;
(
,
)
;
;
BREAK
;
CASE
(
)
;
(
,
)
;
;
BREAK
;
CASE
(
,
)
;
;
BREAK
;
CASE
(
)
;
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
(
,
)
;
=
;
BREAK
;
CASE
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
(
,
)
;
=
;
BREAK
;
CASE
(
)
;
(
,
)
;
=
;
BREAK
;
}
IF
(
)
=
;
;
}
(
)
{
IF
(
)
(
)
;
IF
(
)
{
;
IF
(
)
RETURN
;
=
;
}
ELSE
{
IF
(
)
RETURN
;
IF
(
)
{
IF
(
(
)
)
RETURN
;
;
}
ELSE
{
IF
(
(
)
)
RETURN
;
}
SWITCH
(
)
{
CASE
=
(
)
;
BREAK
;
CASE
=
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
=
(
)
;
BREAK
;
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
CASE
=
;
BREAK
;
}
RETURN
;
}
(
)
;
RETURN
;
}
__E__O__F__
(
(
)
)
(
)
INT
,
;
UNSIGNED
,
;
CHAR
;
UNSIGNED
;
INT
,
,
,
;
;
VOID
(
VOID
)
{
WHILE
(
)
;
}
INT
(
VOID
)
{
CHAR
;
CHAR
,
;
=
;
WHILE
(
)
=
;
=
;
DO
{
=
;
=
;
}
WHILE
(
)
;
=
;
RETURN
(
)
;
}
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
)
;
}
VOID
(
VOID
)
{
(
)
;
(
)
;
=
;
WHILE
(
)
;
(
,
,
)
;
}
VOID
(
VOID
)
{
INT
,
,
,
;
INT
,
,
;
SWITCH
(
(
)
)
{
CASE
=
(
)
;
=
(
)
;
=
(
)
;
=
(
)
;
(
,
,
,
,
)
;
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
CASE
=
;
;
BREAK
;
CASE
=
(
)
;
IF
(
)
=
;
ELSE
IF
(
)
=
;
;
=
(
)
;
IF
(
)
;
ELSE
IF
(
)
;
;
BREAK
;
CASE
=
;
;
BREAK
;
CASE
=
(
)
;
=
(
)
;
=
;
=
(
)
;
WHILE
(
)
;
BREAK
;
CASE
(
)
;
BREAK
;
CASE
(
)
;
(
,
,
)
;
=
;
=
;
=
;
IF
(
)
=
;
ELSE
=
;
=
(
)
;
IF
(
)
=
;
=
(
)
;
IF
(
)
=
;
FOR
(
=
;
;
)
IF
(
)
=
;
ELSE
=
;
IF
(
)
=
;
BREAK
;
}
}
VOID
(
VOID
)
{
CHAR
;
IF
(
)
{
=
;
DO
{
IF
(
)
{
=
(
(
)
)
;
IF
(
)
{
=
;
RETURN
;
}
}
;
}
WHILE
(
)
;
}
=
;
;
}
VOID
(
VOID
)
{
CHAR
;
=
;
IF
(
)
{
(
)
;
RETURN
;
}
}
VOID
(
VOID
)
{
CHAR
;
INT
,
;
UNSIGNED
,
,
;
=
;
=
;
WHILE
(
)
{
=
;
IF
(
)
(
)
;
}
=
;
(
,
,
)
;
WHILE
(
)
{
(
)
;
IF
(
)
RETURN
;
}
=
;
(
)
;
=
;
WHILE
(
)
{
;
;
}
}
VOID
(
)
{
INT
,
;
CHAR
;
=
;
=
;
(
,
,
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
(
,
,
)
;
FOR
(
=
;
;
)
{
=
;
=
;
}
=
;
=
;
=
;
=
;
WHILE
(
)
;
IF
(
(
)
)
(
)
;
WHILE
(
)
;
DO
{
=
;
IF
(
)
(
)
;
ELSE
IF
(
)
{
=
(
)
;
;
}
ELSE
IF
(
)
(
)
;
ELSE
(
)
;
}
WHILE
(
)
;
;
IF
(
)
{
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
(
,
)
;
(
,
,
)
;
(
,
)
;
(
,
)
;
=
;
=
;
(
,
,
)
;
(
,
)
;
=
;
(
)
;
}
=
;
}
VOID
(
VOID
)
{
;
DO
{
;
IF
(
(
(
)
)
)
RETURN
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
CHAR
,
;
CHAR
;
=
;
=
;
=
=
;
DO
{
IF
(
)
{
=
(
)
;
IF
(
)
;
IF
(
)
{
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
RETURN
;
}
IF
(
)
{
(
)
;
(
)
;
}
IF
(
)
{
(
)
;
(
)
;
}
}
ELSE
;
}
WHILE
(
)
;
(
)
;
}
VOID
(
INT
)
VOID
(
CHAR
)
{
INT
=
{
,
,
,
,
,
,
,
,
,
}
;
INT
=
{
,
,
,
,
,
,
,
,
,
,
,
,
,
}
;
UNSIGNED
;
UNSIGNED
;
,
;
=
;
IF
(
)
=
;
ELSE
=
;
=
;
=
;
=
;
(
)
;
(
,
,
,
,
)
;
(
)
;
=
;
=
;
DO
{
IF
(
)
{
=
;
IF
(
)
(
)
;
ELSE
(
)
;
(
)
;
(
)
;
IF
(
)
{
(
,
,
,
)
;
=
;
}
}
=
;
WHILE
(
)
;
SWITCH
(
)
{
CASE
CASE
CASE
IF
(
)
{
(
)
;
(
)
;
;
=
;
}
BREAK
;
CASE
CASE
CASE
CASE
IF
(
)
{
=
;
;
}
BREAK
;
}
IF
(
(
)
)
(
)
;
}
WHILE
(
)
;
(
)
;
=
;
}
INT
=
;
INT
=
;
CHAR
=
,
=
;
VOID
(
VOID
)
{
INT
;
CHAR
;
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
=
(
CHAR
)
;
(
,
)
;
(
,
)
;
=
(
CHAR
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
}
VOID
(
VOID
)
{
INT
;
CHAR
;
;
(
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
=
;
(
)
;
=
(
CHAR
)
;
(
,
)
;
=
;
(
,
)
;
=
(
CHAR
)
;
(
,
)
;
(
)
;
(
)
;
(
)
;
(
)
;
(
,
)
;
(
)
;
IF
(
)
(
)
;
(
)
;
(
)
;
(
)
;
}
__E__O__F__
INT
;
;
;
EXTERN
CHAR
;
INT
=
;
;
UNSIGNED
;
,
;
(
,
)
{
RETURN
(
)
(
)
;
}
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
INT
;
VOID
(
INT
,
INT
,
INT
)
{
;
INT
;
INT
;
,
;
INT
,
,
,
,
;
,
;
=
;
=
;
=
(
)
;
=
(
)
;
=
;
=
(
(
,
)
)
;
=
(
(
,
)
)
;
=
=
;
=
;
DO
{
(
,
)
;
=
(
)
;
=
(
)
;
=
;
=
(
UNSIGNED
)
;
=
(
(
)
)
;
;
;
IF
(
)
(
)
;
=
(
)
;
}
WHILE
(
)
;
}
VOID
(
VOID
)
{
INT
,
;
,
;
=
;
FOR
(
=
;
;
)
{
=
(
)
(
)
;
;
=
(
)
;
=
;
IF
(
)
=
;
}
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
}
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
;
}
}
VOID
(
VOID
)
{
INT
,
;
INT
;
IF
(
)
(
)
;
=
;
IF
(
)
=
(
)
;
=
;
IF
(
)
=
(
)
;
=
;
FOR
(
=
;
;
)
{
=
;
IF
(
)
{
DO
{
=
;
}
WHILE
(
)
;
}
ELSE
IF
(
)
{
IF
(
)
=
;
FOR
(
;
;
)
(
,
,
)
;
}
}
=
;
FOR
(
;
;
)
(
,
,
)
;
}
__E__O__F__
